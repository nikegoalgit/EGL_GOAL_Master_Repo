package fm0e;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFK001;
import corpcom3.XPXCL01;
import corpcom3.XPXMG01;
import corpcom3.XPXX001;
import corpcom4.XSFKS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCLCD;
import corpx1.XCLDESC;
import corpx1.XCLTBL;
import corpx1.XMGTBL;
import corpx1.XTMTBL;
import corpx2.XMG-COLR-GRP-CD;
import corpx2.XMU-MAT-UOM-CD;
import corpx2.XTM-MAT-THCK-DESC;
import corpz3.ZZZCHGCT;
import corpz3.ZZZSDT;
import fk.common.*;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VFYINV01;
import vv.common.VMATRL01;
import vv.common.VMATWH01;
import vv.common.VMCOLR01;
import vv.common.VVNDR001;
import vv.common.VVNINV01;
import vv.common.VWHINV01;
//*** PROGRAM=FM0E ****
// THIS APPLICATION IS PART OF THE FOOTWEAR MATERIALS SYSTEM.
// 
// THIS APPLICATION PROVIDES MAINTENANCE CAPABILITY FOR
// MATERIAL INVENTORIES.  USERS WILL BE ALLOWED TO INQUIRE,
// ADD, CHANGE, AND DELETE MATERIAL INVENTORIES THROUGH
// THE FOUR MAPS PROVIDED IN THIS APPLICATION.
// 
// INQUIRE MAP - MAP FM0EM110 IS PROVIDED FOR USERS TO INQUIRE
// UPON MATERIAL INVENTORY INFORMATION.  USERS WILL BE ALLOWED
// TO SELECT A MATERIAL AND THE INVENTORY INFORMATION WILL BE
// RETRIEVED FOR THAT MATERIAL FROM THE VENDOR, MATERIAL WHSE,
// AND THE FACTORIES.  MAP FM0EM120 IS PROVIDED FOR USERS TO
// INQUIRE UPON MATERIAL INVENTORY COMMENTS AND MAY BE
// ACCESSED BY PRESSING PF11 FROM MAP FM0EM110.
// 
// ADD MAP - MAP FM0EM210 IS PROVIDED FOR USERS TO ADD
// MATERIAL INVENTORY INFORMATION.  USERS WILL BE ALLOWED
// TO SELECT A MATERIAL AND ADD MATERIAL INVENTORY QUANTITIES
// TO THE VENDOR, MATERIAL WHSE, AND/OR THE FACTORIES.  MAP
// FM0EM220 IS PROVIDED FOR USERS TO ADD MATERIAL INVENTORY
// COMMENTS AND MAY BE ACCESSED BY PRESSING PF11 FROM MAP
// FM0EM210.
// 
// CHANGE MAP - MAP FM0EM310 IS PROVIDED FOR USERS TO CHANGE
// MATERIAL INVENTORY INFORMATION.  USERS WILL SPECIFY A
// MATERIAL FOR WHICH THEY WISH TO CHANGE INFORMATION AND A
// LIST OF INVENTORIES WILL APPEAR.  USERS MAY THEN SELECT A
// LINE AND CHANGE INVENTORY INFORMATION.  UPDATES WILL BE
// MADE TO THE APPROPRIATE MATERIAL DATABASE TABLE(S).
// MAP FM0EM320 IS PROVIDED FO RUSERS TO CHANGE MATERIAL
// INVENTORY COMMENTS AND MAY BE ACCESSED BY PRESSING PF11
// FROM MAP FM0EM310.
// 
// DELETE MAP - MAP FM0EM410 IS PROVIDED FOR USERS TO DELETE
// MATERIAL INVENTORY INFORMATION.  USERS WILL BE ALLOWED
// TO SELECT A MATERIAL AND THE INVENTORY INFORMATION WILL BE
// RETRIEVED FOR THAT MATERIAL FROM THE VENDOR, MATERIAL WHSE,
// AND THE FACTORIES.  USERS MAY THEN SELECT A LINE FOR DELETE,
// CONFIRM IT, AND HAVE THE DELETE(S) PERFORMED UPON THE
// APPROPRIATE TABLES.  MAP EM0EM420 IS PROVIDED FOR USERS TO
// INQUIRE UPON MATERIAL INVENTORY COMMENTS BEFORE DELETE.
// THIS MAP MAY BE ACCESSED BY PRESSING PF11 FROM MAP FM0EM410.
// 
// TRANSFER FROM ONE FM0E MAP TO ANOTHER FM0E MAP IS NOT
// POSSIBLE EXCEPT THROUGH FASTPATH.  USERS WILL BE ALLOWED
// TO EXIT THIS APPLICATION VIA PFKEYS OR FASTPATH, WITH THE
// 'OPTION' FIELD AVAILABLE FOR USE WITH ANY APPLICATION
// TRANSFER.
// 
// NOTE:  THIS APPLICATION DISPLAYS 2 MAPS FOR EACH FUNCTION.
// ONE MAP WILL SHOW QTY INFORMATION, THE OTHER WILL SHOW
// COMMENT INFORMATION.  THE QTY INFORMATION MAP WILL BE
// NUMBERED MX10, THE COMMENT MAP WILL BE MX20.  EXAMPLE:
// INQUIRY MAP IS M110, M120.
// THE PROCESSES USED FOR MX10 WILL HAVE A L(EFT) FOR THE LAST
// DIGIT OF THE PROCESS NAME.  THIS DENOTES MX10 AS THE LEFT
// SCREEN.  MX20 WILL HAVE A R(IGHT) FOR THE LAST DIGIT OF THE
// PROCESS NAME.  ALL OTHER NAMING STANDARDS WILL BE FOLLOWED.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/02/93  JALLE1  New application.
// FK-9994  09/22/93  JALLE1  CSP 4.1 conversion.
//          12/03/93  JALLE1  Fix abend code.
// Y2KFIX   11/24/97  ksumme  Y2K MODIFICATIONS MADE TO:
//                            all maps to show leading zero
// *********************
Program FM0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FKWREC FKWREC; // record
  FM0EW00 FM0EW00; // record
  FM0EW01 FM0EW01; // record
  FM0EW02 FM0EW02; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VFYINV01 VFYINV01; // record
  VMATRL01 VMATRL01; // record
  VMATWH01 VMATWH01; // record
  VMCOLR01 VMCOLR01; // record
  VVNDR001 VVNDR001; // record
  VVNINV01 VVNINV01; // record
  VWHINV01 VWHINV01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCLTBL; // table
  use XMGTBL; // table
  use XTMTBL; // table
  use FM0EM.FM0EM110,  // forms
      FM0EM.FM0EM120, 
      FM0EM.FM0EM210, 
      FM0EM.FM0EM220, 
      FM0EM.FM0EM310, 
      FM0EM.FM0EM320, 
      FM0EM.FM0EM410, 
      FM0EM.FM0EM420,
      FM0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Flow to the application initialization.*/
     /* ------------------------------------------------------------*/

    goto FM0E-0005; /* Application initialization*/


    FM0E-0005: FM0E-0005();
     /* ----------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ----------------------------------------------------------------*/

    goto FM0E-0010; /* Converse the main process*/
    FM0E-0010: FM0E-0010();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FM0E-0010; /* Converse the main process*/


  end // end main
end // end FM0E

// Special application init
Function FM0E-0005()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and display storage areas.*/
   /* ------------------------------------------------------------*/

  set FM0EM110 initial; /* M110 inquiry map input/output*/
  set FM0EM120 initial; /* M120 inquiry map input/output*/
  set FM0EM210 initial; /* M210 add map input/output*/
  set FM0EM220 initial; /* M220 add map input/output*/
  set FM0EM310 initial; /* M310 change map input/output*/
  set FM0EM320 initial; /* M320 change map input/output*/
  set FM0EM410 initial; /* M410 delete map input/output*/
  set FM0EM420 initial; /* M420 delete map input/output*/
  set FM0EW00 empty; /* Working storage*/
  set FM0EW01 empty; /* Display storage*/
  set SQLCA empty; /* SQL communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/


   /* ------------------------------------------------------------*/
   /* Initialize switches.*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-FMAT-MAP-SW = "N"; /* Format the map switch*/
  FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N"; /* Confirm delete switch*/
  FM0EW00.FM0EW-CONFIRM-ADD-SW = "N"; /* Confirm add switch*/
  FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display left map (FM0EMx10)*/

  FM0EW00.FM0EW-NBR-MAP-ROWS = 11; /* Nbr of rows on map*/

  if (FKWREC.FK-MAT-NBR[1] > " "      /* If mtl passed*/
   && FKWREC.XMG-COLR-GRP-CD[1] > " " /* and clr grp passed*/
   && FKWREC.XCLCD > " ")             /* and clr passed*/

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Request data*/
  else

    FM0EW00.FM0EW-REQUEST-DATA-SW = "N"; /* Don't request data*/
  end


   /* ------------------------------------------------------------*/
   /* If data was passed in the COMMAREA, use as initial key.*/
   /* ------------------------------------------------------------*/

  FM0EM110.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1]; /* Save mtl*/
  FM0EM210.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1]; /* Save mtl*/
  FM0EM310.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1]; /* Save mtl*/
  FM0EM410.FK-MAT-NBR = FKWREC.FK-MAT-NBR[1]; /* Save mtl*/

  FM0EM110.XMG-COLR-GRP-CD = FKWREC.XMG-COLR-GRP-CD[1]; /* Clr grp*/
  FM0EM210.XMG-COLR-GRP-CD = FKWREC.XMG-COLR-GRP-CD[1]; /* Clr grp*/
  FM0EM310.XMG-COLR-GRP-CD = FKWREC.XMG-COLR-GRP-CD[1]; /* Clr grp*/
  FM0EM410.XMG-COLR-GRP-CD = FKWREC.XMG-COLR-GRP-CD[1]; /* Clr grp*/

  FM0EM110.XCLCD = FKWREC.XCLCD[1]; /* Clr*/
  FM0EM210.XCLCD = FKWREC.XCLCD[1]; /* Clr*/
  FM0EM310.XCLCD = FKWREC.XCLCD[1]; /* Clr*/
  FM0EM410.XCLCD = FKWREC.XCLCD[1]; /* Clr*/

  if (FKWREC.FK-MAT-INV-MO > 0) /* Mtl inv passed*/

    FM0EW00.FM0EW-WORK-DT = FKWREC.FK-MAT-INV-MO; /* Move to work dt*/
    FM0EW01.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM110.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM210.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM310.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM410.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
  else

    XX0XS01(); /* Get current date and time*/
    FM0EW00.FM0EW-WORK-DT = XX0XW01.XX0XWCYM; /* Move to work dt*/
    FM0EW01.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM110.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM210.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM310.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
    FM0EM410.FM0EM-INV-MO = FM0EW00.FM0EW-WORK-YYMM; /* Save*/
  end


   /* ------------------------------------------------------------*/
   /* Determine which map to process.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.FKW-UPDATE-FUNCTION == "A") /* Add requested*/
    FM0EW00.FM0EW-MAP-SW = "2"; /* Map switch - ADD*/
  else
    if (FKWREC.FKW-UPDATE-FUNCTION == "C") /* CHG requested*/
      FM0EW00.FM0EW-MAP-SW = "3"; /* Map switch - CHG*/
    else
      if (FKWREC.FKW-UPDATE-FUNCTION == "D") /* DEL requested*/
        FM0EW00.FM0EW-MAP-SW = "4"; /* Map switch - DEL*/
      else
        FM0EW00.FM0EW-MAP-SW = "1"; /* Map switch - INQ*/
      end
    end
  end


  set FKWREC empty; /* Intitialize FKWREC*/

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";


end // end FM0E-0005

// Main process to display a map
Function FM0E-0010()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the second map.*/
   /* 2) Otherwise, if specified, display the third map.*/
   /* 3) Otherwise, if specified, display the fourth map.*/
   /* 4) Otherwise, display the first map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-MAP-SW == "2") /* Add function requested*/
    if (FM0EW00.FM0EW-SIDE-TO-DISP-SW == "R") /* M220 requested*/
      FM0E-2000R(); /* Process right map (M220)*/
    else
      FM0E-2000L(); /* Process left map (M210)*/
    end
  else

    if (FM0EW00.FM0EW-MAP-SW == "3") /* Change function requested*/
      if (FM0EW00.FM0EW-SIDE-TO-DISP-SW == "R") /* M320 requested*/
        FM0E-3000R(); /* Process right map (M320)*/
      else
        FM0E-3000L(); /* Process left map (M310)*/
      end
    else

      if (FM0EW00.FM0EW-MAP-SW == "4") /* Delete function requested*/
        if (FM0EW00.FM0EW-SIDE-TO-DISP-SW == "R") /* M420 requested*/
          FM0E-4000R(); /* Process right map (M420)*/
        else
          FM0E-4000L(); /* Process left map (M410)*/
        end
      else

        if (FM0EW00.FM0EW-SIDE-TO-DISP-SW == "R") /* M120 requested*/
          FM0E-1000R(); /* Process Right map (M120)*/
        else
          FM0E-1000L(); /* Process Left map (M110)*/
        end
      end
    end
  end


end // end FM0E-0010

// Process inquiry map (M110)
Function FM0E-1000L()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FM0E-1100L(); /* Obtain the data to display*/

  FM0E-1200L(); /* Format and display the map*/

  FM0E-1300L(); /* Check attention identifier*/

  FM0E-1400L(); /* Reset fields to normal intensity*/

  FM0E-1500L(); /* Verify the entered data*/

  FM0E-1600L(); /* Process valid input request*/


end // end FM0E-1000L

// Process inquiry map (M120)
Function FM0E-1000R()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM FM0E-1100R;                /* Obtain the data to display*/

  FM0E-1200R(); /* Format and display the map*/

  FM0E-1300R(); /* Check attention identifier*/

  FM0E-1400R(); /* Reset fields to normal intensity*/

  FM0E-1500R(); /* Verify the entered data*/

  FM0E-1600R(); /* Process valid input request*/


end // end FM0E-1000R

// Obtain data to display
Function FM0E-1100L()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/

  FM0EW00.XXXTSLEN = 1148; /* Temporary storage page length*/


   /* --------------------------------------------------------------*/
   /* Save key in working storage.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
  FM0EW00.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr group*/
  FM0EW00.XCLCD = FM0EM110.XCLCD; /* Color*/

  FM0EM110.FK-DEPT-MAT-DESC = " ";
  FM0EM110.XTM-MAT-THCK-DESC = " ";
  FM0EM110.XCLDESC = " ";

   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FM0EW00.XXXTSPAG = 1; /* Page number to display*/
  end


   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/

  FM0E-1110L(); /* Purge temp storage*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = 0; /* Init total qty*/
  FM0EW00.FM0EM-INV-TOTAL-UOM = " "; /* Init total uom*/

   /* --------------------------------------------------------------*/
   /* Select the material record from DCMPNT.VMATRL01.*/
   /* --------------------------------------------------------------*/

  FM0E-1120L(); /* Select DCMPNT.VMATRL01*/

  FM0EW00.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD;
  FM0EW00.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC;
  FM0EW00.FM0EM-INV-TOTAL-UOM = VMATRL01.XMU-MAT-UOM-CD;


   /* --------------------------------------------------------------*/
   /* Get the thickness desc from XTMTBL.*/
   /* --------------------------------------------------------------*/

  if (VMATRL01.XTM-MAT-THCK-CD in XTMTBL.XTM-MAT-THCK-CD /* If in table*/
   && XTMTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    FM0EW00.XTM-MAT-THCK-DESC = XTMTBL.XTM-MAT-THCK-DESC[sysVar.arrayIndex];
  else

    FM0EW00.XTM-MAT-THCK-DESC = "*********";
  end


   /* --------------------------------------------------------------*/
   /* Get the color desc from XCLTBL.*/
   /* --------------------------------------------------------------*/

  if (FM0EM110.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    FM0EW00.XCLDESC = XCLTBL.XCLDESC[sysVar.arrayIndex];
  else

    FM0EW00.XCLDESC = "************";
  end


   /* --------------------------------------------------------------*/
   /* Get the vendor inventory.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 0; /* Initialize index*/

  FM0E-1130L(); /* Get vendor inventory*/


   /* --------------------------------------------------------------*/
   /* Get the material warehouse inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-1140L(); /* Get mtl whse inventory*/


   /* --------------------------------------------------------------*/
   /* Get the factory inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-1150L(); /* Get factory inventory*/


   /* --------------------------------------------------------------*/
   /* Add any partially formatted last page to temporary storage.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX > 0) /* If partial data exists*/

    FM0E-1160L(); /* Add page to temp storage*/
  end


   /* --------------------------------------------------------------*/
   /* If data was not found, set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If data was not found*/

    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1100L"; /* Module identification*/
    set FM0EM110.FK-MAT-NBR cursor, bold; /* Highlight*/
    set FM0EM110.XMG-COLR-GRP-CD bold; /* Highlight*/
    set FM0EM110.XCLCD bold; /* Highlight*/
    set FM0EM110.FM0EM-INV-MO bold; /* Highlight*/
  end


   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-REQUEST-DATA-SW = "N";
  FM0EW00.FM0EW-FMAT-MAP-SW = "Y";


end // end FM0E-1100L

// Purge any temporary storage
Function FM0E-1110L()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FM0EW01 empty; /* m110 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FM0EW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1110L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1110L

// Select DCMPNT.VMATRL01
Function FM0E-1120L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATRL01.FK-VEND-CD = "**";
      VMATRL01.FK-DEPT-MAT-DESC = "************";
      VMATRL01.XMU-MAT-UOM-CD = "**";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1120L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1120L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1120L

// Get vendor inventory
Function FM0E-1130L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the vendor inventory table DCMPNT.VVNINV01.*/
   /* Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-1131L(); /* Declare DCMPNT.VVNINV01 cursor*/


  FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-1132L(); /* Fetch DCMPNT.VVNINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format vendor inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VVNINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-1133L(); /* Save record in display storage*/

    FM0E-1132L(); /* Fetch DCMPNT.VVNINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VVNINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-1134L(); /* Close DCMPNT.VVNINV01*/


end // end FM0E-1130L

// Declare DCMPNT.VVNINV01
Function FM0E-1131L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
  VVNINV01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM110.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6800" ("S2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1131L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1131L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1131L

// Fetch DCMPNT.VVNINV01
Function FM0E-1132L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6800" ("N2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1132L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1132L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1132L

// Save data in display storage
Function FM0E-1133L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM110.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM110.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = VVNINV01.FK-VEND-CD; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VVNINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VVNINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VVNINV01.FK-COPY-INV-FL;
  if (VVNINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VVNINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VVNINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VVNINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VVNINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-1133L

// Close DCMPNT.VVNINV01
Function FM0E-1134L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6800" ("C2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1134L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1134L CLOSE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1134L

// Get mtl whse inventory
Function FM0E-1140L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the mtl whse inventory table*/
   /* DCMPNT.VWHINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-1141L(); /* Declare DCMPNT.VWHINV01 cursor*/


  FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-1142L(); /* Fetch DCMPNT.VWHINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format mtl whse inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VWHINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-1145L(); /* Select DCMPNT.VMATWH01*/

    FM0E-1143L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-1160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-1142L(); /* Fetch DCMPNT.VWHINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VWHINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-1144L(); /* Close DCMPNT.VWHINV01*/


end // end FM0E-1140L

// Declare DCMPNT.VWHINV01
Function FM0E-1141L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM110.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6810" ("S2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1141L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1141L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1141L

// Fetch DCMPNT.VWHINV01
Function FM0E-1142L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6810" ("N2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1142L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1142L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1142L

// Save data in display storage
Function FM0E-1143L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM110.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM110.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = VWHINV01.FK-MAT-WHSE-CD; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = VMATWH01.FK-MAT-WHSE-ABRV; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VWHINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VWHINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VWHINV01.FK-COPY-INV-FL;
  if (VWHINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VWHINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VWHINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VWHINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VWHINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-1143L

// Close DCMPNT.VWHINV01
Function FM0E-1144L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6810" ("C2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1144L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1144L CLOSE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1144L

// Select DCMPNT.VMATWH01
Function FM0E-1145L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATWH01 empty;

  VMATWH01.FK-MAT-WHSE-CD = VWHINV01.FK-MAT-WHSE-CD;


  try
    call "IO6780" ("S ", SQLCA, VMATWH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATWH01.FK-MAT-WHSE-ABRV = "***************"; /* Whse abrv*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1145L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1145L SELECT DCMPNT.VMATWH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATWH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATWH01.VMATWH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1145L

// Get factory inventory
Function FM0E-1150L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the factory inventory table*/
   /* DCMPNT.VFYINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-1151L(); /* Declare DCMPNT.VFYINV01 cursor*/


  FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-1152L(); /* Fetch DCMPNT.VFYINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format factory inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VFYINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-1153L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-1160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-1152L(); /* Fetch DCMPNT.VFYINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VFYINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-1154L(); /* Close DCMPNT.VFYINV01*/


end // end FM0E-1150L

// Declare DCMPNT.VFYINV01
Function FM0E-1151L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM110.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6790" ("S2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1151L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1151L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1151L

// Fetch DCMPNT.VFYINV01
Function FM0E-1152L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6790" ("N2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1152L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1152L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1152L

// Save data in display storage
Function FM0E-1153L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM110.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM110.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = VFYINV01.FY1FCTYC; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VFYINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VFYINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VFYINV01.FK-COPY-INV-FL;
  if (VFYINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VFYINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VFYINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VFYINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VFYINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-1153L

// Close DCMPNT.VFYINV01
Function FM0E-1154L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6790" ("C2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1154L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1154L CLOSE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1154L

// Add record to temporary store
Function FM0E-1160L()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FM0EW01 empty; /* m110 display storage*/

    FM0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1160L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1160L

// Format and converse M110
Function FM0E-1200L()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-1210L(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM110.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM110 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM110.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM110.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM110.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM110.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM110.XXXTSPAG invisible, skip;
    set FM0EM110.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM110.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM110.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM110.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM110.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end

    set FM0EM110.FM0EM-INV-TOTAL-QTY invisible, skip;
    set FM0EM110.FM0EM-INV-TOTAL-UOM invisible, skip;
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM110.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM110.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM110.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM110.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM110.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM110.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM110.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    set FM0EM110.FK-MAT-NBR cursor;
  end


  converse FM0EM110 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM110.CAITEM; /* Application data*/


end // end FM0E-1200L

// Format and converse M120
Function FM0E-1200R()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-1210R(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM120.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM120.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM120.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM120 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM120.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM120.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM120.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM120.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM120.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM120.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM120.XXXTSPAG invisible, skip;
    set FM0EM120.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM120.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM120.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM120.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM120.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM120.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM120.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM120.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no message to display*/
    set FM0EM120.FK-MAT-NBR cursor;
  end


  converse FM0EM120 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM120.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM120.CAITEM; /* Application data*/


end // end FM0E-1200R

// Format the data to display
Function FM0E-1210L()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM110 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-1211L(); /* Obtain temp storage page*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM110.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM110.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM110.XCLCD = FM0EW00.XCLCD;
    FM0EM110.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM110.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM110.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM110.XCLCD = FM0EW01.XCLCD;
    FM0EM110.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM110.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM110.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM110.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM110.FK-MAT-WHSE-ABRV[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX]; /* Mtl whse desc*/
    FM0EM110.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM110.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX]; /* Mtl inventory qty*/
    FM0EM110.XMU-MAT-UOM-CD[FM0EW-IDX] = FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX]; /* Unit of measure*/
    FM0EM110.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX]; /* Nike responsibility flag*/
    FM0EM110.FK-COPY-INV-FL[FM0EW-IDX] = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX]; /* Copy inventory flag*/
    FM0EM110.FM0EM-COMMENT-FL[FM0EW-IDX] = FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX]; /* Comment flag*/

    FM0EM110.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY; /* Total inventory quantity*/
    FM0EM110.FM0EM-INV-TOTAL-UOM = FM0EW00.FM0EM-INV-TOTAL-UOM; /* Unit of measure*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-1210L

// Format the data to display
Function FM0E-1210R()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM120 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-1211R(); /* Obtain temp storage page*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM120.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM120.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM120.XCLCD = FM0EW00.XCLCD;
    FM0EM120.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM120.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM120.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM120.XCLCD = FM0EW01.XCLCD;
    FM0EM120.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM120.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM120.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM120.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM120.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM120.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Mtl inventory comment*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-1210R

// Read page from temp storage
Function FM0E-1211L()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1211L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1211L

// Read page from temp storage
Function FM0E-1211R()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "1211R"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M120"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1211R

// Check attention identifier
Function FM0E-1300L()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM110.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM110.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM110.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM110.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "I   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM110.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM110.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM110.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM110.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM110.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM110.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM110.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM110.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM110.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "1300L"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM110"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM110.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM110.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM110.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM110.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM110.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM110.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11  /* RGHT was not pressed*/
   && converseVar.eventKey not pf18) /* INVL was not pressed*/

    FKWREC.XXX-MOD-ID = "1300L"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-1300L

// Check attention identifier
Function FM0E-1300R()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM120.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM120.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM120.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM120.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM120.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "I   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM120.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM120.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM120.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM120.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM120.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM120.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM120.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM120.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM120.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM120.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "1300R"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM120"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM120.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM120.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM120.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM120.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM120.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM120.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM120.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11  /* RGHT was not pressed*/
   && converseVar.eventKey not pf18) /* INVL was not pressed*/

    FKWREC.XXX-MOD-ID = "1300R"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-1300R

// Reset Highlighted fields
Function FM0E-1400L()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM110.XXXTSPAG initialAttributes;
  set FM0EM110.TA5TSQIX initialAttributes;
  set FM0EM110.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM110.FK-MAT-NBR initialAttributes;
  set FM0EM110.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM110.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM110.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM110.XCLCD initialAttributes;
  set FM0EM110.XCLDESC initialAttributes;
  set FM0EM110.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM110.FM0EM-SELECT[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-MAT-WHSE-ABRV[FM0EW-IDX] initialAttributes;
    set FM0EM110.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-MAT-INV-QTY[FM0EW-IDX] initialAttributes;
    set FM0EM110.XMU-MAT-UOM-CD[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-NIKE-RSP-FL[FM0EW-IDX] initialAttributes;
    set FM0EM110.FK-COPY-INV-FL[FM0EW-IDX] initialAttributes;
    set FM0EM110.FM0EM-COMMENT-FL[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM110.FM0EM-INV-TOTAL-QTY initialAttributes;
  set FM0EM110.FM0EM-INV-TOTAL-UOM initialAttributes;

  set FM0EM110.CATOAP initialAttributes;
  set FM0EM110.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM110.XCLCD != "?" /* XCL list not requested*/
   && FM0EM110.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM110.XCLCD == "?" /* XCL list requested*/
   || FM0EM110.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "1400L"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM110.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM110.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM110.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM110.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM110.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM110.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM110.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM110.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "1400L"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-1400L

// Reset Highlighted fields
Function FM0E-1400R()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM120.XXXTSPAG initialAttributes;
  set FM0EM120.TA5TSQIX initialAttributes;
  set FM0EM120.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM120.FK-MAT-NBR initialAttributes;
  set FM0EM120.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM120.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM120.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM120.XCLCD initialAttributes;
  set FM0EM120.XCLDESC initialAttributes;
  set FM0EM120.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM120.FM0EM-SELECT[FM0EW-IDX] initialAttributes;
    set FM0EM120.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM120.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM120.FK-MAT-INV-COMNT[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM120.CATOAP initialAttributes;
  set FM0EM120.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM120.XCLCD != "?" /* XCL list not requested*/
   && FM0EM120.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM120.XCLCD == "?" /* XCL list requested*/
   || FM0EM120.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "1400R"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM120.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM120.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM120.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM120.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM120.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM120.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM120.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM120.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "1400R"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-1400R

// Verify entered fields (m110)
Function FM0E-1500L()
   /* ---------------------------------------------------------------*/
   /* Exit edit routine if pf18 pressed.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* Pf18 pressed*/
    return;
  end


   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM110.CAITEM > " ") /* Application data was entered*/

    set FM0EM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1500L"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-1510L(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM110.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM110.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM110.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM110.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-1520L(); /* Verify key*/
  else

    FM0E-1530L(); /* Verify detail*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FM0E-1500L

// Verify entered fields (m120)
Function FM0E-1500R()
   /* ---------------------------------------------------------------*/
   /* Exit edit routine if pf18 pressed.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* Pf18 pressed*/
    return;
  end


   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM120.CAITEM > " ") /* Application data was entered*/

    set FM0EM120.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1500L"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-1510R(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM120.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM120.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM120.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM120.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-1520R(); /* Verify key*/
  else

    FM0E-1530R(); /* Verify detail*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FM0E-1500R

// Verify scroll request
Function FM0E-1510L()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "1510L"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "1510L"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


   /* ------------------------------------------------------------*/
   /* If left requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    FKWREC.XXX-MOD-ID = "1510L"; /* Module identification*/
    converseLib.validationFailed(74); /* No more pages to left to display*/

  end


   /* ------------------------------------------------------------*/
   /* If right requested, verify data exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FM0EW00.TA5TSQIX <= 0) /* If no data*/
      FKWREC.XXX-MOD-ID = "1510L"; /* Module identification*/
      converseLib.validationFailed(75); /* No more pages to right to display*/

    end
  end


end // end FM0E-1510L

// Verify scroll request
Function FM0E-1510R()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "1510R"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "1510R"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If right requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FKWREC.XXX-MOD-ID = "1510R"; /* Module identification*/
    converseLib.validationFailed(75); /* No more pages to right to display*/

  end


end // end FM0E-1510R

// Verify key data
Function FM0E-1520L()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM110.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520L"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM110.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM110.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520L"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM110.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM110.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520L"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-1521L(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-1522L(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-1520L

// Verify key data
Function FM0E-1520R()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM120.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM120.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520R"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM120.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM120.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520R"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM120.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM120.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "1520R"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-1521R(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify material/color group/color combo is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-1522R(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-1520R

// Select DCMPNT.VMATRL01
Function FM0E-1521L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM110.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1521L"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1521L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1521L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1521L

// Select DCMPNT.VMATRL01
Function FM0E-1521R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM120.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM120.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1521R"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1521R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1521R SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1521R

// Select DCMPNT.VMCOLR01
Function FM0E-1522L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM110.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM110.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM110.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM110.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM110.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM110.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1522L"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1522L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1522L SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1522L

// Select DCMPNT.VMCOLR01
Function FM0E-1522R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM120.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM120.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM120.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM120.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM120.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM120.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1522R"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "1522R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1522R SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-1522R

// Verify detail data
Function FM0E-1530L()
   /* ---------------------------------------------------------------*/
   /* Verify select fields.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM110.FM0EM-SELECT[FM0EW-IDX] == " " /* If blank*/
     || FM0EM110.FM0EM-SELECT[FM0EW-IDX] == "S") /* or selected*/
       /* next sentence*/
    else

      set FM0EM110.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1530L"; /* Module identification*/
      converseLib.validationFailed(13); /* Only S may be used to select a line*/
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end
end // end FM0E-1530L

// Verify detail data
Function FM0E-1530R()
   /* ---------------------------------------------------------------*/
   /* Verify select fields.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM120.FM0EM-SELECT[FM0EW-IDX] == " " /* If blank*/
     || FM0EM120.FM0EM-SELECT[FM0EW-IDX] == "S") /* or selected*/
       /* next sentence*/
    else

      set FM0EM120.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "1530R"; /* Module identification*/
      converseLib.validationFailed(13); /* Only S may be used to select a line*/
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end
end // end FM0E-1530R

// Process valid request
Function FM0E-1600L()
   /* ------------------------------------------------------------*/
   /* If pf18 pressed, process request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18 /* Pf18 was pressed*/
  )                               
    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM110.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM110.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM110.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM110.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM110.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT; /* Inventory month*/


    FM0EW00.FM0EW-IDX = 1;
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM110.FM0EM-SELECT[FM0EW-IDX] == "S") /* If line selected*/

        FKWREC.FK-VEND-CD[1] = FM0EM110.FK-VEND-CD[FM0EW-IDX];
        FKWREC.FK-MAT-WHSE-CD = FM0EM110.FK-MAT-WHSE-CD[FM0EW-IDX];
        FKWREC.FY1FCTYC = FM0EM110.FY1FCTYC[FM0EW-IDX];

        FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + FM0EW00.FM0EW-NBR-MAP-ROWS;

      end

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    COMMAREA.CATOAP = "FM0I"; /* to applicaiton*/
    COMMAREA.CAITEM = FM0EM110.CAITEM; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM110.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM110.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM110.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM110.XCLCD != FM0EW01.XCLCD
   || FM0EM110.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "R"; /* Display M120*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end


end // end FM0E-1600L

// Process valid request
Function FM0E-1600R()
   /* ------------------------------------------------------------*/
   /* If pf18 pressed, process request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18 /* Pf18 was pressed*/
  )                               
    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM120.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM120.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM120.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM120.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM120.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT; /* Inventory month*/


    FM0EW00.FM0EW-IDX = 1;
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM120.FM0EM-SELECT[FM0EW-IDX] == "S") /* If line selected*/

        FKWREC.FK-VEND-CD[1] = FM0EM120.FK-VEND-CD[FM0EW-IDX];
        FKWREC.FK-MAT-WHSE-CD = FM0EM120.FK-MAT-WHSE-CD[FM0EW-IDX];
        FKWREC.FY1FCTYC = FM0EM120.FY1FCTYC[FM0EW-IDX];

        FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + FM0EW00.FM0EW-NBR-MAP-ROWS;

      end

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    COMMAREA.CATOAP = "FM0I"; /* to applicaiton*/
    COMMAREA.CAITEM = FM0EM120.CAITEM; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM120.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM120.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM120.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM120.XCLCD != FM0EW01.XCLCD
   || FM0EM120.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    /* Move new key to m110*/
    FM0EM110.FK-MAT-NBR = FM0EM120.FK-MAT-NBR; /* Mtl*/
    FM0EM110.XMG-COLR-GRP-CD = FM0EM120.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EM110.XCLCD = FM0EM120.XCLCD; /* Color*/
    FM0EM110.FM0EM-INV-MO = FM0EM120.FM0EM-INV-MO; /* Inv month*/


    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Go to left screen*/
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf10) /* Pf10 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M110*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end


end // end FM0E-1600R

// Process add map (M210)
Function FM0E-2000L()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FM0E-2100L(); /* Obtain the data to display*/

  FM0E-2200L(); /* Format and display the map*/

  FM0E-2300L(); /* Check attention identifier*/

  FM0E-2400L(); /* Reset fields to normal intensity*/

  FM0E-2500L(); /* Verify the entered data*/

  FM0E-2600L(); /* Process valid input request*/


end // end FM0E-2000L

// Process add map (M220)
Function FM0E-2000R()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM fm0e-2100R;                /* Obtain the data to display*/

  FM0E-2200R(); /* Format and display the map*/

  FM0E-2300R(); /* Check attention identifier*/

  FM0E-2400R(); /* Reset fields to normal intensity*/

  FM0E-2500R(); /* Verify the entered data*/

  FM0E-2600R(); /* Process valid input request*/


end // end FM0E-2000R

// Obtain data to display
Function FM0E-2100L()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* --------------------------------------------------------------*/
   /* Save key in working storage.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  FM0EW00.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  FM0EW00.XCLCD = FM0EM210.XCLCD; /* Color*/
  FM0EW00.FM0EM-INV-MO = FM0EM210.FM0EM-INV-MO; /* Inv month*/

  FM0EM210.FK-DEPT-MAT-DESC = " ";
  FM0EM210.XTM-MAT-THCK-DESC = " ";
  FM0EM210.XCLDESC = " ";

  FM0EW00.FM0EM-INV-TOTAL-QTY = 0; /* Init total qty*/
  FM0EW00.FM0EM-INV-TOTAL-UOM = " "; /* Init total uom*/


   /* --------------------------------------------------------------*/
   /* Select the material record from DCMPNT.VMATRL01.*/
   /* --------------------------------------------------------------*/

  FM0E-2110L(); /* Select DCMPNT.VMATRL01*/

  FM0EW00.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD;
  FM0EW00.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC;
  FM0EW00.FM0EM-INV-TOTAL-UOM = VMATRL01.XMU-MAT-UOM-CD;


   /* --------------------------------------------------------------*/
   /* Get the thickness desc from XTMTBL.*/
   /* --------------------------------------------------------------*/

  if (VMATRL01.XTM-MAT-THCK-CD in XTMTBL.XTM-MAT-THCK-CD /* If in table*/
   && XTMTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    FM0EW00.XTM-MAT-THCK-DESC = XTMTBL.XTM-MAT-THCK-DESC[sysVar.arrayIndex];
  else

    FM0EW00.XTM-MAT-THCK-DESC = "*********";
  end


   /* --------------------------------------------------------------*/
   /* Get the color desc from XCLTBL.*/
   /* --------------------------------------------------------------*/

  if (FM0EM210.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    FM0EW00.XCLDESC = XCLTBL.XCLDESC[sysVar.arrayIndex];
  else

    FM0EW00.XCLDESC = "************";
  end


   /* --------------------------------------------------------------*/
   /* If confirming the add, obtain the line data.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-ADD-SW == "Y") /* Confirming the add*/

    FM0EW00.FM0EW-IDX = 1; /* Initialize index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If mtl whse entrd*/

        FM0E-2120L(); /* Select DCMPNT.VMATWH01*/
      else

        VMATWH01.FK-MAT-WHSE-ABRV = " "; /* Init whse abrv*/
      end

      FM0E-2130L(); /* Format display storage*/

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end
  end


   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-REQUEST-DATA-SW = "N";
  FM0EW00.FM0EW-FMAT-MAP-SW = "Y";


end // end FM0E-2100L

// Select DCMPNT.VMATRL01
Function FM0E-2110L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATRL01.FK-VEND-CD = "**";
      VMATRL01.FK-DEPT-MAT-DESC = "************";
      VMATRL01.XMU-MAT-UOM-CD = "**";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2110L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2110L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2110L

// Select DCMPNT.VMATWH01
Function FM0E-2120L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATWH01 empty;

  VMATWH01.FK-MAT-WHSE-CD = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX];


  try
    call "IO6780" ("S ", SQLCA, VMATWH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATWH01.FK-MAT-WHSE-ABRV = "***************"; /* Whse abrv*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2120L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2120L SELECT DCMPNT.VMATWH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATWH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATWH01.VMATWH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2120L

// Save data in display storage
Function FM0E-2130L()
   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM210.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM210.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FK-VEND-CD[FM0EW-IDX] = FM0EM210.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = VMATWH01.FK-MAT-WHSE-ABRV; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = FM0EM210.FY1FCTYC[FM0EW-IDX]; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX]; /* Inv qty*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX]; /* Nike responsibility fl*/
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = FM0EM210.FK-COPY-INV-FL[FM0EW-IDX]; /* Copy inventory fl*/
  if (FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX]; /* Add qty to total*/


end // end FM0E-2130L

// Format and converse M210
Function FM0E-2200L()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-2210L(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM210.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM210.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM210.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM210 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM210.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM210.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM210.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM210.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM210.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM210.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set fields dark as appropriate.*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " "
     || FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " "
     || FM0EM210.FY1FCTYC[FM0EW-IDX] > " ")

       /* NEXT SENTENCE*/
    else
      set FM0EM210.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;
      set FM0EM210.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
    end
    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  if (FM0EM210.FM0EM-INV-TOTAL-QTY == 0) /* If no total qty*/
    set FM0EM210.FM0EM-INV-TOTAL-UOM invisible, skip; /* Protect total uom*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* successful update*/

    set FM0EM210.FK-MAT-NBR cursor;
  end


  converse FM0EM210 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM210.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM210.CAITEM; /* Application data*/


end // end FM0E-2200L

// Format and converse M220
Function FM0E-2200R()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-2210R(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM220.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM220.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM220.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM220 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM220.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM220.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM220.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM220.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM220.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM220.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set dark any rows with no data (vend, mtl whse, or fcty).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    if (FM0EM220.FK-VEND-CD[FM0EW-IDX] == " "
     && FM0EM220.FK-MAT-WHSE-CD[FM0EW-IDX] == " "
     && FM0EM220.FY1FCTYC[FM0EW-IDX] == " ")

      set FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* Update successful*/

    set FM0EM220.FK-MAT-NBR cursor;
  end


  converse FM0EM220 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM220.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM220.CAITEM; /* Application data*/


end // end FM0E-2200R

// Format the data to display
Function FM0E-2210L()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

   /* SET FM0EM210 CLEAR; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  FM0EM210.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
  FM0EM210.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
  FM0EM210.XCLCD = FM0EW00.XCLCD;
  FM0EM210.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM210.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM210.FK-MAT-WHSE-ABRV[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX]; /* Mtl whse desc*/
    FM0EM210.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX]; /* Mtl inventory qty*/
    FM0EM210.XMU-MAT-UOM-CD[FM0EW-IDX] = FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX]; /* Unit of measure*/
    FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX]; /* Nike responsibility flag*/
    FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX]; /* Copy inventory flag*/
    FM0EM210.FM0EM-COMMENT-FL[FM0EW-IDX] = FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX]; /* Comment flag*/

    FM0EM210.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY; /* Total inventory quantity*/
    FM0EM210.FM0EM-INV-TOTAL-UOM = FM0EW00.FM0EM-INV-TOTAL-UOM; /* Unit of measure*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-2210L

// Format the data to display
Function FM0E-2210R()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM220 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM220.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM220.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM220.XCLCD = FM0EW00.XCLCD;
    FM0EM220.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM220.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM220.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM220.XCLCD = FM0EW01.XCLCD;
    FM0EM220.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM220.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM220.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM220.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM220.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM220.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Mtl inventory comment*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-2210R

// Check attention identifier
Function FM0E-2300L()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM210.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM210.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM210.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM210.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "A   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM210.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM210.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM210.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM210.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM210.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM210.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM210.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM210.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM210.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "2300L"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM210"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM210.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM210.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM210.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM210.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM210.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM210.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "2300L"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-2300L

// Check attention identifier
Function FM0E-2300R()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM220.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM220.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM220.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM220.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "A   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM220.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM220.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM220.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM220.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM220.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM220.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM220.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM220.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM220.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "2300R"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM220"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM220.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM220.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM220.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM220.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM220.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM220.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM220.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "2300R"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-2300R

// Reset Highlighted fields
Function FM0E-2400L()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM210.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM210.FK-MAT-NBR initialAttributes;
  set FM0EM210.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM210.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM210.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM210.XCLCD initialAttributes;
  set FM0EM210.XCLDESC initialAttributes;
  set FM0EM210.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM210.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM210.FK-MAT-WHSE-ABRV[FM0EW-IDX] initialAttributes;
    set FM0EM210.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX] initialAttributes;
    set FM0EM210.XMU-MAT-UOM-CD[FM0EW-IDX] initialAttributes;
    set FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] initialAttributes;
    set FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] initialAttributes;
    set FM0EM210.FM0EM-COMMENT-FL[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM210.FM0EM-INV-TOTAL-QTY initialAttributes;
  set FM0EM210.FM0EM-INV-TOTAL-UOM initialAttributes;

  set FM0EM210.CATOAP initialAttributes;
  set FM0EM210.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM210.XCLCD != "?" /* XCL list not requested*/
   && FM0EM210.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM210.XCLCD == "?" /* XCL list requested*/
   || FM0EM210.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "2400L"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM210.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM210.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM210.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM210.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM210.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM210.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM210.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM210.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "2400L"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-2400L

// Reset Highlighted fields
Function FM0E-2400R()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM220.XXXTSPAG initialAttributes;
  set FM0EM220.TA5TSQIX initialAttributes;
  set FM0EM220.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM220.FK-MAT-NBR initialAttributes;
  set FM0EM220.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM220.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM220.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM220.XCLCD initialAttributes;
  set FM0EM220.XCLDESC initialAttributes;
  set FM0EM220.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM220.CATOAP initialAttributes;
  set FM0EM220.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM220.XCLCD != "?" /* XCL list not requested*/
   && FM0EM220.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM220.XCLCD == "?" /* XCL list requested*/
   || FM0EM220.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "2400R"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM220.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM220.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM220.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM220.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM220.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM220.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM220.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM220.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "2400R"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-2400R

// Verify entered fields (M210)
Function FM0E-2500L()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM210.CAITEM > " ") /* Application data was entered*/

    set FM0EM210.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2500L"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-2510L(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify detail data.*/
   /* ---------------------------------------------------------------*/

  FM0E-2530L(); /* Verify detail*/


   /* ---------------------------------------------------------------*/
   /* Verify key data.*/
   /* ---------------------------------------------------------------*/

  FM0E-2520L(); /* Verify key*/


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    FM0EW00.FM0EW-CONFIRM-ADD-SW = "N";
    exit stack;
  end


   /* ---------------------------------------------------------------*/
   /* If confirming the add, verify no data was changed.*/
   /* ---------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-ADD-SW == "Y") /* Confirming the add*/

    if (FM0EM210.FK-MAT-NBR == FM0EW01.FK-MAT-NBR
     && FM0EM210.XMG-COLR-GRP-CD == FM0EW01.XMG-COLR-GRP-CD
     && FM0EM210.XCLCD == FM0EW01.XCLCD
     && FM0EM210.FM0EM-INV-MO == FM0EW01.FM0EM-INV-MO)

       /* next sentence*/
    else

      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Request the data*/
      FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
      FKWREC.XXX-MOD-ID = "2500L"; /* Module identification*/
      exit stack;
    end


    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM210.FK-VEND-CD[FM0EW-IDX] == FM0EW01.FK-VEND-CD[FM0EW-IDX]
       && FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX]
       == FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]
       && FM0EM210.FY1FCTYC[FM0EW-IDX] == FM0EW01.FY1FCTYC[FM0EW-IDX]
       && FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX]
       == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX]
       && FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX]
       == FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX]
       && FM0EM210.FK-COPY-INV-FL[FM0EW-IDX]
       == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX])

         /* next sentence*/
      else

        FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Request the data*/
        FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
        FKWREC.XXX-MOD-ID = "2500L"; /* Module identification*/
        exit stack;
      end
      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end
  end


end // end FM0E-2500L

// Verify entered fields (M220)
Function FM0E-2500R()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM220.CAITEM > " ") /* Application data was entered*/

    set FM0EM220.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2500R"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-2510R(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify key data.*/
   /* ---------------------------------------------------------------*/

  FM0E-2520R(); /* Verify key*/


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    FM0EW00.FM0EW-CONFIRM-ADD-SW = "N";
    exit stack;
  end


   /* ---------------------------------------------------------------*/
   /* If confirming the add, verify no data was changed.*/
   /* ---------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-ADD-SW == "Y") /* Confirming the add*/

    if (FM0EM220.FK-MAT-NBR == FM0EW01.FK-MAT-NBR
     && FM0EM220.XMG-COLR-GRP-CD == FM0EW01.XMG-COLR-GRP-CD
     && FM0EM220.XCLCD == FM0EW01.XCLCD
     && FM0EM220.FM0EM-INV-MO == FM0EW01.FM0EM-INV-MO
    )
       /* next sentence*/
    else

       /* Save the changes*/
      FM0EM210.FK-MAT-NBR = FM0EM220.FK-MAT-NBR;
      FM0EM210.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD;
      FM0EM210.XCLCD = FM0EM220.XCLCD;
      FM0EM210.FM0EM-INV-MO = FM0EM220.FM0EM-INV-MO;

      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display left map*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
      FKWREC.XXX-MOD-ID = "2500R"; /* Module identification*/
    end


    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX]
       == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX])

         /* next sentence*/
      else

        FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
        FKWREC.XXX-MOD-ID = "2500R"; /* Module identification*/
        FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Save comment*/
      end
      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end
  end


   /* ---------------------------------------------------------------*/
   /* If any messages were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0) /* Messages to display*/
    exit stack;
  end


end // end FM0E-2500R

// Verify scroll request
Function FM0E-2510L()
   /* ------------------------------------------------------------*/
   /* If right requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    FKWREC.XXX-MOD-ID = "2510L"; /* Module identification*/
    converseLib.validationFailed(74); /* No more pages to left to display*/

  end


end // end FM0E-2510L

// Verify scroll request
Function FM0E-2510R()
   /* ------------------------------------------------------------*/
   /* If left requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    FKWREC.XXX-MOD-ID = "2510R"; /* Module identification*/
    converseLib.validationFailed(75); /* No more pages to right to display*/

  end


end // end FM0E-2510R

// Verify key data
Function FM0E-2520L()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM210.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520L"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM210.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM210.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520L"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM210.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM210.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520L"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-2521L(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-2522L(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-2520L

// Verify key data
Function FM0E-2520R()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM220.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520R"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM220.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM220.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520R"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM220.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM220.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "2520R"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-2521R(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-2522R(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-2520R

// Select DCMPNT.VMATRL01
Function FM0E-2521L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM210.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "2521L"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2521L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2521L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2521L

// Select DCMPNT.VMATRL01
Function FM0E-2521R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM220.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "2521R"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2521R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2521R SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2521R

// Select DCMPNT.VMCOLR01
Function FM0E-2522L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM210.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM210.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM210.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM210.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "2522L"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2522L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2522L SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2522L

// Select DCMPNT.VMCOLR01
Function FM0E-2522R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM220.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM220.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM220.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM220.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "2522R"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2522R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2522R SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2522R

// Verify detail data
Function FM0E-2530L()
   /* ---------------------------------------------------------------*/
   /* Verify each detail line.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-LINE-COUNT = 0; /* Initialize line counter*/
  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " "     /* If vendor entered*/
     || FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " " /* or mtl whse entered*/
     || FM0EM210.FY1FCTYC[FM0EW-IDX] > " ")      /* or factory entered*/

      FM0EW00.FM0EW-LINE-COUNT = FM0EW00.FM0EW-LINE-COUNT + 1;


      /* ---------------------------------------------------------------*/
      /* Verify month-end copy flag.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] == "Y" /* If yes*/
       || FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] == "N") /* or no*/
         /* next sentence*/
      else

        set FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
        converseLib.validationFailed(34); /* Value must be "y" or "n"*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify Nike-resp flag.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] == "Y" /* If yes*/
       || FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] == "N") /* or no*/
         /* next sentence*/
      else

        set FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
        converseLib.validationFailed(34); /* Value must be "y" or "n"*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify quantity.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX] == 0) /* Qty not entered*/

        set FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
        converseLib.validationFailed(8); /* Required field missing or invalid*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify vendor, mtl whse, or fcty entered.  Only 1 can be*/
      /* entered at a time.*/
      /* ---------------------------------------------------------------*/

      FM0EW00.FM0EW-COUNT = 0; /* Initialize counter*/

      if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor entered*/
        FM0EW00.FM0EW-COUNT = FM0EW00.FM0EW-COUNT + 1;
      end
      if (FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* Mtl whse entered*/
        FM0EW00.FM0EW-COUNT = FM0EW00.FM0EW-COUNT + 1;
      end
      if (FM0EM210.FY1FCTYC[FM0EW-IDX] > " ") /* If factory entered*/
        FM0EW00.FM0EW-COUNT = FM0EW00.FM0EW-COUNT + 1;
      end

      if (FM0EW00.FM0EW-COUNT > 1) /* If more than 1 entered*/

        if (FM0EM210.FY1FCTYC[FM0EW-IDX] > " ") /* If factory entered*/
          set FM0EM210.FY1FCTYC[FM0EW-IDX] cursor, bold;
        end
        if (FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* Mtl whse entered*/
          set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] cursor, bold;
        end
        if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor entered*/
          set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
        end
        FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
        converseLib.validationFailed(138); /* One location must be specified*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify factory.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FY1FCTYC[FM0EW-IDX] > " ") /* If factory entered*/
        FM0E-2531L(); /* Select DFCTY.VFCTY001*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify material warehouse.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* Mtl whse entered*/
        FM0E-2532L(); /* Select DCMPNT.VMATWH01*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify vendor.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " ") /* Vendor entered*/
        FM0E-2533L(); /* Select DCMPNT.VVNDR001*/

        if (converseVar.validationMsgNum != 21) /* If vendor is valid*/
          FM0E-2521L(); /* Select DCMPNT.VMATRL01*/

          if (FM0EM210.FK-VEND-CD[FM0EW-IDX] != VMATRL01.FK-VEND-CD)
            set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
            FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
            converseLib.validationFailed(143); /* Vendor not valid for specified material*/
          end
        end
      end


    else /* Vendor, fcty, mtl whse NOT entered*/

      if (FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX] > 0
       || FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] > " "
       || FM0EM210.FK-COPY-INV-FL[FM0EW-IDX] > " "
       || FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] > " ")

        set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
        set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] bold;
        set FM0EM210.FY1FCTYC[FM0EW-IDX] bold;
        FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
        converseLib.validationFailed(138); /* One location must be specified*/
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end


   /* ---------------------------------------------------------------*/
   /* Verify at least 1 line of detail has been entered*/
   /* ---------------------------------------------------------------*/

  if (FM0EW00.FM0EW-LINE-COUNT <= 0) /* If no lines formatted*/

    set FM0EM210.FK-VEND-CD[1] cursor, bold;
    set FM0EM210.FK-MAT-WHSE-CD[1] bold;
    set FM0EM210.FY1FCTYC[1] bold;
    FKWREC.XXX-MOD-ID = "2530L"; /* Module identification*/
    converseLib.validationFailed(142); /* At least 1 line of data must be entered*/
  end


end // end FM0E-2530L

// Select DFCTY.VFCTY001
Function FM0E-2531L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty;

  FY1REC.XGPCD = "02";
  FY1REC.FY1FCTYC = FM0EM210.FY1FCTYC[FM0EW-IDX];


  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM210.FY1FCTYC[FM0EW-IDX] cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "2531L"; /* Module identification*/
      converseLib.validationFailed(121); /* Factory code missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2531L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2531L VERIFY FACTORY CODE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2531L

// Select DCMPNT.VMATWH01
Function FM0E-2532L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATWH01 empty;

  VMATWH01.FK-MAT-WHSE-CD = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX];


  try
    call "IO6780" ("S ", SQLCA, VMATWH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] cursor, bold;
      FKWREC.XXX-MOD-ID = "2532L";
      converseLib.validationFailed(119); /* Material whse code missing or invalid*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2532L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2532L SELECT DCMPNT.VMATWH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATWH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATWH01.VMATWH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2532L

// Select DCMPNT.VVNDR001
Function FM0E-2533L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VVNDR001 empty;

  VVNDR001.FK-VEND-CD = FM0EM210.FK-VEND-CD[FM0EW-IDX];


  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
      FKWREC.XXX-MOD-ID = "2533L";
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "2533L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2533L SELECT DCMPNT.VVNDR001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2533L

// Process valid request (M210)
Function FM0E-2600L()
   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "R"; /* Display M220*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";

    FM0EW00.FK-MAT-NBR = FM0EM210.FK-MAT-NBR;
    FM0EW00.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD;
    FM0EW00.XCLCD = FM0EM210.XCLCD;
    FM0EW00.FM0EM-INV-MO = FM0EM210.FM0EM-INV-MO;

    FM0EW01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR;
    FM0EW01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD;
    FM0EW01.XCLCD = FM0EM210.XCLCD;
    FM0EW01.FM0EM-INV-MO = FM0EM210.FM0EM-INV-MO;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      FM0EW01.FK-VEND-CD[FM0EW-IDX] = FM0EM210.FK-VEND-CD[FM0EW-IDX];
      FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX];
      FM0EW01.FY1FCTYC[FM0EW-IDX] = FM0EM210.FY1FCTYC[FM0EW-IDX];
      FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX];
      FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = FM0EM210.XMU-MAT-UOM-CD[FM0EW-IDX];
      FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];
      FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = FM0EM210.FK-COPY-INV-FL[FM0EW-IDX];

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end


    if (FM0EW00.FM0EW-CONFIRM-ADD-SW == "Y")

      FKWREC.XXXMSGNO = 30; /* Press enter to continue, pa2*/
      FKWREC.XXX-MOD-ID = "2600L"; /* Module identification*/
    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* Confirm the add.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-ADD-SW != "Y") /* If add not confirmed*/

    FM0EW00.FM0EW-CONFIRM-ADD-SW = "Y";
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
    FKWREC.XXX-MOD-ID = "2600L"; /* Module identification*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Perform the add process.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/

  FM0EW00.FM0EW-UPDT-PERFORMED-SW = "N"; /* No update yet*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all rows*/

    if (FM0EM210.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor record*/
      FM0E-2610L(); /* Select DCMPNT.VVNINV01*/
      FM0E-2620L(); /* Insert DCMPNT.VVNINV01*/
    else

      if (FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If whse record*/
        FM0E-2630L(); /* Select DCMPNT.VWHINV01*/
        FM0E-2640L(); /* Insert DCMPNT.VWHINV01*/
      else

        if (FM0EM210.FY1FCTYC[FM0EW-IDX] > " ") /* If fcty record*/
          FM0E-2650L(); /* Select DCMPNT.VFYINV01*/
          FM0E-2660L(); /* Insert DCMPNT.VFYINV01*/
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* If update was performed, clear working storage.*/
   /* ------------------------------------------------------------*/

  set FM0EW01 empty; /* Clear display storage*/

  FM0EW00.FM0EM-HDR-VEND-CD = " "; /* Vendor code*/
  FM0EW00.FK-MAT-NBR = " "; /* Material*/
  FM0EW00.FK-DEPT-MAT-DESC = " "; /* Material desc*/
  FM0EW00.XTM-MAT-THCK-DESC = " "; /* Thickness*/
  FM0EW00.XMG-COLR-GRP-CD = " "; /* Color group*/
  FM0EW00.XCLCD = " "; /* Color*/
  FM0EW00.XCLDESC = " "; /* Color desc*/

  set FM0EM210 initial;
  set FM0EM220 initial;
  FM0EM210.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;

  FM0EW00.FM0EM-INV-MO = 0;


   /* ------------------------------------------------------------*/
   /* If update was performed, set message*/
   /* ------------------------------------------------------------*/

  FKWREC.XXXMSGNO = 1; /* Update performed*/
  FKWREC.XXX-MOD-ID = "2600L"; /* Module identification*/
  FM0EW00.FM0EW-CONFIRM-ADD-SW = "N";


end // end FM0E-2600L

// Process valid request (M220)
Function FM0E-2600R()
   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Pf10 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M220*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";

    FM0EM210.FK-MAT-NBR = FM0EM220.FK-MAT-NBR;
    FM0EM210.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD;
    FM0EM210.XCLCD = FM0EM220.XCLCD;
    FM0EM210.FM0EM-INV-MO = FM0EM220.FM0EM-INV-MO;

    FM0EW00.FK-MAT-NBR = FM0EM220.FK-MAT-NBR;
    FM0EW00.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD;
    FM0EW00.XCLCD = FM0EM220.XCLCD;
    FM0EW00.FM0EM-INV-MO = FM0EM220.FM0EM-INV-MO;

    FM0EW01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR;
    FM0EW01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD;
    FM0EW01.XCLCD = FM0EM220.XCLCD;
    FM0EW01.FM0EM-INV-MO = FM0EM220.FM0EM-INV-MO;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX];

      if (FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] > " ") /* If comment exists*/
        FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y";
      else
        FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N";
      end

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end


    if (FM0EW00.FM0EW-CONFIRM-ADD-SW == "Y")

      FKWREC.XXXMSGNO = 30; /* Press enter to continue, pa2*/
      FKWREC.XXX-MOD-ID = "2600R"; /* Module identification*/
    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* Confirm the add.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-ADD-SW != "Y") /* If add not confirmed*/

    FM0EW00.FM0EW-CONFIRM-ADD-SW = "Y";
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L";
    FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
    FKWREC.XXX-MOD-ID = "2600R"; /* Module identification*/

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Save the comment*/

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* Perform the add process.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/

  FM0EW00.FM0EW-UPDT-PERFORMED-SW = "N"; /* No update yet*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all rows*/

    if (FM0EM220.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor record*/
      FM0E-2610R(); /* Select DCMPNT.VVNINV01*/
      FM0E-2620R(); /* Insert DCMPNT.VVNINV01*/
    else

      if (FM0EM220.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If whse record*/
        FM0E-2630R(); /* Select DCMPNT.VWHINV01*/
        FM0E-2640R(); /* Insert DCMPNT.VWHINV01*/
      else

        if (FM0EM220.FY1FCTYC[FM0EW-IDX] > " ") /* If fcty record*/
          FM0E-2650R(); /* Select DCMPNT.VFYINV01*/
          FM0E-2660R(); /* Insert DCMPNT.VFYINV01*/
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* If update was performed, clear working storage.*/
   /* ------------------------------------------------------------*/

  set FM0EW01 empty; /* Clear display storage*/

  FM0EW00.FM0EM-HDR-VEND-CD = " "; /* Vendor code*/
  FM0EW00.FK-MAT-NBR = " "; /* Material*/
  FM0EW00.FK-DEPT-MAT-DESC = " "; /* Material desc*/
  FM0EW00.XTM-MAT-THCK-DESC = " "; /* Thickness*/
  FM0EW00.XMG-COLR-GRP-CD = " "; /* Color group*/
  FM0EW00.XCLCD = " "; /* Color*/
  FM0EW00.XCLDESC = " "; /* Color desc*/

  set FM0EM210 initial;
  set FM0EM220 initial;
  FM0EM210.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;

  FM0EW00.FM0EM-INV-MO = 0;


   /* ------------------------------------------------------------*/
   /* If update was performed, set message*/
   /* ------------------------------------------------------------*/

  FKWREC.XXXMSGNO = 1; /* Update performed*/
  FKWREC.XXX-MOD-ID = "2600R"; /* Module identification*/
  FM0EW00.FM0EW-CONFIRM-ADD-SW = "N";
  FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L";


end // end FM0E-2600R

// Select DCMPNT.VVNINV01
Function FM0E-2610L()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM210.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VVNINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6800" ("S ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
      set FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] bold;
      FKWREC.XXX-MOD-ID = "2610L";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2610L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2610L SELECT DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2610L

// Select DCMPNT.VVNINV01
Function FM0E-2610R()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM220.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VVNINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6800" ("S ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FK-VEND-CD[FM0EW-IDX] cursor, bold;
      FKWREC.XXX-MOD-ID = "2610R";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Go to m210*/
      FM0EW00.FM0EW-FMAT-MAP-SW = "Y"; /* ;/* Format the map*/
      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2610R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2610R SELECT DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2610R

// Insert DCMPNT.VVNINV01
Function FM0E-2620L()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM210.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VVNINV01.FK-MAT-INV-QTY = FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX];
  VVNINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];
  VVNINV01.FK-COPY-INV-FL = FM0EM210.FK-COPY-INV-FL[FM0EW-IDX];
  VVNINV01.FK-MAT-INV-COMNT = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX];
  VVNINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VVNINV01.ZZZCHGCT = 0;


  try
    call "IO6800" ("A ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2620L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2620L INSERT DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2620L

// Insert DCMPNT.VVNINV01
Function FM0E-2620R()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM220.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VVNINV01.FK-MAT-INV-QTY = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX];
  VVNINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];
  VVNINV01.FK-COPY-INV-FL = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX];
  VVNINV01.FK-MAT-INV-COMNT = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX];
  VVNINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VVNINV01.ZZZCHGCT = 0;


  try
    call "IO6800" ("A ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2620R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2620R INSERT DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2620R

// Select DCMPNT.VWHINV01
Function FM0E-2630L()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VWHINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6810" ("S ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] cursor, bold;
      set FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] bold;
      FKWREC.XXX-MOD-ID = "2630L";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2630L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2630L SELECT DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2630L

// Select DCMPNT.VWHINV01
Function FM0E-2630R()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM220.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VWHINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6810" ("S ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX] cursor, bold;
      FKWREC.XXX-MOD-ID = "2630R";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display m210*/
      FM0EW00.FM0EW-FMAT-MAP-SW = "Y"; /* Format the map*/
      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2630R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2630R SELECT DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2630R

// Insert DCMPNT.VWHINV01
Function FM0E-2640L()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM210.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VWHINV01.FK-MAT-INV-QTY = FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX];
  VWHINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];
  VWHINV01.FK-COPY-INV-FL = FM0EM210.FK-COPY-INV-FL[FM0EW-IDX];
  VWHINV01.FK-MAT-INV-COMNT = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX];
  VWHINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VWHINV01.ZZZCHGCT = 0;


  try
    call "IO6810" ("A ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2640L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2640L INSERT DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2640L

// Select DCMPNT.VWHINV01
Function FM0E-2640R()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM220.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VWHINV01.FK-MAT-INV-QTY = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX];
  VWHINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];
  VWHINV01.FK-COPY-INV-FL = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX];
  VWHINV01.FK-MAT-INV-COMNT = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX];
  VWHINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VWHINV01.ZZZCHGCT = 0;


  try
    call "IO6810" ("A ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2640R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2640R INSERT DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2640R

// Select DCMPNT.VFYINV01
Function FM0E-2650L()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM210.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VFYINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6790" ("S ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FY1FCTYC[FM0EW-IDX] cursor, bold;
      set FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX] bold;
      FKWREC.XXX-MOD-ID = "2650L";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2650L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2650L SELECT DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2650L

// Select DCMPNT.VFYINV01
Function FM0E-2650R()
   /* ------------------------------------------------------------*/
   /* Select a row from the requested table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM220.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VFYINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];


  try
    call "IO6790" ("S ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      set FM0EM210.FY1FCTYC[FM0EW-IDX] cursor, bold;
      FKWREC.XXX-MOD-ID = "2650R";
      converseLib.validationFailed(16);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display m210*/
      FM0EW00.FM0EW-FMAT-MAP-SW = "Y"; /* Format the map*/
      exit stack;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2650R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2650R SELECT DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2650R

// Select DCMPNT.VFYINV01
Function FM0E-2660L()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM210.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM210.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM210.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM210.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM210.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VFYINV01.FK-MAT-INV-QTY = FM0EM210.FK-MAT-INV-QTY[FM0EW-IDX];
  VFYINV01.FK-NIKE-RSP-FL = FM0EM210.FK-NIKE-RSP-FL[FM0EW-IDX];
  VFYINV01.FK-COPY-INV-FL = FM0EM210.FK-COPY-INV-FL[FM0EW-IDX];
  VFYINV01.FK-MAT-INV-COMNT = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX];
  VFYINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VFYINV01.ZZZCHGCT = 0;


  try
    call "IO6790" ("A ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2660L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2660L INSERT DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2660L

// Select DCMPNT.VFYINV01
Function FM0E-2660R()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM220.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM220.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM220.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM220.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM220.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;
  VFYINV01.FK-MAT-INV-QTY = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX];
  VFYINV01.FK-NIKE-RSP-FL = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX];
  VFYINV01.FK-COPY-INV-FL = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX];
  VFYINV01.FK-MAT-INV-COMNT = FM0EM220.FK-MAT-INV-COMNT[FM0EW-IDX];
  VFYINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VFYINV01.ZZZCHGCT = 0;


  try
    call "IO6790" ("A ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  FKWREC.XXX-MOD-ID = "2660R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "2660R INSERT DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-2660R

// Process change map (M310)
Function FM0E-3000L()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FM0E-3100L(); /* Obtain the data to display*/

  FM0E-3200L(); /* Format and display the map*/

  FM0E-3300L(); /* Check attention identifier*/

  FM0E-3400L(); /* Reset fields to normal intensity*/

  FM0E-3500L(); /* Verify the entered data*/

  FM0E-3600L(); /* Process valid input request*/


end // end FM0E-3000L

// Process change map (M320)
Function FM0E-3000R()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM fm0e-3100R;                /* Obtain the data to display*/

  FM0E-3200R(); /* Format and display the map*/

  FM0E-3300R(); /* Check attention identifier*/

  FM0E-3400R(); /* Reset fields to normal intensity*/

  FM0E-3500R(); /* Verify the entered data*/

  FM0E-3600R(); /* Process valid input request*/


end // end FM0E-3000R

// Obtain data to display
Function FM0E-3100L()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/

  FM0EW00.XXXTSLEN = 1148; /* Temporary storage page length*/


   /* --------------------------------------------------------------*/
   /* Save key in working storage.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
  FM0EW00.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr group*/
  FM0EW00.XCLCD = FM0EM310.XCLCD; /* Color*/

  FM0EM310.FK-DEPT-MAT-DESC = " ";
  FM0EM310.XTM-MAT-THCK-DESC = " ";
  FM0EM310.XCLDESC = " ";

   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FM0EW00.XXXTSPAG = 1; /* Page number to display*/
  end


   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/

  FM0E-3110L(); /* Purge temp storage*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = 0; /* Init total qty*/
  FM0EW00.FM0EM-INV-TOTAL-UOM = " "; /* Init total uom*/

   /* --------------------------------------------------------------*/
   /* Select the material record from DCMPNT.VMATRL01.*/
   /* --------------------------------------------------------------*/

  FM0E-3120L(); /* Select DCMPNT.VMATRL01*/

  FM0EW00.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD;
  FM0EW00.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC;
  FM0EW00.FM0EM-INV-TOTAL-UOM = VMATRL01.XMU-MAT-UOM-CD;


   /* --------------------------------------------------------------*/
   /* Get the thickness desc from XTMTBL.*/
   /* --------------------------------------------------------------*/

  if (VMATRL01.XTM-MAT-THCK-CD in XTMTBL.XTM-MAT-THCK-CD /* If in table*/
   && XTMTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    FM0EW00.XTM-MAT-THCK-DESC = XTMTBL.XTM-MAT-THCK-DESC[sysVar.arrayIndex];
  else

    FM0EW00.XTM-MAT-THCK-DESC = "*********";
  end


   /* --------------------------------------------------------------*/
   /* Get the color desc from XCLTBL.*/
   /* --------------------------------------------------------------*/

  if (FM0EM310.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    FM0EW00.XCLDESC = XCLTBL.XCLDESC[sysVar.arrayIndex];
  else

    FM0EW00.XCLDESC = "************";
  end


   /* --------------------------------------------------------------*/
   /* Get the vendor inventory.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 0; /* Initialize index*/

  FM0E-3130L(); /* Get vendor inventory*/


   /* --------------------------------------------------------------*/
   /* Get the material warehouse inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-3140L(); /* Get mtl whse inventory*/


   /* --------------------------------------------------------------*/
   /* Get the factory inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-3150L(); /* Get factory inventory*/


   /* --------------------------------------------------------------*/
   /* Add any partially formatted last page to temporary storage.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX > 0) /* If partial data exists*/

    FM0E-3160L(); /* Add page to temp storage*/
  end


   /* --------------------------------------------------------------*/
   /* If data was not found, set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If data was not found*/

    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "3100L"; /* Module identification*/
    set FM0EM310.FK-MAT-NBR cursor, bold; /* Highlight*/
    set FM0EM310.XMG-COLR-GRP-CD bold; /* Highlight*/
    set FM0EM310.XCLCD bold; /* Highlight*/
    set FM0EM310.FM0EM-INV-MO bold; /* Highlight*/
  end


   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-REQUEST-DATA-SW = "N";
  FM0EW00.FM0EW-FMAT-MAP-SW = "Y";


end // end FM0E-3100L

// Purge any temporary storage
Function FM0E-3110L()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FM0EW01 empty; /* m310 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FM0EW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3110L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M310"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3110L

// Select DCMPNT.VMATRL01
Function FM0E-3120L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATRL01.FK-VEND-CD = "**";
      VMATRL01.FK-DEPT-MAT-DESC = "************";
      VMATRL01.XMU-MAT-UOM-CD = "**";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3120L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3120L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3120L

// Get vendor inventory
Function FM0E-3130L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the vendor inventory table DCMPNT.VVNINV01.*/
   /* Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-3131L(); /* Declare DCMPNT.VVNINV01 cursor*/


  FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-3132L(); /* Fetch DCMPNT.VVNINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format vendor inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VVNINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-3133L(); /* Save record in display storage*/

    FM0E-3132L(); /* Fetch DCMPNT.VVNINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VVNINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-3134L(); /* Close DCMPNT.VVNINV01*/


end // end FM0E-3130L

// Declare DCMPNT.VVNINV01
Function FM0E-3131L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
  VVNINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM310.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6800" ("S2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3131L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3131L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3131L

// Fetch DCMPNT.VVNINV01
Function FM0E-3132L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6800" ("N2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3132L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3132L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3132L

// Save data in display storage
Function FM0E-3133L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM310.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM310.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = VVNINV01.FK-VEND-CD; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VVNINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VVNINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VVNINV01.FK-COPY-INV-FL;
  if (VVNINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VVNINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VVNINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VVNINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VVNINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-3133L

// Close DCMPNT.VVNINV01
Function FM0E-3134L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6800" ("C2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3134L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3134L CLOSE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3134L

// Get mtl whse inventory
Function FM0E-3140L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the mtl whse inventory table*/
   /* DCMPNT.VWHINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-3141L(); /* Declare DCMPNT.VWHINV01 cursor*/


  FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-3142L(); /* Fetch DCMPNT.VWHINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format mtl whse inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VWHINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-3145L(); /* Select DCMPNT.VMATWH01*/

    FM0E-3143L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-3160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-3142L(); /* Fetch DCMPNT.VWHINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VWHINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-3144L(); /* Close DCMPNT.VWHINV01*/


end // end FM0E-3140L

// Declare DCMPNT.VWHINV01
Function FM0E-3141L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM310.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6810" ("S2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3141L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3141L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3141L

// Fetch DCMPNT.VWHINV01
Function FM0E-3142L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6810" ("N2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3142L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3142L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3142L

// Save data in display storage
Function FM0E-3143L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM310.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM310.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = VWHINV01.FK-MAT-WHSE-CD; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = VMATWH01.FK-MAT-WHSE-ABRV; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VWHINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VWHINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VWHINV01.FK-COPY-INV-FL;
  if (VWHINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VWHINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VWHINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VWHINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VWHINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-3143L

// Close DCMPNT.VWHINV01
Function FM0E-3144L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6810" ("C2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3144L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3144L CLOSE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3144L

// Select DCMPNT.VMATWH01
Function FM0E-3145L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATWH01 empty;

  VMATWH01.FK-MAT-WHSE-CD = VWHINV01.FK-MAT-WHSE-CD;


  try
    call "IO6780" ("S ", SQLCA, VMATWH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATWH01.FK-MAT-WHSE-ABRV = "***************"; /* Whse abrv*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3145L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3145L SELECT DCMPNT.VMATWH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATWH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATWH01.VMATWH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3145L

// Get factory inventory
Function FM0E-3150L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the factory inventory table*/
   /* DCMPNT.VFYINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-3151L(); /* Declare DCMPNT.VFYINV01 cursor*/


  FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-3152L(); /* Fetch DCMPNT.VFYINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format factory inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VFYINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-3153L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-3160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-3152L(); /* Fetch DCMPNT.VFYINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VFYINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-3154L(); /* Close DCMPNT.VFYINV01*/


end // end FM0E-3150L

// Declare DCMPNT.VFYINV01
Function FM0E-3151L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM310.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6790" ("S2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3151L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3151L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3151L

// Fetch DCMPNT.VFYINV01
Function FM0E-3152L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6790" ("N2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3152L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3152L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3152L

// Save data in display storage
Function FM0E-3153L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM310.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM310.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = VFYINV01.FY1FCTYC; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VFYINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VFYINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VFYINV01.FK-COPY-INV-FL;
  if (VFYINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VFYINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VFYINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VFYINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VFYINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-3153L

// Close DCMPNT.VFYINV01
Function FM0E-3154L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6790" ("C2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3154L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3154L CLOSE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3154L

// Add record to temporary store
Function FM0E-3160L()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FM0EW01 empty; /* m310 display storage*/

    FM0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3160L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M310"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3160L

// Format and converse M310
Function FM0E-3200L()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-3210L(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM310.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM310.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM310.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM310 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM310.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM310.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM310.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM310.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM310.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM310.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM310.XXXTSPAG invisible, skip;
    set FM0EM310.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM310.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM310.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM310.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM310.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end

    set FM0EM310.FM0EM-INV-TOTAL-QTY invisible, skip;
    set FM0EM310.FM0EM-INV-TOTAL-UOM invisible, skip;
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM310.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM310.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM310.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM310.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM310.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM310.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* successful update*/

    if (FM0EW00.TA5TSQIX > 0) /* If pages formatted*/
      set FM0EM310.FM0EM-SELECT[1] cursor;
    else
      set FM0EM310.FK-MAT-NBR cursor;
    end
  end


  converse FM0EM310 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM310.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM310.CAITEM; /* Application data*/


end // end FM0E-3200L

// Format and converse M320
Function FM0E-3200R()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-3210R(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM320.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM320.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM320.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM320 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM320.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM320.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM320.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM320.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM320.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM320.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM320.XXXTSPAG invisible, skip;
    set FM0EM320.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM320.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM320.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM320.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM320.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM320.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM320.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* Update successful*/

    if (FM0EW00.TA5TSQIX > 0) /* If data was formatted*/
      set FM0EM320.FM0EM-SELECT[1] cursor;
    else
      set FM0EM320.FK-MAT-NBR cursor;
    end
  end


  converse FM0EM320 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM320.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM320.CAITEM; /* Application data*/


end // end FM0E-3200R

// Format the data to display
Function FM0E-3210L()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM310 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-3211L(); /* Obtain temp storage page*/

       /* note:  fm0ew01 will always = temporary storage (will not change)*/
                                  /* fm0ew02 will originally = temporary*/
                                   /* storage, but may change*/
              /* as users scroll left/right*/

      FM0EW02.FM0EW02-GROUP = FM0EW01.FM0EW01-GROUP; /* Save group*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM310.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM310.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM310.XCLCD = FM0EW00.XCLCD;
    FM0EM310.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM310.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM310.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM310.XCLCD = FM0EW01.XCLCD;
    FM0EM310.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM310.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM310.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM310.FM0EM-SELECT[FM0EW-IDX] = FM0EW02.FM0EM-SELECT[FM0EW-IDX]; /* Select*/
    FM0EM310.FK-VEND-CD[FM0EW-IDX] = FM0EW02.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW02.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM310.FK-MAT-WHSE-ABRV[FM0EW-IDX] = FM0EW02.FK-MAT-WHSE-ABRV[FM0EW-IDX]; /* Mtl whse desc*/
    FM0EM310.FY1FCTYC[FM0EW-IDX] = FM0EW02.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX]; /* Mtl inventory qty*/
    FM0EM310.XMU-MAT-UOM-CD[FM0EW-IDX] = FM0EW02.XMU-MAT-UOM-CD[FM0EW-IDX]; /* Unit of measure*/
    FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EW02.FK-NIKE-RSP-FL[FM0EW-IDX]; /* Nike responsibility flag*/
    FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] = FM0EW02.FK-COPY-INV-FL[FM0EW-IDX]; /* Copy inventory flag*/
    FM0EM310.FM0EM-COMMENT-FL[FM0EW-IDX] = FM0EW02.FM0EM-COMMENT-FL[FM0EW-IDX]; /* Comment flag*/

    FM0EM310.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY; /* Total inventory quantity*/
    FM0EM310.FM0EM-INV-TOTAL-UOM = FM0EW00.FM0EM-INV-TOTAL-UOM; /* Unit of measure*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-3210L

// Format the data to display
Function FM0E-3210R()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM320 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-3211R(); /* Obtain temp storage page*/

       /* note:  fm0ew01 will always = temporary storage*/
              /* fm0ew02 will originally = temporary storage, but*/
              /* can be changed as users scroll left/right.*/

      FM0EW02.FM0EW02-GROUP = FM0EW01.FM0EW01-GROUP; /* save grp*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM320.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM320.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM320.XCLCD = FM0EW00.XCLCD;
    FM0EM320.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM320.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM320.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM320.XCLCD = FM0EW01.XCLCD;
    FM0EM320.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM320.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM320.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM320.FM0EM-SELECT[FM0EW-IDX] = FM0EW02.FM0EM-SELECT[FM0EW-IDX]; /* Select*/
    FM0EM320.FK-VEND-CD[FM0EW-IDX] = FM0EW02.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW02.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM320.FY1FCTYC[FM0EW-IDX] = FM0EW02.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Mtl inventory comment*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-3210R

// Read page from temp storage
Function FM0E-3211L()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3211L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M310"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3211L

// Read page from temp storage
Function FM0E-3211R()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "3211R"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FKWREC.XXX-MOD-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M320"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3211R

// Check attention identifier
Function FM0E-3300L()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM310.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM310.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM310.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM310.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "C   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM310.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM310.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM310.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM310.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM310.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM310.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM310.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM310.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM310.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "3300L"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM310"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM310.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM310.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM310.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM310.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM310.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM310.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "3300L"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-3300L

// Check attention identifier
Function FM0E-3300R()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM320.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM320.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM320.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM320.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "C   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM320.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM320.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM320.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM320.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM320.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM320.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM320.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM320.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM320.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "3300R"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM320"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM320.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM320.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM320.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM320.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM320.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM320.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM320.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "3300R"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-3300R

// Reset Highlighted fields
Function FM0E-3400L()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM310.XXXTSPAG initialAttributes;
  set FM0EM310.TA5TSQIX initialAttributes;
  set FM0EM310.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM310.FK-MAT-NBR initialAttributes;
  set FM0EM310.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM310.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM310.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM310.XCLCD initialAttributes;
  set FM0EM310.XCLDESC initialAttributes;
  set FM0EM310.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM310.FM0EM-SELECT[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-MAT-WHSE-ABRV[FM0EW-IDX] initialAttributes;
    set FM0EM310.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX] initialAttributes;
    set FM0EM310.XMU-MAT-UOM-CD[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX] initialAttributes;
    set FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] initialAttributes;
    set FM0EM310.FM0EM-COMMENT-FL[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM310.FM0EM-INV-TOTAL-QTY initialAttributes;
  set FM0EM310.FM0EM-INV-TOTAL-UOM initialAttributes;

  set FM0EM310.CATOAP initialAttributes;
  set FM0EM310.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM310.XCLCD != "?" /* XCL list not requested*/
   && FM0EM310.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM310.XCLCD == "?" /* XCL list requested*/
   || FM0EM310.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "3400L"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM310.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM310.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM310.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM310.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM310.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM310.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM310.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM310.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "3400L"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-3400L

// Reset Highlighted fields
Function FM0E-3400R()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM320.XXXTSPAG initialAttributes;
  set FM0EM320.TA5TSQIX initialAttributes;
  set FM0EM320.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM320.FK-MAT-NBR initialAttributes;
  set FM0EM320.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM320.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM320.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM320.XCLCD initialAttributes;
  set FM0EM320.XCLDESC initialAttributes;
  set FM0EM320.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM320.FM0EM-SELECT[FM0EW-IDX] initialAttributes;
    set FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM320.CATOAP initialAttributes;
  set FM0EM320.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM320.XCLCD != "?" /* XCL list not requested*/
   && FM0EM320.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM320.XCLCD == "?" /* XCL list requested*/
   || FM0EM320.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "3400R"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM320.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM320.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM320.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM320.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM320.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM320.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM320.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM320.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "3400R"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-3400R

// Verify entered fields (m310)
Function FM0E-3500L()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM310.CAITEM > " ") /* Application data was entered*/

    set FM0EM310.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3500L"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-3510L(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM310.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM310.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM310.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM310.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-3520L(); /* Verify key*/
  else

    FM0E-3530L(); /* Verify detail*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FM0E-3500L

// Verify entered fields (m320)
Function FM0E-3500R()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM320.CAITEM > " ") /* Application data was entered*/

    set FM0EM320.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3500R"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-3510R(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM320.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM320.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM320.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM320.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-3520R(); /* Verify key*/
  else

    FM0E-3530R(); /* Verify detail*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FM0E-3500R

// Verify scroll request
Function FM0E-3510L()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "3510L"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "3510L"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


   /* ------------------------------------------------------------*/
   /* If left requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    FKWREC.XXX-MOD-ID = "3510L"; /* Module identification*/
    converseLib.validationFailed(74); /* No more pages to left to display*/

  end


   /* ------------------------------------------------------------*/
   /* If right request, ensure data exists.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FM0EW00.TA5TSQIX <= 0) /* No data*/

      FKWREC.XXX-MOD-ID = "3510L"; /* Module identification*/
      converseLib.validationFailed(75); /* No more pages to right to display*/
    end
  end


end // end FM0E-3510L

// Verify scroll request
Function FM0E-3510R()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "3510R"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "3510R"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If right requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    FKWREC.XXX-MOD-ID = "3510R"; /* Module identification*/
    converseLib.validationFailed(75); /* No more pages to right to display*/

  end


end // end FM0E-3510R

// Verify key data
Function FM0E-3520L()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM310.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520L"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM310.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM310.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520L"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM310.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM310.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520L"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-3521L(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-3522L(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-3520L

// Verify key data
Function FM0E-3520R()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM320.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520R"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM320.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM320.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520R"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM320.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM320.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "3520R"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-3521R(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-3522R(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-3520R

// Select DCMPNT.VMATRL01
Function FM0E-3521L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM310.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "3521L"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3521L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3521L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3521L

// Select DCMPNT.VMATRL01
Function FM0E-3521R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM320.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM320.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "3521R"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3521R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3521R SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3521R

// Select DCMPNT.VMCOLR01
Function FM0E-3522L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM310.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM310.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM310.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM310.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "3522L"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3522L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3522L SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3522L

// Select DCMPNT.VMCOLR01
Function FM0E-3522R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM320.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM320.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM320.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM320.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM320.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM320.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "3522R"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "3522R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3522R SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3522R

// Verify detail data
Function FM0E-3530L()
   /* ---------------------------------------------------------------*/
   /* Verify each detail line.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM310.FK-VEND-CD[FM0EW-IDX] > " "     /* If vendor entered*/
     || FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] > " " /* or mtl whse entered*/
     || FM0EM310.FY1FCTYC[FM0EW-IDX] > " ")      /* or factory entered*/

      /* ---------------------------------------------------------------*/
      /* Verify month-end copy flag.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] == "Y" /* If yes*/
       || FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] == "N") /* or no*/
         /* next sentence*/
      else

        set FM0EM310.FK-COPY-INV-FL[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "3530L"; /* Module identification*/
        converseLib.validationFailed(34); /* Value must be "y" or "n"*/
      end


      /* ---------------------------------------------------------------*/
      /* Verify select field.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM310.FM0EM-SELECT[FM0EW-IDX] == " " /* If blank*/
       || FM0EM310.FM0EM-SELECT[FM0EW-IDX] == "S") /* or selected*/
         /* next sentence*/
      else

        set FM0EM310.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "3530L"; /* Module identification*/
        converseLib.validationFailed(13); /* Only S may be used to select a line*/
      end


      /* Verify data changed if row was selected*/

      if (FM0EM310.FM0EM-SELECT[FM0EW-IDX] == "S") /* If selected*/

        if (FM0EM310.FK-COPY-INV-FL[FM0EW-IDX]
         == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy inv not changed*/
         && FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* Qty not changed*/
         && FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

          set FM0EM310.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "3530L"; /* Module identification*/
          converseLib.validationFailed(25); /* No changes have been made to this row*/
        end
      end


      /* Verify row selected if data changed*/

      if (FM0EM310.FM0EM-SELECT[FM0EW-IDX] == " ") /* If not selected*/

        if (FM0EM310.FK-COPY-INV-FL[FM0EW-IDX]
         == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy inv not changed*/
         && FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* Qty not changed*/
         && FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

           /* Next sentence*/
        else

          set FM0EM310.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "3530L"; /* Module identification*/
          converseLib.validationFailed(24); /* Enter S to change a row of data*/
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end
end // end FM0E-3530L

// Verify detail data
Function FM0E-3530R()
   /* ---------------------------------------------------------------*/
   /* Verify each detail line.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM320.FK-VEND-CD[FM0EW-IDX] > " "     /* If vendor entered*/
     || FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] > " " /* or mtl whse entered*/
     || FM0EM320.FY1FCTYC[FM0EW-IDX] > " ")      /* or factory entered*/


      /* ---------------------------------------------------------------*/
      /* Verify select field.*/
      /* ---------------------------------------------------------------*/

      if (FM0EM320.FM0EM-SELECT[FM0EW-IDX] == " " /* If blank*/
       || FM0EM320.FM0EM-SELECT[FM0EW-IDX] == "S") /* or selected*/
         /* next sentence*/
      else

        set FM0EM320.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "3530R"; /* Module identification*/
        converseLib.validationFailed(13); /* Only S may be used to select a line*/
      end


      /* Verify data changed if row was selected*/

      if (FM0EM320.FM0EM-SELECT[FM0EW-IDX] == "S") /* If selected*/

        if (FM0EW02.FK-COPY-INV-FL[FM0EW-IDX] 
         == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy inv not changed*/
         && FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX] 
         == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* Qty not changed*/
         && FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

          set FM0EM320.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "3530R"; /* Module identification*/
          converseLib.validationFailed(25); /* No changes have been made to this row*/
        end
      end


      /* Verify row selected if data changed*/

      if (FM0EM320.FM0EM-SELECT[FM0EW-IDX] == " ") /* If not selected*/

        if (FM0EW02.FK-COPY-INV-FL[FM0EW-IDX] 
         == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy inv not changed*/
         && FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX] 
         == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* Qty not changed*/
         && FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX]
         == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

           /* Next sentence*/
        else

          set FM0EM320.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
          FKWREC.XXX-MOD-ID = "3530R"; /* Module identification*/
          converseLib.validationFailed(24); /* Enter S to change a row of data*/
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end
end // end FM0E-3530R

// Process valid request (m310)
Function FM0E-3600L()
   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM310.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM310.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM310.XCLCD != FM0EW01.XCLCD
   || FM0EM310.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "R"; /* Display M320*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";

     /* save data to fm0ew02 - this will keep track of changes to this*/
     /* screen as we scroll to the next screen.*/

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each row*/

      FM0EW02.FM0EM-SELECT[FM0EW-IDX] = FM0EM310.FM0EM-SELECT[FM0EW-IDX]; /* Save select*/
      FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX]; /* Save qty*/
      FM0EW02.FK-COPY-INV-FL[FM0EW-IDX] = FM0EM310.FK-COPY-INV-FL[FM0EW-IDX]; /* Save copy inv flag*/

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    return;
  end


   /* ------------------------------------------------------------*/
   /* Perform the update process.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/

  FM0EW00.FM0EW-UPDT-PERFORMED-SW = "N"; /* No update yet*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all rows*/

    if (FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX]
     == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* If qty not changed*/
     && FM0EM310.FK-COPY-INV-FL[FM0EW-IDX]
     == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy flag not changed*/
     && FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX]
     == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

       /* next sentence - no update to perform*/
    else

      if (FM0EM310.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor record*/
        FM0E-3610L(); /* Update DCMPNT.VVNINV01*/
      else

        if (FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If whse record*/
          FM0E-3620L(); /* Update DCMPNT.VWHINV01*/
        else

          if (FM0EM310.FY1FCTYC[FM0EW-IDX] > " ") /* If fcty record*/
            FM0E-3630L(); /* Update DCMPNT.VFYINV01*/
          end
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* If update was performed, set message*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-UPDT-PERFORMED-SW == "Y") /* If update performed*/

    FKWREC.XXXMSGNO = 1; /* Update performed*/
    FKWREC.XXX-MOD-ID = "3600L"; /* Module identification*/
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    return;
  end


end // end FM0E-3600L

// Process valid request (m320)
Function FM0E-3600R()
   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM320.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM320.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM320.XCLCD != FM0EW01.XCLCD
   || FM0EM320.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    FM0EM310.FK-MAT-NBR = FM0EM320.FK-MAT-NBR;
    FM0EM310.XMG-COLR-GRP-CD = FM0EM320.XMG-COLR-GRP-CD;
    FM0EM310.XCLCD = FM0EM320.XCLCD;
    FM0EM310.FM0EM-INV-MO = FM0EM320.FM0EM-INV-MO;

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf10) /* Pf10 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";

     /* save data to fm0ew02 - this will keep track of changes to this*/
     /* screen as we scroll to the next screen.*/

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each row*/

      FM0EW02.FM0EM-SELECT[FM0EW-IDX] = FM0EM320.FM0EM-SELECT[FM0EW-IDX]; /* Save select*/
      FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Save comment*/

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    return;
  end


   /* ------------------------------------------------------------*/
   /* Perform the update process.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/

  FM0EW00.FM0EW-UPDT-PERFORMED-SW = "N"; /* No update yet*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all rows*/

    if (FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX] 
     == FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] /* If qty not changed*/
     && FM0EW02.FK-COPY-INV-FL[FM0EW-IDX] 
     == FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] /* Copy flag not changed*/
     && FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX]
     == FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]) /* Comment not changed*/

       /* next sentence - no update to perform*/
    else

      if (FM0EM320.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor record*/
        FM0E-3610R(); /* Update DCMPNT.VVNINV01*/
      else

        if (FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If whse record*/
          FM0E-3620R(); /* Update DCMPNT.VWHINV01*/
        else

          if (FM0EM320.FY1FCTYC[FM0EW-IDX] > " ") /* If fcty record*/
            FM0E-3630R(); /* Update DCMPNT.VFYINV01*/
          end
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* If update was performed, set message*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-UPDT-PERFORMED-SW == "Y") /* If update performed*/

    FKWREC.XXXMSGNO = 1; /* Update performed*/
    FKWREC.XXX-MOD-ID = "3600R"; /* Module identification*/
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
    return;
  end


end // end FM0E-3600R

// Update DCMPNT.VVNINV01
Function FM0E-3610L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM310.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR;
  VVNINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD;
  VVNINV01.XCLCD = FM0EM310.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VVNINV01.FK-MAT-INV-QTY = FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX];
  VVNINV01.FK-NIKE-RSP-FL = FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX];
  VVNINV01.FK-COPY-INV-FL = FM0EM310.FK-COPY-INV-FL[FM0EW-IDX];
  VVNINV01.FK-MAT-INV-COMNT = FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX];
  VVNINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VVNINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VVNINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6800" ("U ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3610L"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3610L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3610L UPDATE DCMPNT.VVNINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3610L

// Update DCMPNT.VVNINV01
Function FM0E-3610R()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM320.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM320.FK-MAT-NBR;
  VVNINV01.XMG-COLR-GRP-CD = FM0EM320.XMG-COLR-GRP-CD;
  VVNINV01.XCLCD = FM0EM320.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VVNINV01.FK-MAT-INV-QTY = FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX];
  VVNINV01.FK-NIKE-RSP-FL = FM0EW02.FK-NIKE-RSP-FL[FM0EW-IDX];
  VVNINV01.FK-COPY-INV-FL = FM0EW02.FK-COPY-INV-FL[FM0EW-IDX];
  VVNINV01.FK-MAT-INV-COMNT = FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX];
  VVNINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VVNINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VVNINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VVNINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6800" ("U ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3610R"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3610R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3610R UPDATE DCMPNT.VVNINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3610R

// Update DCMPNT.VWHINV01
Function FM0E-3620L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM310.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR;
  VWHINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD;
  VWHINV01.XCLCD = FM0EM310.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VWHINV01.FK-MAT-INV-QTY = FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX];
  VWHINV01.FK-NIKE-RSP-FL = FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX];
  VWHINV01.FK-COPY-INV-FL = FM0EM310.FK-COPY-INV-FL[FM0EW-IDX];
  VWHINV01.FK-MAT-INV-COMNT = FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX];
  VWHINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VWHINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VWHINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6810" ("U ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3620L"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3620L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3620L UPDATE DCMPNT.VWHINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3620L

// Update DCMPNT.VWHINV01
Function FM0E-3620R()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM320.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM320.FK-MAT-NBR;
  VWHINV01.XMG-COLR-GRP-CD = FM0EM320.XMG-COLR-GRP-CD;
  VWHINV01.XCLCD = FM0EM320.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VWHINV01.FK-MAT-INV-QTY = FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX];
  VWHINV01.FK-NIKE-RSP-FL = FM0EW02.FK-NIKE-RSP-FL[FM0EW-IDX];
  VWHINV01.FK-COPY-INV-FL = FM0EW02.FK-COPY-INV-FL[FM0EW-IDX];
  VWHINV01.FK-MAT-INV-COMNT = FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX];
  VWHINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VWHINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VWHINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VWHINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6810" ("U ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3620R"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3620R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3620R UPDATE DCMPNT.VWHINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3620R

// Update DCMPNT.VFYINV01
Function FM0E-3630L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM310.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM310.FK-MAT-NBR;
  VFYINV01.XMG-COLR-GRP-CD = FM0EM310.XMG-COLR-GRP-CD;
  VFYINV01.XCLCD = FM0EM310.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM310.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VFYINV01.FK-MAT-INV-QTY = FM0EM310.FK-MAT-INV-QTY[FM0EW-IDX];
  VFYINV01.FK-NIKE-RSP-FL = FM0EM310.FK-NIKE-RSP-FL[FM0EW-IDX];
  VFYINV01.FK-COPY-INV-FL = FM0EM310.FK-COPY-INV-FL[FM0EW-IDX];
  VFYINV01.FK-MAT-INV-COMNT = FM0EW02.FK-MAT-INV-COMNT[FM0EW-IDX];
  VFYINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VFYINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VFYINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6790" ("U ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3630L"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3630L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3630L UPDATE DCMPNT.VFYINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3630L

// Update DCMPNT.VFYINV01
Function FM0E-3630R()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM320.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM320.FK-MAT-NBR;
  VFYINV01.XMG-COLR-GRP-CD = FM0EM320.XMG-COLR-GRP-CD;
  VFYINV01.XCLCD = FM0EM320.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM320.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VFYINV01.FK-MAT-INV-QTY = FM0EW02.FK-MAT-INV-QTY[FM0EW-IDX];
  VFYINV01.FK-NIKE-RSP-FL = FM0EW02.FK-NIKE-RSP-FL[FM0EW-IDX];
  VFYINV01.FK-COPY-INV-FL = FM0EW02.FK-COPY-INV-FL[FM0EW-IDX];
  VFYINV01.FK-MAT-INV-COMNT = FM0EM320.FK-MAT-INV-COMNT[FM0EW-IDX];
  VFYINV01.ZZZSDT = FM0EW01.ZZZSDT[FM0EW-IDX];
  VFYINV01.ZZZCHGCT = FM0EW01.ZZZCHGCT[FM0EW-IDX];

  VFYINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VFYINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO6790" ("U ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FKWREC.XXXMSGNO = 12; /* Data updated by another*/
      FKWREC.XXX-MOD-ID = "3630R"; /* Module identification*/
      FM0EW00.FM0EW-REQUEST-DATA-SW = "Y"; /* Re-obtain the data*/
      FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M310*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "3630R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "3630R UPDATE DCMPNT.VFYINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-3630R

// Process change map (M410)
Function FM0E-4000L()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FM0E-4100L(); /* Obtain the data to display*/

  FM0E-4200L(); /* Format and display the map*/

  FM0E-4300L(); /* Check attention identifier*/

  FM0E-4400L(); /* Reset fields to normal intensity*/

  FM0E-4500L(); /* Verify the entered data*/

  FM0E-4600L(); /* Process valid input request*/


end // end FM0E-4000L

// Process delete map (m420)
Function FM0E-4000R()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM fm0e-4100R;                /* Obtain the data to display*/

  FM0E-4200R(); /* Format and display the map*/

  FM0E-4300R(); /* Check attention identifier*/

  FM0E-4400R(); /* Reset fields to normal intensity*/

  FM0E-4500R(); /* Verify the entered data*/

  FM0E-4600R(); /* Process valid input request*/


end // end FM0E-4000R

// Obtain data to display
Function FM0E-4100L()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/

  FM0EW00.XXXTSLEN = 1148; /* Temporary storage page length*/


   /* --------------------------------------------------------------*/
   /* Save key in working storage.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
  FM0EW00.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr group*/
  FM0EW00.XCLCD = FM0EM410.XCLCD; /* Color*/

  FM0EM410.FK-DEPT-MAT-DESC = " ";
  FM0EM410.XTM-MAT-THCK-DESC = " ";
  FM0EM410.XCLDESC = " ";

   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FM0EW00.XXXTSPAG = 1; /* Page number to display*/
  end


   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/

  FM0E-4110L(); /* Purge temp storage*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = 0; /* Init total qty*/
  FM0EW00.FM0EM-INV-TOTAL-UOM = " "; /* Init total uom*/

   /* --------------------------------------------------------------*/
   /* Select the material record from DCMPNT.VMATRL01.*/
   /* --------------------------------------------------------------*/

  FM0E-4120L(); /* Select DCMPNT.VMATRL01*/

  FM0EW00.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD;
  FM0EW00.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC;
  FM0EW00.FM0EM-INV-TOTAL-UOM = VMATRL01.XMU-MAT-UOM-CD;


   /* --------------------------------------------------------------*/
   /* Get the thickness desc from XTMTBL.*/
   /* --------------------------------------------------------------*/

  if (VMATRL01.XTM-MAT-THCK-CD in XTMTBL.XTM-MAT-THCK-CD /* If in table*/
   && XTMTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    FM0EW00.XTM-MAT-THCK-DESC = XTMTBL.XTM-MAT-THCK-DESC[sysVar.arrayIndex];
  else

    FM0EW00.XTM-MAT-THCK-DESC = "*********";
  end


   /* --------------------------------------------------------------*/
   /* Get the color desc from XCLTBL.*/
   /* --------------------------------------------------------------*/

  if (FM0EM410.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    FM0EW00.XCLDESC = XCLTBL.XCLDESC[sysVar.arrayIndex];
  else

    FM0EW00.XCLDESC = "************";
  end


   /* --------------------------------------------------------------*/
   /* Get the vendor inventory.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 0; /* Initialize index*/

  FM0E-4130L(); /* Get vendor inventory*/


   /* --------------------------------------------------------------*/
   /* Get the material warehouse inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-4140L(); /* Get mtl whse inventory*/


   /* --------------------------------------------------------------*/
   /* Get the factory inventory.*/
   /* --------------------------------------------------------------*/

  FM0E-4150L(); /* Get factory inventory*/


   /* --------------------------------------------------------------*/
   /* Add any partially formatted last page to temporary storage.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX > 0) /* If partial data exists*/

    FM0E-4160L(); /* Add page to temp storage*/
  end


   /* --------------------------------------------------------------*/
   /* If data was not found, set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If data was not found*/

    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "4100L"; /* Module identification*/
    set FM0EM410.FK-MAT-NBR cursor, bold; /* Highlight*/
    set FM0EM410.XMG-COLR-GRP-CD bold; /* Highlight*/
    set FM0EM410.XCLCD bold; /* Highlight*/
    set FM0EM410.FM0EM-INV-MO bold; /* Highlight*/
  end


   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-REQUEST-DATA-SW = "N";
  FM0EW00.FM0EW-FMAT-MAP-SW = "Y";


end // end FM0E-4100L

// Purge any temporary storage
Function FM0E-4110L()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FM0EW01 empty; /* m410 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FM0EW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4110L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M410"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4110L

// Select DCMPNT.VMATRL01
Function FM0E-4120L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATRL01.FK-VEND-CD = "**";
      VMATRL01.FK-DEPT-MAT-DESC = "************";
      VMATRL01.XMU-MAT-UOM-CD = "**";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4120L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4120L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4120L

// Get vendor inventory
Function FM0E-4130L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the vendor inventory table DCMPNT.VVNINV01.*/
   /* Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-4131L(); /* Declare DCMPNT.VVNINV01 cursor*/


  FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-4132L(); /* Fetch DCMPNT.VVNINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format vendor inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VVNINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-4133L(); /* Save record in display storage*/

    FM0E-4132L(); /* Fetch DCMPNT.VVNINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VVNINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-4134L(); /* Close DCMPNT.VVNINV01*/


end // end FM0E-4130L

// Declare DCMPNT.VVNINV01
Function FM0E-4131L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
  VVNINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
  VVNINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr group*/
  VVNINV01.XCLCD = FM0EM410.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6800" ("S2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4131L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4131L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4131L

// Fetch DCMPNT.VVNINV01
Function FM0E-4132L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6800" ("N2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VVNINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4132L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4132L DECLARE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4132L

// Save data in display storage
Function FM0E-4133L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM410.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM410.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = VVNINV01.FK-VEND-CD; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VVNINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VVNINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VVNINV01.FK-COPY-INV-FL;
  if (VVNINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VVNINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VVNINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VVNINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VVNINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-4133L

// Close DCMPNT.VVNINV01
Function FM0E-4134L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6800" ("C2", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4134L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4134L CLOSE DCMPNT.VVNINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4134L

// Get mtl whse inventory
Function FM0E-4140L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the mtl whse inventory table*/
   /* DCMPNT.VWHINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-4141L(); /* Declare DCMPNT.VWHINV01 cursor*/


  FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-4142L(); /* Fetch DCMPNT.VWHINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format mtl whse inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VWHINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-4145L(); /* Select DCMPNT.VMATWH01*/

    FM0E-4143L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-4160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-4142L(); /* Fetch DCMPNT.VWHINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VWHINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-4144L(); /* Close DCMPNT.VWHINV01*/


end // end FM0E-4140L

// Declare DCMPNT.VWHINV01
Function FM0E-4141L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
  VWHINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr group*/
  VWHINV01.XCLCD = FM0EM410.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6810" ("S2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4141L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4141L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4141L

// Fetch DCMPNT.VWHINV01
Function FM0E-4142L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6810" ("N2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VWHINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4142L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4142L DECLARE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4142L

// Save data in display storage
Function FM0E-4143L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM410.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM410.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = VWHINV01.FK-MAT-WHSE-CD; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = VMATWH01.FK-MAT-WHSE-ABRV; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = " "; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VWHINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VWHINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VWHINV01.FK-COPY-INV-FL;
  if (VWHINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VWHINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VWHINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VWHINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VWHINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-4143L

// Close DCMPNT.VWHINV01
Function FM0E-4144L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6810" ("C2", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4144L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4144L CLOSE DCMPNT.VWHINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4144L

// Select DCMPNT.VMATWH01
Function FM0E-4145L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATWH01 empty;

  VMATWH01.FK-MAT-WHSE-CD = VWHINV01.FK-MAT-WHSE-CD;


  try
    call "IO6780" ("S ", SQLCA, VMATWH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMATWH01.FK-MAT-WHSE-ABRV = "***************"; /* Whse abrv*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4145L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4145L SELECT DCMPNT.VMATWH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATWH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATWH01.VMATWH01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4145L

// Get factory inventory
Function FM0E-4150L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the factory inventory table*/
   /* DCMPNT.VFYINV01.  Fetch the first record.*/
   /* ------------------------------------------------------------*/

  FM0E-4151L(); /* Declare DCMPNT.VFYINV01 cursor*/


  FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "N"; /* Init end of csr switch*/

  FM0E-4152L(); /* Fetch DCMPNT.VFYINV01 record*/


   /* ------------------------------------------------------------*/
   /* Format factory inventory records to display storage until*/
   /* end of cursor is found.*/
   /* ------------------------------------------------------------*/

  while (FM0EW00.FM0EW-END-VFYINV01-CSR-SW == "N") /* While not end of csr*/

    FM0E-4153L(); /* Save record in display storage*/

    if (FM0EW00.FM0EW-IDX == FM0EW00.FM0EW-NBR-MAP-ROWS) /* If page full*/

      FM0E-4160L(); /* Add page to temp storage*/
      FM0EW00.FM0EW-IDX = 0; /* Re-initialize index*/
    end

    FM0E-4152L(); /* Fetch DCMPNT.VFYINV01 record*/
  end


   /* ------------------------------------------------------------*/
   /* Close the DCMPNT.VFYINV01 cursor.*/
   /* ------------------------------------------------------------*/

  FM0E-4154L(); /* Close DCMPNT.VFYINV01*/


end // end FM0E-4150L

// Declare DCMPNT.VFYINV01
Function FM0E-4151L()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
  VFYINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr group*/
  VFYINV01.XCLCD = FM0EM410.XCLCD; /* Color*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;


  try
    call "IO6790" ("S2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4151L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4151L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4151L

// Fetch DCMPNT.VFYINV01
Function FM0E-4152L()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6790" ("N2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      FM0EW00.FM0EW-END-VFYINV01-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4152L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4152L DECLARE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4152L

// Save data in display storage
Function FM0E-4153L()
   /* --------------------------------------------------------------*/
   /* Increment the map index.*/
   /* --------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment line index*/


   /* --------------------------------------------------------------*/
   /* Format the header if this is the first record on the page.*/
   /* --------------------------------------------------------------*/

  if (FM0EW00.FM0EW-IDX == 1) /* If first record on page*/

    FM0EW01.FM0EM-HDR-VEND-CD = VMATRL01.FK-VEND-CD; /* Vendor*/
    FM0EW01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material*/
    FM0EW01.FK-DEPT-MAT-DESC = VMATRL01.FK-DEPT-MAT-DESC; /* Mtl desc*/
    FM0EW01.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC; /* Thck*/
    FM0EW01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr grp*/
    FM0EW01.XCLCD = FM0EM410.XCLCD; /* Color*/
    FM0EW01.XCLDESC = FM0EW00.XCLDESC; /* Color desc*/
    FM0EW01.FM0EM-INV-MO = FM0EM410.FM0EM-INV-MO; /* Month*/
  end


   /* --------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------*/


  FM0EW01.FM0EM-SELECT[FM0EW-IDX] = " "; /* Select*/
  FM0EW01.FK-VEND-CD[FM0EW-IDX] = " "; /* Vendor*/
  FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX] = " "; /* Mtl whse*/
  FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX] = " "; /* Mtl whse abrv*/
  FM0EW01.FY1FCTYC[FM0EW-IDX] = VFYINV01.FY1FCTYC; /* Factory*/
  FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX] = VFYINV01.FK-MAT-INV-QTY; /* Inv*/
  FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX] = VMATRL01.XMU-MAT-UOM-CD; /* UOM*/
  FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX] = VFYINV01.FK-NIKE-RSP-FL;
  FM0EW01.FK-COPY-INV-FL[FM0EW-IDX] = VFYINV01.FK-COPY-INV-FL;
  if (VFYINV01.FK-MAT-INV-COMNT > " ") /* If comment exists*/
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "Y"; /* Set comment flag*/
  else
    FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX] = "N"; /* Set comment flag*/
  end
  FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX] = VFYINV01.FK-MAT-INV-COMNT; /* Comment*/
  FM0EW01.ZZZSDT[FM0EW-IDX] = VFYINV01.ZZZSDT; /* Setup date*/
  FM0EW01.ZZZCHGCT[FM0EW-IDX] = VFYINV01.ZZZCHGCT; /* Change count*/

  FM0EW00.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY   + VFYINV01.FK-MAT-INV-QTY; /* Add qty to total*/


end // end FM0E-4153L

// Close DCMPNT.VFYINV01
Function FM0E-4154L()
   /* ------------------------------------------------------------*/
   /* Close the table cursor.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6790" ("C2", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4154L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4154L CLOSE DCMPNT.VFYINV01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4154L

// Add record to temporary store
Function FM0E-4160L()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FM0EW01 empty; /* m410 display storage*/

    FM0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4160L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M410"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4160L

// Format and converse M410
Function FM0E-4200L()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-4210L(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM410.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM410.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM410.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM410 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM410.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM410.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM410.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM410.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM410.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM410.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM410.XXXTSPAG invisible, skip;
    set FM0EM410.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM410.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM410.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM410.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM410.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end

    set FM0EM410.FM0EM-INV-TOTAL-QTY invisible, skip;
    set FM0EM410.FM0EM-INV-TOTAL-UOM invisible, skip;
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM410.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM410.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM410.FM0EM-SELECT[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-WHSE-ABRV[FM0EW-IDX] invisible, skip;
      set FM0EM410.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-MAT-INV-QTY[FM0EW-IDX] invisible, skip;
      set FM0EM410.XMU-MAT-UOM-CD[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX] invisible, skip;
      set FM0EM410.FK-COPY-INV-FL[FM0EW-IDX] invisible, skip;
      set FM0EM410.FM0EM-COMMENT-FL[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* successful update*/

    if (FM0EW00.TA5TSQIX > 0) /* If pages formatted*/
      set FM0EM410.FM0EM-SELECT[1] cursor;
    else
      set FM0EM410.FK-MAT-NBR cursor;
    end
  end


  converse FM0EM410 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM410.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM410.CAITEM; /* Application data*/


end // end FM0E-4200L

// Format and converse M420
Function FM0E-4200R()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/

    FM0E-4210R(); /* Format the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FM0EM420.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FM0EM420.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0EM420.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    set FM0EM420 alarm; /* Indicate sound alarm*/

    if (FKWREC.XXXMSGNO != 0) /* Message to display*/

      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0EM420.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FM0EM420.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/

  end


   /* ------------------------------------------------------------*/
   /* Format all key descriptions.*/
   /* ------------------------------------------------------------*/

  FM0EM420.FM0EM-HDR-VEND-CD = FM0EW00.FM0EM-HDR-VEND-CD;
  FM0EM420.FK-DEPT-MAT-DESC = FM0EW00.FK-DEPT-MAT-DESC;
  FM0EM420.XTM-MAT-THCK-DESC = FM0EW00.XTM-MAT-THCK-DESC;
  FM0EM420.XCLDESC = FM0EW00.XCLDESC;


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* No data formatted*/

    set FM0EM420.XXXTSPAG invisible, skip;
    set FM0EM420.TA5TSQIX invisible, skip;

    FM0EW00.FM0EW-IDX = 1; /* Init index*/

    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

      set FM0EM420.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM420.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM420.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM420.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all lines*/

    if (FM0EM420.FK-VEND-CD[FM0EW-IDX] == " "     /* No data*/
     && FM0EM420.FK-MAT-WHSE-CD[FM0EW-IDX] == " " /* No data*/
     && FM0EM420.FY1FCTYC[FM0EW-IDX] == " ")      /* No data*/

      set FM0EM420.FK-VEND-CD[FM0EW-IDX] invisible, skip;
      set FM0EM420.FK-MAT-WHSE-CD[FM0EW-IDX] invisible, skip;
      set FM0EM420.FY1FCTYC[FM0EW-IDX] invisible, skip;
      set FM0EM420.FK-MAT-INV-COMNT[FM0EW-IDX] invisible, skip;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1; /* Increment*/
  end


   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 1) /* successful update*/

    set FM0EM420.FK-MAT-NBR cursor;
  end


  converse FM0EM420 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FM0EM420.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0EM420.CAITEM; /* Application data*/


end // end FM0E-4200R

// Format the data to display
Function FM0E-4210L()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM410 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-4211L(); /* Obtain temp storage page*/

       /* note:  fm0ew01 will always = temporary storage (will not change)*/
                                  /* fm0ew02 will originally = temporary*/
                                   /* storage, but may change*/
              /* as users scroll left/right*/

      FM0EW02.FM0EW02-GROUP = FM0EW01.FM0EW01-GROUP; /* Save group*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM410.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM410.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM410.XCLCD = FM0EW00.XCLCD;
    FM0EM410.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM410.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM410.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM410.XCLCD = FM0EW01.XCLCD;
    FM0EM410.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM410.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM410.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM410.FM0EM-SELECT[FM0EW-IDX] = FM0EW01.FM0EM-SELECT[FM0EW-IDX]; /* Select*/
    FM0EM410.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM410.FK-MAT-WHSE-ABRV[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-ABRV[FM0EW-IDX]; /* Mtl whse desc*/
    FM0EM410.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM410.FK-MAT-INV-QTY[FM0EW-IDX] = FM0EW01.FK-MAT-INV-QTY[FM0EW-IDX]; /* Mtl inventory qty*/
    FM0EM410.XMU-MAT-UOM-CD[FM0EW-IDX] = FM0EW01.XMU-MAT-UOM-CD[FM0EW-IDX]; /* Unit of measure*/
    FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX] = FM0EW01.FK-NIKE-RSP-FL[FM0EW-IDX]; /* Nike responsibility flag*/
    FM0EM410.FK-COPY-INV-FL[FM0EW-IDX] = FM0EW01.FK-COPY-INV-FL[FM0EW-IDX]; /* Copy inventory flag*/
    FM0EM410.FM0EM-COMMENT-FL[FM0EW-IDX] = FM0EW01.FM0EM-COMMENT-FL[FM0EW-IDX]; /* Comment flag*/

    FM0EM410.FM0EM-INV-TOTAL-QTY = FM0EW00.FM0EM-INV-TOTAL-QTY; /* Total inventory quantity*/
    FM0EM410.FM0EM-INV-TOTAL-UOM = FM0EW00.FM0EM-INV-TOTAL-UOM; /* Unit of measure*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-4210L

// Format the data to display
Function FM0E-4210R()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/

  set FM0EM420 initial; /* Initialize map*/

  FM0EW-FMAT-MAP-SW = "N"; /* Format map switch*/


   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FM0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FM0EW00.XXXTSPAG > FM0EW00.TA5TSQIX) /* Desired page > highest*/
        FM0EW00.XXXTSPAG = FM0EW00.TA5TSQIX; /* Default to highest*/
      end

      FM0E-4211R(); /* Obtain temp storage page*/

       /* note:  fm0ew01 will always = temporary storage (will not change)*/
                                  /* fm0ew02 will originally = temporary*/
                                   /* storage, but may change*/
              /* as users scroll left/right*/

      FM0EW02.FM0EW02-GROUP = FM0EW01.FM0EW01-GROUP; /* Save group*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/

  if (FM0EW00.TA5TSQIX == 0) /* If no data was obtained*/

    FM0EM420.FK-MAT-NBR = FM0EW00.FK-MAT-NBR;
    FM0EM420.XMG-COLR-GRP-CD = FM0EW00.XMG-COLR-GRP-CD;
    FM0EM420.XCLCD = FM0EW00.XCLCD;
    FM0EM420.FM0EM-INV-MO = FM0EW00.FM0EM-INV-MO;
  else

    FM0EM420.FK-MAT-NBR = FM0EW01.FK-MAT-NBR;
    FM0EM420.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    FM0EM420.XCLCD = FM0EW01.XCLCD;
    FM0EM420.FM0EM-INV-MO = FM0EW01.FM0EM-INV-MO;
  end

  FM0EM420.XXXTSPAG = FM0EW00.XXXTSPAG; /* Current page*/
  FM0EM420.TA5TSQIX = FM0EW00.TA5TSQIX; /* Max page*/


   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/

  FM0EW00.FM0EW-IDX = 1; /* Initialize idx*/

  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each line*/

    FM0EM420.FK-VEND-CD[FM0EW-IDX] = FM0EW01.FK-VEND-CD[FM0EW-IDX]; /* Vendor*/
    FM0EM420.FK-MAT-WHSE-CD[FM0EW-IDX] = FM0EW01.FK-MAT-WHSE-CD[FM0EW-IDX]; /* Mtl whse*/
    FM0EM420.FY1FCTYC[FM0EW-IDX] = FM0EW01.FY1FCTYC[FM0EW-IDX]; /* Factory*/
    FM0EM420.FK-MAT-INV-COMNT[FM0EW-IDX] = FM0EW01.FK-MAT-INV-COMNT[FM0EW-IDX]; /* Comment*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


end // end FM0E-4210R

// Read page from temp storage
Function FM0E-4211L()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4211L"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M410"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4211L

// Read page from temp storage
Function FM0E-4211R()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FM0EW01.XXXTSLEN = FM0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FM0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FKWREC.XXX-MOD-ID = "4211R"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M420"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4211R

// Check attention identifier
Function FM0E-4300L()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM410.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM410.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM410.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM410.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "D   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM410.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM410.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM410.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM410.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM410.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM410.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM410.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM410.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM410.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "4300L"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM410"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM410.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM410.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM410.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM410.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM410.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM410.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "4300L"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-4300L

// Check attention identifier
Function FM0E-4300R()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM420.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM420.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM420.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM420.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM420.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    COMMAREA.CATOAP = "FM0E"; /* to applicaiton*/
    COMMAREA.CAITEM = "D   "; /* item*/

    XSFKS01(); /* Exit to another application*/

    set FM0EM420.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FM0EM420.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set FKWREC empty;
      FKWREC.FK-VEND-CD[1] = FM0EM420.FM0EM-HDR-VEND-CD;
      FKWREC.FK-MAT-NBR[1] = FM0EM420.FK-MAT-NBR;
      FKWREC.XMG-COLR-GRP-CD[1] = FM0EM420.XMG-COLR-GRP-CD;
      FKWREC.XCLCD[1] = FM0EM420.XCLCD;
      FM0EW00.FM0EW-WORK-YYMM = FM0EM420.FM0EM-INV-MO;
      if (FM0EW00.FM0EW-WORK-YY <= 80)
        FM0EW00.FM0EW-WORK-CC = 20;
      else
        FM0EW00.FM0EW-WORK-CC = 19;
      end
      FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

      COMMAREA.CATOAP = FM0EM420.CATOAP; /* to applicaiton*/
      COMMAREA.CAITEM = FM0EM420.CAITEM; /* item*/

      XSFKS01(); /* Exit to another application*/

      set FM0EM420.CATOAP cursor, bold; /* Highlight*/

    else

      FKWREC.XXX-MOD-ID = "4300R"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, transfer to application GD01.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* EXIT requested*/
   || converseVar.eventKey is pf4 /* MSTR MN requested*/
   || converseVar.eventKey is pf18) /* INVL requested*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0EM420"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = FM0EM420.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      COMMAREA.CAITEM = FM0EM420.CAITEM; /* item*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FM0I"; /* TO application*/
      COMMAREA.CAITEM = FM0EM420.CAITEM; /* item*/
    end

    set FKWREC empty;
    FKWREC.FK-VEND-CD[1] = FM0EM420.FM0EM-HDR-VEND-CD;
    FKWREC.FK-MAT-NBR[1] = FM0EM420.FK-MAT-NBR;
    FKWREC.XMG-COLR-GRP-CD[1] = FM0EM420.XMG-COLR-GRP-CD;
    FKWREC.XCLCD[1] = FM0EM420.XCLCD;
    FM0EW00.FM0EW-WORK-YYMM = FM0EM420.FM0EM-INV-MO;
    if (FM0EW00.FM0EW-WORK-YY <= 80)
      FM0EW00.FM0EW-WORK-CC = 20;
    else
      FM0EW00.FM0EW-WORK-CC = 19;
    end
    FKWREC.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

    XSFKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK was not pressed*/
   && converseVar.eventKey not pf8   /* FWRD was not pressed*/
   && converseVar.eventKey not pf10  /* LEFT was not pressed*/
   && converseVar.eventKey not pf11) /* RGHT was not pressed*/

    FKWREC.XXX-MOD-ID = "4300R"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end FM0E-4300R

// Reset Highlighted fields
Function FM0E-4400L()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM410.XXXTSPAG initialAttributes;
  set FM0EM410.TA5TSQIX initialAttributes;
  set FM0EM410.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM410.FK-MAT-NBR initialAttributes;
  set FM0EM410.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM410.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM410.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM410.XCLCD initialAttributes;
  set FM0EM410.XCLDESC initialAttributes;
  set FM0EM410.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM410.FM0EM-SELECT[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-MAT-WHSE-ABRV[FM0EW-IDX] initialAttributes;
    set FM0EM410.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-MAT-INV-QTY[FM0EW-IDX] initialAttributes;
    set FM0EM410.XMU-MAT-UOM-CD[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX] initialAttributes;
    set FM0EM410.FK-COPY-INV-FL[FM0EW-IDX] initialAttributes;
    set FM0EM410.FM0EM-COMMENT-FL[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM410.FM0EM-INV-TOTAL-QTY initialAttributes;
  set FM0EM410.FM0EM-INV-TOTAL-UOM initialAttributes;

  set FM0EM410.CATOAP initialAttributes;
  set FM0EM410.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM410.XCLCD != "?" /* XCL list not requested*/
   && FM0EM410.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM410.XCLCD == "?" /* XCL list requested*/
   || FM0EM410.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "4400L"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM410.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM410.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM410.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM410.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM410.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM410.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM410.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM410.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "4400L"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-4400L

// Reset Highlighted fields
Function FM0E-4400R()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/

  set FM0EM420.XXXTSPAG initialAttributes;
  set FM0EM420.TA5TSQIX initialAttributes;
  set FM0EM420.FM0EM-HDR-VEND-CD initialAttributes;
  set FM0EM420.FK-MAT-NBR initialAttributes;
  set FM0EM420.FK-DEPT-MAT-DESC initialAttributes;
  set FM0EM420.XTM-MAT-THCK-DESC initialAttributes;
  set FM0EM420.XMG-COLR-GRP-CD initialAttributes;
  set FM0EM420.XCLCD initialAttributes;
  set FM0EM420.XCLDESC initialAttributes;
  set FM0EM420.FM0EM-INV-MO initialAttributes;

  FM0EW00.FM0EW-IDX = 1;
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

    set FM0EM420.FK-VEND-CD[FM0EW-IDX] initialAttributes;
    set FM0EM420.FK-MAT-WHSE-CD[FM0EW-IDX] initialAttributes;
    set FM0EM420.FY1FCTYC[FM0EW-IDX] initialAttributes;
    set FM0EM420.FK-MAT-INV-COMNT[FM0EW-IDX] initialAttributes;

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end

  set FM0EM420.CATOAP initialAttributes;
  set FM0EM420.CAITEM initialAttributes;

   /* --------------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM420.XCLCD != "?" /* XCL list not requested*/
   && FM0EM420.XMG-COLR-GRP-CD != "?") /* XMG list not requested*/
    return;
  end

  if (FM0EM420.XCLCD == "?" /* XCL list requested*/
   || FM0EM420.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    if (converseVar.eventKey not enter) /* Enter not pressed*/

      FKWREC.XXX-MOD-ID = "4400R"; /* Module identification*/
      converseLib.validationFailed(19); /* Pa/pf key may not be used*/
      exit stack; /* Exit to display the map*/
    end
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XMG codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM420.XMG-COLR-GRP-CD == "?") /* XMG list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR GROUP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM420.XMG-COLR-GRP-CD = FM0EW01.XMG-COLR-GRP-CD;
    else
      FM0EM420.XMG-COLR-GRP-CD = XMGTBL.XMG-COLR-GRP-CD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM420.XMG-COLR-GRP-CD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* If requested, display the list of XCL codes.*/
   /* --------------------------------------------------------------------*/

  if (FM0EM420.XCLCD == "?") /* XCL list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COLOR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FM0EM420.XCLCD = FM0EW01.XCLCD; /* Restore prior code*/
    else
      FM0EM420.XCLCD = XCLTBL.XCLCD[XX0XWPIX]; /* Selected code*/
    end

    set FM0EM420.XCLCD cursor; /* Establish cursor position*/
  end


   /* --------------------------------------------------------------------*/
   /* Indicate the requested list has been displayed and that ENTER*/
   /* must be pressed to process any changes.*/
   /* --------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FKWREC.XXX-MOD-ID = "4400R"; /* Module identification*/
  converseLib.validationFailed(20); /* Corporate list displayed*/

  exit stack;


end // end FM0E-4400R

// Verify entered fields (m410)
Function FM0E-4500L()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM410.CAITEM > " ") /* Application data was entered*/

    set FM0EM410.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4500L"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-4510L(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM410.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM410.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM410.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM410.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-4520L(); /* Verify key*/
  else

    FM0E-4530L(); /* Verify detail*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
    exit stack;
  end


   /* ---------------------------------------------------------------*/
   /* Verify select fields were not changed while confirming delete.*/
   /* ---------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-DELETE-SW == "Y")

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      if (FM0EM410.FM0EM-SELECT[FM0EW-IDX]
       != FM0EW01.FM0EM-SELECT[FM0EW-IDX]) /* If select was changed*/

        FM0EW01.FM0EM-SELECT[FM0EW-IDX] = FM0EM410.FM0EM-SELECT[FM0EW-IDX]; /* Save it*/
        FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
        FKWREC.XXX-MOD-ID = "4500L"; /* Module identification*/
      end

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end
  end


   /* ---------------------------------------------------------------*/
   /* If any message to display, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (FKWREC.XXXMSGNO != 0) /* Message to display*/
    exit stack;
  end


end // end FM0E-4500L

// Verify entered fields (m420)
Function FM0E-4500R()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM420.CAITEM > " ") /* Application data was entered*/

    set FM0EM420.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4500R"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Pf7 pressed*/
   || converseVar.eventKey is pf8  /* Pf8 pressed*/
   || converseVar.eventKey is pf10 /* Pf10 pressed*/
   || converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0E-4510R(); /* Verify scroll request*/
  end


   /* ---------------------------------------------------------------*/
   /* If key was changed, verify it.*/
   /* Otherwise, verify the detail data.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM420.FK-MAT-NBR != FM0EW01.FK-MAT-NBR           /* Material change*/
   || FM0EM420.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD /* Clr grp chg*/
   || FM0EM420.XCLCD != FM0EW01.XCLCD                     /* Color change*/
   || FM0EM420.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)      /* Month chg*/

    FM0E-4520R(); /* Verify key*/
  end


   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end FM0E-4500R

// Verify scroll request
Function FM0E-4510L()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "4510L"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "4510L"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


   /* ------------------------------------------------------------*/
   /* If left requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    FKWREC.XXX-MOD-ID = "4510L"; /* Module identification*/
    converseLib.validationFailed(74); /* No more pages to left to display*/

  end


   /* ------------------------------------------------------------*/
   /* If right requested, verify data exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FM0EW00.TA5TSQIX <= 0) /* If no data*/
      FKWREC.XXX-MOD-ID = "4510L"; /* Module identification*/
      converseLib.validationFailed(75); /* No more pages to right to display*/

    end
  end


end // end FM0E-4510L

// Verify scroll request
Function FM0E-4510R()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FKWREC.XXX-MOD-ID = "4510R"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0EW00.XXXTSPAG >= FM0EW00.TA5TSQIX) /* and no more pages*/

    FKWREC.XXX-MOD-ID = "4510R"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If right requested, set error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    FKWREC.XXX-MOD-ID = "4510R"; /* Module identification*/
    converseLib.validationFailed(75); /* No more pages to right to display*/

  end


end // end FM0E-4510R

// Verify key data
Function FM0E-4520L()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM410.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520L"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM410.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM410.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520L"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM410.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM410.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520L"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-4521L(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-4522L(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-4520L

// Verify key data
Function FM0E-4520R()
   /* ---------------------------------------------------------------*/
   /* Verify month.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-WORK-YYMM = FM0EM420.FM0EM-INV-MO;

  if (FM0EW00.FM0EW-WORK-MM < 1
   || FM0EW00.FM0EW-WORK-MM > 12)

    set FM0EM420.FM0EM-INV-MO cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520R"; /* Module identification*/
    converseLib.validationFailed(84); /* Date missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color code.*/
   /* ---------------------------------------------------------------*/

  if (FM0EM420.XCLCD in XCLTBL.XCLCD /* If in table*/
   && XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* And active status*/

    /* next sentence*/
  else

    set FM0EM420.XCLCD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520R"; /* Module identification*/
    converseLib.validationFailed(32); /* Color missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify color group code*/
   /* ---------------------------------------------------------------*/

  if (FM0EM420.XMG-COLR-GRP-CD in XMGTBL.XMG-COLR-GRP-CD /* If in table*/
   && XMGTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* And active status*/

    /* next sentence*/
  else

    set FM0EM420.XMG-COLR-GRP-CD cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "4520R"; /* Module identification*/
    converseLib.validationFailed(31); /* Color group missing or invalid*/
  end


   /* ---------------------------------------------------------------*/
   /* Verify material record*/
   /* ---------------------------------------------------------------*/

  FM0E-4521R(); /* Select DCMPNT.VMATRL01*/


   /* ---------------------------------------------------------------*/
   /* If no errors yet, verify mtl/clr grp/clr combination is valid.*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors yet*/
    FM0E-4522R(); /* Select DCMPNT.VMCOLR01*/
  end


end // end FM0E-4520R

// Select DCMPNT.VMATRL01
Function FM0E-4521L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM410.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "4521L"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4521L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4521L SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4521L

// Select DCMPNT.VMATRL01
Function FM0E-4521R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMATRL01 empty;

  VMATRL01.FK-MAT-NBR = FM0EM420.FK-MAT-NBR; /* Material nbr*/


  try
    call "IO6190" ("S ", SQLCA, VMATRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM420.FK-MAT-NBR cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "4521R"; /* Module identification*/
      converseLib.validationFailed(26); /* Material missing or invalid*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4521R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4521R SELECT DCMPNT.VMATRL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMATRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMATRL01.VMATRL01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4521R

// Select DCMPNT.VMCOLR01
Function FM0E-4522L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM410.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM410.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM410.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM410.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "4522L"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4522L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4522L SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4522L

// Select DCMPNT.VMCOLR01
Function FM0E-4522R()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set VMCOLR01 empty;

  VMCOLR01.FK-MAT-NBR = FM0EM420.FK-MAT-NBR; /* Material nbr*/
  VMCOLR01.XMG-COLR-GRP-CD = FM0EM420.XMG-COLR-GRP-CD; /* Clr grp*/
  VMCOLR01.XCLCD = FM0EM420.XCLCD; /* Color*/


  try
    call "IO6210" ("S ", SQLCA, VMCOLR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      set FM0EM420.FK-MAT-NBR cursor, bold; /* Highlight*/
      set FM0EM420.XMG-COLR-GRP-CD bold; /* Highlight*/
      set FM0EM420.XCLCD bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "4522R"; /* Module identification*/
      converseLib.validationFailed(66); /* Mtl/clr grp/clr not defined*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FKWREC.XXX-MOD-ID = "4522R"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4522R SELECT DCMPNT.VMCOLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCOLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMCOLR01.VMCOLR01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4522R

// Verify detail data
Function FM0E-4530L()
   /* ---------------------------------------------------------------*/
   /* Verify select fields.*/
   /* ---------------------------------------------------------------*/

  FM0EW00.FM0EW-COUNT = 0; /* Initialize counter*/
  FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
  while (FM0EW00.FM0EW-IDX > 0)

    if (FM0EM410.FM0EM-SELECT[FM0EW-IDX] == " " /* If blank*/
     || FM0EM410.FM0EM-SELECT[FM0EW-IDX] == "S") /* or selected*/
       /* next sentence*/
    else

      set FM0EM410.FM0EM-SELECT[FM0EW-IDX] cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "4530L"; /* Module identification*/
      converseLib.validationFailed(13); /* Only S may be used to select a line*/
    end

    if (FM0EM410.FM0EM-SELECT[FM0EW-IDX] == "S") /* If selected*/
      FM0EW00.FM0EW-COUNT = FM0EW00.FM0EW-COUNT + 1;
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
  end


   /* ---------------------------------------------------------------*/
   /* Verify at least 1 line was selected.*/
   /* This edit only valid if enter was pressed and no previous*/
   /* errors have been found.*/
   /* ---------------------------------------------------------------*/

  if (FM0EW00.FM0EW-COUNT <= 0      /* If no lines counted*/
   && converseVar.eventKey is enter /* and enter was pressed*/
   && converseVar.validationMsgNum == 0) /* end no errors (yet)*/

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-NBR-MAP-ROWS;
    while (FM0EW00.FM0EW-IDX > 0)
      set FM0EM410.FM0EM-SELECT[FM0EW-IDX] cursor, bold;
      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX - 1;
    end
    FKWREC.XXX-MOD-ID = "4530L"; /* Module identification*/
    converseLib.validationFailed(140); /* Enter s to delete a row*/
  end
end // end FM0E-4530L

// Process valid request (m410)
Function FM0E-4600L()
   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM410.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM410.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM410.XCLCD != FM0EW01.XCLCD
   || FM0EM410.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
    return;
  end

  if (converseVar.eventKey is pf11) /* Pf11 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "R"; /* Display M320*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";

    FM0EW00.FM0EW-IDX = 1;
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS)

      FM0EW01.FM0EM-SELECT[FM0EW-IDX] = FM0EM410.FM0EM-SELECT[FM0EW-IDX];
      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    return;
  end


   /* ------------------------------------------------------------*/
   /* Confirm the delete.*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-CONFIRM-DELETE-SW != "Y") /* If delete not confirmed*/

     /* save selects - we want this to reappear if the user scolls back*/

    FM0EW00.FM0EW-IDX = 1; /* Init index*/
    while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For each row*/

      FM0EW01.FM0EM-SELECT[FM0EW-IDX] = FM0EM410.FM0EM-SELECT[FM0EW-IDX]; /* Save select*/

      FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
    end

    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "Y";
    FKWREC.XXXMSGNO = 30; /* Press enter to continue*/
    FKWREC.XXX-MOD-ID = "4600L"; /* Module identification*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Perform the delete process.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/

  FM0EW00.FM0EW-UPDT-PERFORMED-SW = "N"; /* No update yet*/

  FM0EW00.FM0EW-IDX = 1; /* Init index*/
  while (FM0EW00.FM0EW-IDX <= FM0EW00.FM0EW-NBR-MAP-ROWS) /* For all rows*/

    if (FM0EM410.FM0EM-SELECT[FM0EW-IDX] == "S") /* If selected for delete*/

      if (FM0EM410.FK-VEND-CD[FM0EW-IDX] > " ") /* If vendor record*/
        FM0E-4610L(); /* Update DCMPNT.VVNINV01*/
      else

        if (FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX] > " ") /* If whse record*/
          FM0E-4620L(); /* Update DCMPNT.VWHINV01*/
        else

          if (FM0EM410.FY1FCTYC[FM0EW-IDX] > " ") /* If fcty record*/
            FM0E-4630L(); /* Update DCMPNT.VFYINV01*/
          end
        end
      end
    end

    FM0EW00.FM0EW-IDX = FM0EW00.FM0EW-IDX + 1;
  end


   /* ------------------------------------------------------------*/
   /* If update was performed, set message*/
   /* ------------------------------------------------------------*/

  if (FM0EW00.FM0EW-UPDT-PERFORMED-SW == "Y") /* If update performed*/

    FKWREC.XXXMSGNO = 1; /* Update performed*/
    FKWREC.XXX-MOD-ID = "4600L"; /* Module identification*/
    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
    return;
  end


end // end FM0E-4600L

// Process valid request (m420)
Function FM0E-4600R()
   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/

  if (FM0EM420.FK-MAT-NBR != FM0EW01.FK-MAT-NBR
   || FM0EM420.XMG-COLR-GRP-CD != FM0EW01.XMG-COLR-GRP-CD
   || FM0EM420.XCLCD != FM0EW01.XCLCD
   || FM0EM420.FM0EM-INV-MO != FM0EW01.FM0EM-INV-MO)

    FM0EM410.FK-MAT-NBR = FM0EM420.FK-MAT-NBR;
    FM0EM410.XMG-COLR-GRP-CD = FM0EM420.XMG-COLR-GRP-CD;
    FM0EM410.XCLCD = FM0EM420.XCLCD;
    FM0EM410.FM0EM-INV-MO = FM0EM420.FM0EM-INV-MO;

    FM0EW00.FM0EW-REQUEST-DATA-SW = "Y";
    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M410*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Pf7 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG - 1; /* Decrement page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf8) /* Pf8 pressed*/

    FM0EW00.XXXTSPAG = FM0EW00.XXXTSPAG + 1; /* Increment page*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";
    return;
  end

  if (converseVar.eventKey is pf10) /* Pf10 pressed*/

    FM0EW00.FM0EW-SIDE-TO-DISP-SW = "L"; /* Display M410*/
    FM0EW00.FM0EW-FMAT-MAP-SW = "Y";

    return;
  end


end // end FM0E-4600R

// Delete DCMPNT.VVNINV01
Function FM0E-4610L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VVNINV01 empty;

  VVNINV01.FK-VEND-CD = FM0EM410.FK-VEND-CD[FM0EW-IDX];
  VVNINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR;
  VVNINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD;
  VVNINV01.XCLCD = FM0EM410.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VVNINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VVNINV01.FK-NIKE-RSP-FL = FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX];

  try
    call "IO6800" ("D ", SQLCA, VVNINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "4610L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4610L DELETE DCMPNT.VVNINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNINV01.VVNINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4610L

// Delete DCMPNT.VWHINV01
Function FM0E-4620L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VWHINV01 empty;

  VWHINV01.FK-MAT-WHSE-CD = FM0EM410.FK-MAT-WHSE-CD[FM0EW-IDX];
  VWHINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR;
  VWHINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD;
  VWHINV01.XCLCD = FM0EM410.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VWHINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VWHINV01.FK-NIKE-RSP-FL = FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX];

  try
    call "IO6810" ("D ", SQLCA, VWHINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "4620L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4620L DELETE DCMPNT.VWHINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VWHINV01.VWHINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4620L

// Delete DCMPNT.VFYINV01
Function FM0E-4630L()
   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  set VFYINV01 empty;

  VFYINV01.FY1FCTYC = FM0EM410.FY1FCTYC[FM0EW-IDX];
  VFYINV01.FK-MAT-NBR = FM0EM410.FK-MAT-NBR;
  VFYINV01.XMG-COLR-GRP-CD = FM0EM410.XMG-COLR-GRP-CD;
  VFYINV01.XCLCD = FM0EM410.XCLCD;

  FM0EW00.FM0EW-WORK-YYMM = FM0EM410.FM0EM-INV-MO;
  if (FM0EW00.FM0EW-WORK-YY < 80)
    FM0EW00.FM0EW-WORK-CC = 20;
  else
    FM0EW00.FM0EW-WORK-CC = 19;
  end
  VFYINV01.FK-MAT-INV-MO = FM0EW00.FM0EW-WORK-DT;

  VFYINV01.FK-NIKE-RSP-FL = FM0EM410.FK-NIKE-RSP-FL[FM0EW-IDX];

  try
    call "IO6790" ("D ", SQLCA, VFYINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      FM0EW00.FM0EW-UPDT-PERFORMED-SW = "Y";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FM0EW00.FM0EW-CONFIRM-DELETE-SW = "N";
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  FKWREC.XXX-MOD-ID = "4630L"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "4630L DELETE DCMPNT.VFYINV01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYINV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYINV01.VFYINV01-GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FM0E-4630L

//*** RECORD=FM0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FM0EW00 type basicRecord
  10 FM0EW-MAP-SW FM0EW-MAP-SW ; 
  10 FM0EW-REQUEST-DATA-SW FM0EW-REQUEST-DATA-SW ; 
  10 FM0EW-FMAT-MAP-SW FM0EW-FMAT-MAP-SW ; 
  10 FM0EW-UPDT-PERFORMED-SW FM0EW-UPDT-PERFORMED-SW ; 
  10 FM0EW-CONFIRM-ADD-SW FM0EW-CONFIRM-ADD-SW ; 
  10 FM0EW-CONFIRM-DELETE-SW FM0EW-CONFIRM-DELETE-SW ; 
  10 FM0EW-SIDE-TO-DISP-SW FM0EW-SIDE-TO-DISP-SW ; 
  10 FM0EW-END-VVNINV01-CSR-SW FM0EW-END-VVNINV01-CSR-SW ; 
  10 FM0EW-END-VWHINV01-CSR-SW FM0EW-END-VWHINV01-CSR-SW ; 
  10 FM0EW-END-VFYINV01-CSR-SW FM0EW-END-VFYINV01-CSR-SW ; 
  10 FM0EW-WORK-DT FM0EW-WORK-DT ; 
    15 FM0EW-WORK-CC FM0EW-WORK-CC ; 
    15 FM0EW-WORK-YYMM FM0EW-WORK-YYMM ; 
      20 FM0EW-WORK-YY FM0EW-WORK-YY ; 
      20 FM0EW-WORK-MM FM0EW-WORK-MM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FM0EW-IDX FM0EW-IDX ; 
  10 FM0EW-NBR-MAP-ROWS FM0EW-NBR-MAP-ROWS ; 
  10 FM0EM-INV-TOTAL-QTY FM0EM-INV-TOTAL-QTY ; 
  10 FM0EM-INV-TOTAL-UOM FM0EM-INV-TOTAL-UOM ; 
  10 FM0EM-MAP-KEY FM0EM-MAP-KEY ; 
    15 FK-MAT-NBR FK-MAT-NBR ; 
    15 XMG-COLR-GRP-CD XMG-COLR-GRP-CD ; 
    15 XCLCD XCLCD ; 
    15 FM0EM-INV-MO FM0EM-INV-MO ; 
  10 FM0EM-HDR-VEND-CD FM0EM-HDR-VEND-CD ; 
  10 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
  10 XCLDESC XCLDESC ; 
  10 XTM-MAT-THCK-DESC XTM-MAT-THCK-DESC ; 
  10 FM0EW-COUNT FM0EW-COUNT ; 
  10 FM0EW-LINE-COUNT FM0EW-LINE-COUNT ; 
end // end FM0EW00

//*** RECORD=FM0EW01 ****
// ------------------------------------------------------------
// Application display storage.
// This record should always contain the same fields as FM0EW02
// ------------------------------------------------------------
// 
// ***********************
Record FM0EW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1148) ; 
    10 FM0EW01-GROUP FM0EW01-GROUP ; 
      15 FM0EM-HDR-VEND-CD FM0EM-HDR-VEND-CD ; 
      15 FK-MAT-NBR FK-MAT-NBR ; 
      15 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
      15 XTM-MAT-THCK-DESC XTM-MAT-THCK-DESC ; 
      15 XMG-COLR-GRP-CD XMG-COLR-GRP-CD ; 
      15 XCLCD XCLCD ; 
      15 XCLDESC XCLDESC ; 
      15 FM0EM-INV-MO FM0EM-INV-MO ; 
      15 FM0EM-SELECT FM0EM-SELECT [11] ; 
      15 FK-VEND-CD FK-VEND-CD [11] ; 
      15 FK-MAT-WHSE-CD FK-MAT-WHSE-CD [11] ; 
      15 FK-MAT-WHSE-ABRV FK-MAT-WHSE-ABRV [11] ; 
      15 FY1FCTYC FY1FCTYC [11] ; 
      15 FK-MAT-INV-QTY FK-MAT-INV-QTY [11] ; 
      15 XMU-MAT-UOM-CD XMU-MAT-UOM-CD [11] ; 
      15 FK-NIKE-RSP-FL FK-NIKE-RSP-FL [11] ; 
      15 FK-COPY-INV-FL FK-COPY-INV-FL [11] ; 
      15 FM0EM-COMMENT-FL FM0EM-COMMENT-FL [11] ; 
      15 FK-MAT-INV-COMNT FK-MAT-INV-COMNT [11] ; 
      15 ZZZSDT ZZZSDT [11] ; 
      15 ZZZCHGCT ZZZCHGCT [11] ; 
end // end FM0EW01

//*** RECORD=FM0EW02 ****
// ------------------------------------------------------------
// Application display storage - USED FOR CHANGE FUNCTION
// This record should always contain the same fields as FM0EW01
// ------------------------------------------------------------
// 
// ***********************
Record FM0EW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1148) ; 
    10 FM0EW02-GROUP FM0EW02-GROUP ; 
      15 FM0EM-HDR-VEND-CD FM0EM-HDR-VEND-CD ; 
      15 FK-MAT-NBR FK-MAT-NBR ; 
      15 FK-DEPT-MAT-DESC FK-DEPT-MAT-DESC ; 
      15 XTM-MAT-THCK-DESC XTM-MAT-THCK-DESC ; 
      15 XMG-COLR-GRP-CD XMG-COLR-GRP-CD ; 
      15 XCLCD XCLCD ; 
      15 XCLDESC XCLDESC ; 
      15 FM0EM-INV-MO FM0EM-INV-MO ; 
      15 FM0EM-SELECT FM0EM-SELECT [11] ; 
      15 FK-VEND-CD FK-VEND-CD [11] ; 
      15 FK-MAT-WHSE-CD FK-MAT-WHSE-CD [11] ; 
      15 FK-MAT-WHSE-ABRV FK-MAT-WHSE-ABRV [11] ; 
      15 FY1FCTYC FY1FCTYC [11] ; 
      15 FK-MAT-INV-QTY FK-MAT-INV-QTY [11] ; 
      15 XMU-MAT-UOM-CD XMU-MAT-UOM-CD [11] ; 
      15 FK-NIKE-RSP-FL FK-NIKE-RSP-FL [11] ; 
      15 FK-COPY-INV-FL FK-COPY-INV-FL [11] ; 
      15 FM0EM-COMMENT-FL FM0EM-COMMENT-FL [11] ; 
      15 FK-MAT-INV-COMNT FK-MAT-INV-COMNT [11] ; 
      15 ZZZSDT ZZZSDT [11] ; 
      15 ZZZCHGCT ZZZCHGCT [11] ; 
end // end FM0EW02

// Comment exists flag
DataItem FM0EM-COMMENT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header vendor code
DataItem FM0EM-HDR-VEND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inventory month
DataItem FM0EM-INV-MO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total inventory quantity
DataItem FM0EM-INV-TOTAL-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total inventory unit of measur
DataItem FM0EM-INV-TOTAL-UOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map Key
DataItem FM0EM-MAP-KEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select field
DataItem FM0EM-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirm add switch
DataItem FM0EW-CONFIRM-ADD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirm delete switch
DataItem FM0EW-CONFIRM-DELETE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic count variable
DataItem FM0EW-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End DCMPNT.VFYINV01 csr switch
DataItem FM0EW-END-VFYINV01-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End DCMPNT.VVNINV01 csr switch
DataItem FM0EW-END-VVNINV01-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End DCMPNT.VWHINV01 csr switch
DataItem FM0EW-END-VWHINV01-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem FM0EW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// Generic index
DataItem FM0EW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line counter
DataItem FM0EW-LINE-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed switch
DataItem FM0EW-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem FM0EW-NBR-MAP-ROWS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FM0EW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Side to display switch (L/R)
DataItem FM0EW-SIDE-TO-DISP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update performed switch
DataItem FM0EW-UPDT-PERFORMED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic work date century
DataItem FM0EW-WORK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic work date
DataItem FM0EW-WORK-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic work date month
DataItem FM0EW-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic work date year
DataItem FM0EW-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generic work date year/month
DataItem FM0EW-WORK-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FM0EW01 GROUP LEVEL
DataItem FM0EW01-GROUP char(1148)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FM0EW02 GROUP LEVEL
DataItem FM0EW02-GROUP char(1148)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

