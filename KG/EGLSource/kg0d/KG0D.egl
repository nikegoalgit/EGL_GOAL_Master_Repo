package kg0d;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XACTBL;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XNATBL;
import corpx1.XNXTBL;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCULVL01;
import vv.common.VCULVL01-GROUP;
import vv.common.VCULVLPD;
import xa.common.XA0AW02;
//*** PROGRAM=KG0D ****
// ----------------  kg0d - chg/inq process control -----------
// 
// overview:  this application performs change functions for
//            the customer process control table.
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
// * 09/24/92 jhemme  created
// * 11/13/92 jhemme  various before ipl
// * 11/17/92 jhemme  100:reset a,d mod + 450:xac wildcard
// * 11/19/92 jhemme  m000,m100:fastpath + m100:pf3 + structure
// * 02/09/93 CHELLM  Set XNA field attribute to alpha on M200
// * 04/16/93 CHELLM  Added KG0D to Company and Store ADD
// *                  funcions (KA0C,KA0D).
// * 05/20/93 CHELLM  Saved key fields before returning to KA0D
// *                   when PF3 from map M200 Add.
// * 05/26/93 CHELLM  Added edit requiring an entry if no
// *                  VCULVL01 rows exist. (kg0d450)
// * 05/28/93 CHELLM  Correct No valid row edit in kg0ds45.
// * 06/07/93 CHELLM  Add code to force wildcarded row as first
//                    row added.
// 13-july-1993         dlegg      Change call to TA0020 with
//                                 ABND to RETN. Rename
//                                 KUMSTRID and XNXCD in
//                                 KG0DW-01. KG0D200,210,240,
//                                 250,260,265,220,230,300,510,
//                                 550,540,570,S61,S45,000.
// * 10/01/93 CHELLM  CSP 4.1 Conversion.
// * 12/01/93 CHELLM  Correct XNA defalut value during add.
// * 04/10/95 CHELLM  Added user security for Nike Canada.
// * 11/19/97 VRAMAC  Y2K MODIFICATIONS MADE TO:
// *                  REGEN THE APPLICATION TO PICK UP NEW
// *                  COPY OF XX0XS01
// *********************
Program KG0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KG0DW-01 KG0DW-01; // record
  KG0DW-02 KG0DW-02; // record
  KG0DW-03 KG0DW-03; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCULVL01 VCULVL01; // record
  VCULVLPD VCULVLPD; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XACTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNATBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use KG0DM.KG0DM000,  // forms
      KG0DM.KG0DM100, 
      KG0DM.KG0DM200, 
      KG0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KG0D000: KG0D000();
    goto KG0D010; /* converse control selection*/
    KG0D010: KG0D010();
    ;
    goto KG0D010; /* return to selection screen*/
    ;
  end // end main
end // end KG0D

// initialize
Function KG0D000()
   /* *********************************************/
   /* initialization of variables used in the*/
   /* processing of the process control screen*/
   /* *********************************************/
  ;
  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/
  XX0XS01(); /* get todays date*/
  ;
  KG0DS-INIT-RECS();
  ;
  KG0DW-01.KG0DW-CULVL-MOD = "N"; /* init culvl update flag*/
  KG0DW-01.KG0DW-READY-TO-UPD = "N"; /* init ready to update flag*/
  KG0DW-01.KG0DW-ERROR = "N"; /* error flag*/
  KG0DW-01.KG0DW-FIRST-TIME = "Y";
  ;
  KG0DM000.KG0DM-BKG-MSG = " ";
  KG0DM000.VAGen_EZEMSG = " ";
  ;
   /* check fast path entry------------------------------------------*/
  ;
  if (COMMAREA.CACHGFL == "Y")
    KG0DW-01.KG0DW-CHG-SECURITY = "Y"; /* update mode*/
  else
    KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* inquiry move*/
  end
  ;
  KG0DW-01.KG0DW-CA = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KG0DW-01.KG0DW-CA = COMMAREA.CAITEM; /* key from fastpath*/
  end
  ;
  if (KG0DW-01.KG0DW-CA-CO-CHAR is numeric)
    KG0DM000.KUCCOID = KG0DW-01.KG0DW-CA-COMPANY;
  else
    KG0DM000.KUCCOID = 0;
    KG0DW-01.KG0DW-CA-COMPANY = 0;
  end
  ;
  if (KG0DW-01.KG0DW-CA-ST-CHAR is numeric)
     /* next sentence*/
  else
    KG0DW-01.KG0DW-CA-STORE = 0;
  end
  ;
  if (KG0DW-01.KG0DW-CA-DP-CHAR is numeric)
     /* next sentence*/
  else
    KG0DW-01.KG0DW-CA-DEPT = 0;
  end
  ;
   /* load kg0dm000 using passed company id ------------------*/
  ;
  if (KG0DM000.KUCCOID != 0) /* read company if available*/
    set KUCREC empty;
    KUCREC.KUCCOID = KG0DM000.KUCCOID; /* build vcmpny01 read key*/
    KG0D210(); /* read vcmpny01*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* not found?*/
      set KG0DM000 initial;
      set KG0DM100 initial;
      KG0DM000.KUCCOID = KUCREC.KUCCOID; /* set company key*/
      set KG0DM000.KUCCOID cursor, bold;
    else
      KG0DW-01.KG0DW-FIRST-TIME = "N";
    end
  end
  ;
end // end KG0D000

// ----- SEND KG0DM000 ----------
Function KG0D010()
   /* *******************************************/
   /* customer process selection screen*/
   /* 1. prepares working variables*/
   /* 2. presents screen*/
   /* 3. edits special keys*/
   /* 4. edit screen data*/
   /* *******************************************/
  ;
  KG0DW-01.KG0DW-ERROR = "N"; /* init error flag*/
  KG0DM000.KG0DM-BKG-DATE = VGVar.currentShortGregorianDate; /* set screen date*/
  KG0DM000.KUCCONM = KUCREC.KUCCONM;
  ;
  if (COMMAREA.CAFROMAP == "KA0D")
     /* next sentence*/
  else
    converse KG0DM000 ;
    ;
  end
  ;
  if (COMMAREA.CAFROMAP == "KA0D") /* If adding new customer, force*/
    KG0DM000.KG0DM-SEL-FIELDS = "99"; /* all fields selected.*/
  end
  ;
  KG0DM000.KG0DM-BKG-MSG = " ";
  KG0DM000.VAGen_EZEMSG = " ";
  ;
   /* edit enter  key -------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
     /* ----- read company -----**/
    set KG0DM000.KUCCOID initialAttributes;
    set KG0DM100.KUMSTSNM initialAttributes;
    set KG0DM100.KUJSLFID initialAttributes;
    set KG0DM100.XGPABRV initialAttributes;
    if (KG0DW-01.KG0DW-FIRST-TIME == "Y")
      set KUCREC empty;
      KUCREC.KUCCOID = KG0DM000.KUCCOID; /* build vcmpny01 read key*/
      KG0D210(); /* read vcmpny01*/
      if (KG0DW-01.KG0DW-ERROR == "Y") /* not found?*/
        set KG0DM000 initial;
        set KG0DM100 initial;
        KG0DM000.KUCCOID = KUCREC.KUCCOID; /* set company key*/
        set KG0DM000.KUCCOID cursor, bold;
        KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
        exit stack;
      else
        KG0DW-01.KG0DW-FIRST-TIME = "N";
      end
    end
     /* ----- edit control field selection -----**/
    if (KG0DM000.KG0DM-SEL-FIELDS == 0)
      set KG0DM000.KG0DM-SEL-FIELDS cursor, bold;
      KG0DM000.VAGen_EZEMSG = "MUST SELECT CONTROL FIELDS TO DISPLAY";
      KG0DW-01.KG0DW-ERROR = "Y";
      exit stack;
    end
    ;
    KG0DM100.KUCCOID = KG0DM000.KUCCOID;
    KG0DM100.KG0DM-SEL-STORE = "    ";
    KG0DM100.KG0DM-SEL-DEPT = "  ";
    KG0DM100.KG0DM-SEL-GPC = "  ";
    ;
    KG0DW-01.KUCCOID = KG0DM000.KUCCOID;
    KG0DW-01.KG0DW-SEL-STORE = "    ";
    KG0DW-01.KG0DW-SEL-DEPT = "  ";
    KG0DW-01.XGPCD = "  ";
    ;
    if (KG0DW-CHG-SECURITY == "Y")
      KG0DM100.KG0DM-BKG-TITLE = "UPDATE";
      KG0DM200.KG0DM-BKG-TITLE = "UPDATE";
    else
      KG0DM100.KG0DM-BKG-TITLE = "INQUIRY";
      KG0DM200.KG0DM-BKG-TITLE = "INQUIRY";
    end
    ;
    KG0D250(); /* format vculvl01 to kg0dm100*/
    ;
    KG0DW-01.KG0DW-M100-DONE = "N";
    while (KG0DW-01.KG0DW-M100-DONE == "N")
      KG0D100();
    end
    ;
    exit stack;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to from application*/
    if (COMMAREA.CAFROMAP == "KA0D") /* keep key fields for*/
      /* NEXT SENTENCE               next add function.*/
    else
      KG0DW-01.KG0DW-CA-COMPANY = KG0DM000.KUCCOID;
      KG0DW-01.KG0DW-CA-STORE = 0;
      KG0DW-01.KG0DW-CA-DEPT = 0;
      KG0DW-01.KG0DW-CA-GPC = "  ";
    end
    COMMAREA.CAUSERA = KG0DW-01.KG0DW-CA;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KG0D";
    XSEXIT();
    KG0DM000.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0DW-01.KG0DW-ERROR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KG0D";
    XSPF4();
    KG0DM000.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0DW-01.KG0DW-ERROR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit invalid key*/
   /* **************************************/
  ;
  if (KG0DW-01.KG0DW-ERROR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0DW-01.KG0DW-ERROR = "Y";
  end
  ;
  exit stack;
  ;
end // end KG0D010

// ----- SEND KG0DM100 ----------
Function KG0D100()
   /* *******************************************/
   /* customer process control screen         **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* *******************************************/
  ;
  KG0DW-01.KG0DW-ERROR = "N"; /* init error flag*/
  KG0DW-01.KG0DW-DEL-MODE = "N"; /* reset (not) ok to delete*/
  KG0DW-01.KG0DW-ADD-MODE = "N"; /* reset (not) ok to add*/
  KG0DW-01.KG0DW-DTL-SELECTED = "Y"; /* set dtl selected flag*/
  KG0DM100.KG0DM-BKG-DATE = VGVar.currentShortGregorianDate; /* set screen date*/
  KG0DM100.KUCCOID = KG0DW-01.KUCCOID;
  KG0DM100.KUCCONM = KUCREC.KUCCONM;
  KG0DM100.KG0DM-SEL-STORE = KG0DW-01.KG0DW-SEL-STORE;
  KG0DM100.KG0DM-SEL-DEPT = KG0DW-01.KG0DW-SEL-DEPT;
  KG0DM100.KG0DM-SEL-GPC = KG0DW-01.KG0DW-SEL-GPC;
  ;
  if (COMMAREA.CAFROMAP == "KA0D")
    KG0DM-PF3-DESC = "3:NEXT";
  end
  ;
  if (COMMAREA.CAFROMAP == "KA0D"
   && KG0DW-SCR-MAX == 0) /* no rows exist*/
     /* next sentence go directly to ADD screen*/
  else
    converse KG0DM100 ;
    ;
  end
  ;
  if (COMMAREA.CAFROMAP == "KA0D" /* default to ADD mode.*/
   && KG0DW-SCR-MAX == 0)         /* no rows exist*/
    KG0DW-01.KG0DW-ADD-MODE = "Y";
  end
  ;
  KG0DM100.KG0DM-BKG-MSG = " ";
  KG0DM100.VAGen_EZEMSG = " ";
  ;
  KG0D300(); /* edit pf and special keys*/
  ;
  if (KG0DW-01.KG0DW-ERROR == "Y" /* if errors*/
   || KG0DW-01.KG0DW-M100-DONE == "Y") /* or exit from m100*/
    return;
  end
  ;
  KG0D350(); /* edit screen*/
  ;
  if (KG0DW-01.KG0DW-ERROR == "Y") /* if errors*/
    return;
  end
  ;
  if (KG0DW-01.KG0DW-FIRST-TIME == "Y")
    KG0DW-01.KG0DW-FIRST-TIME = "N";
  else
    if (KG0DW-01.KG0DW-ADD-MODE == "Y") /* --------------------- add ------*/
      KG0D160(); /* process adds*/
    else
      if (KG0DW-01.KG0DW-DEL-MODE == "Y") /* ------------------- del ------*/
        if (KG0DW-01.KG0DW-SCR-IDX > 1) /* put 1st page onto M100*/
          KG0DW-01.KG0DW-SCR-IDX = 1; /* read temp page (1)*/
          KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-IDX;
          KG0D292(); /* load M100 from temp*/
        end
        if (KG0DM100.KG0DM-DTL-OPTION[1] == "S" /* no del on -1/-1/***/
         && KG0DM100.KG0DM-DTL-STORE[1] == -1   
         && KG0DM100.KG0DM-DTL-DEPT[1] == -1    
         && KG0DM100.KG0DM-DTL-GPC[1] == "**") 
          KG0DM100.VAGen_EZEMSG = "CANNOT DELETE THIS RECORD";
          KG0DW-01.KG0DW-ERROR = "Y";
          set KG0DM100.KG0DM-DTL-OPTION[1] bold, cursor;
          return;
        end
        KG0D140(); /* process deletes*/
      else
        if (converseVar.eventKey is enter) /* ----------------------- inq/upd --*/
          KG0D150(); /* process updates*/
        end
      end
    end
  end
  ;
  if (KG0DW-01.KG0DW-DTL-SELECTED == "N") /* del/upd/inq requested w/o select*/
    converseLib.validationFailed(224); /* must enter 's' msg*/
  end
  ;
end // end KG0D100

// format M200 from VCULVL01
Function KG0D130()
  /* ****************************************************************/
  /* Load KG0DM200 Update Screen*/
  /* ****************************************************************/
  ;
  KG0DM200.KUCCOID = VCULVL01.KUCCOID;
  KG0DM200.KG0DM-DTL-STORE = VCULVL01.KUMSTRID;
  KG0DM200.KG0DM-DTL-DEPT = VCULVL01.XNXCD;
  KG0DM200.KG0DM-DTL-GPC = VCULVL01.XGPCD;
  ;
  KG0DM200.XACCD = VCULVL01.XACCD; /* aloc category*/
  KG0DM200.OP1ALSEQ = VCULVL01.OP1ALSEQ; /* aloc seq*/
  KG0DM200.XNACD = VCULVL01.XNACD; /* natl acct*/
  KG0DM200.KUNABOFL = VCULVL01.KUNABOFL; /* backord flag*/
  KG0DM200.KUNBOQTY = VCULVL01.KUNBOQTY; /* backord qty*/
  KG0DM200.KUNMAPCT = VCULVL01.KUNMAPCT; /* min aloc pct*/
  KG0DM200.XIDCD = VCULVL01.XIDCD; /* invoice distrib*/
  KG0DM200.XSOCD = VCULVL01.XSOCD; /* sales office*/
  KG0DM200.KUJCRIND = VCULVL01.KUJCRIND; /* credit hold*/
end // end KG0D130

// =====  DELETE  ===============
Function KG0D140()
  /* *************************************************************/
  /* kg0d140 - process deletes                                **/
  /* *************************************************************/
  set KG0DM200.KUCCOID initialAttributes, cursor; /* company*/
  set KG0DM200.KG0DM-DTL-STORE protect; /* store*/
  set KG0DM200.KG0DM-DTL-DEPT protect; /* dept*/
  set KG0DM200.KG0DM-DTL-GPC protect; /* gpc*/
  ;
  KG0DM200.KG0DM-BKG-MODE = "DELETE ";
  ;
   /* ----- loop thru M100 selections for delete*/
  ;
  KG0DW-01.KG0DW-DTL-SELECTED = "N"; /* reset dtl selected flag*/
  KG0DW-01.KG0DW-SCR-WRK = 0;
  while (KG0DW-01.KG0DW-SCR-WRK < KG0DW-01.KG0DW-SCR-MAX)
    KG0DW-01.KG0DW-SCR-WRK = KG0DW-01.KG0DW-SCR-WRK + 1;
    KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-WRK;
    KG0D292(); /* read temp storage page*/
    KG0DW-01.KG0DW-LN-IDX = 1;
    while (KG0DW-01.KG0DW-LN-IDX < 15)
      if (KG0DW-02.KG0DW-DTL-OPTION[KG0DW-LN-IDX] == "S")
        KG0DW-01.KG0DW-DTL-SELECTED = "Y"; /* set dtl selected flag*/
        VCULVL01.VCULVL01-GROUP = KG0DW-02.VCULVL01-GROUP[KG0DW-LN-IDX];
        KG0D130(); /* format M200 from this M100 row*/
        KG0DW-01.KG0DW-M200-DONE = "N";
        while (KG0DW-01.KG0DW-M200-DONE == "N")
          KG0D600(); /* converse M200*/
        end
      end
      KG0DW-01.KG0DW-LN-IDX = KG0DW-01.KG0DW-LN-IDX + 1;
    end
  end
  ;
   /* ----- end delete loop*/
  ;
  KG0DW-01.KG0DW-M200-DONE = "Y";
  ;
  KG0D200(); /* refresh M100*/
  KG0D250(); /* format vculvl01 to M100*/
  ;
end // end KG0D140

// =====  UPDATE  ===============
Function KG0D150()
  /* *************************************************************/
  /* KM0R150 - process updates                                **/
  /* *************************************************************/
  set KG0DM200.KG0DM-DTL-STORE protect; /* store*/
  set KG0DM200.KG0DM-DTL-DEPT protect; /* dept*/
  set KG0DM200.KG0DM-DTL-GPC protect; /* gpc*/
  ;
   /* ----- enable control field update depending on change security*/
  ;
  if (KG0DW-01.KG0DW-CHG-SECURITY == "Y")
    KG0DM200.KG0DM-BKG-MODE = "UPDATE ";
    if (COMMAREA.CACLVL[9] == "Y") /* change level 9*/
      set KG0DM200.KUJCRIND cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[8] == "Y") /* change level 8*/
      set KG0DM200.XSOCD cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[7] == "Y") /* change level 7*/
      set KG0DM200.XIDCD cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[6] == "Y") /* change level 6*/
      set KG0DM200.KUNMAPCT cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[5] == "Y") /* change level 5*/
      set KG0DM200.KUNBOQTY cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[4] == "Y") /* change level 4*/
      set KG0DM200.KUNABOFL cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[3] == "Y") /* change level 3*/
      set KG0DM200.XNACD cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[2] == "Y") /* change level 2*/
      set KG0DM200.OP1ALSEQ cursor, initialAttributes;
    end
    if (COMMAREA.CACLVL[1] == "Y") /* change level 1*/
      set KG0DM200.XACCD cursor, initialAttributes;
    end
  else
    set KG0DM200.KUCCOID initialAttributes, cursor;
    KG0DM200.KG0DM-BKG-MODE = "INQUIRY";
  end
  ;
   /* ----- loop thru M100 selections for update*/
  ;
  KG0DW-01.KG0DW-DTL-SELECTED = "N"; /* reset dtl selected flag*/
  KG0DW-01.KG0DW-SCR-WRK = 0;
  while (KG0DW-01.KG0DW-SCR-WRK < KG0DW-01.KG0DW-SCR-MAX)
    KG0DW-01.KG0DW-SCR-WRK = KG0DW-01.KG0DW-SCR-WRK + 1;
    KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-WRK;
    KG0D292(); /* read temp storage page*/
    KG0DW-01.KG0DW-LN-IDX = 1;
    while (KG0DW-01.KG0DW-LN-IDX < 15)
      if (KG0DW-02.KG0DW-DTL-OPTION[KG0DW-LN-IDX] == "S")
        KG0DW-01.KG0DW-DTL-SELECTED = "Y"; /* set dtl selected flag*/
        VCULVL01.VCULVL01-GROUP = KG0DW-02.VCULVL01-GROUP[KG0DW-LN-IDX];
        KG0D130(); /* format M200 from this M100 row*/
        KG0DW-01.KG0DW-M200-DONE = "N";
        while (KG0DW-01.KG0DW-M200-DONE == "N")
          KG0D600(); /* converse M200*/
        end
      end
      KG0DW-01.KG0DW-LN-IDX = KG0DW-01.KG0DW-LN-IDX + 1;
    end
  end
  ;
   /* ----- end update loop*/
  ;
  KG0DW-01.KG0DW-M200-DONE = "Y";
  KG0D200(); /* refresh M100*/
  KG0D250(); /* format vculvl01 to M100*/
  ;
end // end KG0D150

// =====  ADD  ==================
Function KG0D160()
  /* *************************************************************/
  /* process adds                                   **/
  /* *************************************************************/
  ;
  KG0D161(); /* format add screen*/
  ;
   /* ----- loop on "add" until M200 forces the exit*/
  ;
  KG0DW-01.KG0DW-M200-DONE = "N";
  while (KG0DW-01.KG0DW-M200-DONE == "N")
    KG0D600();
  end
  ;
end // end KG0D160

// format add screen
Function KG0D161()
  /* *************************************************************/
  /* format add screen*/
  /* *************************************************************/
  ;
  KG0DM200.KG0DM-BKG-TITLE = "UPDATE ";
  KG0DM200.KG0DM-BKG-DATE = VGVar.currentShortGregorianDate;
  ;
  KG0DM200.KUCCOID = KG0DM100.KUCCOID;
  ;
  if (KG0DM100.KG0DM-SEL-STORE == "    ")
    KG0DM200.KG0DM-DTL-STORE = -1;
  else
    KG0DM200.KG0DM-DTL-STORE = KG0DM100.KG0DM-SEL-STORE;
  end
  if (KG0DM100.KG0DM-SEL-DEPT == "  ")
    KG0DM200.KG0DM-DTL-DEPT = -1;
  else
    KG0DM200.KG0DM-DTL-DEPT = KG0DM100.KG0DM-SEL-DEPT;
  end
  if (KG0DM100.KG0DM-SEL-GPC == "  ")
    KG0DM200.KG0DM-DTL-GPC = "**";
  else
    KG0DM200.KG0DM-DTL-GPC = KG0DM100.KG0DM-SEL-GPC;
  end
  ;
  set KG0DM200.KG0DM-DTL-STORE initialAttributes, cursor; /* store*/
  set KG0DM200.KG0DM-DTL-DEPT initialAttributes; /* department*/
  set KG0DM200.KG0DM-DTL-GPC initialAttributes; /* gpc*/
  ;
  KG0DM200.KG0DM-BKG-MODE = "ADD    ";
  ;
   /* ----- allow control field entry depending on change security*/
  ;
    /* ------- xaccd    / aloc code ---------------------------*/
  if (COMMAREA.CACLVL[1] == "Y") /* change level 1*/
    set KG0DM200.XACCD initialAttributes;
    KG0DM200.XACCD = "  ";
  else
    KG0DM200.XACCD = "**";
  end
     /* ------- op1alseq / aloc seq ----------------------------*/
  if (COMMAREA.CACLVL[2] == "Y") /* change level 2*/
    set KG0DM200.OP1ALSEQ initialAttributes;
    KG0DM200.OP1ALSEQ = 0;
  else
    KG0DM200.OP1ALSEQ = -1;
  end
     /* ------- xnacd    / natl acct code ----------------------*/
  if (COMMAREA.CACLVL[3] == "Y") /* change level 3*/
    set KG0DM200.XNACD initialAttributes;
    KG0DM200.XNACD = "  ";
  else
    KG0DM200.XNACD = "**";
  end
     /* ------- kunabofl / backord flag ------------------------*/
  if (COMMAREA.CACLVL[4] == "Y") /* change level 4*/
    set KG0DM200.KUNABOFL initialAttributes;
  else
    KG0DM200.KUNABOFL = "*";
  end
     /* ------- kunboqty / backord qty -------------------------*/
  if (COMMAREA.CACLVL[5] == "Y") /* change level 5*/
    set KG0DM200.KUNBOQTY initialAttributes;
  else
    KG0DM200.KUNBOQTY = -1;
  end
     /* ------- kunmapct / min aloc percent --------------------*/
  if (COMMAREA.CACLVL[6] == "Y") /* change level 6*/
    set KG0DM200.KUNMAPCT initialAttributes;
    KG0DM200.KUNMAPCT = 0;
  else
    KG0DM200.KUNMAPCT = -1;
  end
     /* ------- xidcd    / invoice distribution ----------------*/
  if (COMMAREA.CACLVL[7] == "Y") /* change level 7*/
    set KG0DM200.XIDCD initialAttributes;
    KG0DM200.XIDCD = "  ";
  else
    KG0DM200.XIDCD = "**";
  end
     /* ------- xsocd    / sales office ------------------------*/
  if (COMMAREA.CACLVL[8] == "Y") /* change level 8*/
    set KG0DM200.XSOCD initialAttributes;
    KG0DM200.XSOCD = "  ";
  else
    KG0DM200.XSOCD = "**";
  end
     /* ------- kujcrind / cr hold ind -------------------------*/
  if (COMMAREA.CACLVL[9] == "Y") /* change level 9*/
    set KG0DM200.KUJCRIND initialAttributes;
    KG0DM200.KUJCRIND = " ";
  else
    KG0DM200.KUJCRIND = "*";
  end
  ;
     /* ------- Check for 1st Add      -------------------------*/
  ;
  KG0DS61();
  ;
     /* ------- NIL ADD  defaults      -------------------------*/
  if (COMMAREA.CADLVL[2] == "Y"
   && COMMAREA.CAFROMAP == "KA0D") /* default from ADD process only*/
    KG0DM200.XACCD = "D1";
    KG0DM200.OP1ALSEQ = 12500;
  end
end // end KG0D161

// refresh M100
Function KG0D200()
   /* *********************************************************/
     /* read and format KG0DM100 process control screen*/
   /* *********************************************************/
  ;
  set KG0DM100.KUCCOID cursor, normal;
  set KG0DM100.KUMSTSNM normal;
  set KG0DM100.KUMSTSNM skip;
  set KG0DM100.KUJSLFID normal;
  set KG0DM100.KUJSLFID skip;
  set KG0DM100.XGPABRV normal;
  set KG0DM100.XGPABRV skip;
  ;
   /* *********** read company ***********************/
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = KG0DM100.KUCCOID; /* set company key*/
  KG0D210(); /* read vcmpny01*/
  if (KG0DW-01.KG0DW-ERROR == "Y") /* vcmpny01 not found?*/
    set KG0DM100 initial;
    KG0DM100.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KG0DM100.KUCCOID cursor, bold;
    return; /* error return*/
  end
  ;
   /* *********** read store ***********************/
  ;
  set KUMREC empty;
  if (KG0DM100.KG0DM-SEL-STORE != "    ")
    KUMREC.KUCCOID = KG0DM100.KUCCOID; /* set store key*/
    KG0DW-01.KG0DW-SEL-STORE = KG0DM100.KG0DM-SEL-STORE;
    KUMREC.KUMSTRID = KG0DW-01.KG0DW-KUMSTRID; /* sel-store redef*/
    KG0D220(); /* read vstore01*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* store not found?*/
      KUMREC.KUMSTSNM = "INVALID";
      set KG0DM100.KUMSTSNM skip, bold;
      KG0DW-01.KG0DW-ERROR = "N";
    end
  end
  ;
   /* *********** read department ******************/
  ;
  set KUJREC empty;
  if (KG0DM100.KG0DM-SEL-DEPT != "    ")
    KUJREC.KUCCOID = KG0DM100.KUCCOID; /* set store key*/
    KG0DW-01.KG0DW-SEL-DEPT = KG0DM100.KG0DM-SEL-DEPT;
    KUJREC.XNXCD = KG0DW-01.KG0DW-XNXCD; /* sel-dept redef> xnxcd*/
    KG0D230(); /* read vdept001*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* not found?*/
      KUJREC.KUJSLFID = "INVALID";
      set KG0DM100.KUJSLFID skip, bold;
      KG0DW-01.KG0DW-ERROR = "N";
    end
  end
  ;
   /* *********** read gpc ***********************/
  ;
  if (KG0DM100.KG0DM-SEL-GPC != "  ")
    if (KG0DM100.KG0DM-SEL-GPC in XGPTBL.XGPCD)
      XGPTBL.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      XGPTBL.XGPABRV = "INVALID";
      set KG0DM100.XGPABRV skip, bold;
      KG0DW-01.KG0DW-ERROR = "N";
    end
  end
  ;
   /* *********** build screen header info *******/
  ;
  KG0DW-01.KUCCOID = KG0DM100.KUCCOID;
  KG0DW-01.KG0DW-SEL-STORE = KG0DM100.KG0DM-SEL-STORE;
  KG0DW-01.KG0DW-SEL-DEPT = KG0DM100.KG0DM-SEL-DEPT;
  KG0DW-01.XGPCD = KG0DM100.KG0DM-SEL-GPC;
  ;
  if (KG0DW-01.KG0DW-CHG-SECURITY == "Y")
    KG0DM100.KG0DM-BKG-TITLE = "UPDATE ";
    KG0DM200.KG0DM-BKG-TITLE = "UPDATE ";
  else
    KG0DM100.KG0DM-BKG-TITLE = "INQUIRY";
    KG0DM200.KG0DM-BKG-TITLE = "INQUIRY";
  end
  ;
end // end KG0D200

// read VCMPNY01/XAU/XAT
Function KG0D210()
   /* *************************************************/
   /* get company record   kucrec*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KG0DM100.KUCCOID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error message.*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D210";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
   /* edit for account class code*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KG0DW-01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KG0DW-01.XATCD = " ";
    end
  else
    KG0DW-01.XATCD = " ";
  end
  ;
   /* edit account type for allowance of user groups*/
  ;
  if (KG0DW-01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* update flag= n*/
    end
  else
    if (KG0DW-01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* update flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* update flag = n*/
      end
    end
  end
  ;
  if (KUCREC.XLECD == "03") /* edit for Nike Canada user*/
    if (COMMAREA.CADLVL[3] == "Y")
      KG0DW-01.KG0DW-CHG-SECURITY = "Y"; /* update flag = y*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* update flag = n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0DW-01.KG0DW-CHG-SECURITY = "N"; /* update flag = n*/
    end
  end
end // end KG0D210

// read VSTORE01
Function KG0D220()
   /* *************************************************/
   /* get store record   kumrec*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* read store01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error message.*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = KUMREC.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D220";
      TA1REC.TA1LOC = "READING DB2 STORE01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D220

// read VDEPT001
Function KG0D230()
   /* *************************************************/
   /* get department record   kujrec*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* read dept001*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error message.*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = KUJREC.KUCCOID;
      KG0DW-01.KG0DW-KY-DEPT = KUJREC.XNXCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D225";
      TA1REC.TA1LOC = "READING DB2 DEPT001";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D230

// select scan VCULVL01
Function KG0D240()
   /* *************************************************/
   /* get process control record vculvl01*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0990" ("S1", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes}; /* read hndlx01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
      KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D250";
      TA1REC.TA1LOC = "READING DB2 CULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
end // end KG0D240

// build M100
Function KG0D250()
  /* *************************************************************/
  /* Build M100 Screen                       **/
  /* *************************************************************/
  ;
   /* set vculvl01 key and move names to map -------------------*/
  ;
  set VCULVL01 empty; /* initialize the vculvl01 key*/
  ;
  VCULVL01.KUCCOID = KG0DM100.KUCCOID;
  KG0DM100.KUCCONM = KUCREC.KUCCONM; /* company name*/
  ;
  if (KG0DM100.KG0DM-SEL-STORE == "    ")
    VCULVL01.KUMSTRID = -1;
    KG0DM100.KUMSTSNM = "ALL";
  else
    KG0DW-01.KG0DW-SEL-STORE = KG0DM100.KG0DM-SEL-STORE;
    VCULVL01.KUMSTRID = KG0DW-01.KG0DW-KUMSTRID;
    KG0DM100.KUMSTSNM = KUMREC.KUMSTRNM; /* store short name*/
  end
  ;
  if (KG0DM100.KG0DM-SEL-DEPT == "  ")
    VCULVL01.XNXCD = -1;
    KG0DM100.KUJSLFID = "ALL";
  else
    KG0DW-01.KG0DW-SEL-DEPT = KG0DM100.KG0DM-SEL-DEPT;
    VCULVL01.XNXCD = KG0DW-01.KG0DW-XNXCD;
    KG0DM100.KUJSLFID = KUJREC.KUJSLFID; /* dept self-id*/
  end
  ;
  if (KG0DM100.KG0DM-SEL-GPC == "  ")
    VCULVL01.XGPCD = "**";
    KG0DM100.XGPABRV = "ALL";
  else
    VCULVL01.XGPCD = KG0DM100.KG0DM-SEL-GPC;
    KG0DM100.XGPABRV = XGPTBL.XGPABRV; /* gpc description*/
  end
  ;
   /* open cursor and fetch first vculvl01 row -----------------*/
  ;
  KG0D240(); /* select scan on vculvl01*/
  KG0D260(); /* select next vculvl01*/
  ;
   /* index each vculvl01 row to the kg0dw-02 screen image -----*/
   /* write kg0dw-02 to temp storage as pages are filled -------*/
   /* close the vculvl01 cursor after all rows are selected ----*/
  ;
  KG0DW-03.KG0DW-SCR-REF = 0;
  KG0DW-01.KG0DW-SCR-MAX = 0;
  KG0DW-01.KG0DW-LN-IDX = 0;
  ;
  KG0D290(); /* purge temp storage*/
  if (KG0DW-01.KG0DW-ERROR == "Y")
    return;
  end
  ;
  while (VAGen_SQLCODE == 0)
    KG0DW-01.KG0DW-LN-IDX = KG0DW-01.KG0DW-LN-IDX + 1;
    KG0DW-02.VCULVL01-GROUP[KG0DW-LN-IDX] = VCULVL01.VCULVL01-GROUP;
    if (KG0DW-01.KG0DW-LN-IDX == 14)
      KG0DW-03.KG0DW-SCR-REF = KG0DW-03.KG0DW-SCR-REF + 1;
      KG0D291(); /* add screen to temp storage*/
      set KG0DW-02 empty;
      KG0DW-01.KG0DW-LN-IDX = 0;
    end
    KG0D260(); /* select next vculvl01*/
  end
  ;
  if (KG0DW-01.KG0DW-LN-IDX > 0)
    KG0DW-03.KG0DW-SCR-REF = KG0DW-03.KG0DW-SCR-REF + 1;
    KG0D291(); /* add screen to temp storage*/
    set KG0DW-02 empty;
  end
  ;
  KG0DW-01.KG0DW-SCR-MAX = KG0DW-03.KG0DW-SCR-REF;
  ;
  KG0D265(); /* close vculvl01*/
  ;
   /* load M100 from the first temp storage screen page --------*/
  ;
  KG0DW-01.KG0DW-SCR-IDX = 1; /* get the first temp storage screen*/
  KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-IDX;
  KG0D292(); /* load M100 from temp*/
  ;
end // end KG0D250

// select next VCULVL01
Function KG0D260()
   /* *************************************************/
   /* get next vculvl01*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0990" ("N1", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes}; /* read culvl01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
      KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D250";
      TA1REC.TA1LOC = "READING DB2 CULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D260

// close cursor VCULVL01
Function KG0D265()
   /* *************************************************/
   /* close cursor on vculvl01*/
   /* *************************************************/
  ;
  call "IO0990" ("C1", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes}; /* close culvl*/
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1REC.TA1MAP = " ";
    KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
    KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
    KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
    KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
    TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
    TA1REC.TA1PGMNM = "KG0D250";
    TA1REC.TA1LOC = "CLOSING DB2 VCULVL01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
end // end KG0D265

// purge temp storage
Function KG0D290()
   /* ***************************************/
   /* PURGE STORE TEMP STORAGE*/
   /* ***************************************/
  ;
  KG0DW-03.KG0DW-APPL = "KG0D";
  KG0DW-03.KG0DW-SCR-REF = 0;
  KG0DW-03.KG0DW-RETURN = 0;
  KG0DW-03.KG0DW-FUNCTION = "P"; /* purge temp work file*/
  ;
  set KG0DW-02 empty;
  KG0DW-02.KG0DW-TEMP-STR-LENGTH = 578;
  ;
  call "TA0050" (KG0DW-02, KG0DW-03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0DW-03.KG0DW-RETURN != 0) /* error encountered*/
    KG0DW-01.KG0DW-ERROR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0D290

// add to temp storage
Function KG0D291()
   /* ************************************************/
   /* WRITE KGODW-02 TO TEMPORARY STORAGE*/
   /* ************************************************/
  ;
  KG0DW-02.KG0DW-TEMP-STR-LENGTH = 578;
  ;
  KG0DW-03.KG0DW-APPL = "KG0D";
  KG0DW-03.KG0DW-FUNCTION = "A";
  KG0DW-03.KG0DW-RETURN = 0;
  ;
  call "TA0050" (KG0DW-02, KG0DW-03) {isNoRefresh = yes, isExternal = yes};
  if (KG0DW-03.KG0DW-RETURN != 0)
    KG0DW-01.KG0DW-ERROR = "Y";
    converseLib.validationFailed(228);
  end
  ;
end // end KG0D291

// load M100 from temp storage
Function KG0D292()
  /* *************************************************************/
  /* Load M100 detail from temp storage*/
  /* *************************************************************/
  ;
   /* read temp storage ----------------------------------------*/
  ;
  set KG0DW-02 empty;
  ;
  KG0DW-03.KG0DW-APPL = "KG0D";
  KG0DW-03.KG0DW-FUNCTION = "R";
  KG0DW-03.KG0DW-RETURN = 0;
  ;
  KG0DW-02.KG0DW-TEMP-STR-LENGTH = 578;
  ;
  call "TA0050" (KG0DW-02, KG0DW-03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0DW-03.KG0DW-RETURN == 0) /* requested saved screen found*/
    /* next sentence*/
  else
    if (KG0DW-03.KG0DW-RETURN == 4) /* no temp queue => no vculvl01 selected*/
      converseLib.validationFailed(205); /* no records found*/
    else
      if (KG0DW-03.KG0DW-RETURN == 7) /* requested saved screen not found*/
        converseLib.validationFailed(206); /* end of data*/
        KG0DW-01.KG0DW-ERROR = "Y";
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(228);
        KG0DW-01.KG0DW-ERROR = "Y";
      end
      return;
    end
  end
  ;
   /* load M100 from KG0DW-02 ----------------------------------*/
  ;
  KG0DW-01.KG0DW-LN-IDX = 1;
  ;
  while (KG0DW-01.KG0DW-LN-IDX < 15) /* -----------------* for every temp line*/
    if (KG0DW-02.VCULVL01-GROUP[KG0DW-LN-IDX] != " ") /* * if there is detail*/
   /* --* move it to M100*/
      KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] = KG0DW-02.KG0DW-DTL-OPTION[KG0DW-LN-IDX];
      VCULVL01.VCULVL01-GROUP = KG0DW-02.VCULVL01-GROUP[KG0DW-LN-IDX];
      KG0DM100.KG0DM-DTL-STORE[KG0DW-LN-IDX] = VCULVL01.KUMSTRID;
      KG0DM100.KG0DM-DTL-DEPT[KG0DW-LN-IDX] = VCULVL01.XNXCD;
      KG0DM100.KG0DM-DTL-GPC[KG0DW-LN-IDX] = VCULVL01.XGPCD;
      KG0DM100.XACCD[KG0DW-LN-IDX] = VCULVL01.XACCD;
      KG0DM100.OP1ALSEQ[KG0DW-LN-IDX] = VCULVL01.OP1ALSEQ;
      KG0DM100.XNACD[KG0DW-LN-IDX] = VCULVL01.XNACD;
      KG0DM100.KUNABOFL[KG0DW-LN-IDX] = VCULVL01.KUNABOFL;
      KG0DM100.KUNBOQTY[KG0DW-LN-IDX] = VCULVL01.KUNBOQTY;
      KG0DM100.KUNMAPCT[KG0DW-LN-IDX] = VCULVL01.KUNMAPCT;
      KG0DM100.XIDCD[KG0DW-LN-IDX] = VCULVL01.XIDCD;
      KG0DM100.XIDCD[KG0DW-LN-IDX] = VCULVL01.XSOCD;
      KG0DM100.KUJCRIND[KG0DW-LN-IDX] = VCULVL01.KUJCRIND;
      set KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KG0DM-DTL-STORE[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KG0DM-DTL-DEPT[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KG0DM-DTL-GPC[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.XACCD[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.OP1ALSEQ[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.XNACD[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KUNABOFL[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KUNBOQTY[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KUNMAPCT[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.XIDCD[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.XSOCD[KG0DW-LN-IDX] initialAttributes;
      set KG0DM100.KUJCRIND[KG0DW-LN-IDX] initialAttributes;
    else /* -------------------------------------------* otherwise blank it*/
      KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] = " ";
      set KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KG0DM-DTL-STORE[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KG0DM-DTL-DEPT[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KG0DM-DTL-GPC[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.XACCD[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.OP1ALSEQ[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.XNACD[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KUNABOFL[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KUNBOQTY[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KUNMAPCT[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.XIDCD[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.XSOCD[KG0DW-LN-IDX] protect, invisible;
      set KG0DM100.KUJCRIND[KG0DW-LN-IDX] protect, invisible;
    end
    KG0DW-01.KG0DW-LN-IDX = KG0DW-01.KG0DW-LN-IDX + 1;
  end
  ;
end // end KG0D292

// update temp storage
Function KG0D293()
   /* ************************************************/
   /* UPDATE KGODW-02 TO TEMPORARY STORAGE*/
   /* ************************************************/
  ;
  KG0DW-02.KG0DW-TEMP-STR-LENGTH = 578;
  ;
  KG0DW-03.KG0DW-APPL = "KG0D";
  KG0DW-03.KG0DW-FUNCTION = "U";
  KG0DW-03.KG0DW-RETURN = 0;
  ;
  call "TA0050" (KG0DW-02, KG0DW-03) {isNoRefresh = yes, isExternal = yes};
  if (KG0DW-03.KG0DW-RETURN != 0)
    KG0DW-01.KG0DW-ERROR = "Y";
    converseLib.validationFailed(228);
  end
  ;
end // end KG0D293

// process pfkeys
Function KG0D300()
   /* ************************************************/
   /* edit all special entry keys*/
   /* ************************************************/
  ;
   /* edit pa2 key*/
  ;
  if (converseVar.eventKey is pa2)
    KG0D200(); /* refresh M100*/
    KG0D250(); /* format vculvl01 to M100*/
    KG0DW-01.KG0DW-ERROR = "Y"; /* set error flagto display screen*/
    KG0DW-01.KG0DW-CULVL-MOD = "N";
    KG0DW-01.KG0DW-READY-TO-UPD = "N";
    return;
  end
  ;
   /* edit enter  key*/
  ;
  if (converseVar.eventKey is enter)
    if (KG0DM100.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KG0DM100.CATOAP;
      if (KG0DM100.CAITEM == " ")
        KG0DW-01.KG0DW-CA-COMPANY = KG0DW-01.KUCCOID;
        KG0DW-01.KG0DW-CA-STORE = KG0DW-01.KG0DW-SEL-STORE;
        KG0DW-01.KG0DW-CA-DEPT = KG0DW-01.KG0DW-SEL-DEPT;
        KG0DW-01.KG0DW-CA-GPC = KG0DW-01.XGPCD;
        COMMAREA.CAUSERA = KG0DW-01.KG0DW-CA;
      else
        COMMAREA.CAITEM = KG0DM100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KG0D";
      XSEXIT();
      KG0DM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KG0DW-01.KG0DW-ERROR = "Y";
      set KG0DM100.CATOAP cursor, bold;
    else
      set KG0DM100.CATOAP initialAttributes;
    end
    COMMAREA.CAUSERA = KG0DW-01.KG0DW-CA;
    return;
  else
    if (KG0DM100.CATOAP > " ")
      KG0DW-01.KG0DW-ERROR = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KG0DM100.CATOAP cursor, bold;
      return;
    else
      set KG0DM100.CATOAP modified;
    end
  end
  ;
   /* edit pf3 key*/
  ;
  if (converseVar.eventKey is pf3) /* back to control selection screen*/
    KG0DW-01.KG0DW-M100-DONE = "Y";
    if (COMMAREA.CAFROMAP == "KA0D")
       /* NEXT SENTENCE*/
    else
      KG0DM000.KUCCOID = KUCREC.KUCCOID;
      KG0DW-01.KG0DW-CA-COMPANY = KUCREC.KUCCOID;
      KG0DW-01.KG0DW-CA-STORE = 0;
      KG0DW-01.KG0DW-CA-DEPT = 0;
      KG0DW-01.KG0DW-CA-GPC = "  ";
    end
    return;
  end
  ;
   /* edit pf4 key*/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KG0D";
    XSPF4();
    KG0DM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0DW-01.KG0DW-ERROR = "Y";
    return;
  end
  ;
   /* edit pf7 key*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll up*/
    if (KG0DW-01.KG0DW-SCR-IDX == 1)
      converseLib.validationFailed(208); /* beginning of data*/
      KG0DW-01.KG0DW-ERROR = "Y";
    end
    return;
  end
  ;
   /* edit pf8 key*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll up*/
    if (KG0DW-01.KG0DW-SCR-IDX == KG0DW-01.KG0DW-SCR-MAX)
      converseLib.validationFailed(206); /* end of data*/
      KG0DW-01.KG0DW-ERROR = "Y";
    end
    return;
  end
  ;
   /* edit pf9 key*/
  ;
  if (converseVar.eventKey is pf9) /* add control exception*/
    if (KG0DW-01.KG0DW-CHG-SECURITY == "Y") /* in update mode*/
      KG0DW-01.KG0DW-ADD-MODE = "Y";
    else
      converseLib.validationFailed(239); /* no "add" security*/
      KG0DW-01.KG0DW-ERROR = "Y";
    end
    return;
  end
  ;
   /* edit pf10 KEY*/
  ;
  if (converseVar.eventKey is pf10) /* del control exception*/
    if (KG0DW-01.KG0DW-CHG-SECURITY == "Y") /* in update mode*/
      KG0DW-01.KG0DW-DEL-MODE = "Y";
    else
      converseLib.validationFailed(237); /* no "delete" security*/
      KG0DW-01.KG0DW-ERROR = "Y";
    end
    return;
  end
  ;
   /* edit invalid key*/
  ;
  if (KG0DW-01.KG0DW-ERROR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0DW-01.KG0DW-ERROR = "Y";
  end
  ;
end // end KG0D300

// rebuild M100 or set M200 scrty
Function KG0D350()
   /* ***********************************************************/
   /* if the M100 key is unchanged then save detail options*/
   /* and reset M200 attributes*/
   /* , otherwise refresh M100*/
   /* ***********************************************************/
  ;
  set KG0DM100.KUCCOID initialAttributes;
  ;
  if (KG0DM100.KUCCOID == KG0DW-01.KUCCOID
   && KG0DM100.KG0DM-SEL-STORE == KG0DW-01.KG0DW-SEL-STORE
   && KG0DM100.KG0DM-SEL-DEPT == KG0DW-01.KG0DW-SEL-DEPT
   && KG0DM100.KG0DM-SEL-GPC == KG0DW-01.KG0DW-SEL-GPC
   && KG0DM100.KUCCOID != 0)
    KG0D360(); /* upd current temp on dtl-option change*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* non-'s' selection*/
      return;
    end
    KG0DW-01.KG0DW-FIRST-TIME = "N";
  else
    KG0DW-01.KG0DW-FIRST-TIME = "Y";
    KG0D200(); /* refresh M100*/
    KG0D250(); /* format vculvl01 to M100*/
    KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
    KG0DW-01.KG0DW-READY-TO-UPD = "N"; /* set update flag*/
    KG0DW-01.KG0DW-CULVL-MOD = "N"; /* set update flag*/
    return;
  end
  ;
   /* retrieve previous page on PF7*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll up*/
    KG0DW-01.KG0DW-SCR-IDX = KG0DW-01.KG0DW-SCR-IDX - 1;
    KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-IDX;
    KG0D292(); /* read temp storage*/
  end
  ;
   /* retrieve next page on PF8*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll up*/
    KG0DW-01.KG0DW-SCR-IDX = KG0DW-01.KG0DW-SCR-IDX + 1;
    KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-IDX;
    KG0D292(); /* read temp storage*/
  end
  ;
   /* reset M200 attributes*/
  ;
  set KG0DM200.XACCD skip; /* aloc code*/
  set KG0DM200.OP1ALSEQ skip; /* aloc seq*/
  set KG0DM200.XNACD skip; /* natl acct cd*/
  set KG0DM200.KUNABOFL skip; /* backord flag*/
  set KG0DM200.KUNBOQTY skip; /* backord qty*/
  set KG0DM200.KUNMAPCT skip; /* min aloc percent*/
  set KG0DM200.XIDCD skip; /* invoice distribution*/
  set KG0DM200.XSOCD skip; /* sales office*/
  set KG0DM200.KUJCRIND skip; /* credit hold*/
  ;
end // end KG0D350

// upd temp on dtl-option change
Function KG0D360()
   /* ***********************************************************/
   /* refresh temp storage for this page if detail options changed*/
   /* ***********************************************************/
  ;
  KG0DW-01.KG0DW-LN-IDX = 1;
  while (KG0DW-01.KG0DW-LN-IDX < 15)
    if (KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] == "S" /* validate selection*/
     || KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] == " ")
      if (KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] /* test for change*/
       != KG0DW-02.KG0DW-DTL-OPTION[KG0DW-LN-IDX])
        KG0DW-01.KG0DW-ERROR = "Y";
        KG0DW-02.KG0DW-DTL-OPTION[KG0DW-LN-IDX] = KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX];
      end
    else /* invalid selection*/
      KG0DW-01.KG0DW-ERROR = "Y";
      converseLib.validationFailed(224); /* must enter 's' msg*/
      set KG0DM100.KG0DM-DTL-OPTION[KG0DW-LN-IDX] bold, cursor;
      return;
    end
    KG0DW-01.KG0DW-LN-IDX = KG0DW-01.KG0DW-LN-IDX + 1;
  end
  ;
  if (KG0DW-01.KG0DW-ERROR == "Y")
    KG0DW-01.KG0DW-ERROR = "N";
    KG0DW-03.KG0DW-SCR-REF = KG0DW-01.KG0DW-SCR-IDX;
    KG0D293(); /* update current temp storage page*/
  end
  ;
end // end KG0D360

// show pop-up windows
Function KG0D400()
   /* ***********************************/
   /* * Pop-up Windows*/
   /* ***********************************/
  ;
   /* ****  aloc codes table  ***********/
  ;
  if (KG0DM200.XACCD == "?")
    KG0DW-01.KG0DW-RESEND-MAP = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID ALLOCATION CODES    ";
    while (XX0XW02.XX0XWEND == "N")
      XPXAC01();
    end
    set KG0DM200.XACCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KG0DM200.XACCD = XACTBL.XACCD[XX0XWPIX];
    end
  end
  ;
  converseLib.clearScreen();
  
  set KG0DM200.XNACD modified;
  ;
end // end KG0D400

// edit VCULVL01 data entry
Function KG0D450()
   /* ***********************************************************/
   /* ------- edit fields from control exception screen --------*/
   /* ***********************************************************/
  ;
   /* ----- check if any changes*/
  ;
  KG0DW-01.KG0DW-CULVL-MOD = "N"; /* reset "culvl01 modified"*/
  ;
  if (KG0DM200.XACCD != VCULVL01.XACCD
   || KG0DM200.OP1ALSEQ != VCULVL01.OP1ALSEQ
   || KG0DM200.XNACD != VCULVL01.XNACD
   || KG0DM200.KUNABOFL != VCULVL01.KUNABOFL
   || KG0DM200.KUNBOQTY != VCULVL01.KUNBOQTY
   || KG0DM200.KUNMAPCT != VCULVL01.KUNMAPCT
   || KG0DM200.XIDCD != VCULVL01.XIDCD
   || KG0DM200.XSOCD != VCULVL01.XSOCD
   || KG0DM200.KUJCRIND != VCULVL01.KUJCRIND
   || KG0DW-01.KG0DW-ADD-MODE == "Y"
   || KG0DW-01.KG0DW-DEL-MODE == "Y")
    KG0DW-01.KG0DW-CULVL-MOD = "Y"; /* culvl01 modified*/
  end
  ;
  if (KG0DW-01.KG0DW-CULVL-MOD != "Y")
    return;
  end
  ;
   /* ----- edit for required entry*/
  ;
  if (KG0DM200.XACCD == " "  /* must have one valid VCULVL01 row*/
   && KG0DM200.OP1ALSEQ == 0 /* if adding*/
   && KG0DW-01.KG0DW-ADD-MODE == "Y")
    KG0DS45();
    if (KG0DW-01.KG0DW-ERROR == "N")
      set KG0DM200.XACCD initialAttributes;
      set KG0DM200.OP1ALSEQ initialAttributes;
    end
  end
  ;
   /* ----- edit aloc category*/
  ;
  if (KG0DM200.XACCD != VCULVL01.XACCD)
    if (KG0DM200.XACCD != "**")
      if (KG0DM200.XACCD != "  ")
        if (KG0DM200.XACCD in XACTBL.XACCD)
          if (XACTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            set KG0DM200.XACCD initialAttributes;
          else
            converseLib.validationFailed(71); /* inactive status - reenter*/
            set KG0DM200.XACCD cursor, modified, bold;
            KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
          end
        else
          converseLib.validationFailed(17); /* invalid code*/
          set KG0DM200.XACCD cursor, modified, bold;
          KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
        end
      else
        converseLib.validationFailed(168); /* aloc category required*/
        set KG0DM200.XACCD cursor, modified, bold;
        KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
      end
    else
      if (KG0DM200.KG0DM-DTL-STORE == -1
       && KG0DM200.KG0DM-DTL-DEPT == -1
       && KG0DM200.KG0DM-DTL-GPC == "**")
        converseLib.validationFailed(459); /* invalid code*/
        set KG0DM200.XACCD cursor, modified, bold;
        KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
      end
    end
  else
    if (KG0DM200.XACCD == "  ")
      converseLib.validationFailed(168); /* assgn ctrl category is required*/
      set KG0DM200.XACCD cursor, modified, bold;
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
    end
  end
  ;
   /* ----- edit aloc sequence*/
  ;
  if (KG0DM200.OP1ALSEQ != VCULVL01.OP1ALSEQ)
    if (KG0DM200.OP1ALSEQ != -1) /* no edit for wildcard*/
      if (KG0DM200.OP1ALSEQ > 0) /* good aloc seq*/
        set KG0DM200.OP1ALSEQ initialAttributes;
      else
        if (KG0DM200.OP1ALSEQ == 0)
          converseLib.validationFailed(167); /* aloc category required*/
          set KG0DM200.OP1ALSEQ cursor, modified, bold;
          KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
        else
          converseLib.validationFailed(17); /* invalid code*/
          set KG0DM200.OP1ALSEQ cursor, modified, bold;
          KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
        end
      end
    else
      if (KG0DM200.KG0DM-DTL-STORE == -1
       && KG0DM200.KG0DM-DTL-DEPT == -1
       && KG0DM200.KG0DM-DTL-GPC == "**")
        converseLib.validationFailed(459); /* invalid code*/
        set KG0DM200.OP1ALSEQ cursor, modified, bold;
        KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
      end
    end
  else
    if (KG0DM200.OP1ALSEQ == 0)
      converseLib.validationFailed(167); /* aloc category required*/
      set KG0DM200.OP1ALSEQ cursor, modified, bold;
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
    end
  end
  ;
   /* ***********    edit national account code     **************/
  ;
  if (KG0DM200.XNACD != VCULVL01.XNACD)
    if (KG0DM200.XNACD != " ")
      if (KG0DM200.XNACD in XNATBL.XNACD)
        if (XNATBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KG0DM200.XNACD initialAttributes;
        else
          KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
          converseLib.validationFailed(458);
          set KG0DM200.XNACD cursor, modified, bold;
        end
      else
        if (KG0DM200.XNACD == "**") /* dont allow wildcard at top level.*/
          if (KG0DM200.KG0DM-DTL-STORE == -1
           && KG0DM200.KG0DM-DTL-DEPT == -1
           && KG0DM200.KG0DM-DTL-GPC == "**")
            KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
            converseLib.validationFailed(459);
            set KG0DM200.XNACD cursor, modified, bold;
          else
              /* next sentence*/
          end
        else
          KG0DW-01.KG0DW-ERROR = "Y"; /* set error flag*/
          converseLib.validationFailed(457);
          set KG0DM200.XNACD cursor, modified, bold;
        end
      end
    end /* end if ne blank*/
  end /* end if modified/not blank*/
  ;
end // end KG0D450

// --- process add record -------
Function KG0D500()
   /* *************************************************/
   /* add handling exceptions and create audit trail*/
   /* *************************************************/
  ;
  XX0XS01(); /* convert csp time/date to db2 format*/
  ;
   /* format culvl key for add*/
  ;
  VCULVL01.KUCCOID = KG0DM200.KUCCOID;
  VCULVL01.KUMSTRID = KG0DM200.KG0DM-DTL-STORE;
  VCULVL01.XNXCD = KG0DM200.KG0DM-DTL-DEPT;
  if (KG0DM200.KG0DM-DTL-GPC == "  ")
    KG0DM200.KG0DM-DTL-GPC = "**";
  end
  VCULVL01.XGPCD = KG0DM200.KG0DM-DTL-GPC;
  ;
  KG0D520(); /* format culvl general data update*/
  ;
   /* ----- prepare add audit trail*/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCULVL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = VCULVL01.KUCCOID;
  KUZREC.KUMSTRID = VCULVL01.KUMSTRID;
  KUZREC.XNXCD = VCULVL01.XNXCD;
  KUZREC.XGPCD = VCULVL01.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = VCULVL01.VCULVL01-GROUP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0D   ";
    TA1REC.TA1LOCAT[1] = "KG0D500  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCULVL01 ";
    TA1REC.TA1MAP = "KG0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KG0D510(); /* add audit image for vculvl01*/
  ;
  KG0D550(); /* add handling exceptions*/
  ;
end // end KG0D500

// write audit record
Function KG0D510()
   /* ***********************/
   /* write audit record*/
   /* ***********************/
  ;
  set SQLCA empty;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KG0D510";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KG0D510

// prepare VCULVL01 record
Function KG0D520()
   /* *************************************/
   /* format process control update*/
   /* *************************************/
  ;
  VCULVL01.XACCD = KG0DM200.XACCD; /* aloc code*/
  VCULVL01.OP1ALSEQ = KG0DM200.OP1ALSEQ; /* aloc seq*/
  VCULVL01.XNACD = KG0DM200.XNACD; /* natl acct cd*/
  VCULVL01.KUNABOFL = KG0DM200.KUNABOFL; /* backord flag*/
  VCULVL01.KUNBOQTY = KG0DM200.KUNBOQTY; /* backord qty*/
  VCULVL01.KUNMAPCT = KG0DM200.KUNMAPCT; /* min aloc percent*/
  VCULVL01.XIDCD = KG0DM200.XIDCD; /* invoice distrib*/
  VCULVL01.XSOCD = KG0DM200.XSOCD; /* sales office*/
  VCULVL01.KUJCRIND = KG0DM200.KUJCRIND; /* credit hold ind*/
  ;
  VCULVL01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  VCULVL01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/
  ;
end // end KG0D520

// --- process delete record ----
Function KG0D530()
   /* *************************************************/
   /* delete process control and create audit trail*/
   /* *************************************************/
  ;
  XX0XS01(); /* convert csp time/date to db2 format*/
  ;
   /* ----- prepare before look audit*/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "D"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCULVL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = VCULVL01.KUCCOID;
  KUZREC.KUMSTRID = VCULVL01.KUMSTRID;
  KUZREC.XNXCD = VCULVL01.XNXCD;
  KUZREC.XGPCD = VCULVL01.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = VCULVL01.VCULVL01-GROUP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0D   ";
    TA1REC.TA1LOCAT[1] = "KG0D530  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCULVL01 ";
    TA1REC.TA1MAP = "KG0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KG0D510(); /* write audit record*/
  KG0D540(); /* delete culvl*/
  ;
end // end KG0D530

// delete VCULVL01 record
Function KG0D540()
   /* *****************************/
   /* delete control exceptions*/
   /* *****************************/
  ;
  set SQLCA empty;
  ;
  call "IO0990" ("D ", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(137); /* record not found msg*/
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error msg*/
      set KG0DM200.KG0DM-DTL-STORE bold;
      set KG0DM200.KG0DM-DTL-DEPT bold;
      set KG0DM200.KG0DM-DTL-GPC bold;
    else
      KG0DW-01.KG0DW-SQLCODE = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KG0DW-01.KG0DW-SQLCODE;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
      KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D540";
      TA1REC.TA1LOC = "DELETE DB2 DCUST.VCULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D540

// add VCULVL01 record
Function KG0D550()
   /* *****************************/
   /* add control exceptions*/
   /* *****************************/
  ;
  set SQLCA empty;
  ;
  VCULVL01.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp setup date*/
  ;
  call "IO0990" ("A ", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* duplicate*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(108); /* duplicate - record already on file*/
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error msg*/
      set KG0DM200.KG0DM-DTL-STORE bold;
      set KG0DM200.KG0DM-DTL-DEPT bold;
      set KG0DM200.KG0DM-DTL-GPC bold;
    else
      KG0DW-01.KG0DW-SQLCODE = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KG0DW-01.KG0DW-SQLCODE;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
      KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D550";
      TA1REC.TA1LOC = "ADD DB2 DCUST.VCULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D550

// --- process update record ----
Function KG0D560()
   /* *************************************************/
   /* update process control and create audit trail*/
   /* *************************************************/
  ;
  XX0XS01(); /* convert csp time/date to db2 format*/
  ;
   /* ----- prepare before look audit*/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCULVL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = VCULVL01.KUCCOID;
  KUZREC.KUMSTRID = VCULVL01.KUMSTRID;
  KUZREC.XNXCD = VCULVL01.XNXCD;
  KUZREC.XGPCD = VCULVL01.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = VCULVL01.VCULVL01-GROUP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0D   ";
    TA1REC.TA1LOCAT[1] = "KG0D560  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCULVL01 ";
    TA1REC.TA1MAP = "KG0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KG0D510(); /* write audit trail before image*/
  KG0D520(); /* format culvl general data update*/
  KG0D570(); /* update culvl*/
  ;
   /* ----- format after look audit*/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCULVL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = VCULVL01.KUCCOID;
  KUZREC.KUMSTRID = VCULVL01.KUMSTRID;
  KUZREC.XNXCD = VCULVL01.XNXCD;
  KUZREC.XGPCD = VCULVL01.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = VCULVL01.VCULVL01-GROUP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0D   ";
    TA1REC.TA1LOCAT[1] = "KG0D560  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCULVL01 ";
    TA1REC.TA1MAP = "KG0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KG0D510(); /* write audit trail after image*/
  ;
end // end KG0D560

// update VCULVL01 record
Function KG0D570()
   /* *****************************/
   /* update control exceptions*/
   /* *****************************/
  ;
  set SQLCA empty;
  ;
  call "IO0990" ("U ", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(137); /* record not found msg*/
      KG0DW-01.KG0DW-ERROR = "Y"; /* set error msg*/
      set KG0DM200.KG0DM-DTL-STORE bold;
      set KG0DM200.KG0DM-DTL-DEPT bold;
      set KG0DM200.KG0DM-DTL-GPC bold;
    else
      KG0DW-01.KG0DW-SQLCODE = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KG0DW-01.KG0DW-SQLCODE;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVL01.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVL01.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVL01.XNXCD;
      KG0DW-01.KG0DW-KY-GPC = VCULVL01.XGPCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      TA1REC.TA1PGMNM = "KG0D570";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VCULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KG0D570

// ----- SEND KM0DM200 ----------
Function KG0D600()
   /* **************************************************/
   /* customer handling exceptions maintenance screen*/
   /* **************************************************/
  ;
  KG0DW-01.KG0DW-ERROR = "N";
  KG0DM200.KG0DM-BKG-DATE = VGVar.currentShortGregorianDate;
  KG0DM200.KUCCONM = KUCREC.KUCCONM;
  KG0D610(); /* refresh M200 sto/dept/gpc names*/
  KG0DW-01.KG0DW-RESEND-MAP = "N";
  ;
  converse KG0DM200 ;
  ;
  KG0DS60(); /* set fields defined;*/
  ;
  KG0DM100.KG0DM-BKG-MSG = " ";
  if (KG0DW-01.KG0DW-ADD-MODE == "Y")
    set KG0DM200.KG0DM-DTL-STORE initialAttributes, cursor;
    set KG0DM200.KG0DM-DTL-DEPT initialAttributes;
    set KG0DM200.KG0DM-DTL-GPC initialAttributes;
  end
  ;
  KG0D620(); /* check special keys*/
  ;
  if (converseVar.eventKey is pf3
   && KG0DW-01.KG0DW-ERROR == "N")
    converseLib.validationFailed(0);
    KG0DM200.KG0DM-BKG-MSG = " ";
    KG0DW-01.KG0DW-CULVL-MOD = "N";
    KG0DW-01.KG0DW-ERROR = "N";
    KG0DW-01.KG0DW-M200-DONE = "Y";
    if (KG0DW-01.KG0DW-ADD-MODE == "Y") /* refresh M100 after add*/
      KG0DW-01.KG0DW-SEL-STORE = "    ";
      KG0DW-01.KG0DW-SEL-DEPT = "    ";
      KG0DW-01.KG0DW-SEL-GPC = "  ";
      if (COMMAREA.CAFROMAP == "KA0D") /* if came from ADD menu*/
        COMMAREA.CATOAP = "KA0D"; /* return to ADD menu*/
        COMMAREA.CACURRAP = "KG0D";
        COMMAREA.CAFROMAP = "KG0D";
        XSEXIT();
        COMMAREA.CACURRAP = "KG0D";
        KG0DM200.VAGen_EZEMSG = COMMAREA.CAMSG;
        KG0DW-01.KG0DW-ERROR = "Y";
      else
        KG0D200(); /* refresh M100*/
        KG0D250(); /* format vculvl01 to M100*/
      end
    end
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    KG0D400(); /* check pop up window*/
    if (KG0DW-01.KG0DW-RESEND-MAP == "N")
      KG0D450(); /* edit control field data*/
    end
    if (KG0DW-01.KG0DW-ERROR == "N"        /* no errors*/
     && KG0DW-01.KG0DW-CHG-SECURITY == "Y" /* update mode*/
     && KG0DW-01.KG0DW-RESEND-MAP == "N") 
      if (KG0DW-01.KG0DW-CULVL-MOD == "Y")
        converseLib.validationFailed(277); /* good edit*/
        KG0DW-01.KG0DW-READY-TO-UPD = "Y"; /* setup update flag*/
        KG0DW-01.KG0DW-RESEND-MAP = "Y";
      end
    end
  end
  ;
  if (KG0DW-01.KG0DW-RESEND-MAP == "N"
   && KG0DW-01.KG0DW-ERROR == "N" /* no errors*/
   && KG0DW-01.KG0DW-ADD-MODE != "Y") /* adds stay on M200 until pf3*/
    KG0DW-01.KG0DW-M200-DONE = "Y";
  end
  ;
end // end KG0D600

// refresh M200 sto/dp/gpc names
Function KG0D610()
   /* *********************************************************/
   /* retrieve KG0DM200 sto/dp/gpc names*/
   /* *********************************************************/
  ;
   /* *********** read store ***********************/
  ;
  if (KG0DM200.KG0DM-DTL-STORE == -1)
    KG0DM200.KUMSTSNM = "ALL";
  else
    KUMREC.KUCCOID = KG0DM200.KUCCOID; /* set store key*/
    KUMREC.KUMSTRID = KG0DM200.KG0DM-DTL-STORE;
    KG0D220(); /* read vstore01*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* store not found?*/
      KG0DM200.KUMSTSNM = "INVALID";
      KG0DW-01.KG0DW-ERROR = "N";
    else
      KG0DM200.KUMSTSNM = KUMREC.KUMSTSNM;
    end
  end
  ;
   /* *********** read department ******************/
  ;
  if (KG0DM200.KG0DM-DTL-DEPT == -1)
    KG0DM200.KUJSLFID = "ALL";
  else
    KUJREC.KUCCOID = KG0DM200.KUCCOID; /* set store key*/
    KUJREC.XNXCD = KG0DM200.KG0DM-DTL-DEPT;
    KG0D230(); /* read vdept001*/
    if (KG0DW-01.KG0DW-ERROR == "Y") /* not found?*/
      KG0DM200.KUJSLFID = "INVALID";
      KG0DW-01.KG0DW-ERROR = "N";
    else
      KG0DM200.KUJSLFID = KUJREC.KUJSLFID;
    end
  end
  ;
   /* *********** read gpc ***********************/
  ;
  if (KG0DM200.KG0DM-DTL-GPC == "**")
    KG0DM200.XGPABRV = "ALL";
  else
    if (KG0DM200.KG0DM-DTL-GPC in XGPTBL.XGPCD)
      KG0DM200.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      KG0DM200.XGPABRV = "INVALID";
      KG0DW-01.KG0DW-ERROR = "N";
    end
  end
  ;
  ;
   /* *********** check for 1st Add ***********************/
  ;
  KG0DS61();
end // end KG0D610

// process special and pfkeys
Function KG0D620()
   /* ************************************************/
   /* edit all special entry keys*/
   /* ************************************************/
  ;
   /* ----- edit pa2 key*/
  ;
  if (converseVar.eventKey is pa2)
    if (KG0DM200.KG0DM-BKG-MODE == "ADD    ")
      set KG0DM200 empty;
      KG0D161(); /* reformat add screen*/
    else
      KG0D130(); /* refresh screen*/
    end
    KG0DW-01.KG0DW-ERROR = "Y";
    KG0DW-01.KG0DW-CULVL-MOD = "N";
    return;
  end
  ;
   /* ----- edit enter  key*/
  ;
  if (converseVar.eventKey is enter)
    return;
  end
   /* ----- edit pf3 key*/
  ;
  if (converseVar.eventKey is pf3)
    KG0DS45(); /* edit for at least one valid row b4 exiting*/
    if (KG0DW-01.KG0DW-ERROR == "N")
      return;
    end
  end
  ;
   /* ----- edit pf12 key*/
  ;
  if (converseVar.eventKey is pf12       /* update key*/
   && KG0DW-01.KG0DW-READY-TO-UPD == "Y" /* all edits ok*/
   && KG0DW-01.KG0DW-ERROR == "N")       /* no errors*/
    KG0D450(); /* edit screen*/
    if (KG0DW-01.KG0DW-CULVL-MOD == "Y") /* if company data updated*/
      if (KG0DW-01.KG0DW-ERROR == "N") /* no errors*/
        if (KG0DW-01.KG0DW-ADD-MODE == "Y")
          KG0D500(); /* process culvl add*/
        else
          if (KG0DW-01.KG0DW-DEL-MODE == "Y")
            KG0D530(); /* process culvl delete*/
          else
            KG0D560(); /* process culvl update*/
          end
        end
      end
    end
    ;
    if (KG0DW-01.KG0DW-ERROR == "N") /* no errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit updates*/
      converseLib.validationFailed(279); /* all updates ok*/
      KG0DW-01.KG0DW-READY-TO-UPD = "N"; /* updates ok set =n*/
      KG0DW-01.KG0DW-CULVL-MOD = "N"; /* reset cmpny update*/
      KG0DW-01.KG0DW-RESEND-MAP = "N";
      if (KG0DW-01.KG0DW-ADD-MODE != "Y") /* add-mode leaves M200 w/pf3*/
        KG0DW-01.KG0DW-M200-DONE = "Y"; /* stop the m100 "while" loop*/
      end
      return;
    else
      KG0DW-01.KG0DW-READY-TO-UPD = "N"; /* reset update ok flag;*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf12       /* update key*/
   && KG0DW-01.KG0DW-READY-TO-UPD == "N" /* edits not ok*/
   && KG0DW-01.KG0DW-ERROR == "N")       /* error flag*/
    KG0DW-01.KG0DW-ERROR = "Y"; /* error flag*/
    converseLib.validationFailed(280); /* can pf12 without pressing enter*/
    return;
  end
  ;
   /* ----- edit invalid key*/
  ;
  if (KG0DW-01.KG0DW-ERROR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0DW-01.KG0DW-ERROR = "Y";
  end
  ;
end // end KG0D620

// Init records
Function KG0DS-INIT-RECS()
   /* ********************************************************************/
   /* *            INITIALIZE RECORDS USED BY KG0D*/
   /* ********************************************************************/
  ;
  set VCULVL01 empty;
  set VCULVLPD empty;
  set KUCREC empty;
  set KUMREC empty;
  set KUJREC empty;
  set KUNREC empty;
  set KUZREC empty;
  set KG0DW-01 empty;
  set KG0DW-02 empty;
  set KG0DW-03 empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  KG0DW-01.KG0DW-CA-COMPANY = 0;
  KG0DW-01.KG0DW-CA-STORE = 0;
  KG0DW-01.KG0DW-CA-DEPT = 0;
  KG0DW-01.KG0DW-KUMSTRID = 0;
  KG0DW-01.KG0DW-XNXCD = 0;
end // end KG0DS-INIT-RECS

// Edit for one valid CULVL row
Function KG0DS45()
   /* *************************************************************/
   /* ****  c h e c k  f o r  C U L V L  add                  *****/
   /* *************************************************************/
  ;
  set VCULVLPD empty;
  set SQLCA empty;
  ;
  VCULVLPD.KUCCOID = KG0DM200.KUCCOID;
  VCULVLPD.KUMSTRID = KG0DM200.KG0DM-DTL-STORE;
  VCULVLPD.XNXCD = KG0DM200.KG0DM-DTL-DEPT;
  VCULVLPD.XGPCD = KG0DM200.KG0DM-DTL-GPC;
  ;
  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes};
  ;
  if (VCULVLPD.XXX-SQLCODE == 0)
    set KG0DM200.XACCD initialAttributes;
    set KG0DM200.OP1ALSEQ initialAttributes;
  else
    if (VCULVLPD.XXX-SQLCODE == 100)
      set KG0DM200.XACCD cursor, modified, bold;
      set KG0DM200.OP1ALSEQ modified, bold;
      KG0DW-01.KG0DW-ERROR = "Y";
      converseLib.validationFailed(168);
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KG0DS45";
      TA1REC.TA1LOC = "SELECT VCULVL01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVLPD.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVLPD.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVLPD.XNXCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
  ;
end // end KG0DS45

// Set fields defined
Function KG0DS60()
   /* *************************************************************/
   /* ****  S e t   f i e l d s   d e f i n e d               *****/
   /* *************************************************************/
  ;
  ;
  set KG0DM200.XACCD initialAttributes; /* aloc code*/
  set KG0DM200.OP1ALSEQ initialAttributes; /* aloc seq*/
  set KG0DM200.XNACD initialAttributes; /* natl acct cd*/
  set KG0DM200.KUNABOFL initialAttributes; /* backord flag*/
  set KG0DM200.KUNBOQTY initialAttributes; /* backord qty*/
  set KG0DM200.KUNMAPCT initialAttributes; /* min aloc percent*/
  set KG0DM200.XIDCD initialAttributes; /* invoice distrib*/
  set KG0DM200.XSOCD initialAttributes; /* sales office*/
  set KG0DM200.KUJCRIND initialAttributes; /* credit hold ind*/
  ;
  ;
  ;
end // end KG0DS60

// Check for 1st CULVL row
Function KG0DS61()
   /* *************************************************************/
   /* ****  c h e c k  f o r  first C U L V L  add            *****/
   /* *************************************************************/
    /* if the first culvl01 row is being entered, the store,dept&GPC*/
    /* have already been defaulted to their global values.  this*/
    /* group will protect those values so that the first row added*/
    /* is always the wildcard row (which is required).*/
  ;
  ;
  set VCULVLPD empty;
  set SQLCA empty;
  ;
  VCULVLPD.KUCCOID = KG0DM200.KUCCOID;
  VCULVLPD.KUMSTRID = KG0DM200.KG0DM-DTL-STORE;
  VCULVLPD.XNXCD = KG0DM200.KG0DM-DTL-DEPT;
  VCULVLPD.XGPCD = KG0DM200.KG0DM-DTL-GPC;
  ;
  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes};
  ;
  if (VCULVLPD.XXX-SQLCODE == 0)
    set KG0DM200.KG0DM-DTL-STORE initialAttributes;
    set KG0DM200.KG0DM-DTL-DEPT initialAttributes;
    set KG0DM200.KG0DM-DTL-GPC initialAttributes;
  else
    if (VCULVLPD.XXX-SQLCODE == 100)
      set KG0DM200.KG0DM-DTL-STORE skip;
      set KG0DM200.KG0DM-DTL-DEPT skip;
      set KG0DM200.KG0DM-DTL-GPC skip;
      set KG0DM200.XACCD cursor;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KG0DS61";
      TA1REC.TA1LOC = "SELECT VCULVL01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0DW-01.KG0DW-KY-COMPANY = VCULVLPD.KUCCOID;
      KG0DW-01.KG0DW-KY-STORE = VCULVLPD.KUMSTRID;
      KG0DW-01.KG0DW-KY-DEPT = VCULVLPD.XNXCD;
      TA1REC.TA1TBLKE = KG0DW-01.KG0DW-KY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
  ;
end // end KG0DS61

// ----- SEND XACTBL WINDOW -----
Function XPXAC01()
   /* ------------------------------------------------------------*/
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
   /* ------------------------------------------------------------*/
  ;
   /* ***  If no errors clear page and set up for scrolling ****/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
    /* ---- Make sure table count is set for next page.*/
    /* ---- Clear map and set up header for new scroll screen.*/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
    /* ---- If PF8 was pressed then scroll forward*/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XACTBL.XACCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XACTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XACTBL.XACCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XACTBL.XACDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Inc screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Inc table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
    /* ---- If PF7 was pressed then scroll backward*/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XACTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XACTBL.XACCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XACTBL.XACDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Dec screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1; /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
   /* ******  Reset selection fields after converse     *******/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
   /* ******  Check for PFkey errors and scroll errors  *******/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XACTBL.XACCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      ;
        /* ******          Check for user selection          *******/
      ;
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
end // end XPXAC01

//*** RECORD=KG0DW-01 ****
// this record contains work fields used entirely within km06.
// *---------------------------------------------------------
// *                  European Cloning
// *---------------------------------------------------------
// *
// 13-july-1993         dlegg      Rename kumstrid and xnxcd
//                                 in this record because
//                                 definitions didn't match
//                                 PRODMSL definition (num
//                                 instead of bin).
// ************************
Record KG0DW-01 type basicRecord
  10 KG0DW-CA KG0DW-CA ; 
    15 KG0DW-CA-COMPANY KG0DW-CA-COMPANY ; 
      20 KG0DW-CA-CO-CHAR KG0DW-CA-CO-CHAR ; 
    15 KG0DW-CA-STORE KG0DW-CA-STORE ; 
      20 KG0DW-CA-ST-CHAR KG0DW-CA-ST-CHAR ; 
    15 KG0DW-CA-DEPT KG0DW-CA-DEPT ; 
      20 KG0DW-CA-DP-CHAR KG0DW-CA-DP-CHAR ; 
    15 KG0DW-CA-GPC KG0DW-CA-GPC ; 
    15 * char(104) ; 
  10 KG0DW-KY KG0DW-KY ; 
    15 KG0DW-KY-COMPANY KG0DW-KY-COMPANY ; 
    15 KG0DW-KY-STORE KG0DW-KY-STORE ; 
    15 KG0DW-KY-DEPT KG0DW-KY-DEPT ; 
    15 KG0DW-KY-GPC KG0DW-KY-GPC ; 
  10 KG0DW-SEL KG0DW-SEL ; 
    15 KUCCOID KUCCOID ; 
    15 KG0DW-SEL-STORE KG0DW-SEL-STORE ; 
      20 KG0DW-KUMSTRID num(4) ; // CU_STOR_ID
    15 KG0DW-SEL-DEPT KG0DW-SEL-DEPT ; 
      20 KG0DW-XNXCD num(4) ; // XNX_DEPT_ID_XREF
    15 KG0DW-SEL-GPC KG0DW-SEL-GPC ; 
      20 XGPCD XGPCD ; 
  10 KG0DW-ALF-NUM KG0DW-ALF-NUM ; 
    15 KG0DW-NUM-ALF KG0DW-NUM-ALF ; 
  10 KG0DW-LN-IDX KG0DW-LN-IDX ; 
  10 KG0DW-SCR-WRK KG0DW-SCR-WRK ; 
  10 KG0DW-SCR-IDX KG0DW-SCR-IDX ; 
  10 KG0DW-SCR-MAX KG0DW-SCR-MAX ; 
  10 KG0DW-FIRST-TIME KG0DW-FIRST-TIME ; 
  10 KG0DW-SQLCODE KG0DW-SQLCODE ; 
  10 KG0DW-ERROR KG0DW-ERROR ; 
  10 KG0DW-RESEND-MAP KG0DW-RESEND-MAP ; 
  10 KG0DW-M100-DONE KG0DW-M100-DONE ; 
  10 KG0DW-DTL-SELECTED KG0DW-DTL-SELECTED ; 
  10 KG0DW-M200-DONE KG0DW-M200-DONE ; 
  10 KG0DW-ADD-MODE KG0DW-ADD-MODE ; 
  10 KG0DW-DEL-MODE KG0DW-DEL-MODE ; 
  10 KG0DW-CHG-SECURITY KG0DW-CHG-SECURITY ; 
  10 KG0DW-CULVL-MOD KG0DW-CULVL-MOD ; 
  10 KG0DW-READY-TO-UPD KG0DW-READY-TO-UPD ; 
  10 XATCD XATCD ; 
end // end KG0DW-01

//*** RECORD=KG0DW-02 ****
// Before immage of vhndlx01 records
// 
//       MAINTENANCE LOG
// 
//    who       when      why
// ---------- --------- ---------------------------------------
// 02/10/92   WJOHNS    created record
// ************************
Record KG0DW-02 type basicRecord
  10 KG0DW-TEMP-STR-LENGTH KG0DW-TEMP-STR-LENGTH ; 
  10 KG0DW-SCR-LN KG0DW-SCR-LN [14] ; 
    15 KG0DW-DTL-OPTION KG0DW-DTL-OPTION ; 
    15 VCULVL01-GROUP VCULVL01-GROUP ; 
end // end KG0DW-02

//*** RECORD=KG0DW-03 ****
// Before immage of vhndlx01 records
// 
//       MAINTENANCE LOG
// 
//    who       when      why
// ---------- --------- ---------------------------------------
// 02/10/92   WJOHNS    created record
// ************************
Record KG0DW-03 type basicRecord
  10 KG0DW-APPL KG0DW-APPL ; 
  10 KG0DW-SCR-REF KG0DW-SCR-REF ; 
  10 KG0DW-FUNCTION KG0DW-FUNCTION ; 
  10 KG0DW-RETURN KG0DW-RETURN ; 
end // end KG0DW-03

// y: chg scty & pf9
DataItem KG0DW-ADD-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alpha/numeric converter
DataItem KG0DW-ALF-NUM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0DW-APPL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KG0DW-CA char(119)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KG0DW-CA-CO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KG0DW-CA-COMPANY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KG0DW-CA-DEPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KG0DW-CA-DP-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc code
DataItem KG0DW-CA-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   store number
DataItem KG0DW-CA-ST-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   store number
DataItem KG0DW-CA-STORE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y: chg scty
DataItem KG0DW-CHG-SECURITY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y: culvl modified in m200
DataItem KG0DW-CULVL-MOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y: chg scty & pf10
DataItem KG0DW-DEL-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0DW-DTL-OPTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y: some m100 detail selected
DataItem KG0DW-DTL-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KG0DW-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// m100 1st time cu/sto/dp/gpc
DataItem KG0DW-FIRST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0DW-FUNCTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for work key
DataItem KG0DW-KY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KG0DW-KY-COMPANY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KG0DW-KY-DEPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   gpc code
DataItem KG0DW-KY-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   store number
DataItem KG0DW-KY-STORE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// m100/tsq line counter
DataItem KG0DW-LN-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y: return to m000
DataItem KG0DW-M100-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y: return to m100
DataItem KG0DW-M200-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric/alpha converter
DataItem KG0DW-NUM-ALF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y: m200 edit ok
DataItem KG0DW-READY-TO-UPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y: resend map
DataItem KG0DW-RESEND-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0DW-RETURN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current screen page
DataItem KG0DW-SCR-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0DW-SCR-LN char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum screen page
DataItem KG0DW-SCR-MAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0DW-SCR-REF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working screen page
DataItem KG0DW-SCR-WRK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved m000 selection
DataItem KG0DW-SEL char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// m100,m200 dept input
DataItem KG0DW-SEL-DEPT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// m100,m200 gpc input
DataItem KG0DW-SEL-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// m100,m200 store input
DataItem KG0DW-SEL-STORE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved sqlcode
DataItem KG0DW-SQLCODE char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0DW-TEMP-STR-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

