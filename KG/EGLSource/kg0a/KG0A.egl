package kg0a;

import corpcom2.XX0XW02;
import corpcom2.XZZ1CHR1;
import corpcom2.XZZ1CHR2;
import corpcom2.XZZ2CHR1;
import corpcom2.XZZ2CHR2;
import corpcom2.XZZ3CHR1;
import corpcom2.XZZ3CHR2;
import corpcom2.XZZ4CHR1;
import corpcom2.XZZ4CHR2;
import corpcom2.XZZ6CHR;
import corpcom2.XZZ8CHR;
import corpcom2.XZZBINGP;
import corpcom2.XZZCHRGP;
import corpcom2.XZZDECIM;
import corpcom2.XZZGRP;
import corpcom2.XZZINT1;
import corpcom2.XZZINT2;
import corpcom2.XZZINT3;
import corpcom2.XZZINT4;
import corpcom2.XZZINT5;
import corpcom2.XZZINT6;
import corpcom2.XZZINT7;
import corpcom2.XZZINT8;
import corpcom2.XZZKEYGP;
import corpcom2.XZZQRYID;
import corpcom2.XZZQRYLN;
import corpcom2.XZZQRYRN;
import corpcom2.XZZREC;
import corpcom2.XZZSINT1;
import corpcom2.XZZSINT2;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import corpcom7.ZZZSTM;
import corpx1.XGPCD;
import corpx2.XNXCD;
import corpx2.XROCD;
import corpx2.XWHCD;
import corpy2.YESCDIND;
import corpy2.YPGFFFL;
import corpy2.YSBTBL;
import corpz3.ZZZSDT;
import ku.common.KUCREC;
import ku.common.KUGREC;
import ku.common.KUJREC;
import ku.common.KUJSLFNM;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KG0A ****
// ************************************************************
// 
//         kg0a - Customer Global Maintenance
//         ----------------------------------
// 
// General program explanation and notes:
// 
// This program allows Customer department to perform far
// reaching maintenance by sales rep and sales agency.
// Validation is done on the customer number, as well as
// the combination of sales reps and agencies.
// Some cross checking is done to prevent duplicate 'from'
// rep/agy entries from being made in the same batch, 'to'
// rep/agy entries being used as a subsequent 'from', etc.
// These entries will be made into the Paramter table
// (dcorp.vparm101), to be processed in batch COBOL (cu1330).
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 05-14-90 tgriff set up
// 06-26-90 dsalzw don't require from agency & rep when the
//                 customer & ysb code are entered
// 06-27-90 dsalzw add comm-pay-ind to screen
// 04-17-92 CHELLM DB2 changes rename sm5stat to xxxstat
// 10-01-93 CHELLM CSP 4.1 Conversion.
// 02-10-96 kclar1 added store and dept pop up windows
// 07-06-98 kclar1 expanded number of rows to 2000
// *********************
Program KG0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KG0AW01 KG0AW01; // record
  KG0AW04 KG0AW04; // record
  KUCREC KUCREC; // record
  KUGREC KUGREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XP0KW01 XP0KW01; // record
  XP0KW02 XP0KW02; // record
  XP0KW04 XP0KW04; // record
  XP0LW01 XP0LW01; // record
  XP0LW02 XP0LW02; // record
  XP0LW04 XP0LW04; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSBTBL; // table
  use KG0AM.KG0AM100,  // forms
      KG0AM.KG0AM200, 
      KG0AM.XP0KM001, 
      KG0AM.XP0LM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KG0A000: KG0A000();
    exit program;
  end // end main
end // end KG0A

// converse map m200
Function KG0A-PF9()
   /* ************************************************************/
   /* *    process screen kg0am200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from kg0a100    **/
   /* *                                                         **/
   /* ************************************************************/

  KG0AW01.KG0AWCPR = "KG0A-PF9";


  set KG0AM200 initial; /* clear map*/

  if (KG0AW-PF9-1ST-CD == "Y")
    KG0AW-MAX = 0;
    KG0AW01.VAGen_SQLCODE = 0;
    set KG0AW04 empty; /* empty working storage*/
    KG0AS-LOAD-XX-ROWS(); /* load working storage*/
    KG0AW-PAGE-NUM = 1;
    KG0AW-CNT = 1;
    KG0AW-PF9-1ST-CD = "N";
  end

  KG0AM200.XXXCURDT = VGVar.currentShortGregorianDate;

  KG0AW-CNT = ((KG0AW-PAGE-NUM - 1) * 14) + 1;

  if (KG0AW-CNT <= 0)
    KG0AW-CNT = 1;
  end

  KG0AW-IDX = 1;

  while (KG0AW-IDX <= 14 && KG0AW-CNT <= KG0AW-MAX)
    KG0AM-SEL[KG0AW-IDX] = KG0AW-SEL[KG0AW-CNT];
    KG0AM200.KG0AM-FROM-SM1AGYID[KG0AW-IDX] = KG0AW04.XZZ4CHR1[KG0AW-CNT];
    KG0AM200.KG0AM-YSB-CD[KG0AW-IDX] = KG0AW04.XZZ2CHR1[KG0AW-CNT];
    KG0AM200.KG0AM-TO-SM1AGYID[KG0AW-IDX] = KG0AW04.XZZ4CHR2[KG0AW-CNT];
    KG0AM200.KG0AM-FROM-SREP[KG0AW-IDX] = KG0AW04.XZZSINT1[KG0AW-CNT];
    KG0AM200.KG0AM-TO-SREP[KG0AW-IDX] = KG0AW04.XZZSINT2[KG0AW-CNT];
    KG0AM200.KG0AM-CU-CO-ID[KG0AW-IDX] = KG0AW04.XZZINT1[KG0AW-CNT];
    KG0AM200.KG0AM-TERM-DT[KG0AW-IDX] = KG0AW04.XZZINT2[KG0AW-CNT];
    KG0AM200.KG0AM-FROM-STOR-ID[KG0AW-IDX] = KG0AW04.XZZINT3[KG0AW-CNT];
    KG0AM200.KG0AM-TO-STOR-ID[KG0AW-IDX] = KG0AW04.XZZINT4[KG0AW-CNT];
    KG0AM200.KG0AM-FROM-XNX-CD[KG0AW-IDX] = KG0AW04.XZZINT5[KG0AW-CNT];
    KG0AM200.KG0AM-TO-XNX-CD[KG0AW-IDX] = KG0AW04.XZZINT6[KG0AW-CNT];
    KG0AW-IDX = KG0AW-IDX + 1;
    KG0AW-CNT = KG0AW-CNT + 1;
  end


  KG0AM200.KG0AM-PAGE-TOT = KG0AW-PAGE-TOT;
  KG0AM200.KG0AM-PAGE-NUM = KG0AW-PAGE-NUM;

  KG0AW-CNT = ((KG0AW-PAGE-NUM - 1) * 14) + 1; /* set count to top of page*/
  if (KG0AW-CNT <= 0)
    KG0AW-CNT = 1;
  end

   /* ***********************************************************/
  converse KG0AM200 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  KG0AW01.KG0AWERR = "N"; /* Clear any previous error*/

  KG0AW-IDX = 1;

  if (converseVar.eventKey is enter)
    if (KG0AM-PAGE-NUM is modified)
      if (KG0AM-PAGE-NUM <= KG0AM-PAGE-TOT)
        move KG0AM-PAGE-NUM to KG0AW-PAGE-NUM withV60Compat;
      end
    else
      KG0AW-IDX = 1;
      while (KG0AW-IDX <= 14 && KG0AW-IDX <= KG0AW-MAX)
        if (KG0AM200.KG0AM-SEL[KG0AW-IDX] == "D")
          KG0AW-SEL[KG0AW-CNT] = KG0AM-SEL[KG0AW-IDX];
          converseLib.validationFailed(22);
        end
        KG0AW-IDX = KG0AW-IDX + 1;
        KG0AW-CNT = KG0AW-CNT + 1;
      end
    end
  end

  if (converseVar.eventKey is pf12)
    while (KG0AW-IDX <= 14 && KG0AW-IDX <= KG0AW-MAX)
      if (KG0AM200.KG0AM-SEL[KG0AW-IDX] == "D")
        KG0AW-CNT = KG0AW-IDX + ((KG0AW-PAGE-NUM - 1) * 14);
        XZZREC.XZZQRYID = KG0AW04.XZZQRYID[KG0AW-CNT];
        XZZREC.XZZQRYRN = KG0AW04.XZZQRYRN[KG0AW-CNT];
        XZZREC.XZZQRYLN = KG0AW04.XZZQRYLN[KG0AW-CNT];
        KG0AS-DEL-XX-ROW();
        KG0AM-SEL[KG0AW-IDX] = "X";
        KG0AW-SEL[KG0AW-CNT] = "X";
      end
      KG0AW-IDX = KG0AW-IDX + 1;
    end
  end

  if (converseVar.eventKey is pf8)
    KG0AW-PAGE-NUM = KG0AW-PAGE-NUM + 1;
    if (KG0AW-PAGE-NUM > KG0AW-PAGE-TOT)
      move KG0AW-PAGE-TOT to KG0AW-PAGE-NUM withV60Compat;
    end
  end

  if (converseVar.eventKey is pf7)
    KG0AW-PAGE-NUM = KG0AW-PAGE-NUM - 1;
    if (KG0AW-PAGE-NUM <= 0)
      KG0AW-PAGE-NUM = 1;
    end
  end


  if (converseVar.eventKey is pf3)
    KG0AW-DIS-MAP2-CD = "N";
  end

  if (converseVar.eventKey is pf9)
    KG0AW-DIS-MAP2-CD = "N";
  end

  if (converseVar.eventKey is pa2)
    KG0AW-PF9-1ST-CD = "Y";
  end
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process kg0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to kg0a050.*/
end // end KG0A-PF9

// Main flow
Function KG0A000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  KG0AW01.KG0AWCPR = "KG0A000";

  KG0A001(); /* initilize the application*/

  KG0AW01.KG0AWEOA = "N"; /* set end-of-application flag to 'no'*/

  while (KG0AW01.KG0AWEOA == "N") /* while not end-of-aplication*/
    KG0A050(); /* process the application screen(s)*/
  end

  COMMAREA.CACURRAP = "KU0M";

  XSEXIT();

   /* if xsexit failed*/

  KG0AW01.KG0AWERR = "Y";
  converseLib.validationFailed(34); /* security error*/

  exit program;
end // end KG0A000

// Initialize application
Function KG0A001()

  KG0AW01.KG0AWCPR = "KG0A001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/

  set SQLCA empty;

   /* KG0AS00                         ; set security for testing*/

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

   /* TEMP001;*/

  set KG0AW01 empty; /* clear common working storage*/
  set XP0KW01 empty; /* clear POPUP dept working storage*/
  set XP0LW01 empty; /* clear POPUP store working storage*/
  KG0AW01.KG0AWBSC = "Y"; /* set 'build screen ' to yes*/

   /* ***********************************/
   /* Initialize all potential records.*/
   /* ***********************************/
  set KUCREC empty;
  set SM1REC empty;
  set SM4REC empty;
  set SM5REC empty;
  set XZZREC empty;
  set TA2REC empty;

  XP0LW04.XP0LW-SELECT-FLAG = "N";
  XP0KW04.XP0KW-SELECT-FLAG = "N";

   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/

  if (COMMAREA.CATOAP != " ") /* 'toap' will be non-blank if fastpath*/

    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";

  end
   /* **********************************************/
   /* Load the internal array with existing parms...*/
   /* **********************************************/

  KG0AW01.KG0AWSUB = 1;
  XZZREC.XZZQRYID = "CU1330";
  XZZREC.XZZQRYRN = -1;

  KG0AS05(); /* open cursor - xzzrec*/

  while (KG0AW01.KG0AWSUB < 2000
   && KG0AW01.KG0AWCOS == "Y")

    KG0AS06(); /* fetch cursor - xzzrec*/

    if (KG0AW01.KG0AWCOS == "Y")
      KG0AW01.KG0AW-CU-CO-ID = XZZREC.XZZINT1;
      KG0AW01.KG0AWORP[KG0AWSUB] = XZZREC.XZZSINT1;
      KG0AW01.KG0AWOAG[KG0AWSUB] = XZZREC.XZZ4CHR1;
      KG0AW01.KG0AW-FROM-STRID[KG0AWSUB] = XZZREC.XZZINT3;
      KG0AW01.KG0AW-TO-STRID[KG0AWSUB] = XZZREC.XZZINT4;
      KG0AW01.KG0AW-FROM-XNXCD[KG0AWSUB] = XZZREC.XZZINT5;
      KG0AW01.KG0AW-TO-XNXCD[KG0AWSUB] = XZZREC.XZZINT6;
      KG0AW01.KG0AWNRP[KG0AWSUB] = XZZREC.XZZSINT2;
      KG0AW01.KG0AWNAG[KG0AWSUB] = XZZREC.XZZ4CHR2;
      KG0AW01.KG0AWSUB = KG0AW01.KG0AWSUB + 1;
    end
  end

  if (KG0AW01.KG0AWSUB > 1999)
    converseLib.validationFailed(376);
  end

  KG0AW01.KG0AWMAX = KG0AW01.KG0AWSUB;
end // end KG0A001

// abend routine
Function KG0A005()

       /* abend with negative sqlcode*/

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = KG0AW01.KG0AWCPR; /* aborting process*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(23);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

end // end KG0A005

// prepare to converse map
Function KG0A050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  KG0AW01.KG0AWCPR = "KG0A050"; /* set current process name*/

  sysVar.arrayIndex = 0;

  set TA1REC empty;
  TA1REC.TA1MAP = "KG0AM001"; /* prepare for abend*/

  KG0AW01.KG0AWESF = "N"; /* set end-of-screen flag to 'no'*/
  KG0AW01.KG0AWERR = "N"; /* clear error flag*/

  while (KG0AW01.KG0AWESF == "N") /* show until user is done*/
    KG0A100();
  end

   /* at this point;*/
       /* if the end-of-application flag (kg0awesf) = 'n'*/
         /* the perform will return to the top of kg0a050...*/
       /* else*/
         /* the perform will auto return to kg0a000.*/

end // end KG0A050

// converse map m100
Function KG0A100()
   /* ************************************************************/
   /* *    process screen kg0am100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from kg0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  KG0AW01.KG0AWCPR = "KG0A100";

  if (KG0AW01.KG0AWBSC == "Y")
    KG0A101(); /* Perform i/o, load map fields*/
    KG0AW01.KG0AWBSC = "N";
  end

   /* ***********************************************************/
  converse KG0AM100 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  KG0AW01.KG0AWERR = "N"; /* Clear any previous error*/

  KG0A110(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (KG0AW01.KG0AWERR == "N") /* No PF key error detected*/
    if (KG0AM100 is modified
     || converseVar.eventKey is pf12
     || converseVar.eventKey is enter)
      KG0A120(); /* Examine keys or edit*/
    end
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (KG0AW01.KG0AWERR == "N" /* No PF key error detected*/
   && converseVar.eventKey not pf9)
    KG0A130(); /* Determine next action*/
  end

  if (converseVar.eventKey is pf9)
    KG0AW-PF9-1ST-CD = "Y"; /* set flag for paging*/
    KG0AW-DIS-MAP2-CD = "Y"; /* set flag for paging*/
    while (KG0AW-DIS-MAP2-CD == "Y")
      KG0A-PF9(); /* display add info*/
    end
  end
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process kg0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to kg0a050.*/
end // end KG0A100

// Build screen
Function KG0A101()
   /* **************************************/
   /* Build screen kg0am100*/
   /* **************************************/

  KG0AW01.KG0AWCPR = "KG0A101";
   /* ***************************************/
   /* If this is the first pass, don't load*/
   /* ***************************************/
  if (KG0AM100.SM4REPID[1] == 0
   && KG0AM100.KUCCOID == 0)
    set KG0AM100 empty;
    KG0AM100.XXXPRCNM = "KG0AM";
    KG0AM100.XXXMAPNM = "KG0AM100";
    KG0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
    return;
  end

  KG0AM100.XXXPRCNM = "KG0AM"; /* Build headings*/
  KG0AM100.XXXMAPNM = "KG0AM100";
  KG0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

end // end KG0A101

// Edit pfkeys
Function KG0A110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/

  KG0AW01.KG0AWCPR = "KG0A110";

   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (KG0AM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = KG0AM100.CATOAP;
    COMMAREA.CAITEM = KG0AM100.CAITEM;

    XSEXIT();

     /* if xsexit failed*/

    KG0AW01.KG0AWERR = "Y";
    converseLib.validationFailed(12); /* security error*/

    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/

  if (converseVar.eventKey is enter || converseVar.eventKey is pf5 || converseVar.eventKey is pf6
   || converseVar.eventKey is pf9)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      KG0AW01.KG0AWERR = "Y";
    else
      if (converseVar.eventKey is pa2)
        set KG0AM100 empty;
        KG0AW01.KG0AWBSC = "Y";
        KG0AW01.KG0AWENT = "N";
      else
        if (converseVar.eventKey is pf1)

          COMMAREA.CACURRAP = "KG0A";
          XSPF1();
          KG0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
          KG0AW01.KG0AWERR = "Y";
          return;

        else
          if (converseVar.eventKey is pf4)
            if (KG0AW01.KG0AWERR != "Y")
              COMMAREA.CAUSERA = " ";
              XSPF4();
            end
          else
            if (converseVar.eventKey is pf3)
              if (KG0AW01.KG0AWERR != "Y")
                COMMAREA.CATOAP = "KM0W";
                COMMAREA.CAUSERA = " ";

                XSEXIT();

                 /* if xsexit failed*/

                KG0AW01.KG0AWERR = "Y";
                converseLib.validationFailed(34); /* security error*/

                return;
              end
            else
              if (converseVar.eventKey is pf12)
                if (KG0AW01.KG0AWENT == "Y")
                  /* next sentence*/
                else
                  KG0AW01.KG0AWERR = "Y";
                  converseLib.validationFailed(40);
                end
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                KG0AW01.KG0AWERR = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end KG0A110

// Edit kg0am100 fields / i-o
Function KG0A120()
   /* **************************************/
   /* Edit kg0am100 entries and perform i/o*/
   /* **************************************/

  KG0AW01.KG0AWCPR = "KG0A120";

  set KG0AM100.SM4REPID[1] cursor, normal;
  set KG0AM100.SM1AGYID[1] normal;
  set KG0AM100.SM4REPID[2] normal;
  set KG0AM100.SM1AGYID[2] normal;
  set KG0AM100.KUGCPIND normal;
  set KG0AM100.KG0AMDAT normal;
  set KG0AM100.KUCCOID normal;
  set KG0AM100.YSBCD normal;

   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  if (KG0AM100.KUCCOID == 0
   && KG0AM100.SM1AGYID[1] == " "
   && KG0AM100.SM4REPID[1] == 0)
    set KG0AM100.KUCCOID normal;
    set KG0AM100.SM1AGYID[1] normal;
    set KG0AM100.SM4REPID[1] normal;
    KG0AW01.KG0AWERR = "Y";
    KG0AW01.KG0AWBSC = "Y";
    return;
  end
   /* ********************************/
   /* Valid combinations are*/
   /* - "TO" rep & agency - required*/
   /* - termination date - required*/
   /* - "FROM" rep & agency are required*/
     /* if customer and resp are not entered*/
   /* - customer & resp are are required*/
     /* "from" rep & agency are not entered*/
   /* Edit fields in reverse order*/
   /* ********************************/
   /* Edit sales responsibility code*/
   /* ********************************/

  if (KG0AM100.YSBCD != " ")

    if (KG0AM100.YSBCD in YSBTBL.YSBCD)
       /* next sentence*/
    else
      set KG0AM100.YSBCD cursor, bold;
      KG0AW01.KG0AWERR = "Y";
      converseLib.validationFailed(356);
    end

  end

   /* ********************************/
   /* Validate Company number (if present)*/
   /* ********************************/
  if (KG0AM100.KUCCOID > 0)
    KUCREC.KUCCOID = KG0AM100.KUCCOID;

    KG0AS01(); /* Select unique - KUCREC*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set KG0AM100.KUCCOID cursor, modified, bold; /* Indicate error*/
      KG0AW01.KG0AWERR = "Y";
      converseLib.validationFailed(25); /* Company does not exist*/
    end
  end
   /* **************************************/
   /* Edit the termination date*/
   /* ***************************/
  if (KG0AM100.KG0AMDAT == 0)
    set KG0AM100.KG0AMDAT cursor, bold;
    KG0AW01.KG0AWERR = "Y";
    converseLib.validationFailed(5);
  else

    TA2REC.TA2GRGAN = KG0AM100.KG0AMDAT;
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
    if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
      set KG0AM100.KG0AMDAT cursor, bold;
      KG0AW01.KG0AWERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(19);
    end

  end
   /* ***************************/
   /* Edit the comm pay ind*/
   /* ***************************/
  if (KG0AM100.KUGCPIND == " ")
    set KG0AM100.KUGCPIND cursor, bold;
    KG0AW01.KG0AWERR = "Y";
    converseLib.validationFailed(5);
  else

    if (KG0AM100.KUGCPIND == "Y"
     || KG0AM100.KUGCPIND == "N")
       /* next sentence*/
    else
      set KG0AM100.KUGCPIND cursor, bold;
      KG0AW01.KG0AWERR = "Y";
      converseLib.validationFailed(20);
    end

  end
   /* ********************************/
   /* Edit new sales agency*/
   /* ********************************/
  if (KG0AM100.SM1AGYID[2] == " ")
    set KG0AM100.SM1AGYID[2] cursor, bold;
    converseLib.validationFailed(5);
    KG0AW01.KG0AWERR = "Y";
  else
    SM1REC.SM1AGYID = KG0AM100.SM1AGYID[2];

    KG0AS02(); /* Select unique - SM1REC*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set KG0AM100.SM1AGYID[2] cursor, bold;
      converseLib.validationFailed(72);
      KG0AW01.KG0AWERR = "Y";
    end
  end
   /* ********************************/
   /* Edit old sales agency*/
   /* ********************************/
  if (KG0AM100.SM1AGYID[1] == " ")
    if (KG0AM100.YSBCD != " "
     && KG0AM100.KUCCOID > 0)
       /* next sentence*/
    else
      set KG0AM100.SM1AGYID[1] cursor, bold;
      converseLib.validationFailed(5);
      KG0AW01.KG0AWERR = "Y";
    end
  else
    SM1REC.SM1AGYID = KG0AM100.SM1AGYID[1];

    KG0AS02(); /* Select unique - SM1REC*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set KG0AM100.SM1AGYID[1] cursor, bold;
      converseLib.validationFailed(72); /* Rep agency code is not on file*/
      KG0AW01.KG0AWERR = "Y";
    end
  end
   /* ***********************/
   /* Edit new sales rep id*/
   /* ***********************/
  if (KG0AM100.SM4REPID[2] == 0)
    set KG0AM100.SM4REPID[2] cursor, bold;
    converseLib.validationFailed(5);
    KG0AW01.KG0AWERR = "Y";
  else
    SM4REC.SM4REPID = KG0AM100.SM4REPID[2];

    KG0AS03(); /* Select unique - SM4REC*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set KG0AM100.SM4REPID[2] cursor, bold;
      converseLib.validationFailed(18);
      KG0AW01.KG0AWERR = "Y";
    end
  end
   /* ***********************/
   /* Edit old sales rep id*/
   /* ***********************/
  if (KG0AM100.SM4REPID[1] == 0)
    if (KG0AM100.YSBCD != " "
     && KG0AM100.KUCCOID > 0)
       /* next sentence*/
    else
      set KG0AM100.SM4REPID[1] cursor, bold;
      converseLib.validationFailed(5);
      KG0AW01.KG0AWERR = "Y";
    end
  else
    SM4REC.SM4REPID = KG0AM100.SM4REPID[1];

    KG0AS03(); /* Select unique - SM4REC*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set KG0AM100.SM4REPID[1] cursor, bold;
      converseLib.validationFailed(18);
      KG0AW01.KG0AWERR = "Y";
    end
  end
   /* ********************************/
   /* Valid new rep/agy combination?*/
   /* ********************************/
  if (KG0AM100.SM4REPID[2] != 0
   && KG0AM100.SM1AGYID[2] != " "
   && KG0AW01.KG0AWERR != "Y") /* No edit if previous error*/

    SM5REC.SM4REPID = KG0AM100.SM4REPID[2];
    SM5REC.SM1AGYID = KG0AM100.SM1AGYID[2];

    KG0AS07(); /* Open cursor - sm5rec*/

    KG0AS08(); /* fetch/close - sm5rec*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (SM5REC.XXXSTAT == "A") /* if rep/agency is active*/
        set KG0AM100.SM4REPID[2] initialAttributes;
        set KG0AM100.SM1AGYID[2] initialAttributes;
      else
        KG0AW01.KG0AWERR = "Y";
        converseLib.validationFailed(357);
        set KG0AM100.SM4REPID[2] cursor, bold;
        set KG0AM100.SM1AGYID[2] bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        KG0AW01.KG0AWERR = "Y";
        converseLib.validationFailed(357);
        set KG0AM100.SM4REPID[2] cursor, bold;
        set KG0AM100.SM1AGYID[2] bold;
      end
    end

    KG0AS09(); /* close cursor - sm5rec*/

  end

   /* ********************************/
   /* Valid old rep/agy combination?*/
   /* ********************************/
  if (KG0AM100.SM4REPID[1] != 0
   && KG0AM100.SM1AGYID[1] != " "
   && KG0AW01.KG0AWERR != "Y") /* No edit if previous error*/

    SM5REC.SM4REPID = KG0AM100.SM4REPID[1];
    SM5REC.SM1AGYID = KG0AM100.SM1AGYID[1];

    KG0AS07(); /* Open cursor - sm5rec*/

    KG0AS08(); /* fetch cursor- sm5rec*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        KG0AW01.KG0AWERR = "Y";
        converseLib.validationFailed(357);
        set KG0AM100.SM4REPID[1] cursor, bold;
        set KG0AM100.SM1AGYID[1] bold;
      end
    end

    KG0AS09(); /* close cursor - sm5rec*/

  end
   /* ********************************/
   /* Unique old rep/agy combination?*/
   /* ********************************/
  if (KG0AM100.KUCCOID == 0)
    KG0AW01.KG0AWSRP = KG0AM100.SM4REPID[1];
    KG0AW01.KG0AWSAG = KG0AM100.SM1AGYID[1];

    if (KG0AW01.KG0AWSRA in KG0AW01.KG0AWORA)
      KG0AW01.KG0AWERR = "Y";
      set KG0AM100.SM4REPID[1] cursor, bold;
      set KG0AM100.SM1AGYID[1] bold;
      converseLib.validationFailed(375);
    end

    /* *************************************************/
     /* Dest rep/agy previously used as Source rep/agy?*/
    /* *************************************************/
    KG0AW01.KG0AWSRP = KG0AM100.SM4REPID[2];
    KG0AW01.KG0AWSAG = KG0AM100.SM1AGYID[2];

    if (KG0AW01.KG0AWERR != "Y") /* No edit if previous error*/
      if (KG0AW01.KG0AWSRA in KG0AW01.KG0AWORA)
        KG0AW01.KG0AWERR = "Y";
        set KG0AM100.SM4REPID[2] cursor, bold;
        set KG0AM100.SM1AGYID[2] bold;
        converseLib.validationFailed(377);
      end
    end
    /* *************************************************/
     /* Source rep/agy previously used as Dest rep/agy?*/
    /* *************************************************/
    KG0AW01.KG0AWSRP = KG0AM100.SM4REPID[1];
    KG0AW01.KG0AWSAG = KG0AM100.SM1AGYID[1];

    if (KG0AW01.KG0AWERR != "Y")
      if (KG0AW01.KG0AWSRA in KG0AW01.KG0AWNRA)
        KG0AW01.KG0AWERR = "Y";
        set KG0AM100.SM4REPID[1] cursor, bold;
        set KG0AM100.SM1AGYID[1] bold;
        converseLib.validationFailed(377);
      end
    end
  end

   /* *************************************/
   /* All edits performed, how did we do?*/
   /* *************************************/

  if (KG0AW01.KG0AWERR == "Y")
    KG0AW01.KG0AWENT = "N";
    return; /* if edit errors do not update*/
  else
    if (converseVar.eventKey is pf12
     && KG0AW01.KG0AWENT == "Y")

      XZZREC.XZZQRYID = "CU1330";
      XZZREC.XZZ2CHR1 = KG0AM100.YSBCD;
      XZZREC.XZZ1CHR1 = KG0AM100.KUGCPIND;
      XZZREC.XZZ4CHR1 = KG0AM100.SM1AGYID[1];
      XZZREC.XZZ4CHR2 = KG0AM100.SM1AGYID[2];
      XZZREC.XZZSINT1 = KG0AM100.SM4REPID[1];
      XZZREC.XZZSINT2 = KG0AM100.SM4REPID[2];
      XZZREC.XZZINT1 = KG0AM100.KUCCOID;
      KG0AW01.KG0AWWDT = KG0AM100.KG0AMDAT;
      KG0AW01.KG0AWFMO = KG0AW01.KG0AWWMO;
      KG0AW01.KG0AWFDA = KG0AW01.KG0AWWDA;
      KG0AW01.KG0AWFYR = KG0AW01.KG0AWWYR;
      KG0AW01.KG0AWFSD = KG0AW01.KG0AWYMD;
      if (KG0AWFYR > 70)
        KG0AW01.KG0AWFCN = 019;
      else
        KG0AW01.KG0AWFCN = 020;
      end
      KG0AW01.KG0AWBDT = KG0AW01.KG0AWFDT;
      XZZREC.XZZINT2 = KG0AW01.KG0AWBDT;

      KG0AW01.KG0AWFSD = VGVar.currentShortGregorianDate;
      KG0AW01.KG0AWBDT = KG0AW01.KG0AWFDT;
      XZZREC.ZZZSDT = KG0AW01.KG0AWBDT;

      KG0AW01.KG0AWTIM = VGVar.currentFormattedTime;
      KG0AW01.KG0AWFHR = KG0AW01.KG0AWHR;
      KG0AW01.KG0AWFMI = KG0AW01.KG0AWMI;
      KG0AW01.KG0AWBTM = KG0AW01.KG0AWFTM;
      XZZREC.ZZZSTM = KG0AW01.KG0AWBTM;
    else
      if (converseVar.eventKey is enter)
        if (KG0AM100.KUCCOID != 0)
          XP0K000(); /* *//*pop dept*/
          XP0L000(); /* *//*pop store*/
        end
        converseLib.clearScreen();
        
        converseLib.validationFailed(22);
        KG0AW01.KG0AWENT = "Y";
        KG0AW01.KG0AWBSC = "Y";
      end
    end
  end
end // end KG0A120

// determine next action
Function KG0A130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/

  KG0AW01.KG0AWCPR = "KG0A130";

   /* *****************************************/
   /* / *   pop up departments*/
   /* *****************************************/
  if (converseVar.eventKey is pf5)
    XP0K000(); /* pop up dept*/
    converseLib.clearScreen();
    
    KG0AW01.KG0AWENT = "Y";
    converseLib.validationFailed(22);
  end
   /* *****************************************/
   /* / *   pop up stores*/
   /* *****************************************/
  if (converseVar.eventKey is pf6)
    XP0L000(); /* pop up store*/
    converseLib.clearScreen();
    
    KG0AW01.KG0AWENT = "Y";
    converseLib.validationFailed(22);
  end
   /* *****************************************/

  if (converseVar.eventKey is pf12
   && KG0AW01.KG0AWENT == "Y")

    KG0AW01.KG0AWSUB = KG0AW01.KG0AWMAX;
    XZZREC.XZZQRYRN = KG0AW01.KG0AWMAX;

    XP0LWCT1 = 1;
    while (XP0LWCT1 < 2000)
      if (XP0LW01.XP0LWSEL[XP0LWCT1] == "S")
        XZZREC.XZZINT3 = XP0LW01.KUMSTRID[XP0LWCT1]; /* store num*/
        XZZREC.XZZINT4 = XP0LW01.KUMSTRID[XP0LWCT1]; /* store num*/
      end
      if (XP0LW04.XP0LW-SELECT-FLAG == "N") /* default all stores*/
        XP0LW01.XP0LWSEL[XP0LWCT1] = "S";
        XZZREC.XZZINT3 = 0; /* store 0*/
        XZZREC.XZZINT4 = 9999; /* store 9999*/
        XP0LW01.KUMSTRID[XP0LWCT1] = 9999; /* force exit of loop*/
      end
      if (XP0LW01.XP0LWSEL[XP0LWCT1] == "S")
        XP0KWCT1 = 1;
        while (XP0KWCT1 < 200) /* dept loop*/
          if (XP0KW01.XNXCD[XP0KWCT1] == 9999 || XP0KW01.XNXCD[2] == 0)
            XP0KWCT1 = 201;
          end

          /* a selection by dept*/

          if (XP0KW01.XP0KWSEL[XP0KWCT1] == "S" && 
          XP0KW01.XNXCD[XP0KWCT1] != 9999)
            XZZREC.XZZINT5 = XP0KW01.XNXCD[XP0KWCT1];
            XZZREC.XZZINT6 = XP0KW01.XNXCD[XP0KWCT1];
          end

          /* no dept selected - all depts*/

          if (XP0KW04.XP0KW-SELECT-FLAG == "N") /* no dept picked*/
            XP0KW01.XP0KWSEL[XP0KWCT1] = "S";
            XZZREC.XZZINT5 = 0; /* set range from 0*/
            XZZREC.XZZINT6 = 9999; /* to 9999*/
          end

          /* add row to parm table for update*/

          if (XP0KW01.XP0KWSEL[XP0KWCT1] == "S")
            KG0AS-ADD-XX-ROW(); /* add row to parameter table*/
            XZZREC.XZZQRYRN = XZZREC.XZZQRYRN + 1;
            KG0AW01.KG0AWMAX = KG0AW01.KG0AWMAX + 1;

            /* exit loop if default*/

            if (XZZREC.XZZINT6 == 9999)
              XP0KWCT1 = 201;
            end

          end
          XP0KWCT1 = XP0KWCT1 + 1;
        end
      end
      if (XP0LW01.KUMSTRID[XP0LWCT1] == 9999 || 
      XP0LW01.KUMSTRID[2] == 0)
        XP0LWCT1 = 2000; /* exit loop*/
      end
      XP0LWCT1 = XP0LWCT1 + 1;
    end

    XZZREC.XZZINT3 = 0; /* initialize store info*/
    XZZREC.XZZINT4 = 9999; /* initialize store info*/
    XZZREC.XZZINT5 = 0; /* initialize dept info*/
    XZZREC.XZZINT6 = 9999; /* initialize dept info*/
    set XP0KW01 empty; /* clear dept work record*/
    set XP0LW01 empty; /* clear store work record*/
    set XP0LM100 initial; /* clear store map record*/
    set XP0KM001 initial; /* clear dept map record*/
    XP0KW04.XP0KW-SELECT-FLAG = "N";
    XP0LW04.XP0LW-SELECT-FLAG = "N";

    if (KG0AW01.KG0AWSUB < 31)
      KG0AW01.KG0AW-CU-CO-ID[KG0AWSUB] = XZZREC.XZZINT1;
      KG0AW01.KG0AW-FROM-STRID[KG0AWSUB] = XZZREC.XZZINT3;
      KG0AW01.KG0AW-TO-STRID[KG0AWSUB] = XZZREC.XZZINT4;
      KG0AW01.KG0AW-FROM-XNXCD[KG0AWSUB] = XZZREC.XZZINT5;
      KG0AW01.KG0AW-TO-XNXCD[KG0AWSUB] = XZZREC.XZZINT6;
      KG0AW01.KG0AWORP[KG0AWSUB] = KG0AM100.SM4REPID[1];
      KG0AW01.KG0AWOAG[KG0AWSUB] = KG0AM100.SM1AGYID[1];
      KG0AW01.KG0AWNRP[KG0AWSUB] = KG0AM100.SM4REPID[2];
      KG0AW01.KG0AWNAG[KG0AWSUB] = KG0AM100.SM1AGYID[2];
    else
      converseLib.validationFailed(376);
    end

    KG0AW01.KG0AWSUB = KG0AW01.KG0AWMAX;

    KG0AM100.KG0AMDAT = 0;
    KG0AM100.YSBCD = "  ";
    KG0AM100.KUCCOID = 0;

    set KG0AM100.SM4REPID[1] cursor;
    KG0AW01.KG0AWBSC = "Y";
    KG0AW01.KG0AWENT = "N";
    converseLib.validationFailed(262);

  end
end // end KG0A130

// Add unique to XZZREC
Function KG0AS-ADD-XX-ROW()
   /* ************************/
   /* XZZREC - Add Unique*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS-ADD-XX-ROW";

  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Add Parm*/

  KG0AW01.KG0AW-UPDT-PARM-TBL = "Y";

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    KG0A005(); /* abend routine*/
  end
end // end KG0AS-ADD-XX-ROW

// delete row - zxxrec
Function KG0AS-DEL-XX-ROW()
   /* ************************/
   /* KG0AS-DEL-XX-ROW - DELETE ROW*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS-DEL-XX-ROW";

  call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Delete Parm*/

  KG0AW01.KG0AW-UPDT-PARM-TBL = "Y";
  if (SQLCA.VAGen_SQLCODE == 100 || 
  SQLCA.VAGen_SQLCODE == 00)
  /* ;nexT SENTENCE;*/
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    KG0A005(); /* abend routine*/
  end
end // end KG0AS-DEL-XX-ROW

// fetch rows - XZZREC
Function KG0AS-FETCH-XX-ROW()
   /* ************************/
   /* kg0as-fetch-xx-row  begin*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS-FETCH-XX-ROW";

  call "IO1000" ("N1", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Add Parm*/
  KG0AW01.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;

  if (SQLCA.VAGen_SQLCODE == 100)
    call "IO1000" ("C1", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Add Parm*/
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    TA1REC.TA1LOC = "KG0AS-FETCH-XX-ROW";
    KG0A005(); /* abend routine*/
  end

   /* ************************/
   /* kg0as-fetch-xx-row   -    end*/
   /* ************************/
end // end KG0AS-FETCH-XX-ROW

// load xzzrows to wrk strg
Function KG0AS-LOAD-XX-ROWS()
   /* ************************/
   /* KG0AS-LOAD-XX-ROWS - begin*/
   /* ************************/

  set XZZREC empty;

  XZZREC.XZZQRYID = "CU1330"; /* set cursor criteria*/

  KG0AS-OPEN-XX-CRSR(); /* open xx-parm-cursor*/

  KG0AW-IDX = 1;
  while (KG0AW01.VAGen_SQLCODE == 0 && KG0AW-IDX < 2000)
    KG0AS-FETCH-XX-ROW(); /* Perform i/o, load map fields*/
    if (KG0AW01.VAGen_SQLCODE == 0)
      KG0AW04-ROW[KG0AW-IDX] = XZZREC.XZZRGRP;
    end
    KG0AW-IDX = KG0AW-IDX + 1;
  end

  KG0AW-IDX = KG0AW-IDX - 1;
  KG0AW-MAX = KG0AW-IDX - 1;

  KG0AW-PAGE-TOT = KG0AW-MAX / 14;
  KG0AW-PAGE-TOT = KG0AW-PAGE-TOT * 14;
  if (KG0AW-PAGE-TOT < KG0AW-IDX)
    KG0AW-PAGE-TOT = (KG0AW-IDX / 14) + 1;
  else
    KG0AW-PAGE-TOT = KG0AW-MAX / 14;
  end

  if (KG0AW-PAGE-TOT <= 0)
    KG0AW-PAGE-TOT = 1;
    KG0AW-PAGE-NUM = 1;
  end
   /* ************************/
   /* KG0AS-LOAD-XX-ROWS - end*/
   /* ************************/
end // end KG0AS-LOAD-XX-ROWS

// Add unique to XZZREC
Function KG0AS-OPEN-XX-CRSR()
   /* ************************/
   /* kg0as-open-xx-crsr   -   begin*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS-OPEN-XX-CRSR";

  call "IO1000" ("S1", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Add Parm*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    TA1REC.TA1LOC = "KG0AS-OPEN-XX-CRSR";
    KG0A005(); /* abend routine*/
  end
   /* ************************/
   /* kg0as-open-xx-crsr   -    end*/
   /* ************************/
end // end KG0AS-OPEN-XX-CRSR

// Select Unique from KUCREC
Function KG0AS01()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS01";

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Cust table*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    KG0A005(); /* abend routine*/
  end
end // end KG0AS01

// Select Unique from SM1REC
Function KG0AS02()
   /* ************************/
   /* SM1REC - Select Unique*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS02";

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Sales Agency table*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0050 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VSAGCY01"; /* table view*/
    KG0A005(); /* abend routine*/
  end
end // end KG0AS02

// Select Unique from SM4REC
Function KG0AS03()
   /* ************************/
   /* SM4REC - Select Unique*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS03";

  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes}; /* Read Sales Reps table*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0020 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
    KG0A005(); /* abend routine*/
  end
end // end KG0AS03

// open cursor - xzzrec
Function KG0AS05()
   /* ************************/
   /* XZZREC - Open cursor*/
   /* ************************/

  call "IO1000" ("SS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Open Parms curs*/

  if (SQLCA.VAGen_SQLCODE != 0)
    KG0AW01.KG0AWCOS = "N"; /* set 'cursor open' switch off*/
    TA1REC.TA1LOCAT[2] = "SS     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    KG0A005(); /* abend routine*/
  else
    KG0AW01.KG0AWCOS = "Y"; /* set 'cursor open' switch on*/
  end
end // end KG0AS05

// load cursor - xzzrec
Function KG0AS06()
   /* ************************/
   /* XZZREC - Load Cursor*/
   /* ************************/

  KG0AW01.KG0AWCPR = "KG0AS06";

  call "IO1000" ("SN", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Load cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "SN     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
      TA1REC.TA1DBASE = "DCORP"; /* database*/
      TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
      KG0A005(); /* abend routine*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        KG0AW01.KG0AWCOS = "N"; /* end fetch loop*/
      end
    else
      KG0AW01.KG0AWCOS = "N"; /* Set cursor switch*/
      /* ************************/
       /* XZZREC - Close cursor*/
      /* ************************/

      call "IO1000" ("CS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Close curs*/

      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "CS     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
        TA1REC.TA1DBASE = "DCORP"; /* database*/
        TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
        KG0A005(); /* abend routine*/
      end
    end
  end
end // end KG0AS06

// Open/fetch/close curs - sm5rec
Function KG0AS07()
   /* *******************************************/
   /* * validate rep/agency*/
   /* *******************************************/

  SM5REC.XXXSTAT = "*";
  SM5REC.SM5EDT = -1;

  call "IO0160" ("S3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code okay*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0AS07";
    TA1REC.TA1LOC = "SELECT SCAN VRAGCY01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY01";
    TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end KG0AS07

// fetch/close cursor -sm5rec
Function KG0AS08()
   /* ************************/
   /* SM5REC - Load Cursor*/
   /* ************************/

  call "IO0160" ("N3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0AS08";
      TA1REC.TA1LOC = "FETCH NEXT VRAGCY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY01";
      TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end

end // end KG0AS08

// fetch/close cursor -sm5rec
Function KG0AS09()
   /* ************************/
   /* SM5REC - Close cursor*/
   /* ************************/

  call "IO0160" ("C3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code okay*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0AS09";
    TA1REC.TA1LOC = "CLOSE CURSOR VRAGCY01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY01";
    TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end KG0AS09

// get info for department displa
Function XP0K000()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* xp0kW01*/
               /* xp0kW02*/
               /* xp0kW04*/
           /* ADD TO MAP GROUP:*/
               /* xp0kM001*/
   /* *************************************************************/
    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with department codes.*/
    /* 2. update table with depart info if requested.*/
    /* 3. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0K001(); /* popup window initialization*/
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;

  KUGREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
  KUGREC.SM4REPID = KG0AM100.SM4REPID[1]; /* old rep id*/
  KUGREC.SM1AGYID = KG0AM100.SM1AGYID[1]; /* old agency*/
  if (KG0AM100.YSBCD == "  ")
    KUGREC.YSBCD = "**";
  else
    KUGREC.YSBCD = KG0AM100.YSBCD; /* ysb code*/
  end

  KUGREC.KUGRPTDT = 999999999; /* term date*/
  XP0KS01(); /* open department cursr*/

  XP0KW02.XP0KWCT1 = 1;

  XP0KW02.XP0KW-SQLCODE-CUREP = 0;
  KUJREC.KUCCOID = KUCREC.KUCCOID;
  while (XP0KW02.XP0KWCT1 < 200 && XP0KW02.XP0KW-SQLCODE-CUREP == 0)
    XP0KS02();
    XP0KW02.XP0KW-SQLCODE-CUREP = SQLCA.VAGen_SQLCODE;
    if (XP0KW02.XP0KW-SQLCODE-CUREP == 0)
      XP0KW01.XNXCD[XP0KWCT1] = KUGREC.XNXCD;
      KUJREC.XNXCD = KUGREC.XNXCD;
      XP0KS03();
      if (SQLCA.VAGen_SQLCODE == 0)
        XP0KW01.KUJSLFNM[XP0KWCT1] = KUJREC.KUJSLFNM;
      else
        XP0KW01.KUJSLFNM[XP0KWCT1] = "NO DEPARTMENT NAME FOUND";
      end
    else
      XP0KW01.XNXCD[XP0KWCT1] = 9999;
    end
    XP0KW02.XP0KWCT1 = XP0KW02.XP0KWCT1 + 1;
  end

  if (XP0KW01.XNXCD[1] == 0 && XP0KW01.XNXCD[2] == 9999)
    XP0KW02.XP0KWEND = "Y";
    return;
  end

  if (XP0KW01.XNXCD[1] == 0)
    XP0KW01.KUJSLFNM[1] = "ZERO DEPARTMENT   ";
  end

  while (XP0KW02.XP0KWEND == "N") /* until end of request*/
    XP0K002(); /* display table values on popup map*/
  end

end // end XP0K000

// Initialization - pop up window
Function XP0K001()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/
   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/
  set XP0KW01 empty;
  set XP0KW02 empty;
  set XP0KW04 empty;

  XP0KW02.XP0KWCT1 = 1; /* Table index*/
  XP0KW02.XP0KWCT2 = 1; /* Screen index*/
  XP0KW02.XP0KWSIX = 1; /* End of first page save index*/
  XP0KW02.XP0KWINX[1] = 1; /* End of first page save index*/
  XP0KW02.XP0KWPIX = 0; /* Initialize pass index to zero*/
  XP0KW02.XP0KWFFL = "Y"; /* first time thru flag*/
  XP0KW02.XP0KWERR = "N"; /* Scroll error flag to no*/
  XP0KW02.XP0KWEND = "N"; /* End of pop up window session flag*/
  XP0KW04.XP0KW-SELECT-FLAG = "N";


end // end XP0K001

// converse popup dept rep/cust
Function XP0K002()
   /* ------------------------------------------------------------*/
    /* CONVERSE POP UP WINDOW FOR valid departments*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0KW02.XP0KWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    set XP0KM001 initial; /* clear map area*/
    if (XP0KW02.XP0KWFFL == "N") /* if not the first time through*/
      XP0KW02.XP0KWCT1 = XP0KW02.XP0KWINX[10] + 1; /* set up scroll pf8*/
    else
      XP0KW02.XP0KWCT1 = 1; /* /first time through*/
    end

    XP0KM001.XP0KMHDR = "DEPARTMENTS"; /* Place heading on map*/
    XP0KM001.XP0KMTR1 = "(S)elect & Enter / No (S)& Enter = All";
    XP0KM001.XP0KMTR2 = "   PF7:Back                   PF8:Frwd";
    if (XP0KW01.XNXCD[1] == 9999) /* no departments found*/
      XP0KM001.XP0KMTR2 = "NO DEPARTMENTS FOR COMPANY/OLD REP";
      XP0KW02.XP0KWERR = "Y";
    end

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/


    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0KW02.XP0KWFFL == "Y")    /* Or it is the first time thru*/
      XP0KW02.XP0KWCT2 = 1; /* Set up screen index*/
      while (XP0KW02.XP0KWCT2 <= 10 /* Until end of screen lines*/
       && XP0KW01.XNXCD[XP0KWCT1] != 9999) /* Or end*/
        XP0KM001.XNXCD[XP0KWCT2] = XP0KW01.XNXCD[XP0KWCT1];
        XP0KM001.XP0KMSEL[XP0KWCT2] = XP0KW01.XP0KWSEL[XP0KWCT1];
        XP0KM001.KUJSLFNM[XP0KWCT2] = XP0KW01.KUJSLFNM[XP0KWCT1];
        XP0KW02.XP0KWINX[XP0KWCT2] = XP0KW02.XP0KWCT1; /* Save array*/
        if (XP0KW02.XP0KWFFL == "Y") /* If first time thru*/
          XP0KW02.XP0KWSIX = XP0KW02.XP0KWCT1; /* Save last index*/
        end
        set XP0KM001.XP0KMSEL[XP0KWCT2] normal; /* Set selects to normal*/
        XP0KW02.XP0KWCT2 = XP0KW02.XP0KWCT2 + 1; /* Increment screen index*/
        XP0KW02.XP0KWCT1 = XP0KW02.XP0KWCT1 + 1; /* Increment table index*/
      end
      XP0KW02.XP0KWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0KW02.XP0KWCT1 = XP0KW02.XP0KWINX[1] - 1; /* Set up table index*/
      XP0KW02.XP0KWCT2 = 10; /* Set up screen index*/
      while (XP0KW02.XP0KWCT2 >= 1) /* Load from the bottom up*/
        XP0KM001.XNXCD[XP0KWCT2] = XP0KW01.XNXCD[XP0KWCT1];
        XP0KM001.KUJSLFNM[XP0KWCT2] = XP0KW01.KUJSLFNM[XP0KWCT1];
        XP0KM001.XP0KMSEL[XP0KWCT2] = XP0KW01.XP0KWSEL[XP0KWCT1];
        XP0KW02.XP0KWINX[XP0KWCT2] = XP0KW02.XP0KWCT1; /* Save array*/
        set XP0KM001.XP0KMSEL[XP0KWCT2] normal; /* Set select visible*/
        XP0KW02.XP0KWCT2 = XP0KW02.XP0KWCT2 - 1; /* Decrement screen index*/
        XP0KW02.XP0KWCT1 = XP0KW02.XP0KWCT1 - 1; /* Decrement table index*/
      end
      if (XP0KW02.XP0KWCT1 < 1) /* If the table index was decremented*/
        XP0KW02.XP0KWCT1 = 1; /* to zero, set it to 1*/
      end
    end
  end

  converse XP0KM001 ;
  XP0KW02.XP0KWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XP0KW04.XP0KW-SELECT-FLAG = "N"; /* initialize select flag*/
  XP0KW02.XP0KWCT1 = XP0KW02.XP0KWINX[1]; /* set to 1 if no dep fnd*/
  XP0KW02.XP0KWCT2 = 1; /* Screen index*/
  while (XP0KW02.XP0KWCT2 <= 10 /* Set all fields with data to normal*/
   && XP0KW01.XNXCD[XP0KWCT1] != 9999)
    XP0KW01.XP0KWSEL[XP0KWCT1] = XP0KM001.XP0KMSEL[XP0KWCT2];
    if (XP0KM001.XP0KMSEL[XP0KWCT2] == "S") /* set select flag*/
      XP0KW04.XP0KW-SELECT-FLAG = "Y";
    end
    set XP0KM001.XP0KMSEL[XP0KWCT2] normal;
    XP0KW02.XP0KWCT2 = XP0KW02.XP0KWCT2 + 1;
    XP0KW02.XP0KWCT1 = XP0KW02.XP0KWCT1 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0KW01.XNXCD[XP0KWCT1] == 9999) /* And end of table*/
    XP0KW02.XP0KWERR = "Y"; /* Set error flag*/
    XP0KM001.XP0KMTR2 = "   At End of Table";
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0KW02.XP0KWINX[1] <= XP0KW02.XP0KWSIX)
      XP0KW02.XP0KWERR = "Y"; /* Set error flag*/
      XP0KM001.XP0KMTR2 = "   At Beginning of Table";
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0KW02.XP0KWEND = "Y"; /* Set end flag*/
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0KW02.XP0KWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0K002

// DB2 ABEND ROUTINE
Function XP0K005()
       /* abend with negative sqlcode*/

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(23);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

end // end XP0K005

// convert system date and time
Function XP0KS01()
     /* get department info to load table*/

  call "IO5110" ("S2", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor to get dept*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5110 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST "; /* database action*/
    TA1REC.TA1TBLVU = "VCUREP01"; /* table view*/
    XP0K005(); /* abend routine*/
  end

end // end XP0KS01

// convert system date and time
Function XP0KS02()
     /* get department info to load table*/

   /* OVE 'xp0kS02' TO xp0kW01.xp0kWCPR;*/

  call "IO5110" ("N2", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* perform fetch*/

  if (SQLCA.VAGen_SQLCODE == 0 || 
  SQLCA.VAGen_SQLCODE == 100)

  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5110 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST "; /* database action*/
    TA1REC.TA1TBLVU = "VCUREP01"; /* table view*/
    XP0K005(); /* abend routine*/
  end

end // end XP0KS02

// POP UP
Function XP0KS03()
   /* ******************************/
   /* * xp0ks30 - get dept record*/
   /* ******************************/

  set SQLCA empty;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* get dept rec*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
   /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "XP0KS30";
    TA1REC.TA1LOC = "READING DB2 DEPT001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end XP0KS03

// get info for store display
Function XP0L000()
   /* *************************************************************/
   /* ***               xp0l000                                ****/
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* xp0lW01*/
               /* xp0lW02*/
               /* xp0lW04*/
           /* ADD TO MAP GROUP:*/
               /* xp0lM100*/
   /* *************************************************************/
    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with store codes.*/
    /* 2. update table with store info if requested.*/
    /* 3. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0L001(); /* popup window initialization*/
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;

  KUGREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
  KUGREC.SM4REPID = KG0AM100.SM4REPID[1]; /* old rep id*/
  KUGREC.SM1AGYID = KG0AM100.SM1AGYID[1]; /* old agency*/
  if (KG0AM100.YSBCD == "  ")
    KUGREC.YSBCD = "**";
  else
    KUGREC.YSBCD = KG0AM100.YSBCD; /* ysb code*/
  end

  KUGREC.KUGRPTDT = 999999999; /* term date*/
  XP0LS01(); /* open store cursr*/

  XP0LW02.XP0LWCT1 = 1;

  XP0LW02.XP0LW-SQLCODE-CUREP = 0;
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  while (XP0LW02.XP0LWCT1 < 2000 && XP0LW02.XP0LW-SQLCODE-CUREP == 0)
    XP0LS02();
    XP0LW02.XP0LW-SQLCODE-CUREP = SQLCA.VAGen_SQLCODE;
    if (XP0LW02.XP0LW-SQLCODE-CUREP == 0)
      XP0LW01.KUMSTRID[XP0LWCT1] = KUGREC.KUMSTRID;
      KUMREC.KUMSTRID = KUGREC.KUMSTRID;
      XP0LS03();
      if (SQLCA.VAGen_SQLCODE == 0)
        XP0LW01.KUMSTRNM[XP0LWCT1] = KUMREC.KUMSTRNM;
      else
        XP0LW01.KUMSTRNM[XP0LWCT1] = "STORE NAME NOT FOUND";
      end
      if (XP0LW01.KUMSTRID[XP0LWCT1] == 0
       && XP0LW01.KUMSTRNM[XP0LWCT1] == " ")
        XP0LW01.KUMSTRNM[XP0LWCT1] = "  STORE ZERO      ";
      end
    else
      XP0LW01.KUMSTRID[XP0LWCT1] = 9999;
    end
    XP0LW02.XP0LWCT1 = XP0LW02.XP0LWCT1 + 1;
  end

  if (XP0LW01.KUMSTRID[1] == 0 && XP0LW01.KUMSTRID[2] == 9999)
    XP0LW02.XP0LWEND = "Y";
    return;
  end

  while (XP0LW02.XP0LWEND == "N") /* until end of request*/
    XP0L002(); /* display table values on popup map*/
  end

end // end XP0L000

// Initialization - pop up window
Function XP0L001()
   /* ------------------------------------------------------------*/
   /* ----                  xp0l001                          ----*/
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/
     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0LW01 empty; /* clear working storage*/
  set XP0LW02 empty; /* clear working storage*/
  XP0LW02.XP0LWCT1 = 1; /* Table index*/
  XP0LW02.XP0LWCT2 = 1; /* Screen index*/
  XP0LW02.XP0LWINX = 1; /* internal index*/
  XP0LW02.XP0LWSIX = 1; /* End of first page save index*/
  XP0LW02.XP0LWPIX = 0; /* Initialize pass index to zero*/
  XP0LW02.XP0LWFFL = "Y"; /* first time thru flag*/
  XP0LW02.XP0LWERR = "N"; /* Scroll error flag to no*/
  XP0LW02.XP0LWEND = "N"; /* End of pop up window session flag*/
  XP0LW04.XP0LW-SELECT-FLAG = "N";


end // end XP0L001

// converse popup valid store
Function XP0L002()
   /* ------------------------------------------------------------*/
    /* CONVERSE POP UP WINDOW FOR valid stores*/
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0LW02.XP0LWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    set XP0LM100 initial; /* clear map area*/
    if (XP0LW02.XP0LWFFL == "N") /* if not the first time through*/
      XP0LW02.XP0LWCT1 = XP0LW02.XP0LWINX[10] + 1; /* set up scroll pf8*/
    else
      XP0LW02.XP0LWCT1 = 1; /* /first time through*/
    end

    XP0LM100.XP0LMHDR = "  STORES   "; /* Place heading on map*/
    /* MOVE "              Select & Enter          " TO XP0LM100.XP0LMTR1;*/
    XP0LM100.XP0LMTR1 = "(S)elect & Enter / No S & Enter = All";
    XP0LM100.XP0LMTR2 = "   PF7:Back                   PF8:Frwd";
    if (XP0LW01.KUMSTRID[1] == 9999) /* no departments found*/
      XP0LM100.XP0LMTR2 = "NO STORES FOR COMPANY/OLD REP";
      XP0LW02.XP0LWERR = "Y";
    end

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/


    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0LW02.XP0LWFFL == "Y")    /* Or it is the first time thru*/
      XP0LW02.XP0LWCT2 = 1; /* Set up screen index*/
      while (XP0LW02.XP0LWCT2 <= 10 /* Until end of screen lines*/
       && XP0LW01.KUMSTRID[XP0LWCT1] != 9999) /* Or end*/
        XP0LM100.KUMSTRID[XP0LWCT2] = XP0LW01.KUMSTRID[XP0LWCT1];
        XP0LM100.XP0LMSEL[XP0LWCT2] = XP0LW01.XP0LWSEL[XP0LWCT1];
        XP0LM100.KUMSTRNM[XP0LWCT2] = XP0LW01.KUMSTRNM[XP0LWCT1];
        XP0LW02.XP0LWINX[XP0LWCT2] = XP0LW02.XP0LWCT1; /* Save array*/
        if (XP0LW02.XP0LWFFL == "Y") /* If first time thru*/
          XP0LW02.XP0LWSIX = XP0LW02.XP0LWCT1; /* Save last index*/
        end
        set XP0LM100.XP0LMSEL[XP0LWCT2] normal; /* Set selects to normal*/
        XP0LW02.XP0LWCT1 = XP0LW02.XP0LWCT1 + 1; /* Increment table index*/
        XP0LW02.XP0LWCT2 = XP0LW02.XP0LWCT2 + 1; /* Increment screen index*/
      end
      XP0LW02.XP0LWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0LW02.XP0LWCT1 = XP0LW02.XP0LWINX[1] - 1; /* Set up table index*/
      XP0LW02.XP0LWCT2 = 10; /* Set up screen index*/
      while (XP0LW02.XP0LWCT2 >= 1) /* Load from the bottom up*/
        XP0LM100.KUMSTRID[XP0LWCT2] = XP0LW01.KUMSTRID[XP0LWCT1];
        XP0LM100.KUMSTRNM[XP0LWCT2] = XP0LW01.KUMSTRNM[XP0LWCT1];
        XP0LM100.XP0LMSEL[XP0LWCT2] = XP0LW01.XP0LWSEL[XP0LWCT1];
        XP0LW02.XP0LWINX[XP0LWCT2] = XP0LW02.XP0LWCT1; /* Save array*/
        set XP0LM100.XP0LMSEL[XP0LWCT2] normal; /* Set select visible*/
        XP0LW02.XP0LWCT1 = XP0LW02.XP0LWCT1 - 1; /* Decrement table index*/
        XP0LW02.XP0LWCT2 = XP0LW02.XP0LWCT2 - 1; /* Decrement screen index*/
      end
      if (XP0LW02.XP0LWCT1 < 1) /* If the table index was decremented*/
        XP0LW02.XP0LWCT1 = 1; /* to zero, set it to 1*/
      end
    end
  end

  converse XP0LM100 ;
  XP0LW02.XP0LWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/


  XP0LW04.XP0LW-SELECT-FLAG = "N";
  XP0LW02.XP0LWCT1 = XP0LW02.XP0LWINX[1]; /* set index*/

  XP0LW02.XP0LWCT2 = 1;
  while (XP0LW02.XP0LWCT2 <= 10 /* Set all fields with data to normal*/
   && XP0LW01.KUMSTRID[XP0LWCT1] != 9999)
    XP0LW01.XP0LWSEL[XP0LWCT1] = XP0LM100.XP0LMSEL[XP0LWCT2];
    if (XP0LM100.XP0LMSEL[XP0LWCT2] == "S")
      XP0LW04.XP0LW-SELECT-FLAG = "Y";
    end
    XP0LW02.XP0LWCT1 = XP0LW02.XP0LWCT1 + 1;
    XP0LW02.XP0LWCT2 = XP0LW02.XP0LWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0LW01.KUMSTRID[XP0LWCT1] == 9999) /* And end of table*/
    XP0LW02.XP0LWERR = "Y"; /* Set error flag*/
    XP0LM100.XP0LMTR2 = "   At End of Table";
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0LW02.XP0LWINX[1] <= XP0LW02.XP0LWSIX)
      XP0LW02.XP0LWERR = "Y"; /* Set error flag*/
      XP0LM100.XP0LMTR2 = "   At Beginning of Table";
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0LW02.XP0LWEND = "Y"; /* Set end flag*/
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0LW02.XP0LWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0L002

// DB2 ABEND ROUTINE
Function XP0L005()
   /* ****************************************************************/
                      /* xp0l005*/
   /* ****************************************************************/

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/

   /* OVE xp0lW01.xp0lWCPR TO TA1REC.TA1LOCAT(1);/* aborting process*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(23);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

end // end XP0L005

// open cursor for str by rep
Function XP0LS01()

     /* get store info to load table*/

  call "IO5110" ("S3", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor to get dept*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5110 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST "; /* database action*/
    TA1REC.TA1TBLVU = "VCUREP01"; /* table view*/
    XP0L005(); /* abend routine*/
  end

end // end XP0LS01

// fetch store from curep table
Function XP0LS02()

     /* get store info to load table by active rep*/


  call "IO5110" ("N3", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* perform fetch*/

  if (SQLCA.VAGen_SQLCODE == 0 || 
  SQLCA.VAGen_SQLCODE == 100)

  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5110 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST "; /* database action*/
    TA1REC.TA1TBLVU = "VCUREP01"; /* table view*/
    XP0L005(); /* abend routine*/
  end

end // end XP0LS02

// store description
Function XP0LS03()
   /* ********************************************/
   /* * XP0LS30 - get Store record*/
   /* *******************************************/

  set SQLCA empty;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store rec*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
   /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "XP0LS30";
    TA1REC.TA1LOC = "READING DB2 DEPT001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end XP0LS03

//*** RECORD=KG0AW01 ****
// Working storage variables for 'KG0A'
// ***********************
Record KG0AW01 type basicRecord
  10 KG0AWERR KG0AWERR ; 
  10 KG0AWBSC KG0AWBSC ; 
  10 KG0AWCPR KG0AWCPR ; 
  10 KG0AWESF KG0AWESF ; 
  10 KG0AWEOA KG0AWEOA ; 
  10 KG0AWENT KG0AWENT ; 
  10 KG0AWCOS KG0AWCOS ; 
  10 KG0AWFDT KG0AWFDT ; 
    15 KG0AWFCN KG0AWFCN ; 
    15 KG0AWFSD KG0AWFSD ; 
  10 KG0AWBDT KG0AWBDT ; 
  10 KG0AWYMD KG0AWYMD ; 
    15 KG0AWFYR KG0AWFYR ; 
    15 KG0AWFMO KG0AWFMO ; 
    15 KG0AWFDA KG0AWFDA ; 
  10 KG0AWWDT KG0AWWDT ; 
    15 KG0AWWMO KG0AWWMO ; 
    15 KG0AWWDA KG0AWWDA ; 
    15 KG0AWWYR KG0AWWYR ; 
  10 KG0AWTIM KG0AWTIM ; 
    15 KG0AWHR KG0AWHR ; 
    15 * char(1) ; 
    15 KG0AWMI KG0AWMI ; 
    15 * char(1) ; 
    15 KG0AWSE KG0AWSE ; 
  10 KG0AWFTM KG0AWFTM ; 
    15 KG0AWFHR KG0AWFHR ; 
    15 KG0AWFMI KG0AWFMI ; 
  10 KG0AWBTM KG0AWBTM ; 
  10 KG0AWSUB KG0AWSUB ; 
  10 KG0AWORA KG0AWORA [2000] ; 
    15 KG0AWORP KG0AWORP ; 
    15 KG0AWOAG KG0AWOAG ; 
  10 KG0AWNRA KG0AWNRA [2000] ; 
    15 KG0AWNRP KG0AWNRP ; 
    15 KG0AWNAG KG0AWNAG ; 
  10 KG0AW-STORE-XNX KG0AW-STORE-XNX [2000] ; 
    15 KG0AW-CU-CO-ID KG0AW-CU-CO-ID ; 
    15 KG0AW-FROM-STRID KG0AW-FROM-STRID ; 
    15 KG0AW-TO-STRID KG0AW-TO-STRID ; 
    15 KG0AW-FROM-XNXCD KG0AW-FROM-XNXCD ; 
    15 KG0AW-TO-XNXCD KG0AW-TO-XNXCD ; 
  10 KG0AW-CO-STR-XNX-SRCH KG0AW-CO-STR-XNX-SRCH ; 
    15 KG0AW-CU-CO-ID-SRCH KG0AW-CU-CO-ID-SRCH ; 
    15 KG0AW-FROM-STRID-SRCH KG0AW-FROM-STRID-SRCH ; 
    15 KG0AW-TO-STRID-SRCH KG0AW-TO-STRID-SRCH ; 
    15 KG0AW-FROM-XNXCD-SRCH KG0AW-FROM-XNXCD-SRCH ; 
    15 KG0AW-TO-XNXCD-SRCH KG0AW-TO-XNXCD-SRCH ; 
  10 KG0AWSRA KG0AWSRA ; 
    15 KG0AWSRP KG0AWSRP ; 
    15 KG0AWSAG KG0AWSAG ; 
  10 KG0AWMAX KG0AWMAX ; 
  10 KG0AW-MAX KG0AW-MAX ; 
  10 KG0AW-CNT KG0AW-CNT ; 
  10 KG0AW-IDX KG0AW-IDX ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 KG0AW-PF9-1ST-CD KG0AW-PF9-1ST-CD ; 
  10 KG0AW-DIS-MAP2-CD KG0AW-DIS-MAP2-CD ; 
  10 KG0AW-PAGE-NUM KG0AW-PAGE-NUM ; 
  10 KG0AW-PAGE-TOT KG0AW-PAGE-TOT ; 
  10 KG0AW-UPDT-PARM-TBL KG0AW-UPDT-PARM-TBL ; 
end // end KG0AW01

Record KG0AW04 type basicRecord
  3 KG0AW04-GRP KG0AW04-GRP [2000] ; 
    5 KG0AW-SEL KG0AW-SEL ; 
    5 KG0AW04-ROW KG0AW04-ROW ; 
      10 XZZKEYGP XZZKEYGP ; 
        15 XZZQRYID XZZQRYID ; 
        15 XZZQRYRN XZZQRYRN ; 
        15 XZZQRYLN XZZQRYLN ; 
        15 XROCD XROCD ; 
      10 XZZCHRGP XZZCHRGP ; 
        15 XZZ1CHR1 XZZ1CHR1 ; 
        15 XZZ1CHR2 XZZ1CHR2 ; 
        15 XZZ2CHR1 XZZ2CHR1 ; 
        15 XZZ2CHR2 XZZ2CHR2 ; 
        15 XZZ3CHR1 XZZ3CHR1 ; 
        15 XZZ3CHR2 XZZ3CHR2 ; 
        15 XZZ4CHR1 XZZ4CHR1 ; 
        15 XZZ4CHR2 XZZ4CHR2 ; 
        15 XZZ6CHR XZZ6CHR ; 
        15 XZZ8CHR XZZ8CHR ; 
      10 XZZBINGP XZZBINGP ; 
        15 XZZSINT1 XZZSINT1 ; 
        15 XZZSINT2 XZZSINT2 ; 
        15 XZZINT1 XZZINT1 ; 
        15 XZZINT2 XZZINT2 ; 
        15 XZZINT3 XZZINT3 ; 
        15 XZZINT4 XZZINT4 ; 
        15 XZZINT5 XZZINT5 ; 
        15 XZZINT6 XZZINT6 ; 
        15 XZZINT7 XZZINT7 ; 
        15 XZZINT8 XZZINT8 ; 
        15 XZZDECIM XZZDECIM ; 
      10 XZZGRP XZZGRP ; 
        15 ZZZSDT ZZZSDT ; 
        15 ZZZSTM ZZZSTM ; 
end // end KG0AW04

//*** RECORD=XP0KW01 ****
// ***  01/02/96 kclar1  created
// ***********************
Record XP0KW01 type basicRecord
  5 XP0KWZDT XP0KWZDT ; 
    10 XP0KWZYY XP0KWZYY ; 
    10 XP0KWZMM XP0KWZMM ; 
    10 XP0KWZDD XP0KWZDD ; 
  5 XP0KWDAT XP0KWDAT ; 
    10 XP0KWCYM XP0KWCYM ; 
      15 XP0KW19 XP0KW19 ; 
      15 XP0KWYY XP0KWYY ; 
      15 XP0KWMM XP0KWMM ; 
    10 XP0KWDD XP0KWDD ; 
  5 XP0KWZTM XP0KWZTM ; 
    10 XP0KWZHR XP0KWZHR ; 
    10 * char(1) ; 
    10 XP0KWZMN XP0KWZMN ; 
    10 * char(1) ; 
    10 XP0KWZSC XP0KWZSC ; 
  5 XP0KWTIM XP0KWTIM ; 
    10 XP0KWHR XP0KWHR ; 
    10 XP0KWMIN XP0KWMIN ; 
  5 XP0KWHMS XP0KWHMS ; 
    10 XP0KWHRS XP0KWHRS ; 
    10 XP0KWMNS XP0KWMNS ; 
    10 XP0KWSEC XP0KWSEC ; 
  5 * char(1) ; 
  5 XP0KWTB XP0KWTB [201] ; 
    10 XP0KWSEL XP0KWSEL ; 
    10 XNXCD XNXCD ; 
    10 KUJSLFNM KUJSLFNM ; 
end // end XP0KW01

//*** RECORD=XP0KW02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ***********************
Record XP0KW02 type basicRecord
  10 XP0KWCT1 XP0KWCT1 ; 
  10 XP0KWCT2 XP0KWCT2 ; 
  10 XP0KWSIX XP0KWSIX ; 
  10 XP0KWPIX XP0KWPIX [50] ; 
  10 XP0KWINX XP0KWINX [10] ; 
  10 XP0KWEND XP0KWEND ; 
  10 XP0KWFFL XP0KWFFL ; 
  10 XP0KWERR XP0KWERR ; 
  10 XP0KWHDR XP0KWHDR ; 
  10 XGPCD XGPCD ; 
  10 XP0KWNUM XP0KWNUM ; 
    15 XP0KWCHA XP0KWCHA ; 
  10 XWHCD XWHCD ; 
  10 XP0KWCT3 XP0KWCT3 ; 
  10 XP0KW-SQLCODE-CUREP XP0KW-SQLCODE-CUREP ; 
end // end XP0KW02

//*** RECORD=XP0KW04 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx004
//            and xpyns01.
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02-04-93  jbecke  Created
// ************************************************************
// ***********************
Record XP0KW04 type basicRecord
  10 XP0KW-SCREEN-INDEX XP0KW-SCREEN-INDEX ; 
  10 XP0KW-TABLE-INDEX XP0KW-TABLE-INDEX ; 
  10 XP0KW-FIRST-ENTRY-INDEX XP0KW-FIRST-ENTRY-INDEX ; 
  10 XP0KW-PAGE-TOP XP0KW-PAGE-TOP ; 
  10 XP0KW-PAGE-BOTTOM XP0KW-PAGE-BOTTOM ; 
  10 XP0KW-END-FLAG XP0KW-END-FLAG ; 
  10 XP0KW-FIRST-TIME-FLAG XP0KW-FIRST-TIME-FLAG ; 
  10 XP0KW-ERROR-FLAG XP0KW-ERROR-FLAG ; 
  10 XP0KW-SELECT-FLAG XP0KW-SELECT-FLAG ; 
end // end XP0KW04

//*** RECORD=XP0LW01 ****
// ***  01/02/96 kclar1  created for use
// ***********************
Record XP0LW01 type basicRecord
  5 XP0LWZDT XP0LWZDT ; 
    10 XP0LWZYY XP0LWZYY ; 
    10 XP0LWZMM XP0LWZMM ; 
    10 XP0LWZDD XP0LWZDD ; 
  5 XP0LWDAT XP0LWDAT ; 
    10 XP0LWCYM XP0LWCYM ; 
      15 XP0LW19 XP0LW19 ; 
      15 XP0LWYY XP0LWYY ; 
      15 XP0LWMM XP0LWMM ; 
    10 XP0LWDD XP0LWDD ; 
  5 XP0LWZTM XP0LWZTM ; 
    10 XP0LWZHR XP0LWZHR ; 
    10 * char(1) ; 
    10 XP0LWZMN XP0LWZMN ; 
    10 * char(1) ; 
    10 XP0LWZSC XP0LWZSC ; 
  5 XP0LWTIM XP0LWTIM ; 
    10 XP0LWHR XP0LWHR ; 
    10 XP0LWMIN XP0LWMIN ; 
  5 XP0LWHMS XP0LWHMS ; 
    10 XP0LWHRS XP0LWHRS ; 
    10 XP0LWMNS XP0LWMNS ; 
    10 XP0LWSEC XP0LWSEC ; 
  5 * char(1) ; 
  5 XP0LWTB XP0LWTB [2000] ; 
    10 XP0LWSEL XP0LWSEL ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUMSTRNM KUMSTRNM ; 
end // end XP0LW01

//*** RECORD=XP0LW02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
//    POP-UP record
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ***********************
Record XP0LW02 type basicRecord
  10 XP0LWCT1 XP0LWCT1 ; 
  10 XP0LWCT2 XP0LWCT2 ; 
  10 XP0LWSIX XP0LWSIX ; 
  10 XP0LWPIX XP0LWPIX [50] ; 
  10 XP0LWINX XP0LWINX [10] ; 
  10 XP0LWEND XP0LWEND ; 
  10 XP0LWFFL XP0LWFFL ; 
  10 XP0LWERR XP0LWERR ; 
  10 XP0LWHDR XP0LWHDR ; 
  10 XGPCD XGPCD ; 
  10 XP0LWNUM XP0LWNUM ; 
    15 XP0LWCHA XP0LWCHA ; 
  10 XWHCD XWHCD ; 
  10 YPGFFFL YPGFFFL ; 
  10 YESCDIND YESCDIND ; 
  10 XP0LWCT3 XP0LWCT3 ; 
  10 XP0LW-SQLCODE-CUREP XP0LW-SQLCODE-CUREP ; 
  10 * char(1) ; 
end // end XP0LW02

//*** RECORD=XP0LW04 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx004
//            and xpyns01.
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02-04-93  jbecke  Created
// ************************************************************
// ***********************
Record XP0LW04 type basicRecord
  10 XP0LW-SCREEN-INDEX XP0LW-SCREEN-INDEX ; 
  10 XP0LW-TABLE-INDEX XP0LW-TABLE-INDEX ; 
  10 XP0LW-FIRST-ENTRY-INDEX XP0LW-FIRST-ENTRY-INDEX ; 
  10 XP0LW-PAGE-TOP XP0LW-PAGE-TOP ; 
  10 XP0LW-PAGE-BOTTOM XP0LW-PAGE-BOTTOM ; 
  10 XP0LW-END-FLAG XP0LW-END-FLAG ; 
  10 XP0LW-FIRST-TIME-FLAG XP0LW-FIRST-TIME-FLAG ; 
  10 XP0LW-ERROR-FLAG XP0LW-ERROR-FLAG ; 
  10 XP0LW-SELECT-FLAG XP0LW-SELECT-FLAG ; 
end // end XP0LW04

// Current array maximum
DataItem KG0AW-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-CO-STR-XNX-SRCH char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KG0AW-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KG0AW-CU-CO-ID-SRCH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-DIS-MAP2-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW-FROM-STRID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-FROM-STRID-SRCH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-FROM-XNXCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-FROM-XNXCD-SRCH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current array maximum
DataItem KG0AW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current array maximum
DataItem KG0AW-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-PAGE-NUM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-PAGE-TOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-PF9-1ST-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW-STORE-XNX char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW-TO-STRID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-TO-STRID-SRCH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-TO-XNXCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0AW-TO-XNXCD-SRCH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current array maximum
DataItem KG0AW-UPDT-PARM-TBL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW04-GRP char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0AW04-ROW char(99)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Binary version of date
DataItem KG0AWBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen flag
DataItem KG0AWBSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Binary version of time
DataItem KG0AWBTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor open switch
DataItem KG0AWCOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current process name
DataItem KG0AWCPR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Enter key pressed flag
DataItem KG0AWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-applic flag
DataItem KG0AWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit error flag
DataItem KG0AWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag
DataItem KG0AWESF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted century
DataItem KG0AWFCN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KG0AWFDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date
DataItem KG0AWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted hour
DataItem KG0AWFHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted minute
DataItem KG0AWFMI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KG0AWFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system date
DataItem KG0AWFSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted time
DataItem KG0AWFTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KG0AWFYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system hour
DataItem KG0AWHR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current array maximum
DataItem KG0AWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system minute
DataItem KG0AWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New sales agy cd
DataItem KG0AWNAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New rep/agy
DataItem KG0AWNRA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New sales rep cd
DataItem KG0AWNRP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old sales agy cd
DataItem KG0AWOAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old rep/agy
DataItem KG0AWORA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old sales rep cd
DataItem KG0AWORP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen sales agy cd
DataItem KG0AWSAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system second
DataItem KG0AWSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen rep/agy
DataItem KG0AWSRA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen sales rep cd
DataItem KG0AWSRP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript for w/s array
DataItem KG0AWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system time
DataItem KG0AWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KG0AWWDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month, day, year version
DataItem KG0AWWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KG0AWWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KG0AWWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year, month, day version
DataItem KG0AWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end flag
DataItem XP0KW-END-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem XP0KW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first entry for system in tble
DataItem XP0KW-FIRST-ENTRY-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0KW-FIRST-TIME-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of previous page
DataItem XP0KW-PAGE-BOTTOM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// top of current page
DataItem XP0KW-PAGE-TOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0KW-SCREEN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0KW-SELECT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0KW-SQLCODE-CUREP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem XP0KW-TABLE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record 19
DataItem XP0KW19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num-to-cha conversion
DataItem XP0KWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem XP0KWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem XP0KWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0KWCT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current CCYYMM
DataItem XP0KWCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem XP0KWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem XP0KWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag
DataItem XP0KWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem XP0KWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0KWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen header
DataItem XP0KWHDR char(39)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// work record time(hhmmss)
DataItem XP0KWHMS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record hours
DataItem XP0KWHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record hours
DataItem XP0KWHRS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem XP0KWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record minutes
DataItem XP0KWMIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem XP0KWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record minutes
DataItem XP0KWMNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bin-to-num conversion
DataItem XP0KWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem XP0KWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record seconds
DataItem XP0KWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0KWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0KWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0KWTB char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record time
DataItem XP0KWTIM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yy
DataItem XP0KWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system dd
DataItem XP0KWZDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yymmdd
DataItem XP0KWZDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system hour
DataItem XP0KWZHR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system mm
DataItem XP0KWZMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system minutes
DataItem XP0KWZMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system seconds
DataItem XP0KWZSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system time
DataItem XP0KWZTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system yy
DataItem XP0KWZYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end flag
DataItem XP0LW-END-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem XP0LW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first entry for system in tble
DataItem XP0LW-FIRST-ENTRY-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0LW-FIRST-TIME-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of previous page
DataItem XP0LW-PAGE-BOTTOM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// top of current page
DataItem XP0LW-PAGE-TOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0LW-SCREEN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// entry was selected
DataItem XP0LW-SELECT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0LW-SQLCODE-CUREP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem XP0LW-TABLE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record 19
DataItem XP0LW19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num-to-cha conversion
DataItem XP0LWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem XP0LWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem XP0LWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0LWCT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current CCYYMM
DataItem XP0LWCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem XP0LWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem XP0LWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag
DataItem XP0LWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem XP0LWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XP0LWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen header
DataItem XP0LWHDR char(39)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// work record time(hhmmss)
DataItem XP0LWHMS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record hours
DataItem XP0LWHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record hours
DataItem XP0LWHRS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem XP0LWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record minutes
DataItem XP0LWMIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem XP0LWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record minutes
DataItem XP0LWMNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bin-to-num conversion
DataItem XP0LWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem XP0LWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work record seconds
DataItem XP0LWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0LWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XP0LWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


DataItem XP0LWTB char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// work record time
DataItem XP0LWTIM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yy
DataItem XP0LWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system dd
DataItem XP0LWZDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yymmdd
DataItem XP0LWZDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system hour
DataItem XP0LWZHR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system mm
DataItem XP0LWZMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system minutes
DataItem XP0LWZMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system seconds
DataItem XP0LWZSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system time
DataItem XP0LWZTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work system yy
DataItem XP0LWZYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

