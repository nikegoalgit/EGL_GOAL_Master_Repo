package kg0c;

import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx2.XNXCD;
import corpy2.YSBABRV;
import corpy2.YSBCD;
import corpy2.YSBTBL;
import corpz3.ZZZSDT;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUECOMNT;
import ku.common.KUEREC;
import ku.common.KUGREC;
import ku.common.KUJREC;
import ku.common.KUJSLFNM;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUNREC;
import ku.common.KUWREC;
import ku.common.KUYREC;
import ku.common.KUZREC;
import sm.common.SM1AGYID;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import sm.common.SM5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
import xa.common.XA0AW02;
//*** PROGRAM=KG0C ****
// ;               -----------------------------
// This application will allow users inquiry and maintenance
//   activities on the customer rep database, depending on what
//   functions their security has been set up for.
// ;
// The application loads three types of temp storage records
//   for the selected customer. One type for stores one for
//   depts within the selected store and one for sales reps
//   within the store/dept combination.
// ;
// The application gives the user the abilty to page through
//   temporary storage records by using the following keys:
//   PF7 and PF8   - forward and backward through reps.
//   PF5 and PF6   - forward and backward through store/dept.
//                   will step through each dept within the
//                   selected store until there are no more
//                   depts within the selected store, then
//                   the next store is selected with the first
//                   or last dept depending on which way the
//                   user is scrolling.
//   PF17 and PF18 - first store, last store.
// 
// The application also gives the user the abilty to page
//   forward and backward through the reps by changing the
//   page number. There is one rep temp storage record for
//   every 10 reps, which is the number of reps that can be
//   displayed on one screen.
// ;
// Users may view and/or maintainance active reps (default)
//   or may toggle between active and all reps by pressing
//   PF2.
// ;
// Users may choose between several functions for maintenancing
//   reps by entering the appropriate selection code to the
//   left of the rep line. PF14 will display the valid
//   selection codes in a pop up window.
// ;
// Upon entry of a valid selection code the update screen will
//   be invoked and allow the user to enter new or change data
//   then return to the inquiry screen after editing the data.
// ;
// Users may negate changes made to individual lines by
//   entering an 'N' beside each line they wish to remove
//   changes from, or they may globally negate all changes with
//   the use of the PA2 (refresh key).
// ;
// Pop up windows are available for displaying valid selection
//   codes, sales responsibility codes, and call class codes.
// 
// 
// Other keys and their usage:
// 
// PF1 - Transferrs user to the help facility.
// PF3 - (from INQUIRY screen) Exits the application.
// PF3 - (from UPDATE  SCREEN) Cancels transferring to update
//         screen. All remaining lines not already edited will
//         be bypassed.
// PF4 - transferrs user to the main menu.
// PF9 - (from INQUIRY screen) displays customer address info.
// PF9   (from UPDATE  screen) will bypass editing and any
//       changes made to the currently selected line.
// PA2 - (from INQUIRY screen) - Clears ALL changes.
// PA2 - (from UPDATE screen) - resets the update screen
//       prior to any data entered by the user.
// ;
// ;
// ;
// ;
// ;
// Maintenance Log:
// 12/18/90 - wjohns - Create new application
// 05/08/91 - wjohns - Added io call to fetch unique vsvrep01
//                       table records using the users id.
//                     Added logic to check the agency field on
//                       vsvrep01 table. When a rep record is
//                       is found and the agency field has a
//                       value,  maintenance will only be
//                       Allowed on line where agencies match
//                       the agency that was found on the
//                       vsvrep01 table.
// 05/21/91 - wjohns - Changed audit routines to include the
//                       dept id.
// 05/28/91 - wjohns - Changed front end of program to load all
//                       stores for the selected customer, and
//                       load depts for the selected store only
//                       this was done to cut down io which was
//                       causing kg0c to be timed out by cics.
// 06/09/91 - dsalzw - db changes
// 06/28/91 - wjohns - Correct looping condition on pa2 refresh
//                       when application is invoked from ka0d.
// 07/08/91 - dsalzw - Fix user security for NIL users
//                   - Allow users to reset termination date
//                        put customer dept name on screen
//                   - 'R' allows Eff dt of the new rep and the
//                        Term dt of the old rep to be the same
//                   - No heading on showing company name, etc
//                        when coming from KA0D
//                   - Add zz-chg-adt to KG0CM100 screen
// 07/16/91 - dsalzw - when term rep eff dt & term date equal
//                       any 'c' on active rep will kick out as
//                       date gap - it should not happen
// 07/25/91 - dsalzw - fix map attributes
// 07/25/91 - dsalzw - fixed problems created from 7/16 changes
// 11/05/91 - CHELLM - Added highlight to store and credit
//                     status codes if inactive or closed.
// 12/19/91 - CHELLM - ASKIP all status fields.
// 01/22/92 - CHELLM - Initialize all records, especially at
//                     date routines to resolve ivld dt error.
// 02/04/92 - dsalzw - add new map 'device' because of yellow
// 02/18/92 - WJOHNS - fix dept - expand receiving field from
//                       Commarea.
// 03/03/92 - chellm - add new map 'device' because of yellow
//                     to map KG0CM300.
// 04/17/92 - CHELLM - DB2 changes. Renamed sm5stat to xxxstat
// 04/20/92 - CHELLM - Commented out perform of kg0c577
//                     (in kg0c575) so Rep Term Dt will not be
//                     recalculated when Term Dt gaps exist.
// 04/20/92 - CHELLM - DB2 chgs.  Replaced Rep name look up
//                     to DSLSMN.VREPS001 (SM4REC) IN KG0C176.
// 11/10/92 - cancie - Added new maintenance type description
//                     "r" and "g'.
// 03/11/93 - cancie - Added extra "If" statement to check for
//                     change in KG0CWEDA (Eff Date) in proc
//                     KG0C800.
// 10/01/93 - CHELLM - CSP 4.1 Conversion.
// 12/09/93 - CHELLM - Protect Rep Eff Date for Level 1 users.
// 04/07/95 - CHELLM - Added CADLVL(3) security for Nike Canada
// 12/19/95 - KCLAR1 - Changed screen to not allow A or R on a
//                   - store or dept that is inactive
// Y2KFIX   11/17/97  DKENNY  Y2K MODIFICATIONS MADE TO:
//                    KG0C540, KG0C560, KG0C575, KG0C590,
//                    KG0C810, KG0C820, KG0C870, KG0CW01
// *********************
Program KG0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CCWREC CCWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KG0CW01 KG0CW01; // record
  KG0CW02 KG0CW02; // record
  KG0CW03 KG0CW03; // record
  KG0CW04 KG0CW04; // record
  KG0CW05 KG0CW05; // record
  KUCREC KUCREC; // record
  KUEREC KUEREC; // record
  KUGREC KUGREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUWREC KUWREC; // record
  KUYREC KUYREC; // record
  KUZREC KUZREC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use YSBTBL {deleteAfterUse = yes}; // table
  use KG0CM.KG0CM100,  // forms
      KG0CM.KG0CM200, 
      KG0CM.KG0CM300, 
      KG0CM.XX0XM001, 
      KG0CM.XX0XM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KG0C000: KG0C000();
    goto KG0C100; /* go on to kg0c converse screen*/
    KG0C100: KG0C100();
    ;
    goto KG0C100; /* display rep information*/
    ;
  end // end main
end // end KG0C

// INTIIALIZATION PROCESS
Function KG0C000()
   /* *************************************/
   /* * KG0C000 - INITIALIZATION PROCESS **/
   /* *************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KG0CW01 empty; /* working storage 1*/
  set KG0CW02 empty; /* working storage 2*/
  set KG0CW03 empty; /* store temporary storage definition*/
  set KG0CW04 empty; /* rep temporary storage definition*/
  set KG0CW05 empty; /* dept temporary storage definition*/
  set SQLCA empty;
  set CCWREC empty; /**/
  set KUNREC empty; /* customer record*/
  set KUCREC empty; /* company record*/
  set KUGREC empty; /* customer rep record*/
  set KUJREC empty; /**/
  set KUEREC empty; /* comments record*/
  set KULREC empty; /* address record*/
  set KUMREC empty; /* store record*/
  set KUWREC empty; /**/
  set KUYREC empty; /* service rep record*/
  set TA1REC empty; /* date rtn record*/
  set TA2REC empty; /* date rtn record*/
  set SM5REC empty; /* sales rep record*/
  set KUZREC empty; /* audit record*/
  ;
  KG0CW01.KG0CWCNO = 0;
  KG0CW01.KG0CWSTR = 0;
  KG0CW01.KG0CWXNX = 0;
  ;
  XX0XS01(); /* get system date and time*/
  ;
  set KG0CM100 initial; /* rep inquiry / maintenance screen*/
  set KG0CM200 initial; /* rep add screen*/
  ;
  KG0C130(); /* purge store temp storage*/
  KG0C131(); /* purge dept temp storage*/
  KG0C161(); /* purge rep temp storage*/
  ;
  if (KG0CM100.KUCCOID == " ")
    KG0CM100.KUCCOID = 0;
    KG0CM100.KUMSTRID = 0;
    KG0CM100.XNXCD = 0;
  end
  ;
  KG0CM100.KG0CMDAT = VGVar.currentShortGregorianDate;
  KG0CM200.KG0CMDAT = VGVar.currentShortGregorianDate;
  ;
  KG0CW01.KG0CWCPO = "1"; /* cursor position on company*/
  ;
  if (COMMAREA.CAFROMAP == "KA0D") /* if during add process*/
     /* NEXT SENTENCE*/
  else
    KUYREC.XXXUSRID = COMMAREA.CAUSERID;
    KG0C010(); /* check for agency maintenancing*/
  end
  ;
  if (COMMAREA.CAFROMAP == "KA0D") /* if during add process*/
    KG0CW01.KG0CWMOD = "UPDT";
    KG0CM100.KG0CMTT1 = "UPDATE ";
    KG0CM100.KG0CMTT2 = "ACTIVE";
    KG0CW01.KG0CWNEW = "Y";
    KG0CW01.KG0CWADR = "Y";
  else
    KG0CW01.KG0CWMOD = "INQU"; /* set mode to inquiry*/
  end
  ;
  KG0CW01.KG0CWACF = "Y"; /* select active reps*/
  KG0CW01.KG0CWERR = "N"; /* error flag*/
  KG0CW01.KG0CWSMR = 9999; /* max # of stores/temp storage rec*/
  ;
   /* ****************************/
   /* check fast path entry*/
   /* ****************************/
  ;
  KG0CW01.KG0CWUSR = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KG0CW01.KG0CWUSR = COMMAREA.CAITEM; /* key from fastpath*/
  end
  ;
  if (KG0CW01.KG0CWCNO-CHAR is numeric)
    KG0CM100.KUCCOID = KG0CW01.KG0CWCNO;
  else
    KG0CM100.KUCCOID = 0;
    KG0CW01.KG0CWCNO = 0;
  end
  if (KG0CW01.KG0CWSTR-CHAR is numeric)
    KG0CM100.KUMSTRID = KG0CW01.KG0CWSTR;
  else
    KG0CM100.KUMSTRID = 0;
    KG0CW01.KG0CWSTR = 0;
  end
  if (KG0CW01.KG0CWXNX-CHAR is numeric)
    KG0CM100.XNXCD = KG0CW01.KG0CWXNX;
  else
    KG0CM100.XNXCD = 0;
    KG0CW01.KG0CWXNX = 0;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y")
    KUCREC.KUCCOID = KG0CM100.KUCCOID;
    KG0CW03.KUMSTRID = KG0CM100.KUMSTRID;
    KG0CW05.XNXCD = KG0CM100.XNXCD;
    KG0CW01.KG0CWSFN = "Y"; /* store found flag*/
    KG0CW01.KG0CWDFN = "Y"; /* dept found flag*/
  end
  ;
  if (KG0CM100.KUCCOID > 0) /* if a company is available*/
    KG0C115(); /* process new company*/
  end
  ;
end // end KG0C000

// I/O FOR FETCH ON SERVICE REPS
Function KG0C010()
   /* *******************************************/
   /* * KG0C020 - I/O FOR CHECKING AGENCY      **/
   /* *******************************************/
  ;
  call "IO0550" ("SA ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      TA1REC.TA1TYPE = "DB2";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C020";
      TA1REC.TA1LOC = "FETCH VSUREP01 ";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSUREP01";
      KG0CW01.KG0CWCID = KUYREC.XXXUSRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C010

// CONVERSE REP INFORMATION SCRN
Function KG0C100()
   /* ********************************************************/
   /* * KG0C100 - CONVERSE REP INFORMATION SCREEN           **/
   /* *                                                     **/
   /* * This is the major process in the KG0C application.  **/
   /* * Sends the inquiry screen, invokes editing, updating,**/
   /* * pfkey checking, and transfering to other online     **/
   /* * applications.                                       **/
   /* *                                                     **/
   /* ********************************************************/
  ;
  KG0CM100.KG0CMMSG = KG0CW01.KG0CWMSG;
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* appl has been entered from ka0d*/
    set KG0CM100.CATOAP protect, invisible;
    set KG0CM100.CAITEM protect, invisible;
    set KG0CM100.KUECOMNT protect, invisible;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y" /* appl has been entered from ka0d*/
   && KG0CW01.KG0CWADR == "Y" /* add rep mode*/
   && KG0CW01.KG0CWERR == "N") /* no errors*/
     /* next sentence*/
  else
    converse KG0CM100 ;
  end
  ;
  KG0CW01.KG0CWMSG = " ";
  KG0CM100.KG0CMMSG = " ";
  KG0CW01.KG0CWERR = "N";
  ;
  ;
  set KG0CM100.KG0CMFRT initialAttributes; /* enterable page number normal*/
                                   /* intensity*/
  ;
  if (KG0CW01.KG0CWERR == "N") /* if no errors*/
    KG0C700();
                                   /* check for change in co, store, or ysb*/
  end
  ;
  if (KG0CW01.KG0CWERR == "N" /* if no errors*/
   && KG0CW01.KG0CWMOD == "UPDT") /* in update mode*/
    KG0C400(); /* edit select values*/
  end
  ;
  KG0C110(); /* edit special keys/fast paths*/
  ;
   /* ********************************************************/
   /* * Check to see if user changed page number on screen. **/
   /* * If user changed page and the page number is greater **/
   /* *    than the total number of rep temp storage recs,  **/
   /* *    or is less than one issue error message,         **/
   /* *    otherwise load the screen from rep temp storage  **/
   /* *    using the page number to fetch temp storage rec. **/
   /* ********************************************************/
  if (converseVar.eventKey is enter)
    if (KG0CM100.KG0CMFRT == KG0CW01.KG0CWPCT)
                                   /* check if page number changed*/
       /* next sentence*/
    else
      if (KG0CM100.KG0CMFRT < 1 /* 0 was entered*/
       || KG0CM100.KG0CMFRT > KG0CW01.KG0CWRRT)
        KG0CW01.KG0CWERR = "Y"; /* error found*/
        converseLib.validationFailed(379); /* invalid page message*/
        set KG0CM100.KG0CMFRT cursor, bold; /* set page number bright*/
      else
        KG0CW01.KG0CWPCT = KG0CM100.KG0CMFRT;
        KG0CW01.KG0CWRIX = KG0CM100.KG0CMFRT;
        KG0C190(); /* load sales reps to screen*/
      end
    end
  end
  ;
  if (converseVar.eventKey is enter
   && KG0CW01.KG0CWNEW == "Y") /* coming from ka0d*/
    KG0CW01.KG0CWCHG = "N"; /* changes made flag*/
    KG0C500(); /* process selection entries*/
    if (KG0CW01.KG0CWCHG == "Y" /* changes were made*/
     && KG0CW01.KG0CWACF == "Y") /* active reps selected*/
      KG0C575(); /* major edit before update for active*/
    end
  else
    /* ********************************************************/
    /* * If selecting "ALL" reps kg0c560 edit is done which  **/
    /* *    uses temp storage to validate dates etc.         **/
    /* * If selecting "ACTIVE" reps kg0c575 edit is done     **/
    /* *    which does a read on the database for validations**/
    /* *    and some extra date allignment.                  **/
    /* ********************************************************/
    if (converseVar.eventKey is enter)
      if (KG0CW01.KG0CWERR == "N"    /* if no errors*/
       && KG0CW01.KG0CWMOD == "UPDT" /* in update mode*/
       && KG0CW01.KG0CWPND == "Y")   /* if update pending*/
        KG0CW01.KG0CWCHG = "N"; /* changes made flag*/
        KG0C500(); /* process selection entries*/
        if (KG0CW01.KG0CWCHG == "Y" /* changes were made*/
         && KG0CW01.KG0CWACF == "N") /* all reps selected*/
          KG0C560(); /* edit before update all reps selected*/
        else
          if (KG0CW01.KG0CWCHG == "Y" /* changes were made*/
           && KG0CW01.KG0CWACF == "Y") /* active reps selected*/
            KG0C575(); /* edit before update active reps selected*/
          end
        end
      end
    end
  end
  ;
   /* ********************************************************/
   /* * If just the comment on the screen has been changed, **/
   /* *    update the comment, otherwise do edits, then do  **/
   /* *    updates including the comment.                   **/
   /* ********************************************************/
  if (KG0CW01.KG0CWERR == "N"    /* if no errors*/
   && KG0CW01.KG0CWMOD == "UPDT" /* and update mode*/
   && KG0CW01.KG0CWPND == "N"    /* no other update pending*/
   && KG0CM100.KUECOMNT != KUEREC.KUECOMNT)
    if (converseVar.eventKey is pf12)
      KG0C800(); /* update the databases*/
    end
  else
    if (KG0CW01.KG0CWERR == "N"    /* if no errors*/
     && KG0CW01.KG0CWMOD == "UPDT" /* and update mode*/
     && KG0CW01.KG0CWPND == "Y"    /* updates pending*/
     && KG0CW01.KG0CWCHG == "Y")   /* changes were made*/
      if (converseVar.eventKey is pf12)
        if (KG0CW01.KG0CWACF == "N") /* all reps selected*/
          KG0C560(); /* major edit before update for all*/
        else
          if (KG0CW01.KG0CWACF == "Y") /* active reps selected*/
            KG0C575(); /* major edit before update for active*/
          end
        end
        if (KG0CW01.KG0CWERR == "N") /* if no errors*/
          KG0C800(); /* update the databases*/
          KG0CW01.KG0CWPND = "N";
          if (COMMAREA.CAFROMAP == "KA0D") /* from company add*/
            COMMAREA.CATOAP = "KA0D";
            COMMAREA.CAUSERA = KG0CW01.KG0CWUSR;
            COMMAREA.CACURRAP = "KG0C";
            COMMAREA.CAFROMAP = "KG0C";
            KG0C161(); /* purge rep temp storage*/
            XSEXIT();
            COMMAREA.CACURRAP = "KG0C";
            KG0CM100.VAGen_EZEMSG = COMMAREA.CAMSG;
            KG0CW01.KG0CWERR = "Y";
          end
        else /* no upd on error*/
          return;
        end
      else /* ezeaid NOT pf12*/
        if (converseVar.validationMsgNum == 0 /* no previous warning msgs*/
         && KG0CW01.KG0CWCHG == "Y")          /* CHANGES WERE MADE*/
          converseLib.validationFailed(22); /* press pf12 to confirm*/
        end
      end
    end
  end
end // end KG0C100

// EDIT SPECIAL KEYS
Function KG0C110()
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    KG0CW01.KG0CWPND = "N"; /* reset updates pending flag*/
    KG0CW01.KG0CWMSG = " "; /* reset message*/
    KG0CW01.KG0CWPCT = 1; /* reset page count*/
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
    if (KG0CW01.KG0CWNEW == "Y") /* invoked from ka0d*/
      KG0C161(); /* purge rep temp storage*/
      KG0CW01.KG0CWRCT = 0;
      KG0C170(); /* write rep temp storage rec*/
      KG0CW01.KG0CWRRT = KG0CW01.KG0CWRCT;
      KG0CW01.KG0CWRIX = 1;
      KG0C190(); /* move reps to screen*/
      KG0CW01.KG0CWADR = "N"; /* stop add rep mode*/
      return;
    else
      KG0C160(); /* load reps*/
      KG0CW01.KG0CWRIX = 1; /* start at top*/
      KG0C190(); /* move reps to screen*/
      KG0CM100.KUECOMNT = KG0CW01.KUECOMNT; /* refresh comment*/
      return;
    end
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KG0CM100.CATOAP > " ") /* fast path*/
      if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
        converseLib.validationFailed(367);
        KG0CW01.KG0CWERR = "Y";
        set KG0CM100.CATOAP cursor, bold;
        return;
      end
      if (KG0CW01.KG0CWNEW == "Y") /* new store, no reps added*/
        converseLib.validationFailed(368);
        KG0CW01.KG0CWERR = "Y";
        set KG0CM100.CATOAP cursor, bold;
        return;
      end
      if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
        KG0CW01.KG0CWERR = "Y";
        set KG0CM100.KUECOMNT cursor, bold;
        return;
      end
      KG0C130(); /* purge store temp storage*/
      KG0C161(); /* purge rep temp storage*/
      COMMAREA.CATOAP = KG0CM100.CATOAP;
      if (KG0CM100.CAITEM == " ")
        KG0CW01.KG0CWCNO = KG0CM100.KUCCOID;
        KG0CW01.KG0CWSTR = KG0CM100.KUMSTRID;
        COMMAREA.CAUSERA = KG0CW01.KG0CWUSR;
      else
        COMMAREA.CAITEM = KG0CM100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KG0C";
      XSEXIT();
      KG0CM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.CATOAP cursor, bold;
    else
      set KG0CM100.CATOAP initialAttributes;
    end
    return;
  else
    if (KG0CM100.CATOAP > " ")
      KG0CW01.KG0CWERR = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KG0CM100.CATOAP cursor, bold;
      return;
    else
      set KG0CM100.CATOAP modified;
    end
  end
  ;
   /* **************************************/
   /* pfkey edit*/
   /* **************************************/
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* return*/
     || converseVar.eventKey is pf4) /* master menu*/
      KG0C600(); /* scroll screen to the error*/
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
  end
  ;
  if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* return*/
     || converseVar.eventKey is pf4) /* master menu*/
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KUECOMNT cursor, bold;
      return;
    end
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* return*/
     || converseVar.eventKey is pf4) /* master menu*/
      KG0C600(); /* scroll screen to the error*/
      converseLib.validationFailed(368);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf2)
    if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
      KG0C600(); /* scroll screen to the error*/
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
      set KG0CM100.KUECOMNT cursor, bold;
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    if (KG0CW01.KG0CWACF == "Y")
      KG0CW01.KG0CWACF = "N"; /* active reps flag*/
    else
      KG0CW01.KG0CWACF = "Y";
    end
    KG0CW01.KG0CWPCT = 1; /* reset page count*/
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
    KG0C160(); /* load reps*/
    KG0CW01.KG0CWRIX = 1; /* start at top*/
    KG0C190(); /* move reps to screen*/
    KG0CM100.KUECOMNT = KG0CW01.KUECOMNT; /* refresh comment*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to company update*/
    KG0C130(); /* purge store temp storage*/
    KG0C161(); /* purge rep temp storage*/
    COMMAREA.CAUSERA = KG0CM100.KUCCOID;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KG0C";
    XSEXIT();
    KG0CM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help system*/
    KG0C130(); /* purge store temp storage*/
    KG0C161(); /* purge rep temp storage*/
    XSPF1();
    KG0CM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    KG0C130(); /* purge store temp storage*/
    KG0C161(); /* purge rep temp storage*/
    COMMAREA.CAFROMAP = "KG0C";
    XSPF4();
    KG0CM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf9 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf9)
    KG0C360(); /* show addresses*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf11 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf11)
    KG0C660(); /* window ysb table*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf12) /* update databases*/
    if (KG0CM100.KUECOMNT != KUEREC.KUECOMNT) /* comment was changed*/
       /* next sentence*/
    else
      if (KG0CW01.KG0CWPND == "N" /* no updates pending*/
       || KG0CW01.KG0CWCHG == "N") /* no changes have been made*/
        KG0CW01.KG0CWERR = "Y";
        converseLib.validationFailed(386);
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf7 key    (page up for reps)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf7) /* scroll backwards for reps*/
    KG0C670();
    return;
  end
  ;
   /* **************************************/
   /* edit pf8 key    (page down for reps  )*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf8) /* scroll forwards for reps*/
    KG0C675();
    return;
  end
  ;
   /* **************************************/
   /* edit pf5 key    (page up for stores)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf5) /* scroll backwards for stores*/
    if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
      set KG0CM100.KUECOMNT cursor, bold;
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    KG0C680();
    if (converseVar.validationMsgNum == 0)
      KG0CW01.KG0CWPCT = 1;
      KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT; /* set page count to one*/
      return;
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf6 key    (page down for stores)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf6) /* scroll forwards for stores*/
    if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
      set KG0CM100.KUECOMNT cursor, bold;
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    KG0C685();
    if (converseVar.validationMsgNum == 0)
      KG0CW01.KG0CWPCT = 1;
      KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT; /* set page count to one*/
      return;
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf14 key (active/inactive reps)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf14)
    KG0C595(); /* window select values*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf17 key    (top of stores)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf17) /* goto first store*/
    if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
      set KG0CM100.KUECOMNT cursor, bold;
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    KG0C690();
    return;
  end
  ;
   /* **************************************/
   /* edit pf18 key    (last store)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf18) /* goto last store*/
    if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
      set KG0CM100.KUECOMNT cursor, bold;
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    KG0C695();
    return;
  end
  ;
   /* **************************************/
   /* edit pf24 key    (cursor position)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf24) /* switch cursor positioning*/
    if (KG0CW01.KG0CWCPO == "1")
      KG0CW01.KG0CWCPO = "2"; /* cursor on company*/
    else
      KG0CW01.KG0CWCPO = "1"; /* cursor on select*/
    end
    KG0C200(); /* set fields for inquiry or update*/
    return;
  end
  ;
   /* **************************************/
   /* invalid pf key*/
   /* **************************************/
  ;
  if (KG0CW01.KG0CWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0CW01.KG0CWERR = "Y";
  end
end // end KG0C110

// PROCESS NEW COMPANY
Function KG0C115()
   /* ******************************************************/
   /* *  KG0C115 - PROCESS NEW COMPANY                    **/
   /* *                                                   **/
   /* *  Load company information using company id, load  **/
   /* *  account class description using the acct class   **/
   /* *  code from company against the XAU table, perform **/
   /* *  process to load all stores for the company into  **/
   /* *  temporary storage, perform process to load reps  **/
   /* *  into temporary storage.                          **/
   /* *                                                   **/
   /* ******************************************************/
  ;
   /* *********************************************************/
   /* *  FORMAT COMPANY SCREEN DATA                          **/
   /* *********************************************************/
  ;
  set KUCREC empty; /* clear out company record*/
  set KG0CM100.KUCCOID initialAttributes; /* set original attributes*/
  set KG0CM100.KUMSTRID initialAttributes; /* set original attributes*/
  ;
  KUCREC.KUCCOID = KG0CM100.KUCCOID; /* set company key*/
  ;
  KG0C120(); /* read vcmpny01 and acct class*/
  if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
    set KG0CM100.KUCCOID cursor, bold;
    return;
  end
  ;
  KG0CM100.KUCCONM = KUCREC.KUCCONM; /* company name*/
  KG0CM100.XCCCD = KUCREC.XCCCD; /* credit status code*/
  KG0CM100.XAUCD = KUCREC.XAUCD; /* account class code*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD /* find acct class desc*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KG0CM100.XAUDESC = XAUTBL.XAUDESC[sysVar.arrayIndex];
  else
    KG0CM100.XAUDESC = "NOT FOUND ";
  end
  ;
   /* *********************************************************/
     /* FORMAT STORE SCREEN DATA*/
   /* *********************************************************/
  ;
  KG0C125(); /* load all active stores*/
  ;
  if (KG0CW01.KG0CWERR == "Y") /* error loading stores*/
    return;
  end
  ;
  KG0C150(); /* search for store*/
  ;
  if (KG0CW01.KG0CWSFN == "Y")
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID;
    KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM;
    KG0CM100.XXXSTAT = KG0CW03.XXXSTAT;
  else
    converseLib.validationFailed(26); /* store/dept not found*/
    KG0CW01.KG0CWERR = "Y"; /* set error flag*/
    set KG0CM100.KUMSTRID cursor, bold;
    return;
  end
  ;
  if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
    set KG0CM100.XXXSTAT protect, bold; /* HIGHLIGHT THE STATUS CODE*/
    KG0CW01.KG0CWMSG = " ATTENTION:  STORE IS INACTIVE ";
  else
    set KG0CM100.XXXSTAT initialAttributes;
  end
  ;
   /* *********************************************************/
     /* FORMAT DEPT SCREEN DATA*/
   /* *********************************************************/
  ;
  KG0CW01.KG0CWDMR = 999; /* set max number of depts*/
  ;
  KG0C136(); /* write dept temp storage recs*/
  ;
  KG0C151(); /* search for dept*/
  ;
  if (KG0CW01.KG0CWDFN == "Y")
    KG0CM100.XNXCD = KG0CW05.XNXCD;
    KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM;
    KG0CM100.KG0CM-DEPT-STAT = KG0CW05.XXXSTAT;
  else
    converseLib.validationFailed(26); /* store/dept not found*/
    KG0CW01.KG0CWERR = "Y"; /* set error flag*/
    set KG0CM100.XNXCD cursor, bold;
    KG0CM100.KUJSLFNM = " ";
    KG0CM100.KG0CM-DEPT-STAT = " ";
    return;
  end
  ;
  if (KG0CM100.KG0CM-DEPT-STAT == "I") /* IF INACTIVE department*/
    set KG0CM100.KG0CM-DEPT-STAT protect, bold; /* highlight and displ. msg*/
    KG0CW01.KG0CWMSG = " ATTENTION:  DEPARTMENT IS INACTIVE ";
  else
    set KG0CM100.KG0CM-DEPT-STAT initialAttributes;
  end
  ;
  if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
    if (KG0CM100.KG0CM-DEPT-STAT == "I") /* and department is inactive*/
      KG0CW01.KG0CWMSG = "ATTENTION:  STORE AND DEPARTMENT ARE INACTIVE";
    end
  end
  ;
   /* *********************************************************/
     /* FORMAT REP SCREEN DATA*/
   /* *********************************************************/
  ;
  KG0C160(); /* load all sales reps*/
  ;
  if (KG0CW01.KG0CWERR == "Y") /* error loading reps*/
    return;
  end
  ;
  KG0CW01.KG0CWRIX = 1; /* start at the top*/
  ;
  KG0CW01.KG0CWPCT = 1; /* page counter*/
  ;
  KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
  ;
  KG0C190(); /* move sales reps to the screen*/
  ;
   /* ******************************************************/
     /* read and format comment screen data(commissions)*/
   /* ******************************************************/
  ;
  if (KG0CW01.KG0CWMOD == "UPDT") /* show comments if update authority*/
    KG0CM100.KUECOMNT = " "; /* clear comment*/
    KG0CW01.KG0CWCBF = " "; /* clear comment before image*/
    KG0CW01.KG0CWCCT = 0; /* comment count*/
    set KUEREC empty; /* clear out comment record*/
    if (KUCREC.KUCCOMNT != "Y") /* check comment indicator on company*/
      /* NEXT SENTENCE*/
    else
      KUEREC.KUECMTID = KUCREC.KUCCOID; /* set comment key*/
      KUEREC.KUECTYP = "C";
      KG0C300(); /* select set on comments within dept*/
      KG0C310(); /* select next on comments within dept*/
      KG0CW01.KG0CWCMT = "N"; /* comment found flag*/
      while (SQLCA.VAGen_SQLCODE == 0
       && KG0CW01.KG0CWCMT == "N")
        if (KUEREC.XNDCD == "COMM") /* commissions comment*/
          KG0CM100.KUECOMNT = KUEREC.KUECOMNT;
          KG0CW01.KG0CWCBF = KUEREC.KUEGRP;
          KG0CW01.KG0CWCMT = "Y"; /* comment found*/
        else
          KG0C310(); /* read next comment*/
        end
      end
      KG0C320(); /* close comments cursor*/
    end
  end
end // end KG0C115

// SELECT COMPANY
Function KG0C120()
   /* *****************************/
   /* * KG0C120 - select company **/
   /* *****************************/
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* company not found*/
      converseLib.validationFailed(25);
      KG0CW01.KG0CWERR = "Y"; /* set error flag*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C125";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KG0CW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  else
    KG0CW01.XATCD = " ";
  end
  ;
   /* ***********************************************/
   /* Edit for allowance of user groups*/
   /* ************************************************/
  KG0C121();
end // end KG0C120

// EDIT ACCT TYP FOR UPDT ABILITY
Function KG0C121()
   /* ************************************************************/
   /* *KG0C121 - EDIT ACCOUNT TYPE and legal entity for         **/
   /* *          allowance of user groups.                      **/
   /* ************************************************************/
  if (KUCREC.XLECD == "03") /* edit for nike canada user*/
    if (COMMAREA.CADLVL[3] == "Y")
      if (COMMAREA.CAADDFL == "N"
       && COMMAREA.CACHGFL == "N")
        KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry*/
        KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
        KG0CM100.KG0CMTT2 = "ALL   "; /* change title*/
        converseLib.validationFailed(272); /* not authorized to maint*/
        set KG0CM100.KUCCOID cursor;
        return;
      else
        KG0CW01.KG0CWMOD = "UPDT"; /* change to inquiry*/
        KG0CM100.KG0CMTT1 = "UPDATE"; /* change title*/
        KG0CM100.KG0CMTT2 = "ALL    "; /* change title*/
        return;
      end
    else
      KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry mode*/
      KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
      KG0CM100.KG0CMTT2 = "ACTIVE"; /* change title*/
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      set KG0CM100.KUCCOID cursor;
      return;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry mode*/
      KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
      KG0CM100.KG0CMTT2 = "ACTIVE"; /* change title*/
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      set KG0CM100.KUCCOID cursor;
      return;
    end
  end
  ;
  ;
  if (KG0CW01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      if (COMMAREA.CAADDFL == "N"
       && COMMAREA.CACHGFL == "N")
        KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry*/
        KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
        KG0CM100.KG0CMTT2 = "ALL   "; /* change title*/
        converseLib.validationFailed(272); /* not authorized to maint*/
        set KG0CM100.KUCCOID cursor;
      else
        KG0CW01.KG0CWMOD = "UPDT"; /* change to inquiry*/
        KG0CM100.KG0CMTT1 = "UPDATE"; /* change title*/
        KG0CM100.KG0CMTT2 = "ALL    "; /* change title*/
      end
    else
      KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry mode*/
      KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
      KG0CM100.KG0CMTT2 = "ACTIVE"; /* change title*/
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      set KG0CM100.KUCCOID cursor;
    end
  else
    if (KG0CW01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        if (COMMAREA.CAADDFL == "N"
         && COMMAREA.CACHGFL == "N")
          KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry*/
          KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
          KG0CM100.KG0CMTT2 = "ALL   "; /* change title*/
          converseLib.validationFailed(272); /* not authorized to maint*/
          set KG0CM100.KUCCOID cursor;
        else
          KG0CW01.KG0CWMOD = "UPDT"; /* change to inquiry*/
          KG0CM100.KG0CMTT1 = "UPDATE"; /* change title*/
          KG0CM100.KG0CMTT2 = "ALL    "; /* change title*/
        end
      else
        KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry mode*/
        KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
        KG0CM100.KG0CMTT2 = "ACTIVE"; /* change title*/
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        set KG0CM100.KUCCOID cursor;
      end
    else /* ****** edit for Inc user*/
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry*/
        KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
        KG0CM100.KG0CMTT2 = "ACTIVE"; /* change title*/
        converseLib.validationFailed(272); /* not authorized to maint*/
        set KG0CM100.KUCCOID cursor;
      else
        if (COMMAREA.CAADDFL == "N"
         && COMMAREA.CACHGFL == "N")
          KG0CW01.KG0CWMOD = "INQU"; /* change to inquiry*/
          KG0CM100.KG0CMTT1 = "INQUIRY"; /* change title*/
          KG0CM100.KG0CMTT2 = "ALL   "; /* change title*/
          converseLib.validationFailed(272); /* not authorized to maint*/
          set KG0CM100.KUCCOID cursor;
        else
          KG0CW01.KG0CWMOD = "UPDT"; /* change to inquiry*/
          KG0CM100.KG0CMTT1 = "UPDATE"; /* change title*/
          KG0CM100.KG0CMTT2 = "ALL    "; /* change title*/
        end
      end
    end
  end
end // end KG0C121

// LOAD ALL STORES USING CMPNY ID
Function KG0C125()
   /* **************************************************/
   /* * KG0C125 - LOAD ALL STORES USING COMPANY ID*/
   /* **************************************************/
  ;
  KG0C130(); /* purge temp work file*/
  ;
  if (KG0CW01.KG0CWERR == "Y") /* error in purge*/
    return;
  end
  ;
  KG0CW01.KG0CWSMR = 9999; /* set maximum nbr of stores*/
  ;
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  ;
  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C125";
    TA1REC.TA1LOC = "SELECT SCAN VSTORE01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KG0CW01.KG0CWCID = KUCREC.KUCCOID;
    KG0CW01.KG0CWSID = 0;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KG0CW01.KG0CWSCT = 0;
  KG0CW01.KG0CWSEN = "N";
  while (KG0CW01.KG0CWSEN == "N"
   && KG0CW01.KG0CWERR == "N")
    KG0C135(); /* WRITE STORES TO TEMP STORAGE*/
  end
  ;
  KG0CW01.KG0CWSRT = KG0CW01.KG0CWSCT;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
end // end KG0C125

// PURGE STORE TEMP STORAGE
Function KG0C130()
   /* ***************************************/
   /* * KG0C130 - PURGE STORE TEMP STORAGE **/
   /* ***************************************/
  ;
  KG0CW02.KG0CW2CT = 0;
  KG0CW02.KG0CW2AP = "KW03";
  KG0CW02.KG0CW2RC = 0;
  KG0CW02.KG0CW2FC = "P"; /* purge temp work file*/
  ;
  set KG0CW03 empty;
  KG0CW03.KG0CW3LG = 45;
  ;
  call "TA0050" (KG0CW03, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0C130

// PURGE DEPT TEMP STORAGE
Function KG0C131()
   /* ***************************************/
   /* * KG0C131 - PURGE DEPT TEMP STORAGE  **/
   /* ***************************************/
  ;
  KG0CW02.KG0CW2CT = 0;
  KG0CW02.KG0CW2AP = "KW05";
  KG0CW02.KG0CW2RC = 0;
  KG0CW02.KG0CW2FC = "P"; /* purge temp work file*/
  ;
  set KG0CW05 empty;
  KG0CW05.KG0CW5LG = 45;
  ;
  call "TA0050" (KG0CW05, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0C131

// WRITE STORES TO TEMP STORAGE
Function KG0C135()
   /* ************************************************/
   /* * KG0C135 - WRITE STORES TO TEMPORARY STORAGE **/
   /* ************************************************/
  ;
  KG0CW01.KG0CWSIN = 1; /* counter for stores found*/
  KG0CW01.KG0CWSFN = "N"; /* stores found switch*/
  KG0CW01.KG0CWSEN = "N"; /* end of stores switch*/
  ;
  while (KG0CW01.KG0CWSIN < KG0CW01.KG0CWSMR) /* less than per set max*/
    set KG0CW03 empty;
    KG0C140(); /* select next store*/
    if (KG0CW01.KG0CWSEN == "Y") /* no more stores*/
      KG0CW01.KG0CWSIN = KG0CW01.KG0CWSMR; /* set to max to end loop*/
    else
      if (KG0CW01.KG0CWSFN == "Y") /* if any stores selected*/
        set KG0CW02 empty;
        KG0CW02.KG0CW2RC = 0;
        KG0CW02.KG0CW2FC = "A";
        KG0CW02.KG0CW2AP = "KW03";
        KG0CW01.KG0CWSCT = KG0CW01.KG0CWSCT + 1;
        KG0CW02.KG0CW2CT = KG0CW01.KG0CWSCT;
        KG0CW03.KG0CW3LG = 45;
        call "TA0050" (KG0CW03, KG0CW02) {isNoRefresh = yes, isExternal = yes};
        if (KG0CW02.KG0CW2RC != 0)
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          KG0CW01.KG0CWSEN = "Y";
          KG0CW01.KG0CWERR = "Y";
          converseLib.validationFailed(228);
        end
      end
    end
  end
end // end KG0C135

// WRITE DEPTS TO TEMP STORAGE
Function KG0C136()
   /* ************************************************/
   /* * KG0C136 - WRITE DEPTS TO TEMPORARY STORAGE  **/
   /* ************************************************/
  ;
  KG0CW01.KG0CWDFN = "N";
  KG0CW01.KG0CWDCT = 0;
  KG0C131(); /* purge dept temp storage*/
  KG0C142(); /* select all customer recs*/
  KG0CW01.XNXCD = -1;
  while (SQLCA.VAGen_SQLCODE == 0)
    KG0C143(); /* get next customer rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUNREC.XNXCD == KG0CW01.XNXCD)
         /* next sentence*/
      else
        KG0CW01.KG0CWDFN = "Y";
        KG0CW01.XNXCD = KUNREC.XNXCD;
        KG0CW05.XNXCD = KUNREC.XNXCD;
        KUJREC.KUCCOID = KUNREC.KUCCOID;
        KUJREC.XNXCD = KUNREC.XNXCD;
        KG0C146(); /* read dept*/
        KG0CW05.KUJSLFNM = KUJREC.KUJSLFNM;
        KG0CW05.XXXSTAT = KUJREC.XXXSTAT;
        set KG0CW02 empty;
        KG0CW02.KG0CW2RC = 0;
        KG0CW02.KG0CW2FC = "A";
        KG0CW02.KG0CW2AP = "KW05";
        KG0CW01.KG0CWDCT = KG0CW01.KG0CWDCT + 1;
        KG0CW02.KG0CW2CT = KG0CW01.KG0CWDCT;
        KG0CW05.KG0CW5LG = 45;
        call "TA0050" (KG0CW05, KG0CW02) {isNoRefresh = yes, isExternal = yes};
        if (KG0CW02.KG0CW2RC != 0)
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          KG0CW01.KG0CWDEN = "Y";
          KG0CW01.KG0CWERR = "Y";
          converseLib.validationFailed(228);
        end
      end
    end
  end
  KG0C144(); /* close customer cursor*/
  ;
  KG0CW01.KG0CWDRT = KG0CW01.KG0CWDCT; /* save total dept tmp #*/
end // end KG0C136

// SELECT NEXT STORE
Function KG0C140()
   /* *******************************************/
   /* * KG0C140 - SELECT NEXT STORE            **/
   /* *                                        **/
   /* *    LOAD STORE ID, NAME, STATUS, AND    **/
   /* *    LAST SALES DATE                     **/
   /* *                                        **/
   /* *******************************************/
  ;
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KG0CW01.KG0CWSFN = "Y";
    KG0CW03.KUMSTRID = KUMREC.KUMSTRID;
    KG0CW03.KUMSTRNM = KUMREC.KUMSTRNM;
    KG0CW03.XXXSTAT = KUMREC.XXXSTAT;
    KG0CW03.ZZZSDT = KUMREC.ZZZSDT;
    KG0CW01.KG0CWSIN = KG0CW01.KG0CWSIN + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0CW01.KG0CWSEN = "Y";
      KG0C145(); /* close store cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C140";
      TA1REC.TA1LOC = "FETCH NEXT VSTORE01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C140

// FETCH ALL CUSTOMERS
Function KG0C142()
   /* **********************************************************/
   /* * KG0C142 - LOAD ALL CUSTOMERS USING COMPANY, AND STORE **/
   /* **********************************************************/
  ;
  KUNREC.KUCCOID = KG0CM100.KUCCOID;
  KUNREC.KUMSTRID = KG0CM100.KUMSTRID;
  KUNREC.XNXCD = -1;
  KUNREC.XGPCD = "**";
  ;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C142";
    TA1REC.TA1LOC = "SELECT SCAN VCUST001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    KG0CW01.KG0CWCID = KUNREC.KUCCOID;
    KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C142

// SELECT NEXT CUSTOMER REC
Function KG0C143()
   /* *******************************************/
   /* * KG0C142 - SELECT NEXT CUSTOMER REC     **/
   /* *                                        **/
   /* *    LOAD DEPT NUMBERS INTO STORE TEMP   **/
   /* *    STORAGE RECORDS.                    **/
   /* *                                        **/
   /* *******************************************/
  ;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* NEXT SENTENCE*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C142";
      TA1REC.TA1LOC = "FETCH NEXT VCUST001";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      KG0CW01.KG0CWCID = KUMREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C143

// CLOSE CUSTOMER CURSOR
Function KG0C144()
   /* ************************************/
   /* * KG0C143 - CLOSE CUSTOMER CURSOR **/
   /* ************************************/
  ;
  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C143";
    TA1REC.TA1LOC = "CLOSE CURSOR VCUST001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    KG0CW01.KG0CWCID = KUMREC.KUCCOID;
    KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C144

// CLOSE STORE CURSOR
Function KG0C145()
   /* *********************************/
   /* * KG0C145 - CLOSE STORE CURSOR **/
   /* *********************************/
  ;
  call "IO0340" ("CS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C145";
    TA1REC.TA1LOC = "CLOSE CURSOR VSTORE01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KG0CW01.KG0CWCID = KUCREC.KUCCOID;
    KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C145

// SELECT DEPT REC FOR NAME
Function KG0C146()
   /* *******************************************/
   /* * KG0C146 - SELECT DEPARTMENT RECORD     **/
   /* *                                        **/
   /* *******************************************/
  ;
  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUJREC.KUJSLFNM = "NOT FOUND ";
      KUJREC.XXXSTAT = " ";
      SQLCA.VAGen_SQLCODE = 0;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C146";
      TA1REC.TA1LOC = "SELECT VDEPT001    ";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      KG0CW01.KG0CWCID = KUJREC.KUCCOID;
      KG0CW01.KG0CWSID = KUJREC.XNXCD;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C146

// SEARCH FOR STORE
Function KG0C150()
   /* *******************************************/
   /* * KG0C150 - SEARCH FOR STORE             **/
   /* *******************************************/
  ;
  KG0CW01.KG0CWSCT = 0;
  KG0CW01.KG0CWSEN = "N";
  KG0CW01.KG0CWSFN = "N";
  KG0CW01.KG0CWSIN = 1;
  ;
  while (KG0CW01.KG0CWSIN < KG0CW01.KG0CWSMR
   && KG0CW01.KG0CWSEN == "N") /* not end of stores*/
    KG0C155(); /* read temp work file*/
    if (KG0CW03.KUMSTRID == KG0CM100.KUMSTRID)
      KG0CW01.KG0CWSEN = "Y";
      KG0CW01.KG0CWSFN = "Y";
    else
      KG0CW01.KG0CWSIN = KG0CW01.KG0CWSIN + 1;
    end
  end
end // end KG0C150

// SEARCH FOR DEPT
Function KG0C151()
   /* *******************************************/
   /* * KG0C151 - SEARCH FOR DEPT              **/
   /* *******************************************/
  ;
  KG0CW01.KG0CWDCT = 0;
  KG0CW01.KG0CWDEN = "N";
  KG0CW01.KG0CWDFN = "N";
  KG0CW01.KG0CWDIN = 1;
  ;
  while (KG0CW01.KG0CWDIN < KG0CW01.KG0CWDMR
   && KG0CW01.KG0CWDEN == "N") /* not end of depts*/
    KG0C156(); /* read dept temp storage*/
    if (KG0CM100.XNXCD == 0)
      KG0CW01.KG0CWDEN = "Y";
      KG0CW01.KG0CWDFN = "Y";
      KG0CM100.XNXCD = KUNREC.XNXCD;
    else
      if (KG0CW05.XNXCD == KG0CM100.XNXCD)
        KG0CW01.KG0CWDEN = "Y";
        KG0CW01.KG0CWDFN = "Y";
        KG0CM100.XNXCD = KUNREC.XNXCD;
      else
        KG0CW01.KG0CWDIN = KG0CW01.KG0CWDIN + 1;
      end
    end
  end
end // end KG0C151

// READ STORE TEMP STORAGE
Function KG0C155()
   /* *******************************************/
   /* * KG0C155 READ STORE TEMP STORAGE*/
   /* *******************************************/
  ;
  if (KG0CW01.KG0CWSCT > KG0CW01.KG0CWSRT /* if count > #of temp storage*/
   || KG0CW01.KG0CWSRT == 0)             
    converseLib.validationFailed(206); /* end of data*/
    KG0CW01.KG0CWERR = "Y";
    KG0CW01.KG0CWSEN = "Y";
    return;
  end
  ;
  set KG0CW03 empty;
  KG0CW02.KG0CW2RC = 0;
  KG0CW01.KG0CWSCT = KG0CW01.KG0CWSCT + 1;
  KG0CW02.KG0CW2CT = KG0CW01.KG0CWSCT;
  KG0CW02.KG0CW2FC = "R";
  KG0CW02.KG0CW2AP = "KW03";
  ;
  KG0CW03.KG0CW3LG = 45;
  ;
  call "TA0050" (KG0CW03, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC == 0)
    /* next sentence*/
  else
    if (KG0CW02.KG0CW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWSEN = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(228);
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWSEN = "Y";
    end
  end
end // end KG0C155

// READ DEPT TEMP STORAGE
Function KG0C156()
   /* *******************************************/
   /* * KG0C156 READ DEPT TEMP STORAGE*/
   /* *******************************************/
  ;
  converseLib.validationFailed(0); /* clear out old messages*/
  set KG0CM100.KUMSTRID initialAttributes;
  ;
  if (KG0CW01.KG0CWDCT > KG0CW01.KG0CWDRT /* if count > #of temp storage*/
   || KG0CW01.KG0CWDRT == 0)             
    KG0CM100.XNXCD = 0;
    set KG0CM100.KUMSTRID cursor, bold;
    converseLib.validationFailed(406); /* end of data*/
    KG0CW01.KG0CWERR = "Y";
    KG0CW01.KG0CWDEN = "Y";
    return;
  end
  ;
  set KG0CW05 empty;
  KG0CW02.KG0CW2RC = 0;
  KG0CW01.KG0CWDCT = KG0CW01.KG0CWDCT + 1;
  KG0CW02.KG0CW2CT = KG0CW01.KG0CWDCT;
  KG0CW02.KG0CW2FC = "R";
  KG0CW02.KG0CW2AP = "KW05";
  ;
  KG0CW05.KG0CW5LG = 45;
  ;
  call "TA0050" (KG0CW05, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC == 0)
    /* next sentence*/
  else
    if (KG0CW02.KG0CW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWDEN = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(228);
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWDEN = "Y";
    end
  end
end // end KG0C156

// LOAD REPS USING CO, STOR, DEPT
Function KG0C160()
   /* *******************************************************/
   /* * KG0C160 - LOAD REPS USING COMPANY, STORE, AND DEPT **/
   /* *******************************************************/
  ;
  KG0CW01.KG0CWERR = "N"; /* error flag*/
  ;
  KG0C161(); /* purge temp work file*/
  ;
  if (KG0CW01.KG0CWERR == "Y") /* error in purge*/
    return;
  end
  ;
  KG0CW01.KG0CWRMX = 9999; /* set maximum nbr of reps*/
  ;
  set KG0CW04 empty; /* working storage for reps*/
  KG0CW01.KG0CWREN = "N"; /* end of reps switch*/
  ;
  if (KUCREC.KUCCOID == 0) /* invalid company*/
    set KG0CM100.KUCCOID cursor, bold;
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(25);
    return;
  end
  ;
  if (KG0CW01.KG0CWSFN == "N") /* store not found*/
    return;
  end
  ;
  set KUGREC empty;
  ;
  KUGREC.KUCCOID = KUCREC.KUCCOID; /* company number*/
  KUGREC.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
  KUGREC.XNXCD = KG0CW05.XNXCD; /* dept id*/
  ;
  if (KG0CM100.KG0CMYSB == " ") /* sales resp not entered on screen*/
    KUGREC.YSBCD = "**"; /* generic search by company and store*/
  else
    KUGREC.YSBCD = KG0CM100.KG0CMYSB;
  end
  ;
  if (KG0CW01.KG0CWACF == "Y") /* active reps flag*/
    KUGREC.KUGRPTDT = 999999999; /* limit nbr of reps*/
  else
    KUGREC.KUGRPTDT = -1; /* unlimited nbr of reps will be*/
                                   /* selected*/
  end
  ;
  ;
  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C160";
    TA1REC.TA1LOC = "SELECT SCAN VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KG0CW01.KG0CWCID = KUGREC.KUCCOID;
    KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KG0CW01.KG0CWRCT = 0; /* nbr of total rep temp storage recs*/
  KG0CW01.KG0CWREN = "N"; /* end of reps switch*/
  ;
  while (KG0CW01.KG0CWREN == "N" /* not end of reps*/
   && KG0CW01.KG0CWERR == "N") /* no errors*/
    set KG0CW04 empty;
    KG0CW01.KG0CWRPT = 1;
    while (KG0CW01.KG0CWRPT < 11   /* 10 reps per temp storage record*/
     && KG0CW01.KG0CWREN == "N" /* not end of reps*/
     && KG0CW01.KG0CWERR == "N") /* no errors*/
      KG0C165(); /* select next rep*/
    end
    KG0C170(); /* write reps to temp storage*/
  end
  ;
  KG0CW01.KG0CWRRT = KG0CW01.KG0CWRCT; /* kg0crrt remains constant*/
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  KG0CW01.KG0CWTPG = KG0CW01.KG0CWRCT; /* total nbr of pages*/
  ;
  KG0CM100.KG0CMLST = KG0CW01.KG0CWTPG;
end // end KG0C160

// PURGE REP TEMP STORAGE
Function KG0C161()
   /* *************************************/
   /* * KG0C161 - PURGE REP TEMP STORAGE **/
   /* *************************************/
  ;
  KG0CW02.KG0CW2CT = 0;
  KG0CW02.KG0CW2AP = "KW04";
  KG0CW02.KG0CW2RC = 0;
  KG0CW02.KG0CW2FC = "P"; /* purge temp work file*/
  ;
  set KG0CW04 empty;
  KG0CW04.KG0CW4LG = 1750;
  ;
  call "TA0050" (KG0CW04, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0C161

// SELECT NEXT REP
Function KG0C165()
   /* ******************************/
   /* * KG0C165 - SELECT NEXT REP **/
   /* ******************************/
  ;
  call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KG0CW04.KG0CWUPD[KG0CWRPT] = " ";
    KG0CW01.KG0CWRFN = "Y"; /* rep was found*/
    KG0C176(); /* get rep name*/
    ;
    KG0CW01.KG0CWBDT = KUGREC.KUGRPEDT;
    KG0C180(); /* convert date to mmddyy*/
    KUGREC.KUGRPEDT = KG0CW01.KG0CWDDT;
    ;
    KG0CW01.KG0CWBDT = KUGREC.KUGRPTDT;
    KG0C180(); /* convert date to mmddyy*/
    KUGREC.KUGRPTDT = KG0CW01.KG0CWDDT;
    ;
    KG0CW01.KG0CWBDT = KUGREC.KUGCPEDT;
    KG0C180(); /* convert date to mmddyy*/
    KUGREC.KUGCPEDT = KG0CW01.KG0CWDDT;
    ;
    KG0CW01.KG0CWBDT = KUGREC.ZZZCHGDT;
    KG0C180(); /* convert date to mmddyy*/
    KUGREC.ZZZCHGDT = KG0CW01.KG0CWDDT;
    ;
    KG0CW04.KG0CWBFR[KG0CWRPT] = KUGREC.KUGGRP; /* before image*/
    KG0CW04.KG0CWAFT[KG0CWRPT] = KUGREC.KUGGRP; /* after image*/
    ;
    /* *******************************/
    /* * GET SALES RESP ABREVIATION **/
    /* *******************************/
    if (KUGREC.YSBCD in YSBTBL.YSBCD)
      KG0CW04.YSBABRV[KG0CWRPT] = YSBTBL.YSBABRV[sysVar.arrayIndex];
    else
      KG0CW04.YSBABRV[KG0CWRPT] = "NOT FOUND";
    end
    KG0CW01.KG0CWRPT = KG0CW01.KG0CWRPT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0CW01.KG0CWREN = "Y";
      KG0C185(); /* close rep cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C165";
      TA1REC.TA1LOC = "FETCH NEXT VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C165

// WRITE REPS TO TEMP STORAGE
Function KG0C170()
   /* *****************************************/
   /* * KG0C170 - WRITE REPS TO TEMP STORAGE **/
   /* *****************************************/
  ;
  set KG0CW02 empty;
  KG0CW02.KG0CW2RC = 0; /* return code*/
  KG0CW02.KG0CW2FC = "A";
  KG0CW02.KG0CW2AP = "KW04";
  KG0CW01.KG0CWRCT = KG0CW01.KG0CWRCT + 1;
  KG0CW02.KG0CW2CT = KG0CW01.KG0CWRCT;
  KG0CW04.KG0CW4LG = 1780;
  call "TA0050" (KG0CW04, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  if (KG0CW02.KG0CW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0CW01.KG0CWREN = "Y";
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0C170

// GET REP NAMES
Function KG0C176()
   /* *******************************************/
   /* * KG0C176 - GET SALES REP NAMES          **/
   /* *******************************************/
  ;
  KG0CW01.KG0CWNAM = " ";
  ;
  set SM4REC empty;
  ;
  SM4REC.SM4REPID = KUGREC.SM4REPID;
  ;
  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
    KG0CW01.KG0CWLST = SM4REC.XXXLSTNM;
    KG0CW01.KG0CWFST = SM4REC.XXXFSTNM;
    KG0CW04.KG0CWNAM[KG0CWRPT] = KG0CW01.KG0CWNAM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      KG0CW04.KG0CWNAM[KG0CWRPT] = "NOT FOUND ";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C176";
      TA1REC.TA1LOC = "FETCH NEXT VRAGCY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY01";
      KG0CW01.KG0CWCID = SM4REC.SM4REPID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
end // end KG0C176

// CONVERT DATE TO MMDDYY
Function KG0C180()
   /* *************************************/
   /* * KG0C180 - CONVERT DATE TO MMDDYY **/
   /* *************************************/
  ;
  KG0CW01.KG0CWDMM = KG0CW01.KG0CWBMM;
  KG0CW01.KG0CWDDD = KG0CW01.KG0CWBDD;
  KG0CW01.KG0CWDYY = KG0CW01.KG0CWBYY;
end // end KG0C180

// CLOSE REP CURSOR
Function KG0C185()
   /* *******************************/
   /* * KG0C185 - CLOSE REP CURSOR**/
   /* *******************************/
  ;
  call "IO5110" ("C1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C185";
    TA1REC.TA1LOC = "CLOSE CURSOR VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KG0CW01.KG0CWCID = KUCREC.KUCCOID;
    KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C185

// MOVE REPS TO SCREEN
Function KG0C190()
   /* ****************************************/
   /* * KG0C190 - MOVE SALES REPS TO SCREEN **/
   /* ****************************************/
  ;
  KG0CW01.KG0CWCNT = 1; /* counter for screen*/
  ;
  KG0C195(); /* READ REP TEMP STORAGE*/
  ;
  while (KG0CW01.KG0CWCNT < 11)
    if (KG0CW01.KG0CWRIX > KG0CW01.KG0CWRRT) /* if past total #of reps*/
      if (converseVar.validationMsgNum == 0) /* no previous message*/
        converseLib.validationFailed(206);
      end
      KG0CM100.YSBCD[KG0CWCNT] = " ";
      KG0CM100.YSBABRV[KG0CWCNT] = " ";
      KG0CM100.SM4REPID[KG0CWCNT] = 0;
      KG0CM100.KG0CMNAM[KG0CWCNT] = " ";
      KG0CM100.SM1AGYID[KG0CWCNT] = " ";
      KG0CM100.KG0CMEDT[KG0CWCNT] = 0;
      KG0CM100.KG0CWIND[KG0CWCNT] = " ";
      KG0CM100.KG0CMSEL[KG0CWCNT] = " ";
      KG0CM100.KG0CMTDT[KG0CWCNT] = 0;
      KG0CM100.KG0CMCDT[KG0CWCNT] = 0;
    else
      KG0CM100.YSBCD[KG0CWCNT] = KG0CW04.KG0CWYSA[KG0CWCNT];
      KG0CM100.YSBABRV[KG0CWCNT] = KG0CW04.YSBABRV[KG0CWCNT];
      KG0CM100.SM4REPID[KG0CWCNT] = KG0CW04.KG0CWRPA[KG0CWCNT];
      KG0CM100.KG0CMNAM[KG0CWCNT] = KG0CW04.KG0CWNAM[KG0CWCNT];
      KG0CM100.SM1AGYID[KG0CWCNT] = KG0CW04.KG0CWAGA[KG0CWCNT];
      KG0CM100.KG0CMEDT[KG0CWCNT] = KG0CW04.KG0CWEDA[KG0CWCNT];
      KG0CM100.KG0CWIND[KG0CWCNT] = KG0CW04.KG0CWPYA[KG0CWCNT];
      KG0CM100.KG0CMSEL[KG0CWCNT] = KG0CW04.KG0CWUPD[KG0CWCNT];
      KG0CM100.KG0CMCDT[KG0CWCNT] = KG0CW04.KG0CWCDB[KG0CWCNT];
      if (KG0CW04.KG0CWTDA[KG0CWCNT] < 999999) /* put term date on screen*/
        KG0CM100.KG0CMTDT[KG0CWCNT] = KG0CW04.KG0CWTDA[KG0CWCNT];
      else
        KG0CM100.KG0CMTDT[KG0CWCNT] = 0;
      end
    end
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
  end
  ;
  KG0C200(); /* protect fields*/
end // end KG0C190

// READ REP TEMP STORAGE
Function KG0C195()
   /* **********************************/
   /* * KG0C195 READ REP TEMP STORAGE **/
   /* **********************************/
  ;
  KG0CW02.KG0CW2RC = 0;
  KG0CW02.KG0CW2CT = KG0CW01.KG0CWRIX;
  ;
  KG0CW02.KG0CW2FC = "R";
  KG0CW02.KG0CW2AP = "KW04";
  ;
  KG0CW04.KG0CW4LG = 1780;
  ;
  call "TA0050" (KG0CW04, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KG0CW02.KG0CW2RC == 0)
    /* next sentence*/
  else
    if (KG0CW02.KG0CW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWREN = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(228);
      KG0CW01.KG0CWERR = "Y";
      KG0CW01.KG0CWREN = "Y";
    end
  end
end // end KG0C195

// SET FIELDS FOR INQR/UPDT
Function KG0C200()
   /* *********************************************/
   /* * KG0C200 - SET SELECT FIELD FOR INQR/UPDT **/
   /* *********************************************/
  ;
  if (KG0CW01.KG0CWERR == "Y")
    return;
  end
  ;
  if (KG0CW01.KG0CWMOD == "UPDT")
    if (KG0CW01.KG0CWCPO == "2")
      set KG0CM100.KG0CMSEL cursor;
    else
      set KG0CM100.KUCCOID cursor;
    end
  end
  ;
  KG0CW01.KG0CWCNT = 1;
  ;
  if (KG0CW01.KG0CWMOD == "UPDT")
    if (KG0CW01.KG0CWACF == "Y")
      KG0CM100.KG0CMTT1 = "UPDATE ";
      KG0CM100.KG0CMTT2 = "ACTIVE";
    else
      KG0CM100.KG0CMTT1 = "UPDATE ";
      KG0CM100.KG0CMTT2 = "ALL   ";
    end
    while (KG0CW01.KG0CWCNT < 11)
      if (KUYREC.SM1AGYID == "    ")
        set KG0CM100.KG0CMSEL[KG0CWCNT] initialAttributes;
        set KG0CM100.KUECOMNT initialAttributes;
      else
        if (KG0CM100.SM1AGYID[KG0CWCNT] != KUYREC.SM1AGYID)
          set KG0CM100.KG0CMSEL[KG0CWCNT] skip;
        else
          set KG0CM100.KG0CMSEL[KG0CWCNT] initialAttributes;
          set KG0CM100.KUECOMNT initialAttributes;
        end
      end
      KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
    end
  else
    if (KG0CW01.KG0CWMOD == "INQU")
      if (KG0CW01.KG0CWACF == "Y")
        KG0CM100.KG0CMTT1 = "INQUIRY ";
        KG0CM100.KG0CMTT2 = "ACTIVE";
      else
        KG0CM100.KG0CMTT1 = "INQUIRY";
        KG0CM100.KG0CMTT2 = "ALL   ";
      end
      while (KG0CW01.KG0CWCNT < 11)
        set KG0CM100.KG0CMSEL[KG0CWCNT] protect, invisible;
        set KG0CM100.KUECOMNT protect, invisible;
        KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
      end
    end
  end
end // end KG0C200

// SELECT COMMENTS
Function KG0C300()
   /* ******************************/
   /* * KG0C300 - SELECT COMMENTS **/
   /* ******************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("SS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C300";
    TA1REC.TA1LOC = "SELECT SCAN VCOMNT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    KG0CW01.KG0CWCID = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C300

// READ NEXT COMMENT
Function KG0C310()
   /* **********************************/
   /* * KG0C310 - SELECT NEXT COMMENT **/
   /* **********************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("SN", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    KG0CW01.KG0CWCCT = KG0CW01.KG0CWCCT + 1; /* add 1 to number of comments*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C310";
      TA1REC.TA1LOC = "FETCH NEXT VCOMNT01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C310

// CLOSE COMMENT CURSOR
Function KG0C320()
   /* ***********************************/
   /* * KG0C320 - CLOSE COMMENT CURSOR **/
   /* ***********************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("CS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C320";
    TA1REC.TA1LOC = "CLOSE CURSOR VCOMNT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    KG0CW01.KG0CWCID = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C320

// PROCESS REQUEST FOR ADDRESSES
Function KG0C360()
   /* ********************************************/
   /* * KG0C360 - PROCESS REQUEST FOR ADDRESSES **/
   /* ********************************************/
  ;
  if (KG0CW01.KG0CWERR == "N" /* if no errors*/
   && KG0CW01.KG0CWMOD == "UPDT") /* and update mode*/
    KG0C400(); /* edit select values*/
  end
  ;
  if (KG0CW01.KG0CWERR == "Y") /* if errors*/
    return;
  end
  ;
  set KG0CM300 initial; /* address view screen*/
  ;
  KG0C610(); /* get company address*/
  ;
  KG0C620(); /* get store address*/
  ;
  KG0C630(); /* get bill to address*/
  ;
  KG0CW01.KG0CWAFL = "Y";
  ;
  while (KG0CW01.KG0CWAFL == "Y")
    KG0C640(); /* display addresses*/
  end
end // end KG0C360

// EDIT SELECT VALUES
Function KG0C400()
   /* **********************************************************/
   /* * KG0C400 - EDIT SELECT VALUES                          **/
   /* *                                                       **/
   /* * Edit select values on screen for validity, check user **/
   /* *   security and issue message if the user has not been **/
   /* *   authorized for the selected function, or if the     **/
   /* *   selected function is invalid.                       **/
   /* * Update status on rep temp storage records when the    **/
   /* *   select value on the screen has changed.             **/
   /* * Read through rep temp storage and if any select field **/
   /* *   has a value, set the updates pending flag to 'Y'.   **/
   /* * If the user puts an 'N' in the select field,the after **/
   /* *   image of the rep temp storage rec is restored prior **/
   /* *   to any changes by moving the before image  to the   **/
   /* *   to the after image(kg0cw04).                        **/
   /* * While reading through temp storage, check if there    **/
   /* *   is at least one blank line in temp storage for      **/
   /* *   the user to enter an 'A' in the select field for    **/
   /* *   invoking the add reps function, if there isnt a     **/
   /* *   blank line then a new blank temp storage record is  **/
   /* *   created.                                            **/
   /* * After the above has been done, restore temp storage   **/
   /* *   and screen prior to this process being executed.    **/
   /* *     (send the user back from whence he/she came)      **/
   /* **********************************************************/
  ;
   /* ************************************************/
   /* * First check to see if commissions comment   **/
   /* *   has been changed. if so, check security   **/
   /* *   and send message if the user does not     **/
   /* *   have proper security to change the        **/
   /* *   the comment.                              **/
   /* ************************************************/
   /* * ADDED CODE TO PREVENT ADDING OR REPLACING   **/
   /* *A REP WHEN THE DEPT OR STORE IS INACTIVE     **/
   /* ************************************************/
  ;
  if (KG0CM100.KUECOMNT != KG0CW01.KUECOMNT
   && COMMAREA.CACLVL[1] != "Y") /* invalid security*/
    KG0CM100.KUECOMNT = KG0CW01.KUECOMNT;
    converseLib.validationFailed(398);
    set KG0CM100.KUECOMNT cursor, bold;
    return;
  end
  ;
   /* ************************************************/
   /* * Edit select values on screen for validity   **/
   /* *   and security.                             **/
   /* ************************************************/
  KG0CW01.KG0CWCNT = 1; /* counter for screen*/
  ;
  while (KG0CW01.KG0CWCNT < 11) /* 12/18/95 - added kclar1*/
    set KG0CM100.KG0CMSEL[KG0CWCNT] initialAttributes;
    if ((KG0CM100.KG0CMSEL[KG0CWCNT] == "A" || 
    KG0CM100.KG0CMSEL[KG0CWCNT] == "R") && 
    (KG0CM100.XXXSTAT == "I"
     || KG0CM100.KG0CM-DEPT-STAT == "I"))
      KG0CW01.KG0CWMSG = "STORE OR DEPARTMENT INACTIVE - CAN NOT ADD REP";
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end /* 12/18/95 - added kclar1*/
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == " "
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "D"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "H"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "R"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "N"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "X")
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(387); /* valid selections a,c,d,h,n,r*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "D"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "H")
      if (KG0CW04.KG0CWRST[KG0CWCNT] == "A") /* record is an add*/
        converseLib.validationFailed(388); /* cannot maintenance added rep*/
        KG0CW01.KG0CWERR = "Y";
        KG0CM100.KG0CMSEL[KG0CWCNT] = KG0CW04.KG0CWUPD[KG0CWCNT];
        set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
        return;
      end
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "D"
     || KG0CM100.KG0CMSEL[KG0CWCNT] == "H")
      if (KG0CW04.KG0CWRRE[KG0CWCNT] == "Y") /* updated by replace*/
        converseLib.validationFailed(409); /* cannot maintenance replace*/
        KG0CW01.KG0CWERR = "Y";
        KG0CM100.KG0CMSEL[KG0CWCNT] = KG0CW04.KG0CWUPD[KG0CWCNT];
        set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
        return;
      end
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     && COMMAREA.CAALVL[1] != "Y") /* invalid security*/
      converseLib.validationFailed(134);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     && KG0CW01.KG0CWACF == "N") /* not selecting active reps*/
      converseLib.validationFailed(382);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "A"
     && KG0CM100.YSBCD[KG0CWCNT] > " ") /* line not blank for add*/
      converseLib.validationFailed(389); /* must be on a blank line*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     && COMMAREA.CACLVL[1] != "Y") /* invalid security*/
      converseLib.validationFailed(133);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     && KG0CW01.KG0CWACF == "N") /* not selecting active reps*/
      converseLib.validationFailed(382);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     && KG0CM100.YSBCD[KG0CWCNT] == " ") /* line blank for change*/
      converseLib.validationFailed(390); /* cannot use this function on blank*/
                                   /* lines*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "C"
     && KG0CW04.KG0CWTDB[KG0CWCNT] != 999999)
      converseLib.validationFailed(391); /* cannot use this function on inactive*/
                                   /* reps*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "D"
     && COMMAREA.CACLVL[4] != "Y") /* invalid security*/
      converseLib.validationFailed(99);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "D"
     && KG0CM100.YSBCD[KG0CWCNT] == " ") /* line blank for delete*/
      converseLib.validationFailed(390); /* cannot use this function on blank*/
                                   /* lines*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "H"
     && COMMAREA.CACLVL[4] != "Y") /* invalid security*/
      converseLib.validationFailed(397);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "H"
     && KG0CM100.YSBCD[KG0CWCNT] == " ") /* line blank for change*/
      converseLib.validationFailed(390); /* cannot use this function on blank*/
                                   /* lines*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "H"
     && KG0CW04.KG0CWTDA[KG0CWCNT] == 999999) /* rep is active*/
      converseLib.validationFailed(392); /* cannot change history on active reps*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "R"
     && COMMAREA.CACLVL[1] != "Y") /* invalid security*/
      converseLib.validationFailed(393); /* security does not allow replace*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "R"
     && KG0CW01.KG0CWACF == "N") /* not selecting active reps*/
      converseLib.validationFailed(382);
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "R"
     && KG0CM100.YSBCD[KG0CWCNT] == " ") /* line blank for change*/
      converseLib.validationFailed(390); /* cannot use this function on blank*/
                                   /* lines*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "R"
     && KG0CW04.KG0CWTDA[KG0CWCNT] < 999999)
      converseLib.validationFailed(161); /* inactive credit resp rep code*/
      KG0CW01.KG0CWERR = "Y";
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      return;
    end
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
  end
  ;
   /* ************************************************/
   /* * Edit changes to select values               **/
   /* ************************************************/
  KG0CW01.KG0CWCNT = 1; /* counter for screen*/
  KG0CW01.KG0CWFLG = "N"; /* select value changed flag*/
  ;
  while (KG0CW01.KG0CWCNT < 11)
    if (KG0CM100.KG0CMSEL[KG0CWCNT] == "N") /* reset map select,temp storage*/
      KG0CM100.KG0CMSEL[KG0CWCNT] = " "; /* map sel field*/
      KG0CW04.KG0CWUPD[KG0CWCNT] = " ";
      if (KG0CW04.KG0CWRST[KG0CWCNT] == "A") /* this record was an add*/
        KG0CW04.YSBABRV[KG0CWCNT] = " ";
        KG0CW04.KG0CWNAM[KG0CWCNT] = " ";
      end
      KG0CW04.KG0CWRST[KG0CWCNT] = " "; /* record status*/
      KG0CW04.KG0CWAFT[KG0CWCNT] = KG0CW04.KG0CWBFR[KG0CWCNT];
      KG0CW01.KG0CWFLG = "Y"; /* selection changed*/
    else
      if (KG0CM100.KG0CMSEL[KG0CWCNT] == " " /* was blank*/
       || KG0CM100.KG0CMSEL[KG0CWCNT] == "X") /* user entered an X*/
        KG0CM100.KG0CMSEL[KG0CWCNT] = KG0CW04.KG0CWUPD[KG0CWCNT];
      else
        if (KG0CM100.KG0CMSEL[KG0CWCNT] == KG0CW04.KG0CWUPD[KG0CWCNT])
           /* next sentence*/
        else
          KG0CW04.KG0CWUPD[KG0CWCNT] = KG0CM100.KG0CMSEL[KG0CWCNT];
          KG0CW01.KG0CWFLG = "Y"; /* select value changed*/
          if (KG0CM100.KG0CMSEL[KG0CWCNT] == "D")
            KG0CW04.KG0CWRST[KG0CWCNT] = KG0CM100.KG0CMSEL[KG0CWCNT];
          end
        end
      end
    end
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
  end
  ;
  if (KG0CW01.KG0CWFLG == "Y") /* changes were made to select values*/
    KG0C410(); /* rewrite rep temp storage*/
  end
  ;
   /* ********************************************/
   /* * Read through temp storage to see if any **/
   /* *   updates are pending.                  **/
   /* * Look for a blank line.                  **/
   /* ********************************************/
  KG0CWREX = KG0CW01.KG0CWRIX; /* save temp storage position*/
  KG0CW01.KG0CWPND = "N"; /* updates pending flag*/
  KG0CW01.KG0CWBLF = "N"; /* blank line found flag*/
  KG0CW01.KG0CWRIX = 1; /* key for temp storage read*/
  while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
    KG0C195(); /* read rep temp storage*/
    KG0CW01.KG0CWCNT = 1;
    while (KG0CW01.KG0CWCNT < 11)
      if (KG0CW04.KG0CWYSA[KG0CWCNT] == " ")
        KG0CW01.KG0CWBLF = "Y"; /* blank line found*/
      end
      if (KG0CW04.KG0CWUPD[KG0CWCNT] > " ")
        if (KG0CW04.KG0CWUPD[KG0CWCNT] == "A")
          KG0CW01.KG0CWADR = "Y"; /* invokes add rep function*/
        end
        KG0CW01.KG0CWPND = "Y"; /* updates are pending*/
        if (KG0CW04.KG0CWUPD[KG0CWCNT] == "X")
          KG0CW01.KG0CWCHG = "Y"; /* changes were made*/
        end
      end
      KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
    end
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
  end
  ;
   /* ********************************************/
   /* * create new blank temp storage record    **/
   /* * when there are no blank lines in temp   **/
   /* * storage.                                **/
   /* ********************************************/
  if (KG0CW01.KG0CWBLF == "N") /* blank line not found*/
    KG0CW01.KG0CWTPG = KG0CW01.KG0CWTPG + 1; /* increment # of pages*/
    KG0CM100.KG0CMLST = KG0CW01.KG0CWTPG;
    set KG0CW04 empty;
    KG0CW01.KG0CWRCT = KG0CW01.KG0CWRRT;
    KG0C170(); /* write rep temp storage rec*/
    KG0CW01.KG0CWRRT = KG0CW01.KG0CWRCT; /* increment temp strg #*/
  end
  ;
   /* ********************************************/
   /* * restore temp storage and screen         **/
   /* ********************************************/
  KG0CW01.KG0CWRIX = KG0CW01.KG0CWREX;
  KG0C190(); /* move reps to screen*/
end // end KG0C400

// REWRITE REPS TO TEMP STORAGE
Function KG0C410()
   /* *******************************************/
   /* * KG0C410 - REWRITE REPS TO TEMP STORAGE **/
   /* *******************************************/
  ;
  set KG0CW02 empty;
  KG0CW02.KG0CW2RC = 0; /* return code*/
  KG0CW02.KG0CW2FC = "U";
  KG0CW02.KG0CW2AP = "KW04";
  KG0CW02.KG0CW2CT = KG0CW01.KG0CWRIX;
  KG0CW04.KG0CW4LG = 1750;
  call "TA0050" (KG0CW04, KG0CW02) {isNoRefresh = yes, isExternal = yes};
  if (KG0CW02.KG0CW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0CW01.KG0CWREN = "Y";
    KG0CW01.KG0CWERR = "Y";
    converseLib.validationFailed(228);
  end
end // end KG0C410

// PROCESS SELECTION ENTRIES
Function KG0C500()
   /* **********************************************************/
   /* * KG0C500 - PROCESS SELECTION ENTRIES                   **/
   /* *                                                       **/
   /* * This process will read through rep temp storage, each **/
   /* *   each time a select field has a value of 'a', 'c',   **/
   /* *   'r',or 'h', the update screen will be displayed to  **/
   /* *   allow users to enter the change data.               **/
   /* * At the end of this routine, temp storage and the      **/
   /* *   screen will be set to what they were before the     **/
   /* *   update screen was invoked.                          **/
   /* *                                                       **/
   /* **********************************************************/
  ;
   /* **********************************************************/
   /* * Move screen heading information                       **/
   /* **********************************************************/
  ;
  KG0CM200.KUCCOID = KG0CM100.KUCCOID;
  KG0CM200.KUCCONM = KG0CM100.KUCCONM;
  KG0CM200.KUMSTRID = KG0CM100.KUMSTRID;
  KG0CM200.KUMSTRNM = KG0CM100.KUMSTRNM;
  KG0CM200.XNXCD = KG0CM100.XNXCD;
  KG0CM200.KUJSLFNM = KG0CM100.KUJSLFNM;
  KG0CM200.XXXSTAT = KG0CM100.XXXSTAT;
  KG0CM200.KG0CM-DEPT-STAT = KG0CM100.KG0CM-DEPT-STAT;
  KG0CM200.XAUCD = KG0CM100.XAUCD;
  KG0CM200.XAUDESC = KG0CM100.XAUDESC;
  KG0CM200.XCCCD = KG0CM100.XCCCD;
  ;
  if (KG0CM200.XXXSTAT == "I") /* IF INACTIVE CODE*/
    set KG0CM200.XXXSTAT protect, bold; /* HIGHLIGHT*/
  else
    set KG0CM200.XXXSTAT initialAttributes;
  end
  if (KG0CM200.KG0CM-DEPT-STAT == "I") /* IF INACTIVE CODE*/
    set KG0CM200.KG0CM-DEPT-STAT protect, bold; /* HIGHLIGHT*/
  else
    set KG0CM200.KG0CM-DEPT-STAT initialAttributes;
  end
  set KG0CM200.YSBCD cursor; /* default cursor to resp code*/
  ;
   /* **********************************************/
   /* * Read thru temp storage and invoke the     **/
   /* * update screen when select values found.   **/
   /* **********************************************/
  ;
  KG0CW01.KG0CWREX = KG0CW01.KG0CWRIX;
  KG0CW01.KG0CWRIX = 1;
  while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT
   && KG0CW01.KG0CWERR == "N")
    KG0C195(); /* read rep temp storage*/
    KG0CW01.KG0CWCNT = 1;
    while (KG0CW01.KG0CWCNT < 11
     && KG0CW01.KG0CWERR == "N")
      if (KG0CW01.KG0CWRIX == 1
       && KG0CW01.KG0CWCNT == 1)
        KG0CW01.KG0CWIND = KG0CW04.KG0CWPYA[KG0CWCNT];
        KG0CW01.KG0CWCDT = KG0CW04.KG0CWPEA[KG0CWCNT];
      end
      if (KG0CW04.KG0CWUPD[KG0CWCNT] == "D") /* delete rep*/
        KG0CW01.KG0CWCHG = "Y"; /* changes were made*/
      else
        if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C") /* change rep*/
          KG0C510(); /* format update screen*/
        else
          if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R") /* replace rep*/
            KG0CW01.KG0CWWWW = KG0CW01.KG0CWCNT;
            KG0CW01.KG0CWXXX = KG0CW01.KG0CWRIX;
            KG0C510(); /* format update screen*/
          else
            if (KG0CW04.KG0CWUPD[KG0CWCNT] == "H") /* history change*/
              KG0C510(); /* format update screen*/
            end
          end
        end
      end
      KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
    end
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
  end
  ;
  if (KG0CW01.KG0CWADR == "Y") /* adding reps*/
    KG0CW01.KG0CWCNT = 10;
    KG0C510(); /* format update screen*/
  end
   /* **********************************************/
   /* * Reset temp storage and screen             **/
   /* **********************************************/
  KG0CW01.KG0CWRIX = KG0CW01.KG0CWREX;
  KG0C190(); /* move reps to screen*/
end // end KG0C500

// FORMAT UPDATE SCREEN
Function KG0C510()
   /* ***********************************************************/
   /* * KG0C510 - FORMAT UPDATE SCREEN                         **/
   /* *                                                        **/
   /* * This process will move fields from the after image     **/
   /* *   fields in rep temp storage to the update screen and  **/
   /* *   protect entry fields depending on the function being **/
   /* *   performed and the users security.                    **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
   /* **********************************************************/
   /* * Set default values for entry flelds from temp storage **/
   /* **********************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R" /* replace rep function*/
   || KG0CW04.KG0CWUPD[KG0CWCNT] == "C" /* change rep function*/
   || KG0CW04.KG0CWUPD[KG0CWCNT] == "H") /* change rep history*/
    if (KG0CW04.KG0CWTDA[KG0CWCNT] == 999999) /* rep termination date*/
      KG0CW04.KG0CWTDA[KG0CWCNT] = 0;
    end
    KG0CM200.YSBABRV = KG0CW04.YSBABRV[KG0CWCNT];
    KG0CM200.KG0CMNAM = KG0CW04.KG0CWNAM[KG0CWCNT];
    KG0CM200.YSBCD = KG0CW04.KG0CWYSA[KG0CWCNT];
    KG0CM200.SM4REPID = KG0CW04.KG0CWRPA[KG0CWCNT];
    KG0CM200.SM1AGYID = KG0CW04.KG0CWAGA[KG0CWCNT];
    KG0CM200.KG0CMEDT = KG0CW04.KG0CWEDA[KG0CWCNT];
    KG0CM200.KG0CMTDT = KG0CW04.KG0CWTDA[KG0CWCNT];
    KG0CM200.KG0CWIND = KG0CW04.KG0CWPYA[KG0CWCNT];
    KG0CM200.KG0CMCDT = KG0CW04.KG0CWPEA[KG0CWCNT];
  end
  ;
  if (COMMAREA.CACLVL[3] == "Y"
   || COMMAREA.CACLVL[4] == "Y")
    set KG0CM200.KG0CWIND initialAttributes; /* unprotect pay indicator*/
    set KG0CM200.KG0CMCDT initialAttributes;
                                   /* unprotect pay effective date*/
  else
    set KG0CM200.KG0CWIND skip; /* protect pay indicator*/
    set KG0CM200.KG0CMCDT skip; /* protect pay effective date*/
  end
   /* **********************************************************/
   /* * Set attributes and values depending on function       **/
   /* **********************************************************/
   /* *  replace rep                                          **/
   /* **********************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R") /* replace rep function*/
    KG0CM200.KG0CMFUN = "REPLACE REP   ";
    set KG0CM200.YSBCD protect; /* protect resp code*/
    set KG0CM200.SM4REPID initialAttributes; /* unprotect rep*/
    set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
    set KG0CM200.KG0CMTDT protect; /* protect termination date*/
    KG0CM200.SM4REPID = 0; /* blank rep field out*/
    if (KUYREC.SM1AGYID > "    ")
      set KG0CM200.SM1AGYID protect; /* protect agency*/
    else
      set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency*/
      KG0CM200.SM1AGYID = " "; /* blank agency field out*/
    end
    KG0CM200.KG0CMNAM = " "; /* blank rep name out*/
    KG0CW01.KG0CWYY3 = XX0XW01.XX0XWZYY; /* format the current*/
    KG0CW01.KG0CWMM3 = XX0XW01.XX0XWZMM; /* date and set the*/
    KG0CW01.KG0CWDD3 = XX0XW01.XX0XWZDD; /* effective date =*/
    KG0CM200.KG0CMEDT = KG0CW01.KG0CWDAT; /* to the current date*/
    set KG0CM200.SM4REPID cursor; /* put cursor on rep field*/
    KG0C520(); /* send screen*/
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWXXX;
    KG0C190(); /* reset temp storage*/
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWWWW;
  else
    /* **********************************************************/
    /* *  CHANGE REP                                           **/
    /* **********************************************************/
    if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C") /* change rep*/
      KG0CM200.KG0CMFUN = "CHANGE        ";
      set KG0CM200.YSBCD protect; /* protect resp code*/
      set KG0CM200.SM4REPID protect; /* protect rep id*/
      set KG0CM200.SM1AGYID protect; /* protect agency id*/
      if (COMMAREA.CACLVL[1] == "Y" /* FOR LEVEL ONE USER*/
       && COMMAREA.CACLVL[2] == "N" 
       && COMMAREA.CACLVL[3] == "N" 
       && COMMAREA.CACLVL[4] == "N")
        set KG0CM200.KG0CMEDT protect; /* protect effective date*/
        set KG0CM200.KG0CMTDT initialAttributes; /* unprotect termination date*/
        set KG0CM200.KG0CMTDT cursor; /* put cursor on term date*/
      else
        set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
        set KG0CM200.KG0CMTDT initialAttributes; /* unprotect term date*/
        set KG0CM200.KG0CMEDT cursor;
                                    /*     /* put cursor on effective date*/
      end
      KG0C520(); /* send screen*/
    else
      /* **********************************************************/
      /* *  change history                                       **/
      /* **********************************************************/
      if (KG0CW04.KG0CWUPD[KG0CWCNT] == "H") /* history change*/
        KG0CM200.KG0CMFUN = "CHANGE HISTORY";
        set KG0CM200.YSBCD protect; /* unprotect resp code*/
        set KG0CM200.SM4REPID initialAttributes; /* unprotect rep id*/
        set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency id*/
        set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
        set KG0CM200.KG0CMTDT initialAttributes; /* unprotect termination date*/
        set KG0CM200.SM4REPID cursor; /* put cursor on rep field*/
        KG0C520(); /* send screen*/
      else
        /* **********************************************************/
        /* *  add rep                                              **/
        /* **********************************************************/
        if (KG0CW01.KG0CWADR == "Y") /* adding reps*/
          while (KG0CW01.KG0CWERR == "N") /* no errors*/
            KG0CM200.KG0CMFUN = "ADD REP       ";
            set KG0CM200.YSBCD initialAttributes; /* unprotect resp code*/
            set KG0CM200.SM4REPID initialAttributes; /* unprotect rep*/
            set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency*/
            set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
            set KG0CM200.KG0CMTDT protect; /* protect termination date*/
            KG0CM200.YSBCD = " "; /* blank resp code out*/
            KG0CM200.SM4REPID = 0; /* blank rep field out*/
            KG0CM200.SM1AGYID = " "; /* blank agency field out*/
            KG0CM200.KG0CMNAM = " "; /* blank rep name out*/
            KG0CW01.KG0CWYY3 = XX0XW01.XX0XWZYY; /* format current*/
            KG0CW01.KG0CWMM3 = XX0XW01.XX0XWZMM;
                                   /* date and set the*/
            KG0CW01.KG0CWDD3 = XX0XW01.XX0XWZDD;
                                   /* effective date =*/
            KG0CM200.KG0CMEDT = KG0CW01.KG0CWDAT; /* current date*/
            KG0CM200.KG0CWIND = KG0CW01.KG0CWIND;
            if (KG0CW01.KG0CWNEW == "Y") /* coming from ka0d*/
              KG0CM200.KG0CWIND = "Y";
            end
            KG0CM200.KG0CMCDT = 0; /* blank pay effective date*/
            KG0CM200.KG0CMCDT = KG0CW01.KG0CWCDT;
            KG0CM200.KG0CMTDT = 0; /* blank termination date*/
            KG0CM200.YSBABRV = " "; /* blank resp abreviation*/
            set KG0CM200.YSBCD cursor; /* put cursor on resp code*/
            KG0C520(); /* send screen*/
          end
        end
      end
    end
  end
end // end KG0C510

// CONVERSE REP UPDATE SCREEN
Function KG0C520()
   /* **********************************************************/
   /* * KG0C520 - CONVERSE REP UPDATE SCREEN                  **/
   /* **********************************************************/
  ;
  converse KG0CM200 ;
  KG0C530(); /* edit special keys/fast paths*/
  ;
  if (converseVar.eventKey is enter)
    KG0C540();
  end
  ;
  if (KG0CW01.KG0CWERR == "Y")
     /* next sentence*/
  else
    if (COMMAREA.CACLVL[3] == "Y"
     || COMMAREA.CACLVL[4] == "Y")
      set KG0CM200.KG0CWIND initialAttributes; /* unprotect pay indicator*/
      set KG0CM200.KG0CMCDT initialAttributes; /* unprotect pay effective*/
    else
      set KG0CM200.KG0CWIND skip; /* protect pay indicator*/
      set KG0CM200.KG0CMCDT skip; /* protect pay effective*/
    end
    /* **********************************************************/
    /* *  reset fields for change history                      **/
    /* **********************************************************/
    if (KG0CW04.KG0CWUPD[KG0CWCNT] == "H") /* changing history*/
      set KG0CM200.YSBCD protect; /* protect resp code*/
      set KG0CM200.SM4REPID initialAttributes; /* unprotect rep id*/
      set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency id*/
      set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
      set KG0CM200.KG0CMTDT initialAttributes; /* unprotect termination date*/
    else
      /* **********************************************************/
      /* *  reset fields for replace rep                         **/
      /* **********************************************************/
      if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R") /* replacing rep*/
        set KG0CM200.YSBCD protect; /* protect resp code*/
        set KG0CM200.SM4REPID initialAttributes; /* unprotect rep*/
        set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency*/
        set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
        set KG0CM200.KG0CMTDT protect; /* protect termination date*/
      else
        /* **********************************************************/
        /* * reset fields for change rep                           **/
        /* **********************************************************/
        if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C") /* changing rep*/
          set KG0CM200.YSBCD protect; /* protect resp code*/
          set KG0CM200.SM4REPID protect; /* protect rep id*/
          set KG0CM200.SM1AGYID protect; /* protect agency id*/
          set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
          set KG0CM200.KG0CMTDT initialAttributes; /* unprotect term date*/
        else
          /* **********************************************************/
          /* *  reset fields for add rep                             **/
          /* **********************************************************/
          if (KG0CW01.KG0CWADR == "Y") /* adding reps*/
            set KG0CM200.YSBCD initialAttributes; /* unprotect resp code*/
            set KG0CM200.SM4REPID initialAttributes; /* unprotect rep*/
            set KG0CM200.SM1AGYID initialAttributes; /* unprotect agency*/
            set KG0CM200.KG0CMEDT initialAttributes; /* unprotect effective date*/
            set KG0CM200.KG0CMTDT protect; /* protect termination date*/
          end
        end
      end
    end
  end
  ;
  if (KG0CW01.KG0CWEFL == "Y") /* if edit error*/
    KG0CW01.KG0CWEFL = "N";
    KG0C520();
  end
end // end KG0C520

// EDIT KEYS FOR UPDATE SCREEN
Function KG0C530()
   /* ******************************************/
   /* * KG0C530 - EDIT KEYS FOR UPDATE SCREEN **/
   /* ******************************************/
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    KG0C510();
    return;
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KG0CM200.CATOAP > " ") /* fast path*/
      if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
        converseLib.validationFailed(367);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.CATOAP cursor, bold;
        return;
      end
      if (KG0CW01.KG0CWNEW == "Y") /* new store, no reps added*/
        converseLib.validationFailed(368);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.CATOAP cursor, bold;
        return;
      end
      if (KG0CW01.KUECOMNT != KG0CM100.KUECOMNT)
        KG0CW01.KG0CWEFL = "Y";
        return;
      end
      KG0C130(); /* purge store temp storage*/
      KG0C161(); /* purge rep temp storage*/
      COMMAREA.CATOAP = KG0CM200.CATOAP;
      if (KG0CM200.CAITEM == " ")
        KG0CW01.KG0CWCNO = KG0CM200.KUCCOID;
        KG0CW01.KG0CWSTR = KG0CM200.KUMSTRID;
        COMMAREA.CAUSERA = KG0CW01.KG0CWUSR;
      else
        COMMAREA.CAITEM = KG0CM200.CAITEM;
      end
      COMMAREA.CAFROMAP = "KG0C";
      XSEXIT();
      KG0CM200.VAGen_EZEMSG = COMMAREA.CAMSG;
      KG0CW01.KG0CWEFL = "Y";
      set KG0CM200.CATOAP cursor, bold;
    end
    if (KG0CM200.CATOAP > " ")
      KG0CW01.KG0CWEFL = "Y";
      converseLib.validationFailed(90); /* can not fast path and use*/
      set KG0CM200.CATOAP cursor, bold;
      return;
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to inquiry screen*/
    KG0CW01.KG0CWERR = "Y";
    if (KG0CW01.KG0CWADR == "Y") /* adding reps*/
      KG0CW01.KG0CWADR = "N"; /* out of add mode*/
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf9 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf9)
    return;
  end
  ;
   /* **************************************/
   /* edit pf11 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf11)
    KG0C665(); /* window ysb table*/
    return;
  end
  ;
   /* **************************************/
   /* invalid pf key*/
   /* **************************************/
  ;
  if (KG0CW01.KG0CWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0CW01.KG0CWEFL = "Y";
  end
end // end KG0C530

// EDIT DATA ENTRIES
Function KG0C540()
   /* *************************************************************/
   /* * KG0C540 - EDIT DATA ENTRIES                              **/
   /* *                                                          **/
   /* * This process will edit data entered on the update        **/
   /* *   screen.                                                **/
   /* * If an error is present, the process will highlight the   **/
   /* *   field in error, set the cursor on it, load the         **/
   /* *   appropriate error message, then exit with the error    **/
   /* *   flag set to 'Y' so that the screen will be redisplayed **/
   /* *   showing the field in error.                            **/
   /* * After all errors on the update screen have been          **/
   /* *   corrected, rep temp storage is rewritten and/or added  **/
   /* *   to depending on the function being performed.          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
   /* *************************************************************/
   /* * dont allow change to effective date and term date        **/
   /* * simultaneously in the same edit when doing a change.     **/
   /* *************************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C") /* rep change*/
    if (KG0CM200.KG0CMEDT != KG0CW04.KG0CWEDB[KG0CWCNT]
     && KG0CM200.KG0CMTDT != 0)
      converseLib.validationFailed(399);
      KG0CW01.KG0CWEFL = "Y";
      set KG0CM200.KG0CMTDT cursor, bold;
      return;
    end
  end
  ;
   /* *************************************************************/
   /* * edit the sales resp code                                 **/
   /* *************************************************************/
  if (KG0CM100.KG0CMYSB > 0
   && KG0CM200.YSBCD != KG0CM100.KG0CMYSB)
    converseLib.validationFailed(380);
    KG0CW01.KG0CWEFL = "Y";
    set KG0CM200.YSBCD cursor, bold;
    return;
  end
  ;
  if (KG0CM200.YSBCD in YSBTBL.YSBCD
   && KG0CM200.YSBCD == YSBTBL.YSBCD[sysVar.arrayIndex]
   && YSBTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KG0CM200.YSBABRV = YSBTBL.YSBABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(356);
    KG0CW01.KG0CWEFL = "Y";
    set KG0CM200.YSBCD cursor, bold;
    return;
  end
  ;
   /* *************************************************************/
   /* * edit the rep and agency combination (not for changes)    **/
   /* *************************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C") /* rep change*/
     /* next sentence*/
  else
    KG0C550(); /* validate rep/agency combo*/
    if (KG0CW01.KG0CWEFL == "Y") /* rep/agency was invalid*/
      return;
    end
  end
  ;
   /* *************************************************************/
   /* * edit the effective date                                  **/
   /* *************************************************************/
  ;
  KG0CW01.KG0CWDAT = KG0CM200.KG0CMEDT;
  ;
  if (KG0CW01.KG0CWMM3 > 12
   || KG0CW01.KG0CWMM3 < 1)
    converseLib.validationFailed(349);
    KG0CW01.KG0CWEFL = "Y";
    set KG0CM200.KG0CMEDT cursor, bold;
    return;
  end
  ;
  if (KG0CW01.KG0CWDD3 > 31
   || KG0CW01.KG0CWDD3 < 1)
    converseLib.validationFailed(350);
    KG0CW01.KG0CWEFL = "Y";
    set KG0CM200.KG0CMEDT cursor, bold;
    return;
  end
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CWYY3 < 13;*/
  /* MOVE 19 TO EZEMNO;*/
  /* MOVE 'Y' TO KG0CW01.KG0CWEFL;*/
  /* SET KG0CM200.KG0CMEDT CURSOR,BRIGHT;*/
  /* EZERTN;*/
  /* END;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  if (KG0CM200.KG0CMEDT == KG0CW04.KG0CWEDB[KG0CWCNT]
   && KG0CW04.KG0CWUPD[KG0CWCNT] != "R") /* rep replace*/
    KG0CW01.KG0CWDAT = KG0CM200.KG0CMEDT;
  else
    /* MOVE KG0CM200.KG0CMEDT TO KG0CW01.KG0CWDAT;*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
    ;
    TA2REC.TA2GRGAN = KG0CM200.KG0CMEDT;
    /* MOVE KG0CW01.KG0CWDAT TO TA2REC.TA2GRGA;*/
    KG0C710(); /* verify date*/
    ;
    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(19);
      KG0CW01.KG0CWEFL = "Y";
      set KG0CM200.KG0CMEDT cursor, bold;
      return;
    end
    ;
    ;
     /* format effective date in yymmdd for comparison*/
    ;
    KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
    KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
    KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CMEDT > 0) /* insure that YYMMDD value is greater*/
                                   /* than zero*/
      if (KG0CW01.KG0CWEYY > 60)
        KG0CW01.KG0CWECC = 19;
      else
        KG0CW01.KG0CWECC = 20;
      end
    else
      KG0CW01.KG0CWECC = 0;
    end
    ;
     /* reformat effective date to ccyymmdd for comparison*/
    ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
    KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
    if (COMMAREA.CACLVL[2] != "Y")
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMEDT < XX0XW01.XX0XWZDT;/* EFF DATE < CURRENT DATE*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMEDT-CCYYMMDD < XX0XW01.XX0XWDAT) /* EFF DT < CURR DT*/
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
        ;
        converseLib.validationFailed(351);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMEDT cursor, bold;
        return;
      end
    end
    ;
    if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R") /* rep replace*/
      KG0CW01.KG0CWDDT = KG0CW04.KG0CWEDB[KG0CWCNT];
      KG0CW01.KG0CMDYY = KG0CW01.KG0CWDYY;
      KG0CW01.KG0CMDMM = KG0CW01.KG0CWDMM;
      KG0CW01.KG0CMDDD = KG0CW01.KG0CWDDD;
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMDTE > 0) /* insure that YYMMDD value > than zero*/
        if (KG0CW01.KG0CMDYY > 60)
          KG0CW01.KG0CWRCC = 19;
        else
          KG0CW01.KG0CWRCC = 20;
        end
      else
        KG0CW01.KG0CWRCC = 0;
      end
      ;
       /* reformat repl date to ccyymmdd for comparison*/
      ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
      KG0CW01.KG0CWRDT-YYMMDD = KG0CW01.KG0CMDTE;
      KG0CW01.KG0CWAMM = KG0CW01.KG0CWEMM;
      KG0CW01.KG0CWADY = KG0CW01.KG0CWEDD;
      KG0CW01.KG0CWAYY = KG0CW01.KG0CWEYY;
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE KG0CW01.KG0CWADT TO TA2REC.TA2GRGA;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      set TA2REC empty;
      TA2REC.TA2GRGAN = KG0CW01.KG0CWADT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
      ;
      KG0C590(); /* get effective date minus 1*/
      ;
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(19);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMEDT cursor, bold;
        return;
      end
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE KG0CW01.KG0CWNDT TO KG0CW01.KG0CWADT;*/
  /* MOVE KG0CW01.KG0CWAMM TO KG0CW01.KG0CWEMM;*/
  /* MOVE KG0CW01.KG0CWADY TO KG0CW01.KG0CWEDD;*/
  /* MOVE KG0CW01.KG0CWAYY TO KG0CW01.KG0CWEYY;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
      /* the replacing rep's effective date must be at least one day*/
      /* past the effective date of the rep being replaced*/
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMDTE > KG0CW01.KG0CMEDT;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMRDT-CCYYMMDD > KG0CW01.KG0CWNDT)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
        ;
        converseLib.validationFailed(396); /* effective date must be one day past*/
                                   /* replaced*/
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMEDT cursor, bold;
        return;
      end
    end
    if (KG0CM200.KG0CWIND == "Y") /* pay indicator is yes*/
      KG0CW01.KG0CWDDT = KG0CM200.KG0CMCDT;
      KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
      KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
      KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMEDT > 0) /* insure that YYMMDD value > than zero*/
        if (KG0CW01.KG0CWEYY > 60)
          KG0CW01.KG0CWECC = 19;
        else
          KG0CW01.KG0CWECC = 20;
        end
      else
        KG0CW01.KG0CWECC = 0;
      end
      ;
       /* reformat effective date to ccyymmdd for comparison*/
      ;
      KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
      ;
      KG0CW01.KG0CWTMM = KG0CW01.KG0CWDMM;
      KG0CW01.KG0CWTDD = KG0CW01.KG0CWDDD;
      KG0CW01.KG0CWTYY = KG0CW01.KG0CWDYY;
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMTDT > 0) /* insure that YYMMDD value > than zero*/
        if (KG0CW01.KG0CWTYY > 60)
          KG0CW01.KG0CWTCC = 19;
        else
          KG0CW01.KG0CWTCC = 20;
        end
      else
        KG0CW01.KG0CWTCC = 0;
      end
      ;
       /* reformat pay date to ccyymmdd for comparison*/
      ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
      KG0CW01.KG0CWTDT-YYMMDD = KG0CW01.KG0CMTDT;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMTDT > KG0CW01.KG0CMEDT;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMTDT-CCYYMMDD > KG0CW01.KG0CMEDT-CCYYMMDD)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
        ;
        converseLib.validationFailed(400);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMEDT cursor, bold;
        return;
      end
    end
  end
   /* *************************************************************/
   /* * edit the termination date for changes only               **/
   /* *************************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R"
   || KG0CW01.KG0CWADR == "Y") /* adding reps*/
     /* next sentence*/
  else
    KG0CW01.KG0CWDDT = KG0CM200.KG0CMTDT;
    ;
    if (KG0CM200.KG0CMTDT == 0 /* date not entered*/
     && KG0CW04.KG0CWTDB[KG0CWCNT] == 999999)
       /* next sentence*/
    else
      if (KG0CM200.KG0CMTDT == 0) /* date not entered*/
        if (KG0CW04.KG0CWUPD[KG0CWCNT] == "H") /* and history*/
          KG0CW04.KG0CWTDA[KG0CWCNT] = 999999;
        else
          converseLib.validationFailed(253);
          KG0CW01.KG0CWEFL = "Y";
          set KG0CM200.KG0CMTDT cursor, bold;
          return;
        end
      end
    end
    ;
    if (KG0CM200.KG0CMTDT == 0) /* date not entered*/
       /* next sentence*/
    else
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE KG0CW01.KG0CWDDT TO TA2REC.TA2GRGA;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      set TA2REC empty;
      TA2REC.TA2GRGAN = KG0CW01.KG0CWDDT;
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
      ;
      KG0C710(); /* verify date*/
      ;
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(19);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMTDT cursor, bold;
        return;
      end
      ;
      if (KG0CW01.KG0CWDMM > 12
       || KG0CW01.KG0CWDMM < 1)
        converseLib.validationFailed(358);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMTDT cursor, bold;
        return;
      end
      ;
      if (KG0CW01.KG0CWDDD > 31
       || KG0CW01.KG0CWDD3 < 1)
        converseLib.validationFailed(359);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMTDT cursor, bold;
        return;
      end
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CWDYY < 13;*/
  /* MOVE 19 TO EZEMNO;*/
  /* MOVE 'Y' TO KG0CW01.KG0CWEFL;*/
  /* SET KG0CM200.KG0CMTDT CURSOR,BRIGHT;*/
  /* EZERTN;*/
  /* END;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
      ;
       /* move effective date and term date for comparison*/
      ;
      KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
      KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
      KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMEDT > 0) /* insure that YYMMDD value > than zero*/
        if (KG0CW01.KG0CWEYY > 60)
          KG0CW01.KG0CWECC = 19;
        else
          KG0CW01.KG0CWECC = 20;
        end
      else
        KG0CW01.KG0CWECC = 0;
      end
      ;
       /* reformat effective date to ccyymmdd for comparison*/
      ;
      KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
      ;
      KG0CW01.KG0CWTMM = KG0CW01.KG0CWDMM;
      KG0CW01.KG0CWTDD = KG0CW01.KG0CWDDD;
      KG0CW01.KG0CWTYY = KG0CW01.KG0CWDYY;
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMTDT > 0) /* insure that YYMMDD value > than zero*/
        if (KG0CW01.KG0CWTYY > 60)
          KG0CW01.KG0CWTCC = 19;
        else
          KG0CW01.KG0CWTCC = 20;
        end
      else
        KG0CW01.KG0CWTCC = 0;
      end
      ;
       /* reformat term date to ccyymmdd for comparison*/
      ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
      KG0CW01.KG0CWTDT-YYMMDD = KG0CW01.KG0CMTDT;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMTDT >= KG0CW01.KG0CMEDT;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
      ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (KG0CW01.KG0CMTDT-CCYYMMDD >= KG0CW01.KG0CMEDT-CCYYMMDD)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
        ;
         /* next sentence*/
      else
        converseLib.validationFailed(372);
        KG0CW01.KG0CWEFL = "Y";
        set KG0CM200.KG0CMTDT cursor, bold;
        return;
      end
    end
  end
  ;
   /* *************************************************************/
   /* * edit the pay indicator                                   **/
   /* *************************************************************/
  if (COMMAREA.CACLVL[3] == "Y"
   || COMMAREA.CACLVL[4] == "Y")
    if (KG0CM200.KG0CWIND == "Y"
     || KG0CM200.KG0CWIND == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KG0CW01.KG0CWEFL = "Y";
      set KG0CM200.KG0CWIND cursor, bold;
      return;
    end
  end
  ;
   /* *************************************************************/
   /* * edit the pay effective date                              **/
   /* * allow pay effective date of 0 if coming from ka0s        **/
   /* * dont edit the date unless it was changed                 **/
   /* *************************************************************/
  if (KG0CM200.KG0CMCDT == KG0CW04.KG0CWPEB[KG0CWCNT])
    /* next sentence*/
  else
    if (KG0CW01.KG0CWNEW == "Y" /* coming from ka0d*/
     && KG0CM200.KG0CMCDT == 0) /* date not entered*/
       /* NEXT SENTENCE*/
    else
      if (COMMAREA.CACLVL[3] == "Y"
       || COMMAREA.CACLVL[4] == "Y")
        KG0CW01.KG0CWDDT = KG0CM200.KG0CMCDT;
        ;
        if (KG0CM200.KG0CMCDT == 0) /* date not entered*/
          converseLib.validationFailed(253);
          KG0CW01.KG0CWEFL = "Y";
          set KG0CM200.KG0CMCDT cursor, bold;
          return;
        end
        ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE KG0CW01.KG0CWDDT TO TA2REC.TA2GRGA;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
        ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
        set TA2REC empty;
        TA2REC.TA2GRGAN = KG0CW01.KG0CWDDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
        ;
        KG0C710(); /* verify date*/
        ;
        if (TA2REC.TA2RTNCD != 0)
          converseLib.validationFailed(19);
          KG0CW01.KG0CWEFL = "Y";
          set KG0CM200.KG0CMCDT cursor, bold;
          return;
        end
        ;
        if (KG0CW01.KG0CWDMM > 12
         || KG0CW01.KG0CWDMM < 1)
          converseLib.validationFailed(353);
          KG0CW01.KG0CWEFL = "Y";
          set KG0CM200.KG0CMCDT cursor, bold;
          return;
        end
        ;
        if (KG0CW01.KG0CWDDD > 31
         || KG0CW01.KG0CWDD3 < 1)
          converseLib.validationFailed(354);
          KG0CW01.KG0CWEFL = "Y";
          set KG0CM200.KG0CMCDT cursor, bold;
          return;
        end
        ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CWDYY < 13;*/
  /* MOVE 19 TO EZEMNO;*/
  /* MOVE 'Y' TO KG0CW01.KG0CWEFL;*/
  /* SET KG0CM200.KG0CMCDT CURSOR,BRIGHT;*/
  /* EZERTN;*/
  /* END;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
        ;
        if (KG0CM200.KG0CWIND == "Y") /* pay indicator is yes*/
          KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
          KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
          KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
          ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
          if (KG0CW01.KG0CMEDT > 0) /* insure that YYMMDD value > than zero*/
            if (KG0CW01.KG0CWEYY > 60)
              KG0CW01.KG0CWECC = 19;
            else
              KG0CW01.KG0CWECC = 20;
            end
          else
            KG0CW01.KG0CWECC = 0;
          end
          ;
           /* reformat effective date to ccyymmdd for comparison*/
          ;
          KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
          ;
          KG0CW01.KG0CWTMM = KG0CW01.KG0CWDMM;
          KG0CW01.KG0CWTDD = KG0CW01.KG0CWDDD;
          KG0CW01.KG0CWTYY = KG0CW01.KG0CWDYY;
          ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
          if (KG0CW01.KG0CMTDT > 0) /* insure that YYMMDD value > than zero*/
            if (KG0CW01.KG0CWTYY > 60)
              KG0CW01.KG0CWTCC = 19;
            else
              KG0CW01.KG0CWTCC = 20;
            end
          else
            KG0CW01.KG0CWTCC = 0;
          end
          ;
           /* reformat pay date to ccyymmdd for comparison*/
          ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
          KG0CW01.KG0CWTDT-YYMMDD = KG0CW01.KG0CMTDT;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMTDT > KG0CW01.KG0CMEDT;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
          ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
          if (KG0CW01.KG0CMTDT-CCYYMMDD > KG0CW01.KG0CMEDT-CCYYMMDD)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
            ;
            converseLib.validationFailed(400);
            KG0CW01.KG0CWEFL = "Y";
            set KG0CM200.KG0CMEDT cursor, bold;
            return;
          end
        end
      end
    end
  end
  ;
  KG0C555(); /* update rep temp storage*/
end // end KG0C540

// GET EFFECTIVE DATE MINUS 1
Function KG0C545()
   /* *****************************************/
   /* * KG0C545 - GET EFFECTIVE DATE MINUS 1 **/
   /* *****************************************/
  ;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = -1;
  ;
  call "TA0040" (TA2REC) {isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KG0CW01.KG0CWNDT = TA2REC.TA2GRGA;
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C545";
    TA1REC.TA1LOC = "SUBTRACTING DATES ";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBTBL = " ";
    TA1REC.TA1TBLKE = TA2REC.TA2RTNCD;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C545

// VALIDATE REP/AGENCY
Function KG0C550()
   /* **********************************/
   /* * KG0C550 - VALIDATE REP/AGENCY **/
   /* **********************************/
  ;
  set SM5REC empty;
  SM5REC.SM4REPID = KG0CM200.SM4REPID;
  SM5REC.SM1AGYID = KG0CM200.SM1AGYID;
  SM5REC.XXXSTAT = "*";
  SM5REC.SM5EDT = -1;
  ;
  call "IO0160" ("S3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if return code okay*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C550";
    TA1REC.TA1LOC = "SELECT SCAN VRAGCY02";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY02";
    TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0160" ("N3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
    if (KG0CM200.KG0CMFUN == "CHANGE HISTORY")
      /* next sentence*/
      /* MOVE SM5REC.XXXLSTNM TO KG0CW01.KG0CWLST;*/
      /* MOVE SM5REC.XXXFSTNM TO KG0CW01.KG0CWFST;*/
      /* MOVE KG0CW01.KG0CWNAM TO KG0CM200.KG0CMNAM;*/
    else
      if (SM5REC.XXXSTAT == "A") /* if rep/agency is active*/
       /* next sentence*/
        /* MOVE SM5REC.XXXLSTNM TO KG0CW01.KG0CWLST;*/
        /* MOVE SM5REC.XXXFSTNM TO KG0CW01.KG0CWFST;*/
        /* MOVE KG0CW01.KG0CWNAM TO KG0CM200.KG0CMNAM;*/
      else
        KG0CW01.KG0CWEFL = "Y";
        converseLib.validationFailed(357);
        set KG0CM200.SM4REPID cursor, bold;
        set KG0CM200.SM1AGYID bold;
        KG0CM200.KG0CMNAM = "INACTIVE REP/AGENCY";
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      KG0CW01.KG0CWEFL = "Y";
      converseLib.validationFailed(357);
      set KG0CM200.SM4REPID cursor, bold;
      set KG0CM200.SM1AGYID bold;
      KG0CM200.KG0CMNAM = "NOT FOUND";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C550";
      TA1REC.TA1LOC = "FETCH NEXT VRAGCY02";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY01";
      TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
  call "IO0160" ("C3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if return code okay*/
   /* *******************************************/
   /* *         - GET SALES REP NAMES          **/
   /* *******************************************/
    ;
    KG0CW01.KG0CWNAM = " ";
    ;
    set VRAGCY02 empty;
    ;
    VRAGCY02.SM4REPID = KG0CM200.SM4REPID;
    VRAGCY02.SM1AGYID = KG0CM200.SM1AGYID;
    VRAGCY02.XXXSTAT = "A";
    ;
    call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
      KG0CW01.KG0CWLST = VRAGCY02.XXXLSTNM;
      KG0CW01.KG0CWFST = VRAGCY02.XXXFSTNM;
      KG0CM200.KG0CMNAM = KG0CW01.KG0CWNAM;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        KG0CM200.KG0CMNAM = "NOT FOUND ";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "ABND";
        TA1REC.TA1PGMNM = "KG0C550";
        TA1REC.TA1LOC = "SELECT VRAGCY02";
        TA1REC.TA1MAP = " ";
        TA1REC.TA1DBASE = "DSLSMN";
        TA1REC.TA1TBLVU = "VRAGCY02";
        KG0CW01.KG0CWCID = VRAGCY02.SM4REPID;
        TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
    end
    ;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C550";
    TA1REC.TA1LOC = "CLOSE CURSOR VRAGCY01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY01";
    TA1REC.TA1TBLKE = SM5REC.SM1AGYID;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C550

// UPDATE REP TEMP STORAGE
Function KG0C555()
   /* *************************************************************/
   /* * KG0C555 - UPDATE REP TEMP STORAGE                        **/
   /* *   Update and add temporary storage records depending on  **/
   /* *     the function being performed.                        **/
   /* *                                                          **/
   /* *************************************************************/
  ;
   /* *************************************************************/
   /* * Change rep                                               **/
   /* *************************************************************/
  if (KG0CW04.KG0CWUPD[KG0CWCNT] == "C")
    KG0CW01.KG0CWCHG = "Y"; /* change has been made*/
    KG0CW04.KG0CWUPD[KG0CWCNT] = "X";
    KG0CW04.KG0CWRST[KG0CWCNT] = "C"; /* record status*/
    KG0CW04.KG0CWNAM[KG0CWCNT] = KG0CM200.KG0CMNAM;
    KG0CW04.YSBABRV[KG0CWCNT] = KG0CM200.YSBABRV;
    KG0CW04.KG0CWYSA[KG0CWCNT] = KG0CM200.YSBCD;
    KG0CW04.KG0CWRPA[KG0CWCNT] = KG0CM200.SM4REPID;
    KG0CW04.KG0CWAGA[KG0CWCNT] = KG0CM200.SM1AGYID;
    KG0CW04.KG0CWEDA[KG0CWCNT] = KG0CM200.KG0CMEDT;
    if (KG0CM200.KG0CMTDT == 0)
      KG0CW04.KG0CWTDA[KG0CWCNT] = KG0CW04.KG0CWTDB[KG0CWCNT];
    else
      KG0CW04.KG0CWTDA[KG0CWCNT] = KG0CM200.KG0CMTDT;
    end
    KG0CW04.KG0CWPYA[KG0CWCNT] = KG0CM200.KG0CWIND;
    KG0CW04.KG0CWPEA[KG0CWCNT] = KG0CM200.KG0CMCDT;
    KG0C410(); /* rewrite rep temp storage*/
    return;
  else
    /* *************************************************************/
    /* * Change rep history                                       **/
    /* *************************************************************/
    if (KG0CW04.KG0CWUPD[KG0CWCNT] == "H")
      KG0CW01.KG0CWCHG = "Y"; /* change has been made*/
      KG0CW04.KG0CWUPD[KG0CWCNT] = "X";
      KG0CW04.KG0CWRST[KG0CWCNT] = "C"; /* record status*/
      KG0CW04.KG0CWNAM[KG0CWCNT] = KG0CM200.KG0CMNAM;
      KG0CW04.YSBABRV[KG0CWCNT] = KG0CM200.YSBABRV;
      KG0CW04.KG0CWYSA[KG0CWCNT] = KG0CM200.YSBCD;
      KG0CW04.KG0CWRPA[KG0CWCNT] = KG0CM200.SM4REPID;
      KG0CW04.KG0CWAGA[KG0CWCNT] = KG0CM200.SM1AGYID;
      KG0CW04.KG0CWEDA[KG0CWCNT] = KG0CM200.KG0CMEDT;
      if (KG0CM200.KG0CMTDT == 0) /* reset term date*/
        KG0CW04.KG0CWTDA[KG0CWCNT] = 999999;
      else
        KG0CW04.KG0CWTDA[KG0CWCNT] = KG0CM200.KG0CMTDT;
      end
      KG0CW04.KG0CWPYA[KG0CWCNT] = KG0CM200.KG0CWIND;
      KG0CW04.KG0CWPEA[KG0CWCNT] = KG0CM200.KG0CMCDT;
      KG0C410(); /* rewrite rep temp storage*/
      return;
    else
      /* *************************************************************/
      /* * Replace rep                                              **/
      /* *   Set termination date for the replaced rep to the       **/
      /* *   effective date minus one of the replacing rep then     **/
      /* *   rewrite the replaced rep.                              **/
      /* *                                                          **/
      /* *************************************************************/
      if (KG0CW04.KG0CWUPD[KG0CWCNT] == "R")
        KG0CW01.KG0CWCHG = "Y"; /* change has been made*/
        KG0CW04.KG0CWUPD[KG0CWCNT] = "X";
        KG0CW04.KG0CWRST[KG0CWCNT] = "C"; /* record status*/
        KG0CW04.KG0CWRRE[KG0CWCNT] = "Y"; /* updated by replace*/
        set TA2REC empty;
        TA2REC.TA2GRGA = KG0CW01.KG0CWDAT; /* (old eff date - 1)*/
        KG0C545(); /* get effective date -1*/
        KG0CW01.KG0CWADT = KG0CW01.KG0CWNDT;
        KG0CW01.KG0CWDMM = KG0CW01.KG0CWAMM;
        KG0CW01.KG0CWDDD = KG0CW01.KG0CWADY;
        KG0CW01.KG0CWDYY = KG0CW01.KG0CWAYY;
        KG0CW04.KG0CWTDA[KG0CWCNT] = KG0CW01.KG0CWDDT;
        KG0C410(); /* rewrite rep temp storage*/
        ;
        /* *************************************************************/
        /* * Search through temp storage and find the first available **/
        /* *   slot to add the replacing rep.                         **/
        /* * If there are no available slots for the rep in temporary **/
        /* *   storage, then create a new temp storage record and add **/
        /* *   the rep to it.                                         **/
        /* *                                                          **/
        /* *************************************************************/
        KG0CW01.KG0CWBLF = "N"; /* blank line found*/
        KG0CW01.KG0CWRIX = 1; /* start from 1st*/
        while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
          KG0C195(); /* read rep temp storage*/
          KG0CW01.KG0CWCCC = 1;
          while (KG0CW01.KG0CWCCC < 11)
            if (KG0CW04.KG0CWYSA[KG0CWCCC] == " ") /* blank line*/
              KG0CW01.KG0CWBLF = "Y"; /* blank line found*/
              KG0CW04.KG0CWNAM[KG0CWCCC] = KG0CM200.KG0CMNAM;
              KG0CW04.YSBABRV[KG0CWCCC] = KG0CM200.YSBABRV;
              KG0CW04.KG0CWYSA[KG0CWCCC] = KG0CM200.YSBCD;
              KG0CW04.YSBABRV[KG0CWCCC] = KG0CM200.YSBABRV;
              KG0CW04.KG0CWRPA[KG0CWCCC] = KG0CM200.SM4REPID;
              KG0CW04.KG0CWAGA[KG0CWCCC] = KG0CM200.SM1AGYID;
              KG0CW04.KG0CWEDA[KG0CWCCC] = KG0CM200.KG0CMEDT;
              KG0CW04.KG0CWTDA[KG0CWCCC] = 999999;
              KG0CW04.KG0CWPYA[KG0CWCCC] = KG0CM200.KG0CWIND;
              KG0CW04.KG0CWPEA[KG0CWCCC] = KG0CM200.KG0CMCDT;
              KG0CW04.KG0CWUPD[KG0CWCCC] = "X";
              KG0CW04.KG0CWRST[KG0CWCCC] = "A";
              KG0CW04.KG0CWRRE[KG0CWCCC] = "Y"; /* updated by replace*/
              KG0C410(); /* rewrite rep temp storage*/
              KG0CW01.KG0CWCCC = 11;
              KG0CW01.KG0CWRIX = KG0CW01.KG0CWRRT;
            end
            KG0CW01.KG0CWCCC = KG0CW01.KG0CWCCC + 1;
          end
          KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
        end
        if (KG0CW01.KG0CWBLF == "N") /* temp storage rec full*/
          set KG0CW04 empty;
          KG0CW01.KG0CWCCC = 1;
          KG0CW01.KG0CWRCT = KG0CW01.KG0CWRRT;
          KG0CW01.KG0CWTPG = KG0CW01.KG0CWTPG + 1; /* add to page total*/
          KG0CM100.KG0CMLST = KG0CW01.KG0CWTPG;
          KG0CW04.KG0CWNAM[KG0CWCCC] = KG0CM200.KG0CMNAM;
          KG0CW04.YSBABRV[KG0CWCCC] = KG0CM200.YSBABRV;
          KG0CW04.KG0CWYSA[KG0CWCCC] = KG0CM200.YSBCD;
          KG0CW04.KG0CWRPA[KG0CWCCC] = KG0CM200.SM4REPID;
          KG0CW04.KG0CWAGA[KG0CWCCC] = KG0CM200.SM1AGYID;
          KG0CW04.KG0CWEDA[KG0CWCCC] = KG0CM200.KG0CMEDT;
          KG0CW04.KG0CWTDA[KG0CWCCC] = 999999;
          KG0CW04.KG0CWPYA[KG0CWCCC] = KG0CM200.KG0CWIND;
          KG0CW04.KG0CWPEA[KG0CWCCC] = KG0CM200.KG0CMCDT;
          KG0CW04.KG0CWUPD[KG0CWCCC] = "X";
          KG0CW04.KG0CWRST[KG0CWCCC] = "A";
          KG0CW04.KG0CWRRE[KG0CWCCC] = "Y"; /* updated by replace*/
          KG0C170(); /* write rep temp storage*/
          KG0CW01.KG0CWRRT = KG0CW01.KG0CWRCT;
        end
        return;
      else
        /* *************************************************************/
        /* * Add rep function                                         **/
        /* *   Search through temp storage and find the first         **/
        /* *     available slot to add the rep.                       **/
        /* *   If there are no available slots for the rep in temp    **/
        /* *     storage, then create a new temp storage record and   **/
        /* *     add the rep to it.                                   **/
        /* *                                                          **/
        /* *************************************************************/
        KG0CW01.KG0CWBLF = "N"; /* blank line found*/
        ;
        if (KG0CW01.KG0CWADR == "Y") /* adding reps*/
                 /* OR KG0CW01.KG0CWNEW EQ 'Y'     ; coming from ka0d*/
          KG0CW01.KG0CWRIX = 1;
                                   /* start from temp storage record*/
          while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
            KG0C195(); /* read rep temp storage*/
            KG0CW01.KG0CWCCC = 1;
            while (KG0CW01.KG0CWCCC < 11)
              if (KG0CW04.KG0CWYSA[KG0CWCCC] == " ") /* blank line*/
                KG0CW01.KG0CWBLF = "Y"; /* blank line found*/
                KG0CW04.KG0CWNAM[KG0CWCCC] = KG0CM200.KG0CMNAM;
                KG0CW04.YSBABRV[KG0CWCCC] = KG0CM200.YSBABRV;
                KG0CW04.KG0CWYSA[KG0CWCCC] = KG0CM200.YSBCD;
                KG0CW04.KG0CWRPA[KG0CWCCC] = KG0CM200.SM4REPID;
                KG0CW04.KG0CWAGA[KG0CWCCC] = KG0CM200.SM1AGYID;
                KG0CW04.KG0CWEDA[KG0CWCCC] = KG0CM200.KG0CMEDT;
                KG0CW04.KG0CWTDA[KG0CWCCC] = 999999;
                KG0CW04.KG0CWPYA[KG0CWCCC] = KG0CM200.KG0CWIND;
                KG0CW04.KG0CWPEA[KG0CWCCC] = KG0CM200.KG0CMCDT;
                KG0CW01.KG0CWCHG = "Y"; /* change has been made*/
                KG0CW04.KG0CWUPD[KG0CWCCC] = "X";
                KG0CW04.KG0CWRST[KG0CWCCC] = "A";
                KG0C410(); /* rewrite rep temp storage*/
                KG0CW01.KG0CWCCC = 11;
                KG0CW01.KG0CWRIX = KG0CW01.KG0CWRRT;
              end
              KG0CW01.KG0CWCCC = KG0CW01.KG0CWCCC + 1;
            end
            KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
          end
          if (KG0CW01.KG0CWBLF == "N") /* temp storage rec full*/
            set KG0CW04 empty;
            KG0CW01.KG0CWCCC = 1;
            KG0CW01.KG0CWRCT = KG0CW01.KG0CWRRT;
            KG0CW01.KG0CWTPG = KG0CW01.KG0CWTPG + 1; /* add to page total*/
            KG0CM100.KG0CMLST = KG0CW01.KG0CWTPG;
            KG0CW04.KG0CWNAM[KG0CWCCC] = KG0CM200.KG0CMNAM;
            KG0CW04.YSBABRV[KG0CWCCC] = KG0CM200.YSBABRV;
            KG0CW04.KG0CWYSA[KG0CWCCC] = KG0CM200.YSBCD;
            KG0CW04.KG0CWRPA[KG0CWCCC] = KG0CM200.SM4REPID;
            KG0CW04.KG0CWAGA[KG0CWCCC] = KG0CM200.SM1AGYID;
            KG0CW04.KG0CWEDA[KG0CWCCC] = KG0CM200.KG0CMEDT;
            KG0CW04.KG0CWTDA[KG0CWCCC] = 999999;
            KG0CW04.KG0CWPYA[KG0CWCCC] = KG0CM200.KG0CWIND;
            KG0CW04.KG0CWPEA[KG0CWCCC] = KG0CM200.KG0CMCDT;
            KG0CW01.KG0CWCHG = "Y"; /* change has been made*/
            KG0CW04.KG0CWUPD[KG0CWCCC] = "X";
            KG0CW04.KG0CWRST[KG0CWCCC] = "A";
            KG0C170(); /* write rep temp storage*/
            KG0CW01.KG0CWRRT = KG0CW01.KG0CWRCT;
          end
          return;
        end
      end
    end
  end
end // end KG0C555

// MAJOR EDIT (ALL SELECTED)
Function KG0C560()
   /* ************************************************/
   /* * KG0C560 - MAJOR EDIT BEFORE UPDATE          **/
   /* *                                             **/
   /* * Edit for at least one active rep per store. **/
   /* * Edit for more than one active sales resp    **/
   /* *   per ysb.                                  **/
   /* * Edit for date gaps and overlaps.            **/
   /* *                                             **/
   /* ************************************************/
   /* ************************************************/
   /* * Initialize                                  **/
   /* *   Initialize flags.                         **/
   /* *   Save screen postion from where user came  **/
   /* *   Read first temp storage rec.              **/
   /* *   Save first resp code, effective date,     **/
   /* *     and the termination date.               **/
   /* ************************************************/
  KG0CW01.KG0CW1AC = "N"; /* one active rep*/
  KG0CW01.KG0CWEND = "N"; /* end of ysb*/
  KG0CW01.KG0CWERR = "N"; /* error flag*/
  KG0CWREX = KG0CW01.KG0CWRIX; /* save off screen position*/
  KG0CW01.KG0CWRIX = 1;
  KG0C195(); /* read rep temp storage*/
  KG0CW01.KG0CWYSB = KG0CW04.KG0CWYSA[1];
  KG0CW01.KG0CWDDT = KG0CW04.KG0CWTDA[1];
  KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[1];
  set TA2REC empty;
  TA2REC.TA2GRGA = KG0CW01.KG0CWDAT; /* (old eff date - 1)*/
  KG0C545();
  KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
   /* ************************************************/
   /* * Loop                                        **/
   /* *   Loop through temp storage and do editing. **/
   /* ************************************************/
  ;
  while (KG0CW01.KG0CWEND == "N") /* while not end of ysb*/
    KG0CW01.KG0CWACT = "N"; /* active rep*/
    KG0CW01.KG0CW1ST = "Y"; /* first time through*/
    KG0CW01.KG0CWDDT = KG0CW01.KG0CWDAT;
    KG0CW01.KG0CWRIX = 1;
    while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
      KG0CW01.KG0CWCNT = 1;
      KG0C195(); /* read rep temp storage*/
      while (KG0CW01.KG0CWCNT < 11)
        if (KG0CW04.KG0CWYSA[KG0CWCNT] > "  "
         && KG0CW04.KG0CWYSA[KG0CWCNT] == KG0CW01.KG0CWYSB
         && KG0CW04.KG0CWUPD[KG0CWCNT] != "D") /* not selected for delete*/
          if (KG0CW04.KG0CWTDA[KG0CWCNT] == 999999
           && KG0CW01.KG0CWACT == "Y")
            converseLib.validationFailed(394); /* only one active rep per sales resp*/
            KG0CW01.KG0CWERR = "Y";
          else
            if (KG0CW04.KG0CWTDA[KG0CWCNT] == 999999)
              KG0CW01.KG0CWACT = "Y"; /* active rep*/
              KG0CW01.KG0CW1AC = "Y"; /* one active rep*/
              KG0CW01.KG0CW1ST = "N"; /* first time through*/
              KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[KG0CWCNT];
              set TA2REC empty;
              TA2REC.TA2GRGA = KG0CW01.KG0CWDAT;
              KG0C545();
              KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
            else
              if (KG0CW01.KG0CW1ST == "Y") /* first time through*/
                KG0CW01.KG0CW1ST = "N";
                KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[KG0CWCNT];
                set TA2REC empty;
                TA2REC.TA2GRGA = KG0CW01.KG0CWDAT;
                KG0C545();
                KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
              else
                KG0CW01.KG0CWDDT = KG0CW04.KG0CWTDA[KG0CWCNT];
                KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
                KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
                KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
                ;
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
                if (KG0CW01.KG0CMEDT > 0) /* insure YYMMDD value > zero*/
                  if (KG0CW01.KG0CWEYY > 60)
                    KG0CW01.KG0CWECC = 19;
                  else
                    KG0CW01.KG0CWECC = 20;
                  end
                else
                  KG0CW01.KG0CWECC = 0;
                end
                ;
                 /* reformat effective date to ccyymmdd for comparison*/
                ;
                KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
   /*  */
   /* -----------------------  Y2K IN END  ---------------------------*/
                ;
                KG0CW01.KG0CWTMM = KG0CW01.KG0CWDMM;
                KG0CW01.KG0CWTDD = KG0CW01.KG0CWDDD;
                KG0CW01.KG0CWTYY = KG0CW01.KG0CWDYY;
                ;
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
                if (KG0CW01.KG0CMTDT > 0) /* insure YYMMDD value > zero*/
                  if (KG0CW01.KG0CWTYY > 60)
                    KG0CW01.KG0CWTCC = 19;
                  else
                    KG0CW01.KG0CWTCC = 20;
                  end
                else
                  KG0CW01.KG0CWTCC = 0;
                end
                ;
                 /* reformat date to ccyymmdd for comparison*/
                ;
   /**/
   /* -----------------------  Y2K IN END  ---------------------------*/
                KG0CW01.KG0CWTDT-YYMMDD = KG0CW01.KG0CMTDT;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF KG0CW01.KG0CMEDT >= KG0CW01.KG0CMTDT;*/
   /*  */
   /* -----------------------  Y2K OUT END  --------------------------*/
                ;
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
                if (KG0CW01.KG0CMEDT-CCYYMMDD >= KG0CW01.KG0CMTDT-CCYYMMDD)
   /*  */
   /* -----------------------  Y2K IN END  ---------------------------*/
                  ;
                  KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[KG0CWCNT];
                  set TA2REC empty;
                  TA2REC.TA2GRGA = KG0CW01.KG0CWDAT;
                  KG0C545();
                  KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
                else
                  converseLib.validationFailed(395); /* date gap or overlap exists*/
                  KG0CW01.KG0CWERR = "Y";
                  KG0CW01.KG0CWCCC = KG0CW01.KG0CWCNT;
                  KG0C190(); /* move reps to screen*/
                  set KG0CM100.KG0CMSEL[KG0CWCCC] cursor, bold;
                  KG0CW01.KG0CWPCT = KG0CW01.KG0CWRIX;
                  KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
                  return;
                end
              end
            end
          end
        end
        KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
      end
      KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
    end
    KG0CW01.KG0CWRIX = 1;
    while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
      KG0CW01.KG0CWCNT = 1;
      KG0C195(); /* read rep temp storage*/
      while (KG0CW01.KG0CWCNT < 11)
        if (KG0CW04.KG0CWYSA[KG0CWCNT] > KG0CW01.KG0CWYSB)
          KG0CW01.KG0CWYSB = KG0CW04.KG0CWYSA[KG0CWCNT];
          KG0CW01.KG0CWCNT = 11;
          KG0CW01.KG0CWRIX = KG0CW01.KG0CWRRT;
        else
          if (KG0CW04.KG0CWYSA[KG0CWCNT] == " ")
            KG0CW01.KG0CWEND = "Y"; /* terminate editing*/
          end
        end
        KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
      end
      KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
    end
    if (KG0CM100.KG0CMYSB > " "
     && KG0CW01.KG0CW1AC == "N")
      KG0CW01.KG0CWREN = "N";
      KG0C565(); /* select active reps*/
      while (KG0CW01.KG0CWREN == "N")
        KG0C570(); /* select next active rep*/
      end
    end
  end
  ;
  if (KG0CW01.KG0CW1AC == "N"
   && KG0CM100.XXXSTAT == "A")
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
  end
  ;
  if (KG0CW01.KG0CWERR == "N")
    converseLib.validationFailed(277);
  end
  ;
   /* ********************************************/
   /* * restore temp storage and screen         **/
   /* ********************************************/
  KG0CW01.KG0CWRIX = KG0CW01.KG0CWREX;
  KG0C190(); /* move reps to screen*/
end // end KG0C560

// SELECT ACTIVE REPS FOR EDIT
Function KG0C565()
   /* *******************************************************/
   /* * KG0C565 - SELECT ACTIVE REPS FOR EDIT              **/
   /* *******************************************************/
  ;
  set KUGREC empty;
  ;
  KUGREC.KUCCOID = KUCREC.KUCCOID; /* company number*/
  KUGREC.KUMSTRID = 0; /* store id*/
  KUGREC.XNXCD = 00; /* dept number*/
  ;
  KUGREC.YSBCD = "**";
  ;
  KUGREC.KUGRPTDT = 999999999; /* get active reps only*/
  ;
  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C565";
    TA1REC.TA1LOC = "SELECT SCAN VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KG0CW01.KG0CWCID = KUGREC.KUCCOID;
    KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
end // end KG0C565

// SELECT NEXT REP
Function KG0C570()
   /* ***************************************/
   /* * KG0C570 - SELECT NEXT REP FOR EDIT **/
   /* ***************************************/
  ;
  call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KG0CW01.KG0CWYSB == KUGREC.YSBCD)
       /* NEXT SENTENCE*/
    else
      KG0CW01.KG0CW1AC = "Y"; /* one active rep found*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0CW01.KG0CWREN = "Y";
      KG0C185(); /* close rep cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C570";
      TA1REC.TA1LOC = "FETCH NEXT VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
end // end KG0C570

// MAJOR EDIT (ACTIVE SELECTED)
Function KG0C575()
   /* *******************************************************/
   /* * KG0C575 - MAJOR EDIT BEFORE UPDATE FOR ACTIVE REPS **/
   /* *                                                    **/
   /* * Edit for at least one active rep per store.        **/
   /* * Edit for more than one active sales resp           **/
   /* *   per ysb.                                         **/
   /* * Edit for date gaps and overlaps.                   **/
   /* *                                                    **/
   /* *******************************************************/
   /* ************************************************/
   /* * Initialize                                  **/
   /* *   Initialize flags.                         **/
   /* *   Save screen postion from where user came  **/
   /* *   Read first temp storage rec.              **/
   /* *   Save first resp code, effective date,     **/
   /* *     and the termination date.               **/
   /* ************************************************/
  KG0CW01.KG0CW1AC = "N"; /* one active rep*/
  KG0CW01.KG0CWEND = "N"; /* end of ysb*/
  KG0CW01.KG0CWERR = "N"; /* error flag*/
  KG0CW01.KG0CWSRP = 1; /* save rep # to get next ysb for edit*/
  KG0CW01.KG0CWCCC = 0; /* temp storage occurance numer*/
  KG0CWREX = KG0CW01.KG0CWRIX; /* save off screen position*/
  KG0CW01.KG0CWRIX = 1;
  KG0C195(); /* read rep temp storage*/
  KG0CW01.KG0CWYSB = KG0CW04.KG0CWYSA[1];
  KG0CW01.KG0CWDDT = KG0CW04.KG0CWTDA[1];
  KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[1];
  set TA2REC empty;
  TA2REC.TA2GRGA = KG0CW01.KG0CWDAT; /* (old eff date - 1)*/
  KG0C545();
  KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
   /* ************************************************/
   /* * Loop                                        **/
   /* *   Loop through temp storage and do editing. **/
   /* ************************************************/
  ;
  while (KG0CW01.KG0CWEND == "N") /* while not end of ysb*/
    KG0CW01.KG0CWACT = "N"; /* active rep*/
    /* $MOVE KG0CW01.KG0CWDAT TO KG0CW01.KG0CWDDT;*/
    KG0CW01.KG0CWRIX = 1;
    while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
      KG0CW01.KG0CWCNT = 1;
      KG0C195(); /* read rep temp storage*/
      while (KG0CW01.KG0CWCNT < 11)
        if (KG0CW04.KG0CWYSA[KG0CWCNT] > "  "
         && KG0CW04.KG0CWYSA[KG0CWCNT] == KG0CW01.KG0CWYSB
         && KG0CW04.KG0CWUPD[KG0CWCNT] != "D") /* not selected for delete*/
          if (KG0CW04.KG0CWTDA[KG0CWCNT] == 999999
           && KG0CW01.KG0CWACT == "Y")
            converseLib.validationFailed(394); /* only one active rep per sales resp*/
            KG0CW01.KG0CWERR = "Y";
          else
            if (KG0CW04.KG0CWTDA[KG0CWCNT] == 999999)
              KG0CW01.KG0CWACT = "Y"; /* active rep*/
              KG0CW01.KG0CW1AC = "Y"; /* one active rep*/
              if (KG0CW04.KG0CWRST[KG0CWCNT] > " ") /* was maintenanced*/
                KG0CW01.KG0CWNAC = "N";
                KG0CW01.KG0CWREN = "N"; /* end of rep flag*/
                KG0C580(); /* select all reps by ysb*/
                while (SQLCA.VAGen_SQLCODE == 0
                 && KG0CW01.KG0CWNAC == "N"
                 && KG0CW01.KG0CWREN == "N")
                  KG0C585(); /* select next inactive rep*/
                end
                                  /* perform overlap edit for all reps*/
                                   /* active & inactive (070992)*/
                                  /* both dates in temp storage and from*/
                                   /* the database (KUGREC)*/
                if (KG0CW04.KG0CWRRE[KG0CWCNT] != "Y")
                  KG0CW01.KG0CWBFR = KUGREC.KUGGRP; /* save b4 image*/
                  KG0CW01.KG0CWDAT = KG0CW04.KG0CWEDA[KG0CWCNT];
                  set TA2REC empty;
                  TA2REC.TA2GRGA = KG0CW01.KG0CWDAT;
                  KG0C545(); /* get effective date -1*/
                  KG0CW01.KG0CWDAT = KG0CW01.KG0CWNDT;
                  KG0CW01.KG0CWBDT = KUGREC.KUGRPTDT;
                  /* MOVE KG0CW01.KG0CWDDT TO KG0CW01.KG0CWBDT;*/
                  KG0C180(); /* convert date to mmddyy*/
                  KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
                  KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
                  KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
                  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
                  if (KG0CW01.KG0CMEDT > 0) /* ensure that YYMMDD value > zero*/
                    if (KG0CW01.KG0CWEYY > 60)
                      KG0CW01.KG0CWECC = 19;
                    else
                      KG0CW01.KG0CWECC = 20;
                    end
                  else
                    KG0CW01.KG0CWECC = 0;
                  end
                  ;
                /* reformat effective date to ccyymmdd for comparison*/
                  ;
                  KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
                  ;
                  KG0CW01.KG0CWTMM = KG0CW01.KG0CWDMM;
                  KG0CW01.KG0CWTDD = KG0CW01.KG0CWDDD;
                  KG0CW01.KG0CWTYY = KG0CW01.KG0CWDYY;
                  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
                  if (KG0CW01.KG0CMTDT > 0) /* ensure that YYMMDD > zero*/
                    if (KG0CW01.KG0CWTYY > 60)
                      KG0CW01.KG0CWTCC = 19;
                    else
                      KG0CW01.KG0CWTCC = 20;
                    end
                  else
                    KG0CW01.KG0CWTCC = 0;
                  end
                  ;
                   /* reformat date to ccyymmdd for comparison*/
                  ;
                  KG0CW01.KG0CWTDT-YYMMDD = KG0CW01.KG0CMTDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
                  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMEDT < KG0CW01.KG0CMTDT*/
  /* AND KG0CW01.KG0CMTDT < 999999;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
                  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
                  if (KG0CW01.KG0CMEDT-CCYYMMDD < KG0CW01.KG0CMTDT-CCYYMMDD
                   && KG0CW01.KG0CMTDT < 999999)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
                    ;
                    converseLib.validationFailed(381); /* overlap will occur*/
                    KG0CW01.KG0CWERR = "Y";
                    set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
                    return;
                  else
                    KG0CW01.KG0CWDAT = KG0CW04.KG0CWTDT[KG0CWCNT];
                    KG0C180(); /* convert date to mmddyy*/
                    KG0CW01.KG0CWEMM = KG0CW01.KG0CWMM3;
                    KG0CW01.KG0CWEDD = KG0CW01.KG0CWDD3;
                    KG0CW01.KG0CWEYY = KG0CW01.KG0CWYY3;
                    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
                    if (KG0CW01.KG0CMEDT > 0) /* ensure that YYMMDD > zero*/
                      if (KG0CW01.KG0CWEYY > 60)
                        KG0CW01.KG0CWECC = 19;
                      else
                        KG0CW01.KG0CWECC = 20;
                      end
                    else
                      KG0CW01.KG0CWECC = 0;
                    end
                    ;
                     /* reformat date to ccyymmdd for comparison*/
                    ;
                    KG0CW01.KG0CWEDT-YYMMDD = KG0CW01.KG0CMEDT;
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
                    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KG0CW01.KG0CMEDT < KG0CW01.KG0CMTDT*/
  /* AND KG0CW01.KG0CMEDT > 0;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
                    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
                    if (KG0CW01.KG0CMEDT-CCYYMMDD < KG0CW01.KG0CMTDT-CCYYMMDD
                     && KG0CW01.KG0CMEDT > 0)
  /*  */
  /* -----------------------  Y2K IN END  ---------------------------*/
                      ;
                      converseLib.validationFailed(381); /* overlap will occur*/
                      KG0CW01.KG0CWERR = "Y";
                      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
                      return;
                      /* 070992 allow date gaps*/
                      /* IF KG0CW01.KG0CMEDT >= KG0CW01.KG0CMTDT;*/
                      /* AND EZEAID IS PF12;*/
                                  /* 070992 allow date gaps*/
                      /* PERFORM KG0C577;     /* update next rep termdate*/
                      /* PERFORM KG0C578;     /* write audit*/
                    end
                  end
                end
              end
            end
          end
        end
        KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
      end
      KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
    end
    /* *************************************************************/
    /* * Get the next ysb for editing.                            **/
    /* *                                                          **/
    /* * dont start at top of ts - pick up where left off         **/
    /* *************************************************************/
    KG0CW01.KG0CWCCC = KG0CW01.KG0CWCCC + 1;
    if (KG0CW01.KG0CWCCC > 10)
      KG0CW01.KG0CWSRP = KG0CW01.KG0CWSRP + 1;
      KG0CW01.KG0CWCCC = 1;
    end
    if (KG0CW01.KG0CWSRP <= KG0CW01.KG0CWRRT)
      KG0CW01.KG0CWRIX = KG0CW01.KG0CWSRP;
      KG0C195(); /* read rep temp storage*/
      if (KG0CW04.KG0CWYSA[KG0CWCCC] == " ")
        KG0CW01.KG0CWEND = "Y"; /* terminate editing*/
      else
        KG0CW01.KG0CWYSB = KG0CW04.KG0CWYSA[KG0CWCCC];
      end
    else
      KG0CW01.KG0CWEND = "Y"; /* terminate editing*/
    end
  end
  ;
  if (KG0CW01.KG0CW1AC == "N"
   && KG0CM100.XXXSTAT == "A"
   && KG0CM100.KG0CM-DEPT-STAT == "A")
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
  end
  ;
  if (KG0CW01.KG0CWERR == "N")
    converseLib.validationFailed(277);
  end
  ;
   /* ********************************************/
   /* * restore temp storage and screen         **/
   /* ********************************************/
  KG0CW01.KG0CWRIX = KG0CW01.KG0CWREX;
  KG0C190(); /* move reps to screen*/
end // end KG0C575

// SELECT ALL REPS FOR EDIT
Function KG0C580()
   /* *******************************************************/
   /* * KG0C580 - SELECT All REPS FOR EDIT                 **/
   /* *******************************************************/
  ;
  set KUGREC empty;
  ;
  KUGREC.KUCCOID = KUCREC.KUCCOID; /* company number*/
  KUGREC.KUMSTRID = KG0CM100.KUMSTRID; /* store id*/
  KUGREC.XNXCD = KG0CM100.XNXCD; /* dept number*/
  ;
  KUGREC.YSBCD = KG0CW04.KG0CWYSA[KG0CWCNT];
  ;
  KUGREC.KUGRPTDT = -1; /* get all reps*/
  ;
  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C580";
    TA1REC.TA1LOC = "SELECT SCAN VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KG0CW01.KG0CWCID = KUGREC.KUCCOID;
    KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
end // end KG0C580

// SELECT NEXT INACT REP FOR EDIT
Function KG0C585()
   /* ************************************************/
   /* * KG0C585 - SELECT NEXT INACTIVE REP FOR EDIT **/
   /* ************************************************/
  ;
  call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUGREC.KUGRPTDT == 999999999)
       /* NEXT SENTENCE*/
    else
      KG0CW01.KG0CWNAC = "Y"; /* inactive rep found*/
      KG0C185(); /* close rep cursor*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0CW01.KG0CWREN = "Y";
      KG0C185(); /* close rep cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C585";
      TA1REC.TA1LOC = "FETCH NEXT VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KG0CW03.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C585

// GET EFFECTIVE DATE MINUS 1
Function KG0C590()
   /* *****************************************/
   /* * KG0C590 - GET EFFECTIVE DATE MINUS 1 **/
   /* *****************************************/
  ;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = -1;
  ;
  call "TA0040" (TA2REC) {isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE TA2REC.TA2GRGA TO KG0CW01.KG0CWNDT;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    KG0CW01.KG0CWNDT = TA2REC.TA2GRGGN;
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  end
end // end KG0C590

// WINDOW FOR SELECT VALUES
Function KG0C595()
   /* *******************************************/
   /* * KG0C595 - WINDOW FOR SELECT VALUES*/
   /* *******************************************/
  ;
  XPXX001();
  while (XX0XW02.XX0XWEND == "N")
    KG0C596();
  end
  ;
  converseLib.clearScreen();
  
end // end KG0C595

// CONVERSE SELECTS POP UP WINDOW
Function KG0C596()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map*/
      /* 2) Converse the map.*/
      /* 4) Check for PFkey*/
      /* 5) If ENTER pressed, return*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for viewing   ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Clear map and set up header                       ****/
     /* **********************************************************/
    ;
    while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen lines*/
      set XX0XM003.XX0XMSEL[XX0XWCT2] protect, invisible;
      XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
    end
    ;
    set XX0XM003 initial; /* Clear map output area*/
    XX0XM003.XX0XMHDR = "      VALID SELECT VALUES AND DESCRIPTIONS";
    XX0XM003.XX0XMTR1 = "              PRESS ENTER TO RETURN  ";
    ;
    XX0XM003.XX0XMCD[2] = "A";
    XX0XM003.XX0XMDES[2] = "ADD NEW SALES RESPONSIBILITY         ";
    XX0XM003.XX0XMCD[3] = "C";
    XX0XM003.XX0XMDES[3] = "CHANGE EFF DATE, TERM DATE, PAY INFO ";
    XX0XM003.XX0XMCD[4] = "D";
    XX0XM003.XX0XMDES[4] = "DELETE SALES RESPONSIBILITY          ";
    XX0XM003.XX0XMCD[5] = "H";
    XX0XM003.XX0XMDES[5] = "CHANGE SALES RESPONSIBILITY HISTORY  ";
    XX0XM003.XX0XMCD[6] = "R";
    XX0XM003.XX0XMDES[6] = "REPLACE SALES RESPONSIBILITY         ";
    XX0XM003.XX0XMCD[8] = "N";
    XX0XM003.XX0XMDES[8] = "REMOVE SELECT VALUE AND CHANGES FROM LINE";
  end
  converse XX0XM003 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM003.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM003.XX0XMSEL[XX0XWCT2] protect, invisible;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors                    *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is enter) /* If enter pressed*/
    XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
  else
    XX0XW02.XX0XWERR = "Y"; /* set error flag*/
  end
end // end KG0C596

// SCROLL SCREEN TO ERROR
Function KG0C600()
   /* *********************************************************/
   /* *  KG0C600 - SCROLL SCREEN TO ERROR                    **/
   /* *                                                      **/
   /* *     In the event that a user attempts to leave or    **/
   /* *     cause temporary storage to be reloaded while     **/
   /* *     updates are pending, this routine will load the  **/
   /* *     screen from the first rep temporary storage      **/
   /* *     record where a value was entered on any select   **/
   /* *     field. Then the first screen record with a value **/
   /* *     in the select field will be highlighted with the **/
   /* *     cursor placed on it.                             **/
   /* *                                                      **/
   /* *********************************************************/
  ;
  KG0CW01.KG0CWRIX = 1;
  while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
    KG0C195(); /* read rep temp storage*/
    KG0CW01.KG0CWCNT = 1;
    while (KG0CW01.KG0CWCNT < 11)
      if (KG0CW04.KG0CWUPD[KG0CWCNT] > " ")
        KG0CW01.KG0CWCNT = 11;
        KG0CW01.KG0CWXXX = KG0CW01.KG0CWRIX; /* save key*/
        KG0CW01.KG0CWRIX = KG0CW01.KG0CWRRT; /* terminate loop*/
      end
      KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
    end
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
  end
  ;
  KG0CW01.KG0CWPCT = KG0CW01.KG0CWXXX;
  KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
  KG0CW01.KG0CWRIX = KG0CW01.KG0CWXXX;
  KG0C190(); /* move sales reps to screen*/
  ;
   /* **********************************************************/
   /* *  set select field values to their original attributes **/
   /* **********************************************************/
  ;
  KG0CW01.KG0CWCNT = 1;
  ;
  while (KG0CW01.KG0CWCNT < 11)
    set KG0CM100.KG0CMSEL[KG0CWCNT] initialAttributes;
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
  end
  ;
   /* *********************************************************/
   /* *  set cursor on first occurance of selected rep       **/
   /* *********************************************************/
  ;
  KG0CW01.KG0CWCNT = 1;
  ;
  while (KG0CW01.KG0CWCNT < 11)
    if (KG0CM100.KG0CMSEL[KG0CWCNT] > " ")
      set KG0CM100.KG0CMSEL[KG0CWCNT] cursor, bold;
      KG0CW01.KG0CWCNT = 11;
    end
    KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
  end
end // end KG0C600

// GET COMPANY ADDRESS
Function KG0C610()
   /* ********************************************/
   /* * KG0C610 - GET COMPANY ADDRESS*/
   /* ********************************************/
  ;
  set XA0AW02 empty;
  ;
  KG0CM300.KUCCOID = KUCREC.KUCCOID;
  KG0CM300.KUCCONM = KUCREC.KUCCONM;
  ;
   /* -----  read/fmt co address's -------*/
  if (KUCREC.KUCCOAID != 0)
    XA0AW02.KULAAID = KUCREC.KUCCOAID;
    XA0AW02.KUCCOID = KUCREC.KUCCOID;
    XA0AW02.XA0AWFNC = "G";
    call "XA0A" (XA0AW02) {isNoRefresh = yes};
    if (XA0AW02.XA0AWERR[1] == 0)
      KG0CM300.KG0CMCA1 = XA0AW02.XXX-ADDR1;
      KG0CM300.KG0CMCA2 = XA0AW02.XXX-ADDR2;
      KG0CM300.KG0CMCA3 = XA0AW02.XXX-ADDR3;
      KG0CM300.KG0CMCC = XA0AW02.XXXCITY;
      KG0CM300.KG0CMCST = XA0AW02.XSTCD;
      KG0CM300.KG0CMCZP = XA0AW02.XXXZIP;
    else
      if (XA0AWERR[1] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA0AWERR[1]);
      end
    end
  end
end // end KG0C610

// GET STORE ADDRESS
Function KG0C620()
   /* ********************************************/
   /* * get store address*/
   /* ********************************************/
  ;
  ;
  KG0CM300.KUMSTRID = KG0CW03.KUMSTRID;
  KG0CM300.XNXCD = KG0CW05.XNXCD;
  ;
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KG0CW03.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26); /* store not found*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C620";
      TA1REC.TA1LOC = "SELECT VSTORE01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KG0CW01.KG0CWCID = KUMREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
  set XA0AW02 empty;
  ;
   /* -----  read/fmt store address's -------*/
  if (KUMREC.KUMSHAID != 0)
    XA0AW02.KULAAID = KUMREC.KUMSHAID;
    XA0AW02.KUCCOID = KUMREC.KUCCOID;
    XA0AW02.XA0AWFNC = "G";
    call "XA0A" (XA0AW02) {isNoRefresh = yes};
    if (XA0AW02.XA0AWERR[1] == 0)
      KG0CM300.KG0CMSA1 = XA0AW02.XXX-ADDR1;
      KG0CM300.KG0CMSA2 = XA0AW02.XXX-ADDR2;
      KG0CM300.KG0CMSA3 = XA0AW02.XXX-ADDR3;
      KG0CM300.KG0CMSC = XA0AW02.XXXCITY;
      KG0CM300.KG0CMSST = XA0AW02.XSTCD;
      KG0CM300.KG0CMSZP = XA0AW02.XXXZIP;
    else
      if (XA0AWERR[1] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA0AWERR[1]);
      end
    end
  end
  ;
  ;
end // end KG0C620

// GET BILL TO ADDRESS
Function KG0C630()
   /* ********************************************/
   /* * KG0C630 - GET BILL TO ADDRESS*/
   /* ********************************************/
  ;
  set XA0AW02 empty;
  ;
   /* -----  read/fmt bill address's -------*/
  XA0AW02.KULAAID = KUCREC.KUCBLAID;
  XA0AW02.KUCCOID = KUCREC.KUCCOID;
  XA0AW02.XA0AWFNC = "G";
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  if (XA0AW02.XA0AWERR[1] == 0)
    KG0CM300.KG0CMBA1 = XA0AW02.XXX-ADDR1;
    KG0CM300.KG0CMBA2 = XA0AW02.XXX-ADDR2;
    KG0CM300.KG0CMBA3 = XA0AW02.XXX-ADDR3;
    KG0CM300.KG0CMBC = XA0AW02.XXXCITY;
    KG0CM300.KG0CMBST = XA0AW02.XSTCD;
    KG0CM300.KG0CMBZP = XA0AW02.XXXZIP;
  else
    if (XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AWERR[1]);
    end
  end
end // end KG0C630

// CONVERSE ADDRESS INFO SCRN
Function KG0C640()
   /* ******************************************/
   /* KG0C640 - CONVERSE ADDRESS INFO SCREEN **/
   /* ******************************************/
  ;
  KG0CM300.KG0CMMSG = KG0CW01.KG0CWMSG;
  ;
  converse KG0CM300 ;
  ;
  KG0CW01.KG0CWERR = "N";
  KG0CW01.KG0CWMSG = " ";
  KG0CM300.KG0CMMSG = " ";
  ;
  KG0C650(); /* edit special keys/fast paths*/
end // end KG0C640

// EDIT ADDRESS SPECIAL KEYS
Function KG0C650()
   /* ********************************************/
   /* * KG0C650 - CHECK ADDRESS PF KEYS*/
   /* ********************************************/
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KG0CM300.CATOAP > " ") /* fast path*/
      if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
        converseLib.validationFailed(367);
        KG0CW01.KG0CWERR = "Y";
        set KG0CM300.CATOAP cursor, bold;
        return;
      end
      if (KG0CW01.KG0CWNEW == "Y") /* new store, no reps*/
        converseLib.validationFailed(368);
        KG0CW01.KG0CWERR = "Y";
        set KG0CM300.CATOAP cursor, bold;
        return;
      end
      KG0C130(); /* purge store temp storage*/
      KG0C161(); /* purge rep temp storage*/
      COMMAREA.CATOAP = KG0CM300.CATOAP;
      if (KG0CM300.CAITEM == " ")
        KG0CW01.KG0CWCNO = KG0CM300.KUCCOID;
        KG0CW01.KG0CWSTR = KG0CM300.KUMSTRID;
        COMMAREA.CAUSERA = KG0CW01.KG0CWUSR;
      else
        COMMAREA.CAITEM = KG0CM300.CAITEM;
      end
      COMMAREA.CAFROMAP = "KG0C";
      XSEXIT();
      KG0CM300.VAGen_EZEMSG = COMMAREA.CAMSG;
      KG0CW01.KG0CWERR = "Y";
      set KG0CM300.CATOAP cursor, bold;
    else
      set KG0CM300.CATOAP initialAttributes;
    end
    return;
  else
    if (KG0CM300.CATOAP > " ")
      KG0CW01.KG0CWERR = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KG0CM300.CATOAP cursor, bold;
      return;
    else
      set KG0CM300.CATOAP modified;
    end
  end
  ;
   /* **************************************/
   /* pfkey edit*/
   /* **************************************/
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* master menu*/
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store, no reps*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* master menu*/
      converseLib.validationFailed(368);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to company update*/
    KG0CW01.KG0CWAFL = "N";
    return;
  end
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help system*/
    KG0C130(); /* purge store temp storage*/
    KG0C161(); /* purge rep temp storage*/
    XSPF1();
    KG0CM300.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    KG0C130(); /* purge store temp storage*/
    KG0C161(); /* purge rep temp storage*/
    COMMAREA.CAFROMAP = "KG0C";
    XSPF4();
    KG0CM300.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* invalid pf key*/
   /* **************************************/
  ;
  if (KG0CW01.KG0CWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0CW01.KG0CWERR = "Y";
  end
end // end KG0C650

// WINDOW FOR YSB TABLE
Function KG0C660()
   /* *******************************************/
   /* * KG0C660 - WINDOW FOR YSB TABLE*/
   /* *******************************************/
  ;
  XPXX001();
  while (XX0XW02.XX0XWEND == "N")
    XPYSB00();
  end
  ;
  converseLib.clearScreen();
  
end // end KG0C660

// WINDOW FOR YSB TABLE
Function KG0C665()
   /* ********************************************************/
   /* * KG0C665 - WINDOW FOR YSB TABLE- FROM UPDATE SCREEN **/
   /* ********************************************************/
  ;
  ;
  XPXX001();
  while (XX0XW02.XX0XWEND == "N")
    XPYSB00();
  end
  ;
  KG0CW01.KG0CWEFL = "Y";
  converseLib.clearScreen();
  
end // end KG0C665

// PAGE UP FOR REPS
Function KG0C670()
   /* *******************************/
   /* * KG0C670 - PAGE UP FOR REPS **/
   /* *******************************/
  if (KG0CW01.KG0CWERR == "Y") /* if errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWRIX > 1)
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX - 1;
    KG0CW01.KG0CWPCT = KG0CW01.KG0CWPCT - 1;
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
    KG0C190(); /* move reps to screen*/
  else
    converseLib.validationFailed(208); /* at begining of data*/
  end
end // end KG0C670

// PAGE DOWN FOR REPS
Function KG0C675()
   /* *********************************/
   /* * KG0C675 - PAGE DOWN FOR REPS **/
   /* *********************************/
  if (KG0CW01.KG0CWERR == "Y") /* if errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWRIX >= KG0CW01.KG0CWRRT) /* if past total #of reps*/
    converseLib.validationFailed(206);
  else
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
    KG0CW01.KG0CWPCT = KG0CW01.KG0CWPCT + 1; /* page counter*/
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
    KG0C190(); /* move sales reps to the screen*/
  end
end // end KG0C675

// PAGE UP FOR STORES
Function KG0C680()
   /* *************************************************************/
   /* * KG0C680 - PAGE UP FOR STORES                             **/
   /* *************************************************************/
  if (KG0CW01.KG0CWERR == "Y") /* if no errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    KG0C600(); /* scroll screen to the error*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(367);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWDCT > 1) /* if more depts in temp storage*/
    KG0CW01.KG0CWDCT = KG0CW01.KG0CWDCT - 2;
    KG0CW01.KG0CWDIN = KG0CW01.KG0CWDMR - 1;
    KG0C156(); /* read dept temp storage*/
  else
    if (KG0CW01.KG0CWSCT > 1) /* if more stores in temp storage*/
      KG0CW01.KG0CWSCT = KG0CW01.KG0CWSCT - 2;
      KG0CW01.KG0CWSIN = KG0CW01.KG0CWSMR - 1;
      KG0C155(); /* read store temp storage*/
      KG0CM100.KUMSTRID = KG0CW03.KUMSTRID;
      KG0C136(); /* write dept temp storage recs*/
      KG0CW01.KG0CWDCT = KG0CW01.KG0CWDCT - 1;
      KG0CW01.KG0CWDIN = KG0CW01.KG0CWDMR - 1;
      KG0C156(); /* read dept temp storage*/
    else
      converseLib.validationFailed(208); /* at beginning of data*/
      KG0CW01.KG0CWERR = "Y";
    end
  end
  ;
  if (KG0CW01.KG0CWERR == "N") /* if no errors*/
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
    KG0CM100.XNXCD = KG0CW05.XNXCD; /* dept id*/
    KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM; /* dept name*/
    KG0CM100.KG0CM-DEPT-STAT = KG0CW05.XXXSTAT; /* dept status*/
    KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM; /* store name*/
    KG0CM100.XXXSTAT = KG0CW03.XXXSTAT; /* store status*/
    ;
    if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
      set KG0CM100.XXXSTAT protect, bold; /* HIGHLIGHT THE STATUS CODE*/
      KG0CW01.KG0CWMSG = " ATTENTION:  STORE IS INACTIVE ";
    else
      set KG0CM100.XXXSTAT initialAttributes;
    end
    ;
    if (KG0CM100.KG0CM-DEPT-STAT == "I") /* IF INACTIVE department*/
      set KG0CM100.KG0CM-DEPT-STAT protect, bold; /* highlight&displ. msg*/
      KG0CW01.KG0CWMSG = " ATTENTION:  DEPARTMENT IS INACTIVE ";
    else
      set KG0CM100.KG0CM-DEPT-STAT initialAttributes;
    end
    ;
    if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
      if (KG0CM100.KG0CM-DEPT-STAT == "I") /* and department is inactive*/
        KG0CW01.KG0CWMSG = "ATTENTION:  STORE AND DEPARTMENT ARE INACTIVE";
      end
    end
    ;
    KG0C160(); /* load all sales reps*/
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    KG0C190(); /* move sales reps to the screen*/
  end
end // end KG0C680

// PAGE DOWN FOR STORES
Function KG0C685()
   /* ***********************************/
   /* * KG0C685 - PAGE DOWN FOR STORES **/
   /* ***********************************/
  if (KG0CW01.KG0CWERR == "Y") /* if no errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    KG0C600(); /* scroll screen to the error*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(367);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWDCT < KG0CW01.KG0CWDRT) /* last temp record*/
    KG0C156(); /* read next dept temp storage rec*/
  else
    if (KG0CW01.KG0CWSCT >= KG0CW01.KG0CWSRT) /* last temp record*/
      KG0CW01.KG0CWERR = "Y";
      converseLib.validationFailed(206);
      return;
    else
      KG0C155(); /* read next store temp storage rec*/
      KG0CM100.KUMSTRID = KG0CW03.KUMSTRID;
      KG0C136(); /* write dept temp storage*/
      KG0CW01.KG0CWDCT = 0;
      KG0C156(); /* read next dept temp storage rec*/
    end
  end
  ;
  if (KG0CW01.KG0CWERR == "N") /* if no errors*/
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
    KG0CM100.XNXCD = KG0CW05.XNXCD; /* dept id*/
    KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM; /* dept name*/
    KG0CM100.KG0CM-DEPT-STAT = KG0CW05.XXXSTAT; /* dept stat*/
    KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM; /* store name*/
    KG0CM100.XXXSTAT = KG0CW03.XXXSTAT; /* store stat*/
    ;
    if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
      set KG0CM100.XXXSTAT protect, bold; /* HIGHLIGHT THE STATUS CODE*/
      KG0CW01.KG0CWMSG = " ATTENTION:  STORE IS INACTIVE ";
    else
      set KG0CM100.XXXSTAT initialAttributes;
    end
    ;
    if (KG0CM100.KG0CM-DEPT-STAT == "I") /* IF INACTIVE department*/
      set KG0CM100.KG0CM-DEPT-STAT protect, bold; /* highlight&displ. msg*/
      KG0CW01.KG0CWMSG = " ATTENTION:  DEPARTMENT IS INACTIVE ";
    else
      set KG0CM100.KG0CM-DEPT-STAT initialAttributes;
    end
    ;
    if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
      if (KG0CM100.KG0CM-DEPT-STAT == "I") /* and department is inactive*/
        KG0CW01.KG0CWMSG = "ATTENTION:  STORE AND DEPARTMENT ARE INACTIVE";
      end
    end
    ;
    KG0C160(); /* load all sales reps*/
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    KG0C190(); /* move sales reps to the screen*/
  end
end // end KG0C685

// FIRST STORE
Function KG0C690()
   /* *******************************************/
   /* * KG0C690 - FIRST STORE                  **/
   /* *******************************************/
  if (KG0CW01.KG0CWERR == "Y") /* if errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    KG0C600(); /* scroll screen to error*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(367);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  KG0CW01.KG0CWSCT = 0;
  KG0CW01.KG0CWSIN = 1;
  KG0C155(); /* read store temp storage*/
  ;
  if (KG0CW01.KG0CWERR == "N") /* if no errors*/
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
    KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM; /* store name*/
    KG0CM100.XXXSTAT = KG0CW03.XXXSTAT; /* store stat*/
    KG0C136(); /* write dept temp storage*/
    KG0CW01.KG0CWDCT = 0;
    KG0C156(); /* read dept temp storage*/
    KG0CM100.XNXCD = KG0CW05.XNXCD; /* dept id*/
    KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM; /* dept name*/
    KG0CW01.KG0CWPCT = 1;
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
    KG0C160(); /* load all sales reps*/
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    KG0C190(); /* move sales reps to the screen*/
    converseLib.validationFailed(208); /* beginning of data*/
  end
end // end KG0C690

// LAST STORE
Function KG0C695()
   /* *******************************************/
   /* * KG0C695 - LAST STORE                   **/
   /* *******************************************/
  if (KG0CW01.KG0CWERR == "Y") /* if no errors*/
    return;
  end
  ;
  if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
    KG0C600(); /* scroll screen to error*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(367);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
    KG0CM100.KUCCOID = KUCREC.KUCCOID;
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  KG0CW01.KG0CWSCT = KG0CW01.KG0CWSRT - 1; /* to last store*/
  KG0CW01.KG0CWSIN = KG0CW01.KG0CWSIX;
  KG0C155(); /* read store temp storage*/
  ;
  if (KG0CW01.KG0CWERR == "N") /* if no errors*/
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
    KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM; /* store name*/
    KG0CM100.XXXSTAT = KG0CW03.XXXSTAT; /* store stat*/
    KG0C136(); /* write dept temp storage*/
    KG0CW01.KG0CWDCT = KG0CW01.KG0CWDRT - 1; /* to last dept*/
    KG0C156(); /* read dept temp storage*/
    KG0CM100.XNXCD = KG0CW05.XNXCD; /* dept id*/
    KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM; /* dept id*/
    KG0CW01.KG0CWPCT = 1;
    KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT; /* reset page count*/
    KG0C160(); /* load all sales reps*/
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    KG0C190(); /* move sales reps to the screen*/
    converseLib.validationFailed(39); /* end of data*/
  end
end // end KG0C695

// EDIT SELECT CRITERIA CHANGES
Function KG0C700()
   /* *******************************************/
   /* * KG0C700 - EDIT SELECT CRITERIA CHANGES **/
   /* *******************************************/
   /* ****** has company id changed ***********/
  if (KG0CM100.KUCCOID == KUCREC.KUCCOID
   && KG0CM100.KUCCOID != 0)
    /* next sentence*/
  else
    if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
      KG0CM100.KUCCOID = KUCREC.KUCCOID;
      converseLib.validationFailed(368);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    ;
    if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
      KG0C600(); /* scroll to error*/
      KG0CM100.KUCCOID = KUCREC.KUCCOID;
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    ;
    KG0CW01.KG0CWCID = KG0CM100.KUCCOID;
    KG0C115(); /* process new company*/
    return;
  end
  ;
   /* ****** has store or dept id changed *******/
  if (KG0CW01.KG0CWNEW == "Y" /* new store no reps added*/
   && KG0CM100.KUMSTRID != KG0CW03.KUMSTRID)
    KG0CM100.KUMSTRID = KG0CW03.KUMSTRID;
    converseLib.validationFailed(368);
    KG0CW01.KG0CWERR = "Y";
    return;
  end
  ;
  if (KG0CM100.KUMSTRID == KG0CW03.KUMSTRID
   && KG0CM100.XNXCD == KG0CW05.XNXCD
   && KG0CW01.KG0CWSFN == "Y"
   && KG0CW01.KG0CWDFN == "Y")
    /* next sentence*/
  else
    if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
      KG0C600();
      KG0CM100.KUMSTRID = KG0CW03.KUMSTRID;
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    ;
    set KG0CM100.KUMSTRID initialAttributes;
    set KG0CM100.XNXCD initialAttributes;
    ;
    KG0C150(); /* search for new store*/
    ;
    if (KG0CW01.KG0CWSFN == "Y") /* store was found*/
      KG0CM100.KUMSTRID = KG0CW03.KUMSTRID; /* store id*/
      KG0CM100.KUMSTRNM = KG0CW03.KUMSTRNM; /* store name*/
      KG0CM100.XXXSTAT = KG0CW03.XXXSTAT; /* store stat*/
      ;
      if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
        set KG0CM100.XXXSTAT protect, bold; /* HIGHLIGHT THE STATUS CODE*/
        KG0CW01.KG0CWMSG = " ATTENTION:  STORE IS INACTIVE ";
      else
        set KG0CM100.XXXSTAT initialAttributes;
      end
      ;
      KG0C136(); /* write dept temp storage*/
      KG0CW01.KG0CWDCT = 0;
      KG0C151(); /* read dept temp storage*/
      if (KG0CW01.KG0CWDFN == "N")
        converseLib.validationFailed(26); /* store/dept found*/
        KG0CW01.KG0CWERR = "Y"; /* set error message.*/
        set KG0CM100.XNXCD cursor, bold;
        KG0CM100.KUJSLFNM = " ";
        return;
      end
      ;
      KG0CM100.XNXCD = KG0CW05.XNXCD; /* dept id*/
      KG0CM100.KUJSLFNM = KG0CW05.KUJSLFNM;
      KG0CM100.KG0CM-DEPT-STAT = KG0CW05.XXXSTAT;
      if (KG0CM100.KG0CM-DEPT-STAT == "I") /* IF INACTIVE department*/
        set KG0CM100.KG0CM-DEPT-STAT protect, bold; /* highlight&displ. msg*/
        KG0CW01.KG0CWMSG = " ATTENTION:  DEPARTMENT IS INACTIVE ";
      else
        set KG0CM100.KG0CM-DEPT-STAT initialAttributes;
      end
      ;
      if (KG0CM100.XXXSTAT == "I") /* IF INACTIVE STORE*/
        if (KG0CM100.KG0CM-DEPT-STAT == "I") /* and department is inactive*/
          KG0CW01.KG0CWMSG = "ATTENTION:  STORE AND DEPARTMENT ARE INACTIVE";
        end
      end
      ;
    else
      converseLib.validationFailed(26); /* store/dept found*/
      KG0CW01.KG0CWERR = "Y"; /* set error message.*/
      set KG0CM100.KUMSTRID cursor, bold;
      return;
    end
    ;
    KG0C160(); /* load all sales reps*/
    ;
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    ;
    KG0C190(); /* move sales reps to the screen*/
    ;
  end
  ;
   /* ****** has ysb code changed ***********/
  if (KG0CM100.KG0CMYSB == KG0CW01.YSBCD)
    /* next sentence*/
  else
    if (KG0CW01.KG0CWNEW == "Y") /* new store no reps added*/
      KG0CM100.KG0CMYSB = KG0CW01.YSBCD;
      converseLib.validationFailed(368);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    ;
    if (KG0CW01.KG0CWPND == "Y") /* updates pending*/
      KG0C600();
      KG0CM100.KG0CMYSB = KG0CW01.YSBCD;
      converseLib.validationFailed(367);
      KG0CW01.KG0CWERR = "Y";
      return;
    end
    ;
    KG0CW01.YSBCD = KG0CM100.KG0CMYSB;
    ;
    KG0C160(); /* load all sales reps*/
    ;
    KG0CW01.KG0CWRIX = 1; /* start at the top*/
    ;
    KG0C190(); /* move sales reps to the screen*/
    ;
  end
end // end KG0C700

// GET EFFECTIVE DATE MINUS 1
Function KG0C710()
   /* *****************************************/
   /* * KG0C710 - verify date entered        **/
   /* *****************************************/
  ;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  ;
  call "TA0040" (TA2REC) {isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    KG0CW01.KG0CWNDT = TA2REC.TA2GRGA;
  end
end // end KG0C710

// UPDATE DATABASES
Function KG0C800()
   /* *******************************************/
   /* * KG0C800 - UPDATE DATABASES             **/
   /* *******************************************/
  ;
  KG0CW01.KG0CWRIX = 1; /* start at top of temp storage*/
  ;
  while (KG0CW01.KG0CWRIX <= KG0CW01.KG0CWRRT)
    KG0C195(); /* read rep temp storage*/
    KG0CW01.KG0CWCNT = 1;
    while (KG0CW01.KG0CWCNT < 11)
      if (KG0CW04.KG0CWUPD[KG0CWCNT] == " ") /* no changes*/
         /* next sentence*/
      else
        if (KG0CW04.KG0CWRST[KG0CWCNT] == "D") /* if delete*/
          KG0C820(); /* delete rep*/
          KG0C825(); /* write audit*/
        else
          if (KG0CW04.KG0CWRST[KG0CWCNT] == "A") /* if add*/
            if (KG0CW04.KG0CWRRE == "Y") /* if replace*/
              KG0C810(); /* add new replace rep*/
              KG0C808(); /* write replace add audit*/
            else
              KG0C810(); /* add new rep*/
              KG0C815(); /* write audit*/
            end
          else
            if (KG0CW04.KG0CWRST[KG0CWCNT] == "C")
              if (KG0CW04.KG0CWRPA[KG0CWCNT] != KG0CW04.KG0CWRPB[KG0CWCNT]
              
               || KG0CW04.KG0CWAGA[KG0CWCNT] != KG0CW04.KG0CWAGA[KG0CWCNT]
              )
                KG0C820(); /* delete old rep*/
                KG0C825(); /* write audit*/
                KG0C810(); /* add new rep*/
                KG0C815(); /* write audit*/
              else
                  /* If changing eff date delete old rec*/
                  /* and add new rec with new eff date.*/
                if (KG0CW04.KG0CWEDA[KG0CWCNT] != KG0CW04.KG0CWEDB[KG0CWCNT]
                )
                  KG0C820(); /* delete old rec w/ old eff date*/
                  KG0C810(); /* add new rec w/ new eff date*/
                  KG0C875(); /* write change audit*/
                else
                  if (KG0CW04.KG0CWRRE == "Y") /* if replace*/
                    KG0C870(); /* update rep*/
                    KG0C865(); /* write chg add audit*/
                  else
                    KG0C870(); /* update rep*/
                    KG0C875(); /* write change audit*/
                  end
                end
              end
            end
          end
        end
      end
      KG0CW01.KG0CWCNT = KG0CW01.KG0CWCNT + 1;
    end
    KG0CW01.KG0CWRIX = KG0CW01.KG0CWRIX + 1;
  end
  ;
  KG0C160(); /* load all sales reps*/
  KG0CW01.KG0CWRIX = 1; /* set count*/
  KG0CW01.KG0CWPCT = 1; /* page count to one*/
  KG0CM100.KG0CMFRT = KG0CW01.KG0CWPCT;
  KG0C190(); /* move sales rep to the screen*/
  ;
  if (KG0CM100.KUECOMNT != KG0CW01.KUECOMNT) /* comment field check*/
    if (KG0CW01.KUECOMNT == " ")
      KG0C950(); /* add comment*/
      KG0C955(); /* write audit*/
      KG0CW01.KG0CWCCT = KG0CW01.KG0CWCCT + 1; /* add one*/
      KG0CW01.KG0CWCBF = KUEREC.KUEGRP; /* save new image*/
      KG0C960(); /* check if company needs updated*/
    else
      if (KG0CM100.KUECOMNT == " ")
        KG0C970(); /* delete comment*/
        KG0C975(); /* write audit*/
        KG0CW01.KG0CWCCT = KG0CW01.KG0CWCCT - 1; /* delete one*/
        set KUEREC empty;
        KG0CW01.KG0CWCBF = KUEREC.KUEGRP; /* save new image*/
        KG0C960(); /* check if company needs updated*/
      else
        KG0C980(); /* update comment*/
        KG0C985(); /* write audit*/
        KG0CW01.KG0CWCBF = KUEREC.KUEGRP; /* save new image*/
        KG0C960(); /* check if company needs updated*/
      end
    end
  end
  ;
  converseLib.validationFailed(29); /* update successful message*/
  set KG0CM100.KUCCOID cursor; /* ready to change companies*/
end // end KG0C800

// WRITE ADD AUDIT TRAIL
Function KG0C808()
   /* *****************************************/
   /* * kg0c808 - WRITE ADD AUDIT TRAIL      **/
   /* *****************************************/
  ;
  KUZREC.KUZTYPE = "R";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VCUREP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUGREC.KUCCOID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUGREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUGREC.KUGGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C808  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUREP01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C808";
    TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  end
end // end KG0C808

// ADD NEW SALES REPS
Function KG0C810()
   /* *******************************************/
   /* * KG0C810 - ADD NEW SALES REP            **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  if (KG0CW01.KG0CWNEW == "Y") /* COMING FROM KA0D*/
    KUGREC.KUCCOID = KG0CM100.KUCCOID;
    KUGREC.KUMSTRID = KG0CM100.KUMSTRID;
    KUGREC.XNXCD = KG0CM100.XNXCD;
  else
    KUGREC.KUCCOID = KUCREC.KUCCOID;
    KUGREC.KUMSTRID = KG0CW03.KUMSTRID;
    KUGREC.XNXCD = KG0CW05.XNXCD;
  end
  ;
  KUGREC.YSBCD = KG0CW04.KG0CWYSA[KG0CWCNT];
  KUGREC.SM4REPID = KG0CW04.KG0CWRPA[KG0CWCNT];
  KUGREC.SM1AGYID = KG0CW04.KG0CWAGA[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWEDA[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGRPEDT = KG0CW01.KG0CWBDT;
  ;
  if (KG0CW04.KG0CWTDA[KG0CWCNT] < 999999)
    KG0CW01.KG0CWADT = KG0CW04.KG0CWTDA[KG0CWCNT];
    KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
    KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
    KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
      if (KG0CW01.KG0CWBYY > 60)
        KG0CW01.KG0CWBCC = 19;
      else
        KG0CW01.KG0CWBCC = 20;
      end
    else
      KG0CW01.KG0CWBCC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KUGREC.KUGRPTDT = KG0CW01.KG0CWBDT;
  else
    KUGREC.KUGRPTDT = 999999999;
  end
  ;
  KUGREC.KUGCPIND = KG0CW04.KG0CWPYA[KG0CWCNT];
  ;
  if (KG0CW04.KG0CWPEA[KG0CWCNT] == 0)
    KUGREC.KUGCPEDT = 0;
  else
    KG0CW01.KG0CWADT = KG0CW04.KG0CWPEA[KG0CWCNT];
    KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
    KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
    KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
      if (KG0CW01.KG0CWBYY > 60)
        KG0CW01.KG0CWBCC = 19;
      else
        KG0CW01.KG0CWBCC = 20;
      end
    else
      KG0CW01.KG0CWBCC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KUGREC.KUGCPEDT = KG0CW01.KG0CWBDT;
  end
  ;
  KUGREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUGREC.ZZZCHGCT = 0;
  ;
  call "IO5110" ("A ", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C810";
      TA1REC.TA1LOC = "ADD NEW VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUGREC.KUCCOID;
      KG0CW01.KG0CWSID = KUGREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C810

// WRITE ADD AUDIT TRAIL
Function KG0C815()
   /* *****************************************/
   /* * KG0C815 - WRITE ADD AUDIT TRAIL      **/
   /* *****************************************/
  ;
  KUZREC.KUZTYPE = "A";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VCUREP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUGREC.KUCCOID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUGREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUGREC.KUGGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C815  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUREP01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C815";
    TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  end
end // end KG0C815

// DELETE SALES REPS
Function KG0C820()
   /* *******************************************/
   /* * KG0C820 - DELETE SALES REP             **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
   /* move before image for delete*/
  ;
  KUGREC.KUGGRP = KG0CW04.KG0CWBFR[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWEDB[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGRPEDT = KG0CW01.KG0CWBDT;
  ;
  if (KG0CW04.KG0CWTDB[KG0CWCNT] < 999999)
    KG0CW01.KG0CWADT = KG0CW04.KG0CWTDB[KG0CWCNT];
    KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
    KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
    KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
      if (KG0CW01.KG0CWBYY > 60)
        KG0CW01.KG0CWBCC = 19;
      else
        KG0CW01.KG0CWBCC = 20;
      end
    else
      KG0CW01.KG0CWBCC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KUGREC.KUGRPTDT = KG0CW01.KG0CWBDT;
  else
    KUGREC.KUGRPTDT = 999999999;
  end
  ;
  call "IO5110" ("D ", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C820";
      TA1REC.TA1LOC = "DELETE VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUGREC.KUCCOID;
      KG0CW01.KG0CWSID = KUGREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
   /* GET KG0C870*/
   /* *******************************************/
   /* * KG0C870 - UPDATE REP DATABASES         **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUGREC.KUGGRP = KG0CW04.KG0CWAFT[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWEDA[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGRPEDT = KG0CW01.KG0CWBDT;
  ;
  if (KG0CW04.KG0CWTDA[KG0CWCNT] < 999999)
    KG0CW01.KG0CWADT = KG0CW04.KG0CWTDA[KG0CWCNT];
    KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
    KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
    KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
      if (KG0CW01.KG0CWBYY > 60)
        KG0CW01.KG0CWBCC = 19;
      else
        KG0CW01.KG0CWBCC = 20;
      end
    else
      KG0CW01.KG0CWBCC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KUGREC.KUGRPTDT = KG0CW01.KG0CWBDT;
  else
    KUGREC.KUGRPTDT = 999999999;
  end
  ;
  KUGREC.KUGCPIND = KG0CW04.KG0CWPYA[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWPEA[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGCPEDT = KG0CW01.KG0CWBDT;
  ;
  KUGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO5110" ("U ", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C870";
      TA1REC.TA1LOC = "UPDATE VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C820

// WRITE DELETE AUDIT TRAIL
Function KG0C825()
   /* *****************************************/
   /* * KG0C825 - WRITE DELETE AUDIT TRAIL   **/
   /* *****************************************/
  ;
  KUZREC.KUZTYPE = "D";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VCUREP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUGREC.KUCCOID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KG0CW04.KG0CWBFR[KG0CWCNT];
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C825  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUREP01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C825";
    TA1REC.TA1LOC = "DELETE VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  end
end // end KG0C825

// WRITE CHANGE AUDIT TRAIL
Function KG0C865()
   /* *******************************************/
   /* * KG0C865 - WRITE CHANGE AUDIT TRAIL     **/
   /* *******************************************/
  ;
  KUZREC.KUZTYPE = "G";
  KUZREC.KUZBFCD = "A";
  KUZREC.XXXTBLNM = "VCUREP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUGREC.KUCCOID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUGREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUGREC.KUGGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C865  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUREP01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C865";
    TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  else
    ;
    KUZREC.KUZBFCD = "B"; /* write "before" image*/
    KUZREC.KUZDATA = KG0CW04.KG0CWBFR[KG0CWCNT];
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C865";
      TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUAUD01";
      KG0CW01.KG0CWCID = KUZREC.KUCCOID;
      KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      set KUWREC empty;
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      KUWREC.KUMSTRID = KUZREC.KUMSTRID;
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    end
  end
end // end KG0C865

// UPDATE SALES REPS
Function KG0C870()
   /* *******************************************/
   /* * KG0C870 - UPDATE REP DATABASES         **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUGREC.KUGGRP = KG0CW04.KG0CWAFT[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWEDA[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGRPEDT = KG0CW01.KG0CWBDT;
  ;
  if (KG0CW04.KG0CWTDA[KG0CWCNT] < 999999)
    KG0CW01.KG0CWADT = KG0CW04.KG0CWTDA[KG0CWCNT];
    KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
    KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
    KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
      if (KG0CW01.KG0CWBYY > 60)
        KG0CW01.KG0CWBCC = 19;
      else
        KG0CW01.KG0CWBCC = 20;
      end
    else
      KG0CW01.KG0CWBCC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KUGREC.KUGRPTDT = KG0CW01.KG0CWBDT;
  else
    KUGREC.KUGRPTDT = 999999999;
  end
  ;
  KUGREC.KUGCPIND = KG0CW04.KG0CWPYA[KG0CWCNT];
  ;
  KG0CW01.KG0CWADT = KG0CW04.KG0CWPEA[KG0CWCNT];
  KG0CW01.KG0CWBMM = KG0CW01.KG0CWAMM;
  KG0CW01.KG0CWBDD = KG0CW01.KG0CWADY;
  KG0CW01.KG0CWBYY = KG0CW01.KG0CWAYY;
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KG0CW01.KG0CWBCC;*/
  /*  */
  /* -----------------------  Y2K OUT END  --------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KG0CW01.KG0CWADT > 0) /* insure that MMDDYY value > zero*/
    if (KG0CW01.KG0CWBYY > 60)
      KG0CW01.KG0CWBCC = 19;
    else
      KG0CW01.KG0CWBCC = 20;
    end
  else
    KG0CW01.KG0CWBCC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
  ;
  KUGREC.KUGCPEDT = KG0CW01.KG0CWBDT;
  ;
  KUGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  KG0C872(); /* io mod for update*/
end // end KG0C870

// I/O FOR UPDATING REPS
Function KG0C872()
   /* *******************************************/
   /* * KG0C872 - I/O FOR UPDATING REPS        **/
   /* *******************************************/
  ;
  call "IO5110" ("U ", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C870";
      TA1REC.TA1LOC = "UPDATE VCUREP01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      KG0CW01.KG0CWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C872

// WRITE CHANGE AUDIT TRAIL
Function KG0C875()
   /* *******************************************/
   /* * KG0C875 - WRITE CHANGE AUDIT TRAIL     **/
   /* *******************************************/
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "A";
  KUZREC.XXXTBLNM = "VCUREP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUGREC.KUCCOID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUGREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUGREC.KUGGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C875  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUREP01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C875";
    TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  else
    ;
    KUZREC.KUZBFCD = "B"; /* write "before" image*/
    KUZREC.KUZDATA = KG0CW04.KG0CWBFR[KG0CWCNT];
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C875";
      TA1REC.TA1LOC = "WRITE ADD VCUAUD01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUAUD01";
      KG0CW01.KG0CWCID = KUZREC.KUCCOID;
      KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      set KUWREC empty;
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      KUWREC.KUMSTRID = KUZREC.KUMSTRID;
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    end
  end
end // end KG0C875

// ADD COMMENT
Function KG0C950()
   /* *******************************************/
   /* * KG0C950 - ADD COMMENT                  **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUEREC.KUECMTID = KUCREC.KUCCOID;
  KUEREC.KUECTYP = "C";
  KUEREC.XNDCD = "COMM";
  KUEREC.KUECSEQ = 1;
  ;
  KUEREC.KUECOMNT = KG0CM100.KUECOMNT;
  ;
  KUEREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUEREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUEREC.ZZZCHGCT = 0;
  ;
  call "IO0250" ("A ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C950";
      TA1REC.TA1LOC = "ADD NEW VCOMNT01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      KG0CW01.KG0CWCID = KUEREC.KUECMTID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C950

// WRITE ADD COMMENT AUDIT
Function KG0C955()
   /* ********************************************/
   /* * KG0C955 - WRITE ADD COMMENT AUDIT TRAIL **/
   /* ********************************************/
  ;
  KUZREC.KUZTYPE = "A";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUEREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUEREC.KUEGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C955  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C955";
    TA1REC.TA1LOC = "ADD COMMENT VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  end
end // end KG0C955

// CHECK IF COMPANY NEEDS UPDATE
Function KG0C960()
   /* *********************************************/
   /* * KG0C960 - TEST IF COMPANY NEEDS UPDATING **/
   /* *********************************************/
  ;
  if (KG0CW01.KG0CWCCT == 0)
    if (KUCREC.KUCCOMNT == "N")
       /* next sentence*/
    else
      KUCREC.KUCCOMNT = "N";
      KG0C965(); /* update company*/
    end
  else
    if (KUCREC.KUCCOMNT == "Y")
       /* next sentence*/
    else
      KUCREC.KUCCOMNT = "Y";
      KG0C965(); /* update company*/
      KG0C965(); /* write audit*/
    end
  end
end // end KG0C960

// UPDATE COMPANY
Function KG0C965()
   /* *******************************************/
   /* * KG0C965 - UPDATE COMPANY               **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C960";
      TA1REC.TA1LOC = "UPDATE VCMPNY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KG0CW01.KG0CWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C965

// DELETE COMMENT
Function KG0C970()
   /* *******************************************/
   /* * KG0C970 - DELETE COMMENT               **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUEREC.KUECMTID = KUCREC.KUCCOID;
  KUEREC.KUECTYP = "C";
  KUEREC.XNDCD = "COMM";
  KUEREC.KUECSEQ = 1;
  ;
  ;
  call "IO0250" ("D ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C970";
      TA1REC.TA1LOC = "DELETE VCOMNT01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      KG0CW01.KG0CWCID = KUEREC.KUECMTID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C970

// WRITE DELETE COMMENT AUDIT
Function KG0C975()
   /* ***********************************************/
   /* * KG0C975 - WRITE DELETE COMMENT AUDIT TRAIL **/
   /* ***********************************************/
  ;
  KUZREC.KUZTYPE = "D";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUEREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUEREC.KUEGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C975  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C975";
    TA1REC.TA1LOC = "DELETE COMMENT VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  end
end // end KG0C975

// UPDATE COMMENT
Function KG0C980()
   /* *******************************************/
   /* * KG0C980 - UPDATE COMMENT               **/
   /* *******************************************/
  ;
  XX0XS01(); /* system date & time*/
  ;
  KUEREC.KUECMTID = KUCREC.KUCCOID;
  KUEREC.KUECTYP = "C";
  KUEREC.XNDCD = "COMM";
  KUEREC.KUECSEQ = 1;
  ;
  KUEREC.KUECOMNT = KG0CM100.KUECOMNT;
  ;
  KUEREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUEREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO0250" ("U ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C980";
      TA1REC.TA1LOC = "UPDATE VCOMNT01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      KG0CW01.KG0CWCID = KUEREC.KUECMTID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
end // end KG0C980

// WRITE UPDATE COMMENT AUDIT
Function KG0C985()
   /* ***********************************************/
   /* * KG0C985 - WRITE UPDATE COMMENT AUDIT TRAIL **/
   /* ***********************************************/
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "A";
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.KUMSTRID = KUGREC.KUMSTRID;
  KUZREC.XNXCD = KUGREC.XNXCD;
  KUZREC.XGPCD = " ";
  KUZREC.ZZZSDT = KUEREC.ZZZCHGDT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZLEN = 69;
  KUZREC.KUZDATA = KUEREC.KUEGRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0C   ";
    TA1REC.TA1LOCAT[1] = "KG0C985  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KG0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0C985";
    TA1REC.TA1LOC = "UPDATE COMMENT VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KG0CW01.KG0CWCID = KUZREC.KUCCOID;
    KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
    TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
    set KUWREC empty;
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
  else
    KUZREC.KUZBFCD = "B";
    KUZREC.KUZDATA = KG0CW01.KG0CWCBF;
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0C985";
      TA1REC.TA1LOC = "UPDATE COMMENT VCUAUD01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUAUD01";
      KG0CW01.KG0CWCID = KUZREC.KUCCOID;
      KG0CW01.KG0CWSID = KUZREC.KUMSTRID;
      TA1REC.TA1TBLKE = KG0CW01.KG0CWKEY;
      set KUWREC empty;
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      KUWREC.KUMSTRID = KUZREC.KUMSTRID;
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    end
  end
end // end KG0C985

// CONVERSE YSBTBL POP UP WINDOW
Function XPYSB00()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, return*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen lines*/
      set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible;
      XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
    end
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = "  RESPONSIBILITY CODES AND DESCRIPTIONS ";
    XX0XM001.XX0XMTR1 = "          PRESS ENTER TO RETURN       ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSBTBL.YSBCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSBTBL.YSBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSBTBL.YSBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSBTBL.YSBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSBTBL.YSBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSBTBL.YSBCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPYSB00

//*** RECORD=KG0CW01 ****
// working storage for rep maintenance screen
// ------------------------------------------------------------
//                     European Cloning
// ------------------------------------------------------------
// 17-august-1993       dlegg        DB changes. Increase size
//                                   of KG0CWCBF to hold
//                                   changed KUEREC.
// * Y2KFIX   11/17/97  DKENNY  Y2K MODIFICATIONS MADE TO ADD
// *                            NEW FIELDS FOR DATE COMPARISONS
// *                            TO BOTTOM OF RECORD.
// ***********************
Record KG0CW01 type basicRecord
  10 KG0CWUSR KG0CWUSR ; 
    15 KG0CWCNO KG0CWCNO ; 
      20 KG0CWCNO-CHAR KG0CWCNO-CHAR ; 
    15 KG0CWSTR KG0CWSTR ; 
      20 KG0CWSTR-CHAR KG0CWSTR-CHAR ; 
    15 KG0CWXNX KG0CWXNX ; 
      20 KG0CWXNX-CHAR KG0CWXNX-CHAR ; 
    15 KG0CWGPC KG0CWGPC ; 
    15 KG0CWFIL KG0CWFIL ; 
  10 KG0CWKEY KG0CWKEY ; 
    15 KG0CWCID KG0CWCID ; 
    15 KG0CWSID KG0CWSID ; 
    15 * num(17) ; 
  10 KG0CWNAM KG0CWNAM ; 
    15 KG0CWFST KG0CWFST ; 
    15 * char(1) ; 
    15 KG0CWLST KG0CWLST ; 
  10 KG0CWHDT KG0CWHDT ; 
  10 KG0CWNDT KG0CWNDT ; 
  10 KG0CWBDT KG0CWBDT ; 
    15 KG0CWBCC KG0CWBCC ; 
    15 KG0CWBYY KG0CWBYY ; 
    15 KG0CWBMM KG0CWBMM ; 
    15 KG0CWBDD KG0CWBDD ; 
  10 KG0CWADT KG0CWADT ; 
    15 KG0CWAMM KG0CWAMM ; 
    15 KG0CWADY KG0CWADY ; 
    15 KG0CWAYY KG0CWAYY ; 
  10 KG0CWDAT KG0CWDAT ; 
    15 KG0CWMM3 KG0CWMM3 ; 
    15 KG0CWDD3 KG0CWDD3 ; 
    15 KG0CWYY3 KG0CWYY3 ; 
  10 KG0CWDDT KG0CWDDT ; 
    15 KG0CWDMM KG0CWDMM ; 
    15 KG0CWDDD KG0CWDDD ; 
    15 KG0CWDYY KG0CWDYY ; 
  10 KG0CMDTE KG0CMDTE ; 
    15 KG0CMDYY KG0CMDYY ; 
    15 KG0CMDMM KG0CMDMM ; 
    15 KG0CMDDD KG0CMDDD ; 
  10 KG0CMEDT KG0CMEDT ; 
    15 KG0CWEYY KG0CWEYY ; 
    15 KG0CWEMM KG0CWEMM ; 
    15 KG0CWEDD KG0CWEDD ; 
  10 KG0CMTDT KG0CMTDT ; 
    15 KG0CWTYY KG0CWTYY ; 
    15 KG0CWTMM KG0CWTMM ; 
    15 KG0CWTDD KG0CWTDD ; 
  10 KG0CWYSB KG0CWYSB ; 
  10 YSBCD YSBCD ; 
  10 KG0CWIND KG0CWIND ; 
  10 KG0CWCDT KG0CWCDT ; 
  10 KG0CWCHG KG0CWCHG ; 
  10 KG0CWCPO KG0CWCPO ; 
  10 KG0CWNAC KG0CWNAC ; 
  10 KG0CWERR KG0CWERR ; 
  10 KG0CWEND KG0CWEND ; 
  10 KG0CW1ST KG0CW1ST ; 
  10 KG0CWEFL KG0CWEFL ; 
  10 KG0CWACF KG0CWACF ; 
  10 KG0CWFLG KG0CWFLG ; 
  10 KG0CWADR KG0CWADR ; 
  10 KG0CWADH KG0CWADH ; 
  10 KG0CWBLF KG0CWBLF ; 
  10 KG0CWNEW KG0CWNEW ; 
  10 KG0CWACT KG0CWACT ; 
  10 KG0CW1AC KG0CW1AC ; 
  10 KG0CWPND KG0CWPND ; 
  10 KG0CWSFL KG0CWSFL ; 
  10 KG0CWCMT KG0CWCMT ; 
  10 KG0CWCCT KG0CWCCT ; 
  10 KG0CWCBF KG0CWCBF ; 
    15 * char(11) ; 
    15 KUECOMNT KUECOMNT ; 
    15 * char(16) ; 
  10 KG0CWAFL KG0CWAFL ; 
  10 KG0CWMOD KG0CWMOD ; 
  10 XATCD XATCD ; 
  10 XNXCD XNXCD ; 
  10 KG0CWCNT KG0CWCNT ; 
  10 KG0CWCCC KG0CWCCC ; 
  10 KG0CWWWW KG0CWWWW ; 
  10 KG0CWMSG KG0CWMSG ; 
  10 KG0CWSEN KG0CWSEN ; 
  10 KG0CWDEN KG0CWDEN ; 
  10 KG0CWSFN KG0CWSFN ; 
  10 KG0CWDFN KG0CWDFN ; 
  10 KG0CWRFN KG0CWRFN ; 
  10 KG0CWSCT KG0CWSCT ; 
  10 KG0CWDCT KG0CWDCT ; 
  10 KG0CWSRT KG0CWSRT ; 
  10 KG0CWDRT KG0CWDRT ; 
  10 KG0CWRRT KG0CWRRT ; 
  10 KG0CWST1 KG0CWST1 ; 
  10 KG0CWSIN KG0CWSIN ; 
  10 KG0CWDIN KG0CWDIN ; 
  10 KG0CWSIX KG0CWSIX ; 
  10 KG0CWDIX KG0CWDIX ; 
  10 KG0CWRPT KG0CWRPT ; 
  10 KG0CWSMR KG0CWSMR ; 
  10 KG0CWDMR KG0CWDMR ; 
  10 KG0CWRMX KG0CWRMX ; 
  10 KG0CWREN KG0CWREN ; 
  10 KG0CWRCT KG0CWRCT ; 
  10 KG0CWARC KG0CWARC ; 
  10 KG0CWRIN KG0CWRIN ; 
  10 KG0CWRIX KG0CWRIX ; 
  10 KG0CWXXX KG0CWXXX ; 
  10 KG0CWRMR KG0CWRMR ; 
  10 KG0CWREX KG0CWREX ; 
  10 KG0CWSRP KG0CWSRP ; 
  10 KG0CWRPL KG0CWRPL ; 
  10 KG0CWENT KG0CWENT ; 
  10 KG0CWTPG KG0CWTPG ; 
  10 KG0CWPPG KG0CWPPG ; 
  10 KG0CWREM KG0CWREM ; 
  10 KG0CWPCT KG0CWPCT ; 
  10 KG0CWBFR KG0CWBFR ; 
  10 KG0CMEDT-CCYYMMDD KG0CMEDT-CCYYMMDD ; 
    15 KG0CWECC KG0CWECC ; 
    15 KG0CWEDT-YYMMDD KG0CWEDT-YYMMDD ; 
  10 KG0CMTDT-CCYYMMDD KG0CMTDT-CCYYMMDD ; 
    15 KG0CWTCC KG0CWTCC ; 
    15 KG0CWTDT-YYMMDD KG0CWTDT-YYMMDD ; 
  10 KG0CMRDT-CCYYMMDD KG0CMRDT-CCYYMMDD ; 
    15 KG0CWRCC KG0CWRCC ; 
    15 KG0CWRDT-YYMMDD KG0CWRDT-YYMMDD ; 
end // end KG0CW01

//*** RECORD=KG0CW02 ****
// working storage record for parm to ta0050 (temp storage)
// ***********************
Record KG0CW02 type basicRecord
  10 KG0CW2AP KG0CW2AP ; 
  10 KG0CW2CT KG0CW2CT ; 
  10 KG0CW2FC KG0CW2FC ; 
  10 KG0CW2RC KG0CW2RC ; 
end // end KG0CW02

//*** RECORD=KG0CW03 ****
// working storage rec for the temp storage for stores
// ***********************
Record KG0CW03 type basicRecord
  10 KG0CW3LG KG0CW3LG ; 
  10 KUMSTRID KUMSTRID ; 
  10 KUMSTRNM KUMSTRNM ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZSDT ZZZSDT ; 
end // end KG0CW03

//*** RECORD=KG0CW04 ****
// WORKING STORAGE REC FOR LOADING REP TEMPORARY STORAGE RECS
// ;
// ***********************
Record KG0CW04 type basicRecord
  10 KG0CW4LG KG0CW4LG ; 
  10 KG0CWUPD KG0CWUPD [10] ; 
  10 KG0CWRRE KG0CWRRE [10] ; 
  10 KG0CWRST KG0CWRST [10] ; 
  10 KG0CWED1 KG0CWED1 [10] ; 
  10 YSBCD YSBCD [10] ; 
  10 YSBABRV YSBABRV [10] ; 
  10 SM4REPID SM4REPID [10] ; 
  10 KG0CWNAM KG0CWNAM [10] ; 
  10 SM1AGYID SM1AGYID [10] ; 
  10 KG0CWEDT KG0CWEDT [10] ; 
  10 KG0CWTDT KG0CWTDT [10] ; 
  10 KG0CWIND KG0CWIND [10] ; 
  10 KG0CWCDT KG0CWCDT [10] ; 
  10 KG0CWZDT KG0CWZDT [10] ; 
  10 KG0CWPRV KG0CWPRV [10] ; 
  10 KG0CWPRP KG0CWPRP [10] ; 
  10 KG0CWPAG KG0CWPAG [10] ; 
  10 KG0CWPEF KG0CWPEF [10] ; 
  10 KG0CWBFR KG0CWBFR [10] ; 
    15 KG0CWCOB KG0CWCOB ; 
    15 KG0CWSTB KG0CWSTB ; 
    15 KG0CWDPB KG0CWDPB ; 
    15 KG0CWYSB KG0CWYSB ; 
    15 KG0CWRPB KG0CWRPB ; 
    15 KG0CWAGB KG0CWAGB ; 
    15 KG0CWEDB KG0CWEDB ; 
    15 KG0CWTDB KG0CWTDB ; 
    15 KG0CWPYB KG0CWPYB ; 
    15 KG0CWPEB KG0CWPEB ; 
    15 KG0CWSDB KG0CWSDB ; 
    15 KG0CWCDB KG0CWCDB ; 
    15 KG0CWHHB KG0CWHHB ; 
    15 KG0CWCNB KG0CWCNB ; 
  10 KG0CWAFT KG0CWAFT [10] ; 
    15 KG0CWCOA KG0CWCOA ; 
    15 KG0CWSTA KG0CWSTA ; 
    15 KG0CWDPA KG0CWDPA ; 
    15 KG0CWYSA KG0CWYSA ; 
    15 KG0CWRPA KG0CWRPA ; 
    15 KG0CWAGA KG0CWAGA ; 
    15 KG0CWEDA KG0CWEDA ; 
    15 KG0CWTDA KG0CWTDA ; 
    15 KG0CWPYA KG0CWPYA ; 
    15 KG0CWPEA KG0CWPEA ; 
    15 KG0CWSDA KG0CWSDA ; 
    15 KG0CWCDA KG0CWCDA ; 
    15 KG0CWHHA KG0CWHHA ; 
    15 KG0CWCNA KG0CWCNA ; 
end // end KG0CW04

//*** RECORD=KG0CW05 ****
// working storage rec for the temp storage for stores/depts
// ***********************
Record KG0CW05 type basicRecord
  10 KG0CW5LG KG0CW5LG ; 
  10 XNXCD XNXCD ; 
  10 KUJSLFNM KUJSLFNM ; 
  10 XXXSTAT XXXSTAT ; 
end // end KG0CW05

// day
DataItem KG0CMDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KG0CMDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0CMDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, dateFormat = "MM/dd/yy", inputRequired = no
}
end

// year
DataItem KG0CMDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare area for eff date
DataItem KG0CMEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// effective date CCYYMMDD
DataItem KG0CMEDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repl date CCYYMMDD
DataItem KG0CMRDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare area for term date
DataItem KG0CMTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// term date CCYYMMDD
DataItem KG0CMTDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// one active rep for store
DataItem KG0CW1AC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time edit for ysb
DataItem KG0CW1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application
DataItem KG0CW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KG0CW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KG0CW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KG0CW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RECORD LENGTH
DataItem KG0CW3LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record length
DataItem KG0CW4LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record length
DataItem KG0CW5LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// active reps flag
DataItem KG0CWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// active rep found
DataItem KG0CWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rep history add requested
DataItem KG0CWADH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rep add function requested
DataItem KG0CWADR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dates
DataItem KG0CWADT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0CWADY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// address process flag
DataItem KG0CWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST REP FIELDS (AFTER IMAGE)
DataItem KG0CWAFT char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SALES AGENCY ID
DataItem KG0CWAGA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SALES AGENCY ID
DataItem KG0CWAGB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KG0CWAMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// active reps count
DataItem KG0CWARC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KG0CWAYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem KG0CWBCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KG0CWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dates
DataItem KG0CWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CUST REP FIELDS (BEFORE IMAGE)
DataItem KG0CWBFR char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank line in temp stg found
DataItem KG0CWBLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KG0CWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KG0CWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// before comment image
DataItem KG0CWCBF char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KG0CWCCC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of comments
DataItem KG0CWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zz_chng_dt
DataItem KG0CWCDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_dt
DataItem KG0CWCDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save as default when add reps
DataItem KG0CWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// changes were made flag
DataItem KG0CWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company number
DataItem KG0CWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment found flag
DataItem KG0CWCMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_cnt
DataItem KG0CWCNA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_cnt
DataItem KG0CWCNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// company number
DataItem KG0CWCNO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company number
DataItem KG0CWCNO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KG0CWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KG0CWCOA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KG0CWCOB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cursor positioning
DataItem KG0CWCPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem KG0CWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dept count
DataItem KG0CWDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KG0CWDD3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KG0CWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dates
DataItem KG0CWDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of depts flag
DataItem KG0CWDEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept found flag
DataItem KG0CWDFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept index
DataItem KG0CWDIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last store index
DataItem KG0CWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KG0CWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max # dept/temp storage
DataItem KG0CWDMR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dept id
DataItem KG0CWDPA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KG0CWDPB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total nbr of dept temp recs
DataItem KG0CWDRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KG0CWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// effective date CC
DataItem KG0CWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record edited
DataItem KG0CWED1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_srep_edt (mmddyy)
DataItem KG0CWEDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cu_srep_edt (mmddyy)
DataItem KG0CWEDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KG0CWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_SREP_EDT (mmddyy)
DataItem KG0CWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// effective date YYMMDD
DataItem KG0CWEDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection error flag
DataItem KG0CWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KG0CWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of process
DataItem KG0CWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'enter' pressed flag
DataItem KG0CWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error
DataItem KG0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KG0CWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pass from ka0d
DataItem KG0CWFIL char(106)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KG0CWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep first name
DataItem KG0CWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KG0CWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold date area
DataItem KG0CWHDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zz_chng_hhmm
DataItem KG0CWHHA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_hhmm
DataItem KG0CWHHB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save as default when add reps
DataItem KG0CWIND char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// key for abending
DataItem KG0CWKEY char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep last name
DataItem KG0CWLST char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KG0CWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mode switch
DataItem KG0CWMOD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KG0CWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inactive rep found
DataItem KG0CWNAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KG0CWNAM char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// effect date minus1
DataItem KG0CWNDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new store reps must be added
DataItem KG0CWNEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous sales agency
DataItem KG0CWPAG char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// page counter
DataItem KG0CWPCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_comm_pay_edt(mmddyy)
DataItem KG0CWPEA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cu_comm_pay_edt(mmddyy)
DataItem KG0CWPEB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// previous effective date
DataItem KG0CWPEF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// updates pending flag
DataItem KG0CWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous page
DataItem KG0CWPPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous sales rep
DataItem KG0CWPRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// previous rep key
DataItem KG0CWPRV char(10)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// cu_comm_pay_ind
DataItem KG0CWPYA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_COMM_PAY_IND
DataItem KG0CWPYB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// repl date CC
DataItem KG0CWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// loop thru ws & screen
DataItem KG0CWRCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repl date YYMMDD
DataItem KG0CWRDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// remainder
DataItem KG0CWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of rep flag
DataItem KG0CWREN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rep index
DataItem KG0CWREX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rep found flag
DataItem KG0CWRFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// looping thru
DataItem KG0CWRIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last rep on screen
DataItem KG0CWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max # reps in ws
DataItem KG0CWRMR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max # REP/temp storage
DataItem KG0CWRMX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep id
DataItem KG0CWRPA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sales rep id
DataItem KG0CWRPB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// holder of replace count
DataItem KG0CWRPL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reps per temp strg record
DataItem KG0CWRPT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updated by replace
DataItem KG0CWRRE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total nbr of rep temp recs
DataItem KG0CWRRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record status
DataItem KG0CWRST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store count
DataItem KG0CWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up date
DataItem KG0CWSDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// set up date
DataItem KG0CWSDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of stores flag
DataItem KG0CWSEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store flag
DataItem KG0CWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store found flag
DataItem KG0CWSFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store number
DataItem KG0CWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store index
DataItem KG0CWSIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last store index
DataItem KG0CWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max # store/temp storage
DataItem KG0CWSMR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save rep index
DataItem KG0CWSRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total nbr of store temp recs
DataItem KG0CWSRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save 1rst store
DataItem KG0CWST1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id
DataItem KG0CWSTA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KG0CWSTB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// store number
DataItem KG0CWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store number
DataItem KG0CWSTR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// term date CC
DataItem KG0CWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_srep_tdt (mmddyy)
DataItem KG0CWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cu_srep_tdt (mmddyy)
DataItem KG0CWTDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KG0CWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_SREP_TDT (mmddyy)
DataItem KG0CWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// term date YYMMDD
DataItem KG0CWTDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem KG0CWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of pages
DataItem KG0CWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KG0CWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update status
DataItem KG0CWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea passed
DataItem KG0CWUSR char(123)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KG0CWWWW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dept number
DataItem KG0CWXNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dept number
DataItem KG0CWXNX-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rep on screen
DataItem KG0CWXXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales resp code
DataItem KG0CWYSA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales resp code
DataItem KG0CWYSB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KG0CWYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// kug change date
DataItem KG0CWZDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

