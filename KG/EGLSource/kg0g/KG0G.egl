package kg0g;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXLC01;
import corpcom3.XPXNX01;
import corpcom3.XPXQA01;
import corpcom3.XPXSP01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XLCTBL;
import corpx1.XNXTBL;
import corpx1.XQATBL;
import corpx1.XSPTBL;
import corpx2.XNXABRV;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUJCRIND;
import ku.common.KUJGRP;
import ku.common.KUJREC;
import ku.common.KUJSLFID;
import ku.common.KUJSLFNM;
import ku.common.KUJXLCND;
import ku.common.KUJXQAND;
import ku.common.KUJXSPND;
import ku.common.KUZREC;
import ta.common.TA1REC;
//*** PROGRAM=KG0G ****
// ;
// inqurire/maintenance for customer buying restrictions
// ;
// ;
// Maintenance Log:
// 05/06/91 - dsalzw - Created.
// 06/12/91 - dsalzw - fixed misc bugs
// 10/01/93 - CHELLM - CSP 4.1 Conversion.
// 04/10/94 - CHELLM - Added Nike Canada User Security.
// 11/19/97 - VRAMAC - Y2K MODIFICATIONS MADE TO:
//                     REGEN THE APPLICATION TO PICK UP NEW
//                     COPY OF XX0XS01
// *********************
Program KG0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KG0GW01 KG0GW01; // record
  KG0GW02 KG0GW02; // record
  KG0GW04 KG0GW04; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use KG0GM.KG0GM010, // form
  		KG0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KG0G000: KG0G000();
    goto KG0G100;
    KG0G100: KG0G100();
    goto KG0G100;
  end // end main
end // end KG0G

// initialization process
Function KG0G000()
   /* *********************************************/
   /* * KG0G000 - initialization process*/
   /* *********************************************/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set KG0GW01 empty; /* working storage 1*/
  set KG0GW02 empty; /* working storage 2*/
  set KG0GW04 empty; /* temporary storage definition*/
  set SQLCA empty;
  set KUCREC empty; /* company record*/
  set KUJREC empty; /* department record*/

  set KG0GM010 initial; /* company department screen*/

  KG0GW01.KG0GWERR = "N"; /* error flag*/
  KG0GW01.KG0GWSIZ = 949; /* size of temp storage*/
  KG0GW01.KG0GWMAX = 4; /* nbr of occurs + 1*/

   /* ****************************/
    /* check security*/
   /* ****************************/

  if (COMMAREA.CACHGFL == "Y")
    KG0GW01.KG0GWUPD = "Y"; /* update mode*/
    KG0GM010.KG0GMTTL = "UPDATE ";
    set KG0GM010.KG0GMTTL skip;
  else
    KG0GW01.KG0GWUPD = "N"; /* inquiry move*/
    KG0GM010.KG0GMTTL = "INQUIRY";
    set KG0GM010.KG0GMTTL skip;
  end


   /* ****************************/
    /* check fast path entry*/
   /* ****************************/

  KG0GW01.KG0GWUSR = COMMAREA.CAUSERA; /* key from menu*/
  if (COMMAREA.CAITEM != " ")
    KG0GW01.KG0GWUSR = COMMAREA.CAITEM; /* key from fastpath*/
    if (KG0GW01.KG0GWCO-CHAR is numeric)
      KG0GM010.KUCCOID = KG0GW01.KG0GWCO;
    else
      KG0GM010.KUCCOID = 0;
      KG0GW01.KG0GWCO = 0;
    end
  else
    KG0GM010.KUCCOID = 0; /* key from menu*/
    KG0GW01.KG0GWCO = 0; /* key from menu*/
  end


   /* ****************************/
    /* build first screen*/
   /* ****************************/

  if (KG0GM010.KUCCOID > 0 /* if a company is available*/
   || KG0GM010.KUCCOID > 0)
    KG0G200(); /* process restrictions*/
  end


end // end KG0G000

// restriction screen
Function KG0G100()
   /* *******************************************/
   /* * KG0G100 - converse restriction screen*/
   /* *******************************************/

  KG0GM010.KG0GMHDT = VGVar.currentShortGregorianDate;
  if (KG0GW01.KG0GWPND == "Y" /* updates pending*/
   && converseVar.validationMsgNum == 0) /* no other messages*/
    converseLib.validationFailed(277); /* "good edit - pf12 confirm" msg*/
    set KG0GM010.KUCCOID cursor;
  end

  converse KG0GM010 ;

  KG0GW01.KG0GWERR = "N";
  KG0GM010.VAGen_EZEMSG = " ";

  set KG0GM010.CATOAP initialAttributes;
  set KG0GM010.KG0GMPG1 initialAttributes;
  set KG0GM010.KUCCOID initialAttributes;

  KG0G350(); /* process screen data*/


end // end KG0G100

// format restriction screen
Function KG0G200()
   /* *********************************************************/
   /* * KG0G200 - Format Department screen*/
   /* *   Load company name using company id.*/
   /* *   Load temp storage with departments*/
   /* *********************************************************/

   /* *********************************************************/
   /* *  format company to screen*/
   /* *********************************************************/

  set KUCREC empty; /* clear out company record*/
  set KG0GM010.KUCCOID normal; /* set original attributes*/

  KUCREC.KUCCOID = KG0GM010.KUCCOID; /* set company key*/
  KG0G210(); /* read vcmpny01*/

  if (KG0GW01.KG0GWERR == "N")
    KG0GM010.KUCCONM = KUCREC.KUCCONM; /* company name*/
    KG0GM010.KUCCOANM = KUCREC.KUCCOANM; /* company alt name*/
    if (KUCREC.XXXSTAT == "I") /* company not inactive*/
         /* MOVE 'Y' TO kg0gW01.kg0gWERR;*/
         /* SET kg0gM010.KUCCOID CURSOR,BRIGHT;*/
         /* MOVE 71 TO EZEMNO    ; "inactive company" msg*/
    end
  end



  if (KG0GW01.KG0GWERR == "Y") /* company is bad*/
    return;
  end

   /* *********************************************************/
     /* format restriction information*/
   /* *********************************************************/

  KG0G220(); /* load all departments*/

  if (KG0GW01.KG0GWERR == "Y") /* error loading stores*/
    return;
  end

  KG0GW01.KG0GWPGC = 1; /* page counter*/
  KG0GM010.KG0GMPG1 = KG0GW01.KG0GWPGC;

  KG0GW01.KG0GWDIX = 1; /* start at the top*/
  KG0G300(); /* move restrictions to the screen*/


end // end KG0G200

// select company
Function KG0G210()
   /* *********************************/
   /* * KG0G210 - select company*/
   /* *********************************/

  set SQLCA empty;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0) /* company found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* company not found*/
      converseLib.validationFailed(25); /* company not found*/
      KG0GW01.KG0GWERR = "Y"; /* set error message.*/
      set KG0GM010.KUCCOID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2"; /* company select error*/
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0G210";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KG0GW01.KG0GWKC = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KG0GW01.KG0GWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KG0GW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KG0GW01.XATCD = " ";
    end
  else
    KG0GW01.XATCD = " ";
  end

   /* **********************************************/
   /* edit account type for allowance of user groups*/
   /* **********************************************/

  if (KG0GW01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0GW01.KG0GWUPD = "N"; /* update flag= n*/
    end
  else
    if (KG0GW01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KG0GW01.KG0GWUPD = "N"; /* updtae flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KG0GW01.KG0GWUPD = "N"; /* update flag = n*/
      end
    end
  end
                  /* Edit for Nike Canada User*/

  if (KUCREC.XLECD == "03") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0GW01.KG0GWUPD = "N"; /* update flag= n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KG0GW01.KG0GWUPD = "N"; /* update flag= n*/
    end
  end

end // end KG0G210

// load all restricts for company
Function KG0G220()
   /* **************************************************/
   /* * KG0G220 - load all restrictions for a company*/
   /* **************************************************/

  KG0G230(); /* purge temp work file*/
  if (KG0GW01.KG0GWERR == "Y") /* error in purge*/
    return;
  end

  set KUJREC empty;
  KUJREC.KUCCOID = KUCREC.KUCCOID;

  call "IO0290" ("SS", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* "ss" all departments*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0G210";
    TA1REC.TA1LOC = "SELECT SCAN VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KG0GW01.KG0GWKC = KUCREC.KUCCOID;
    KG0GW01.KG0GWKD = 0;
    TA1REC.TA1TBLKE = KG0GW01.KG0GWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KG0GW01.KG0GWEND = "N"; /* set end-dept flag to 'n'*/
  KG0GW01.KG0GWDIX = 0;

   /* loop/save depts by the screenfull*/
  while (KG0GW01.KG0GWEND == "N" /* not end of depts*/
   && KG0GW01.KG0GWERR == "N") /* no errors*/
    set KG0GW04 empty;
    KG0GW01.KG0GWCNT = 1;
    while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWMAX /* nbr of occurs*/
     && KG0GW01.KG0GWEND == "N"             /* not end of depts*/
     && KG0GW01.KG0GWERR == "N") /* no errors*/
      KG0G250(); /* select next depts*/
    end /* of while*/

    if (KG0GW01.KG0GWCNT > 1) /* you have records*/
      KG0G270(); /* write stores to temp storage*/
    end
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  KG0GW01.KG0GWPGT = KG0GW01.KG0GWDIX; /* total pg remains constant*/
  KG0GM010.KG0GMPG2 = KG0GW01.KG0GWDIX; /* total nbr of pages*/

end // end KG0G220

// purge temp storage
Function KG0G230()
   /* ***************************************/
   /* * KG0G230 - purge temp storage*/
   /* ***************************************/

  KG0GW02.KG0GW2CT = 0;
  KG0GW02.KG0GW2AP = "KW04";
  KG0GW02.KG0GW2RC = 0;
  KG0GW02.KG0GW2FC = "P"; /* purge temp work file*/

  set KG0GW04 empty;
  KG0GW04.KG0GW4LG = KG0GW01.KG0GWSIZ;

  call "TA0050" (KG0GW04, KG0GW02) {isNoRefresh = yes, isExternal = yes};

  if (KG0GW02.KG0GW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0GW01.KG0GWERR = "Y";
    converseLib.validationFailed(228);
  end


end // end KG0G230

// select next dept
Function KG0G250()
   /* *******************************************/
   /* * KG0G250 - select next department*/
   /* *******************************************/


  call "IO0290" ("SN", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KG0GW01.KG0GWFND = "Y";
    KG0G260(); /* move info to ws*/
    KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KG0GW01.KG0GWEND = "Y";
      KG0G265(); /* close dept cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KG0G165";
      TA1REC.TA1LOC = "FETCH NEXT VDEPT001";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      KG0GW01.KG0GWKC = KUCREC.KUCCOID;
      KG0GW01.KG0GWKD = KUJREC.XNXCD;
      TA1REC.TA1TBLKE = KG0GW01.KG0GWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end KG0G250

// move dept to ws
Function KG0G260()
   /* *******************************************/
   /* * KG0G260 - select next department*/
   /* *******************************************/

  KG0GW01.KG0GWXNU = KUJREC.XNXCD;
  KG0GW04.KG0GWXNX[KG0GWCNT] = KG0GW01.KG0GWXCH;

  if (KUJREC.XNXCD in XNXTBL.XNXCD)
    if (XNXTBL.XXXSTAT[sysVar.arrayIndex] == "I")
      KG0GW04.XNXABRV[KG0GWCNT] = "INACTIVE  ";
    else
      KG0GW04.XNXABRV[KG0GWCNT] = XNXTBL.XNXABRV[sysVar.arrayIndex];
    end
  else
    KG0GW04.XNXABRV[KG0GWCNT] = "NOT FOUND ";
  end

  KG0GW04.KUJSLFID[KG0GWCNT] = KUJREC.KUJSLFID;
  KG0GW04.KUJSLFNM[KG0GWCNT] = KUJREC.KUJSLFNM;
  KG0GW04.KUJCRIND[KG0GWCNT] = KUJREC.KUJCRIND;
  KG0GW04.XXXSTAT[KG0GWCNT] = KUJREC.XXXSTAT;
  KG0GW04.KUJXLCND[KG0GWCNT] = KUJREC.KUJXLCND;
  KG0GW04.KG0GWLC1[KG0GWCNT] = KUJREC.XLCCD[1];
  KG0GW04.KG0GWLC2[KG0GWCNT] = KUJREC.XLCCD[2];
  KG0GW04.KG0GWLC3[KG0GWCNT] = KUJREC.XLCCD[3];
  KG0GW04.KG0GWLC4[KG0GWCNT] = KUJREC.XLCCD[4];
  KG0GW04.KUJXSPND[KG0GWCNT] = KUJREC.KUJXSPND;
  KG0GW04.KG0GWSP1[KG0GWCNT] = KUJREC.XSPCD[1];
  KG0GW04.KG0GWSP2[KG0GWCNT] = KUJREC.XSPCD[2];
  KG0GW04.KG0GWSP3[KG0GWCNT] = KUJREC.XSPCD[3];
  KG0GW04.KG0GWSP4[KG0GWCNT] = KUJREC.XSPCD[4];
  KG0GW04.KUJXQAND[KG0GWCNT] = KUJREC.KUJXQAND;
  KG0GW04.KG0GWQA1[KG0GWCNT] = KUJREC.XQACD[1];
  KG0GW04.KG0GWQA2[KG0GWCNT] = KUJREC.XQACD[2];
  KG0GW04.KG0GWQA3[KG0GWCNT] = KUJREC.XQACD[3];
  KG0GW04.KG0GWQA4[KG0GWCNT] = KUJREC.XQACD[4];

  KG0GW04.KUJGRP[KG0GWCNT] = KUJREC.KUJGRP;


end // end KG0G260

// close dept cursor
Function KG0G265()
   /* *******************************************/
   /* * KG0G265 - close dept cursor*/
   /* *******************************************/


  call "IO0290" ("CS", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0G265";
    TA1REC.TA1LOC = "CLOSE CURSOR VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KG0GW01.KG0GWKC = KUCREC.KUCCOID;
    KG0GW01.KG0GWKD = KUJREC.XNXCD;
    TA1REC.TA1TBLKE = KG0GW01.KG0GWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KG0G265

// write retrictions to temp
Function KG0G270()
   /* ************************************************/
   /* * KG0G270 - write temporary storage*/
   /* ************************************************/


  if (KG0GW01.KG0GWFND == "Y") /* depts found*/
    set KG0GW02 empty;
    KG0GW02.KG0GW2RC = 0; /* return code*/
    KG0GW02.KG0GW2FC = "A";
    KG0GW02.KG0GW2AP = "KW04";
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWDIX + 1;
    KG0GW02.KG0GW2CT = KG0GW01.KG0GWDIX;
    KG0GW04.KG0GW4LG = KG0GW01.KG0GWSIZ;
    call "TA0050" (KG0GW04, KG0GW02) {isNoRefresh = yes, isExternal = yes};
    if (KG0GW02.KG0GW2RC != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      KG0GW01.KG0GWEND = "Y";
      KG0GW01.KG0GWERR = "Y";
      converseLib.validationFailed(228);
    end
  end


end // end KG0G270

// move restrictions to screen
Function KG0G300()
   /* ***********************************/
   /* * KG0G300 - move depts to screen*/
   /* ***********************************/

  KG0GW01.KG0GWCNT = 1; /* counter for screen*/

  KG0G310(); /* read store temp storage*/

  while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWMAX)
    if (KG0GW04.KG0GWXNX[KG0GWCNT] == " ")
      KG0GM010.KG0GMXNX[KG0GWCNT] = " ";
      KG0GM010.XNXABRV[KG0GWCNT] = " ";
      KG0GM010.KUJSLFID[KG0GWCNT] = " ";
      KG0GM010.KUJSLFNM[KG0GWCNT] = " ";
      KG0GM010.XXXSTAT[KG0GWCNT] = " ";
      KG0GM010.KUJXLCND[KG0GWCNT] = " ";
      KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
      KG0GM010.KG0GMLC1[KG0GWCNT] = " ";
      KG0GM010.KG0GMLC2[KG0GWCNT] = " ";
      KG0GM010.KG0GMLC3[KG0GWCNT] = " ";
      KG0GM010.KG0GMLC4[KG0GWCNT] = " ";
      KG0GM010.KG0GMLA1[KG0GWCNT] = " ";
      KG0GM010.KG0GMLA2[KG0GWCNT] = " ";
      KG0GM010.KG0GMLA3[KG0GWCNT] = " ";
      KG0GM010.KG0GMLA4[KG0GWCNT] = " ";
      KG0GM010.KUJXSPND[KG0GWCNT] = " ";
      KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
      KG0GM010.KG0GMSP1[KG0GWCNT] = " ";
      KG0GM010.KG0GMSP2[KG0GWCNT] = " ";
      KG0GM010.KG0GMSP3[KG0GWCNT] = " ";
      KG0GM010.KG0GMSP4[KG0GWCNT] = " ";
      KG0GM010.KG0GMSA1[KG0GWCNT] = " ";
      KG0GM010.KG0GMSA2[KG0GWCNT] = " ";
      KG0GM010.KG0GMSA3[KG0GWCNT] = " ";
      KG0GM010.KG0GMSA4[KG0GWCNT] = " ";
      KG0GM010.KUJXQAND[KG0GWCNT] = " ";
      KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
      KG0GM010.KG0GMQA1[KG0GWCNT] = " ";
      KG0GM010.KG0GMQA2[KG0GWCNT] = " ";
      KG0GM010.KG0GMQA3[KG0GWCNT] = " ";
      KG0GM010.KG0GMQA4[KG0GWCNT] = " ";
      KG0GM010.KG0GMQD1[KG0GWCNT] = " ";
      KG0GM010.KG0GMQD2[KG0GWCNT] = " ";
      KG0GM010.KG0GMQD3[KG0GWCNT] = " ";
      KG0GM010.KG0GMQD4[KG0GWCNT] = " ";

      if (converseVar.validationMsgNum == 0) /* no previous message*/
        converseLib.validationFailed(206); /* "end of data" msg*/
      end
    else
      KG0GM010.KG0GMXNX[KG0GWCNT] = KG0GW04.KG0GWXNX[KG0GWCNT];
      KG0GM010.XNXABRV[KG0GWCNT] = KG0GW04.XNXABRV[KG0GWCNT];
      KG0GM010.KUJSLFID[KG0GWCNT] = KG0GW04.KUJSLFID[KG0GWCNT];
      KG0GM010.KUJSLFNM[KG0GWCNT] = KG0GW04.KUJSLFNM[KG0GWCNT];
      KG0GM010.XXXSTAT[KG0GWCNT] = KG0GW04.XXXSTAT[KG0GWCNT];
      KG0GM010.KUJXLCND[KG0GWCNT] = KG0GW04.KUJXLCND[KG0GWCNT];
      KG0GM010.KG0GMLC1[KG0GWCNT] = KG0GW04.KG0GWLC1[KG0GWCNT];
      KG0GM010.KG0GMLC2[KG0GWCNT] = KG0GW04.KG0GWLC2[KG0GWCNT];
      KG0GM010.KG0GMLC3[KG0GWCNT] = KG0GW04.KG0GWLC3[KG0GWCNT];
      KG0GM010.KG0GMLC4[KG0GWCNT] = KG0GW04.KG0GWLC4[KG0GWCNT];
      KG0GM010.KUJXSPND[KG0GWCNT] = KG0GW04.KUJXSPND[KG0GWCNT];
      KG0GM010.KG0GMSP1[KG0GWCNT] = KG0GW04.KG0GWSP1[KG0GWCNT];
      KG0GM010.KG0GMSP2[KG0GWCNT] = KG0GW04.KG0GWSP2[KG0GWCNT];
      KG0GM010.KG0GMSP3[KG0GWCNT] = KG0GW04.KG0GWSP3[KG0GWCNT];
      KG0GM010.KG0GMSP4[KG0GWCNT] = KG0GW04.KG0GWSP4[KG0GWCNT];
      KG0GM010.KUJXQAND[KG0GWCNT] = KG0GW04.KUJXQAND[KG0GWCNT];
      KG0GM010.KG0GMQA1[KG0GWCNT] = KG0GW04.KG0GWQA1[KG0GWCNT];
      KG0GM010.KG0GMQA2[KG0GWCNT] = KG0GW04.KG0GWQA2[KG0GWCNT];
      KG0GM010.KG0GMQA3[KG0GWCNT] = KG0GW04.KG0GWQA3[KG0GWCNT];
      KG0GM010.KG0GMQA4[KG0GWCNT] = KG0GW04.KG0GWQA4[KG0GWCNT];
      KG0G320(); /* look up abrv*/

    end

    KG0G330(); /* set security*/

    KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
  end

  set KG0GM010.KUCCOID cursor;


end // end KG0G300

// read temp storage
Function KG0G310()
   /* ************************************/
   /* * KG0G310 - read temp storarge*/
   /* ************************************/

  KG0GW02.KG0GW2RC = 0;
  KG0GW02.KG0GW2CT = KG0GW01.KG0GWDIX;
  KG0GW02.KG0GW2FC = "R";
  KG0GW02.KG0GW2AP = "KW04";
  KG0GW04.KG0GW4LG = KG0GW01.KG0GWSIZ;
  call "TA0050" (KG0GW04, KG0GW02) {isNoRefresh = yes, isExternal = yes};

  if (KG0GW02.KG0GW2RC == 0)
    /* next sentence*/
  else
    if (KG0GW02.KG0GW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KG0GW01.KG0GWERR = "Y";
      KG0GW01.KG0GWEND = "Y";
    else
      if (KG0GW02.KG0GW2RC == 4)
        converseLib.validationFailed(206); /* no temp storage records*/
        KG0GW01.KG0GWERR = "Y";
        KG0GW01.KG0GWEND = "Y";
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(228);
        KG0GW01.KG0GWERR = "Y";
        KG0GW01.KG0GWEND = "Y";
      end
    end
  end


end // end KG0G310

// look up descriptions
Function KG0G320()
   /* *******************************************/
   /* * KG0G320 - look up descriptions*/
   /* *******************************************/


   /* ***** fill in buy descriptions*/
  if (KG0GW04.KUJXLCND[KG0GWCNT] == " "
   || KG0GW04.KUJXLCND[KG0GWCNT] == "N")
    KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
  else
    if (KG0GW04.KUJXLCND[KG0GWCNT] == "R")
      KG0GM010.KG0GMBLC[KG0GWCNT] = "RESTRICTED FROM";
    else
      if (KG0GW04.KUJXLCND[KG0GWCNT] == "A")
        KG0GM010.KG0GMBLC[KG0GWCNT] = "ALLOWED ONLY   ";
      else
        KG0GM010.KG0GMBLC[KG0GWCNT] = "NOT FOUND      ";
      end
    end
  end

  if (KG0GW04.KUJXSPND[KG0GWCNT] == " "
   || KG0GW04.KUJXSPND[KG0GWCNT] == "N")
    KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
  else
    if (KG0GW04.KUJXSPND[KG0GWCNT] == "R")
      KG0GM010.KG0GMBSP[KG0GWCNT] = "RESTRICTED FROM";
    else
      if (KG0GW04.KUJXSPND[KG0GWCNT] == "A")
        KG0GM010.KG0GMBSP[KG0GWCNT] = "ALLOWED ONLY   ";
      else
        KG0GM010.KG0GMBSP[KG0GWCNT] = "NOT FOUND      ";
      end
    end
  end

  if (KG0GW04.KUJXQAND[KG0GWCNT] == " "
   || KG0GW04.KUJXQAND[KG0GWCNT] == "N")
    KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
  else
    if (KG0GW04.KUJXQAND[KG0GWCNT] == "R")
      KG0GM010.KG0GMBQA[KG0GWCNT] = "RESTRICTED FROM";
    else
      if (KG0GW04.KUJXQAND[KG0GWCNT] == "A")
        KG0GM010.KG0GMBQA[KG0GWCNT] = "ALLOWED ONLY   ";
      else
        KG0GM010.KG0GMBQA[KG0GWCNT] = "NOT FOUND      ";
      end
    end
  end


   /* ***** load up life cycle descriptions*/
  if (KG0GW04.KG0GWLC1[KG0GWCNT] == " ")
    KG0GM010.KG0GMLA1[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWLC1[KG0GWCNT] in XLCTBL.XLCCD)
      KG0GM010.KG0GMLA1[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMLA1[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWLC2[KG0GWCNT] == " ")
    KG0GM010.KG0GMLA2[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWLC2[KG0GWCNT] in XLCTBL.XLCCD)
      KG0GM010.KG0GMLA2[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMLA2[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWLC3[KG0GWCNT] == " ")
    KG0GM010.KG0GMLA3[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWLC3[KG0GWCNT] in XLCTBL.XLCCD)
      KG0GM010.KG0GMLA3[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMLA3[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWLC4[KG0GWCNT] == " ")
    KG0GM010.KG0GMLA4[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWLC4[KG0GWCNT] in XLCTBL.XLCCD)
      KG0GM010.KG0GMLA4[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMLA4[KG0GWCNT] = "NOT FOUND ";
    end
  end


   /* ***** load up sport activity descriptions*/
  if (KG0GW04.KG0GWSP1[KG0GWCNT] == " ")
    KG0GM010.KG0GMSA1[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWSP1[KG0GWCNT] in XSPTBL.XSPCD)
      KG0GM010.KG0GMSA1[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMSA1[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWSP2[KG0GWCNT] == " ")
    KG0GM010.KG0GMSA2[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWSP2[KG0GWCNT] in XSPTBL.XSPCD)
      KG0GM010.KG0GMSA2[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMSA2[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWSP3[KG0GWCNT] == " ")
    KG0GM010.KG0GMSA3[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWSP3[KG0GWCNT] in XSPTBL.XSPCD)
      KG0GM010.KG0GMSA3[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMSA3[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWSP4[KG0GWCNT] == " ")
    KG0GM010.KG0GMSA4[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWSP4[KG0GWCNT] in XSPTBL.XSPCD)
      KG0GM010.KG0GMSA4[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMSA4[KG0GWCNT] = "NOT FOUND ";
    end
  end


   /* ***** load up quality descriptions*/
  if (KG0GW04.KG0GWQA1[KG0GWCNT] == " ")
    KG0GM010.KG0GMQD1[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWQA1[KG0GWCNT] in XQATBL.XQACD)
      KG0GM010.KG0GMQD1[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMQD1[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWQA2[KG0GWCNT] == " ")
    KG0GM010.KG0GMQD2[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWQA2[KG0GWCNT] in XQATBL.XQACD)
      KG0GM010.KG0GMQD2[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMQD2[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWQA3[KG0GWCNT] == " ")
    KG0GM010.KG0GMQD3[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWQA3[KG0GWCNT] in XQATBL.XQACD)
      KG0GM010.KG0GMQD3[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMQD3[KG0GWCNT] = "NOT FOUND ";
    end
  end
  if (KG0GW04.KG0GWQA4[KG0GWCNT] == " ")
    KG0GM010.KG0GMQD4[KG0GWCNT] = "          ";
  else
    if (KG0GW04.KG0GWQA4[KG0GWCNT] in XQATBL.XQACD)
      KG0GM010.KG0GMQD4[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      KG0GM010.KG0GMQD4[KG0GWCNT] = "NOT FOUND ";
    end
  end


end // end KG0G320

// set change security
Function KG0G330()
   /* **********************************/
   /* * KG0G330 - set change security*/
   /* **********************************/


  if (KG0GW01.KG0GWUPD == "Y")

    if (COMMAREA.CACLVL[1] == "Y"
     && KG0GW04.KG0GWXNX[KG0GWCNT] != " ")
      set KG0GM010.KUJXLCND[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMLC1[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMLC2[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMLC3[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMLC4[KG0GWCNT] initialAttributes;
      set KG0GM010.KUJXSPND[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMSP1[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMSP2[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMSP3[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMSP4[KG0GWCNT] initialAttributes;
      set KG0GM010.KUJXQAND[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMQA1[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMQA2[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMQA3[KG0GWCNT] initialAttributes;
      set KG0GM010.KG0GMQA4[KG0GWCNT] initialAttributes;
    else
      set KG0GM010.KUJXLCND[KG0GWCNT] skip;
      set KG0GM010.KG0GMLC1[KG0GWCNT] skip;
      set KG0GM010.KG0GMLC2[KG0GWCNT] skip;
      set KG0GM010.KG0GMLC3[KG0GWCNT] skip;
      set KG0GM010.KG0GMLC4[KG0GWCNT] skip;
      set KG0GM010.KUJXSPND[KG0GWCNT] skip;
      set KG0GM010.KG0GMSP1[KG0GWCNT] skip;
      set KG0GM010.KG0GMSP2[KG0GWCNT] skip;
      set KG0GM010.KG0GMSP3[KG0GWCNT] skip;
      set KG0GM010.KG0GMSP4[KG0GWCNT] skip;
      set KG0GM010.KUJXQAND[KG0GWCNT] skip;
      set KG0GM010.KG0GMQA1[KG0GWCNT] skip;
      set KG0GM010.KG0GMQA2[KG0GWCNT] skip;
      set KG0GM010.KG0GMQA3[KG0GWCNT] skip;
      set KG0GM010.KG0GMQA4[KG0GWCNT] skip;
    end

  else
    set KG0GM010.KUJXLCND[KG0GWCNT] skip;
    set KG0GM010.KG0GMLC1[KG0GWCNT] skip;
    set KG0GM010.KG0GMLC2[KG0GWCNT] skip;
    set KG0GM010.KG0GMLC3[KG0GWCNT] skip;
    set KG0GM010.KG0GMLC4[KG0GWCNT] skip;
    set KG0GM010.KUJXSPND[KG0GWCNT] skip;
    set KG0GM010.KG0GMSP1[KG0GWCNT] skip;
    set KG0GM010.KG0GMSP2[KG0GWCNT] skip;
    set KG0GM010.KG0GMSP3[KG0GWCNT] skip;
    set KG0GM010.KG0GMSP4[KG0GWCNT] skip;
    set KG0GM010.KUJXQAND[KG0GWCNT] skip;
    set KG0GM010.KG0GMQA1[KG0GWCNT] skip;
    set KG0GM010.KG0GMQA2[KG0GWCNT] skip;
    set KG0GM010.KG0GMQA3[KG0GWCNT] skip;
    set KG0GM010.KG0GMQA4[KG0GWCNT] skip;
  end


end // end KG0G330

// process screen keys/data
Function KG0G350()
   /* **************************************/
   /* * KG0G350 - process PF keys*/
   /* **************************************/

   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2
   && KG0GW01.KG0GWPGT != 0) /* company data is available*/
    KG0GM010.KUCCOID = KG0GW01.KG0GWCO; /* refresh company*/
    KG0G200(); /* refresh screen*/
    KG0GW01.KG0GWPND = "N"; /* reset update pending flag*/
    return;
  end

   /* **************************************/
   /* check for detail changes*/
   /* **************************************/

  if (KG0GW01.KG0GWPGT != 0) /* company data is available*/
    KG0G400(); /* check/save this screen's changes*/
    if (KG0GW01.KG0GWERR == "Y") /* exit on detail errors*/
      return;
    end
    KG0G490(); /* check for changes*/
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KG0GM010.CATOAP > " ") /* test for fast path*/
      if (KG0GW01.KG0GWPND == "Y") /* updates pending*/
        converseLib.validationFailed(367); /* "updates pending" msg*/
        KG0GW01.KG0GWERR = "Y";
        set KG0GM010.CATOAP cursor, bold;
      else /* no updates pending*/
        if (KG0GW01.KG0GWPGT != 0) /* company data is available*/
          KG0G230(); /* purge dept  temp storage*/
        end
        COMMAREA.CATOAP = KG0GM010.CATOAP;
        if (KG0GM010.CAITEM == " ")
          KG0GW01.KG0GWCO = KG0GM010.KUCCOID;
          COMMAREA.CAUSERA = KG0GW01.KG0GWUSR;
        else
          COMMAREA.CAITEM = KG0GM010.CAITEM;
        end
        COMMAREA.CAFROMAP = "KG0G";
        XSEXIT();
        KG0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
        KG0GW01.KG0GWERR = "Y";
        set KG0GM010.CATOAP cursor, bold;
      end
    else /* test for page# chg*/
      if (KG0GM010.KG0GMPG1 != KG0GW01.KG0GWPGC) /* change in page#*/
        KG0GM010.KUCCOID = KG0GW01.KG0GWCO; /* reset company*/
        if (KG0GM010.KG0GMPG1 > KG0GW01.KG0GWPGT /* greater than max*/
         || KG0GM010.KG0GMPG1 < 1)               /* or less than 1*/
          converseLib.validationFailed(379); /* "invalid page" msg*/
          set KG0GM010.KG0GMPG1 cursor, bold;
          KG0GW01.KG0GWERR = "Y";
        else
          KG0GW01.KG0GWDIX = KG0GM010.KG0GMPG1; /* load rqst'd page*/
          KG0GW01.KG0GWPGC = KG0GM010.KG0GMPG1;
          KG0G300();
        end
      else /* test for company change*/
        if (KG0GM010.KUCCOID == 0) /* company is required*/
          KG0GM010.KUCCOID = KG0GW01.KG0GWCO; /* reset company*/
          converseLib.validationFailed(114); /* "field required" msg*/
          KG0GW01.KG0GWERR = "Y";
          set KG0GM010.KUCCOID cursor, bold;
        else
          KG0G500(); /* check for company chg*/
        end
      end
    end
    return;
  end

   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/

  if (KG0GM010.CATOAP > " ")
    KG0GW01.KG0GWERR = "Y";
    converseLib.validationFailed(90); /* "fast path / pf keys" msg*/
    set KG0GM010.CATOAP cursor, bold;
    return;
  else
    set KG0GM010.CATOAP modified;
  end

   /* **************************************/
   /* edit pf2 key*/
   /* **************************************/

  if (converseVar.eventKey is pf2) /* update/inquiry*/
    if (KG0GW01.KG0GWUPD == "N") /* in inquiry mode*/
      if (COMMAREA.CACHGFL == "Y") /* allow to maintenance*/
        KG0GW01.KG0GWUPD = "Y"; /* change to update mode*/
        KG0GM010.KG0GMTTL = "UPDATE ";
        set KG0GM010.KG0GMTTL skip;
        KG0G300(); /* refresh screen*/
        return;
      else
        converseLib.validationFailed(330);
        KG0GW01.KG0GWERR = "Y"; /* display screen*/
        return;
      end
    else
      KG0GW01.KG0GWUPD = "N"; /* change to inquiry mode*/
      KG0GM010.KG0GMTTL = "INQUIRY";
      set KG0GM010.KG0GMTTL skip;
      KG0G300(); /* refresh screen*/
      return;
    end
  end

   /* **************************************/
   /* pfkey 1/3/4 edit*/
   /* **************************************/

  if (converseVar.eventKey is pf1 /* help screens*/
   || converseVar.eventKey is pf3 /* return*/
   || converseVar.eventKey is pf4) /* master menu*/
    if (KG0GW01.KG0GWPND == "Y") /* updates pending*/
      KG0G550(); /* scroll screen to the error*/
      converseLib.validationFailed(367);
      KG0GW01.KG0GWERR = "Y";
      return;
    else
      if (KG0GW01.KG0GWPGT != 0) /* company data is available*/
        KG0G230(); /* purge store temp storage*/
      end
    end
  end

   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help system*/
    XSPF1();
    KG0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0GW01.KG0GWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* return*/
    COMMAREA.CAUSERA = KG0GM010.KUCCOID;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KG0G";
    XSEXIT();
    KG0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0GW01.KG0GWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KG0G";
    XSPF4();
    KG0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KG0GW01.KG0GWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/

  if (converseVar.eventKey is pf12) /* update databases*/
    if (KG0GW01.KG0GWPND == "Y") /* updates pending*/
      if (KG0GW01.KG0GWERR == "N") /* if no errors*/
        KG0G600(); /* process selection entries*/
      else
        converseLib.validationFailed(174); /* "must pass edits" msg*/
      end
    else
      converseLib.validationFailed(280); /* "no maintenance performed" msg*/
    end
    return;
  end

   /* **************************************/
   /* edit pf7 key    (page up for depts)*/
   /* **************************************/

  if (converseVar.eventKey is pf7) /* scroll backwards for depts*/
    KG0G700();
    return;
  end

   /* **************************************/
   /* edit pf8 key  (page down for depts)*/
   /* **************************************/

  if (converseVar.eventKey is pf8) /* scroll forwards for depts*/
    KG0G710();
    return;
  end

   /* **************************************/
   /* edit pf9 key  (window of dept codes)*/
   /* **************************************/

  if (converseVar.eventKey is pf9) /* window for departmets*/
    KG0G750();
    return;
  end

   /* ***************************************/
   /* edit pf10 key  (window of life cycle)*/
   /* ***************************************/

  if (converseVar.eventKey is pf10) /* window for xga*/
    KG0G760();
    return;
  end

   /* ***************************************/
   /* edit pf11 key  (window of sport act)*/
   /* ***************************************/

  if (converseVar.eventKey is pf11) /* window for xsp*/
    KG0G770();
    return;
  end

   /* ***************************************/
   /* edit pf13 key  (window of quality cd)*/
   /* ***************************************/

  if (converseVar.eventKey is pf13) /* window for xqa*/
    KG0G790();
    return;
  end

   /* **************************************/
   /* invalid pf key*/
   /* **************************************/

  if (KG0GW01.KG0GWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KG0GW01.KG0GWERR = "Y";
  end

end // end KG0G350

// test for changes on screen
Function KG0G400()
   /* *******************************************/
   /* * KG0G400 - test for changes on screen*/
   /* *******************************************/

  KG0GW01.KG0GWCHG = "N"; /* changes set to 'no'*/
  KG0GW01.KG0GWCNT = 1; /* counter for screen*/

  while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWMAX)

    KG0G410(); /* shift fields to the left*/

    /* **** Edit life cycle codes*/
    if (KG0GM010.KUJXLCND[KG0GWCNT] == KG0GW04.KUJXLCND[KG0GWCNT]
     && KG0GM010.KG0GMLC1[KG0GWCNT] == KG0GW04.KG0GWLC1[KG0GWCNT]
     && KG0GM010.KG0GMLC2[KG0GWCNT] == KG0GW04.KG0GWLC2[KG0GWCNT]
     && KG0GM010.KG0GMLC3[KG0GWCNT] == KG0GW04.KG0GWLC3[KG0GWCNT]
     && KG0GM010.KG0GMLC4[KG0GWCNT] == KG0GW04.KG0GWLC4[KG0GWCNT])
       /* next sentence*/
    else
      KG0G420(); /* edit life cycle codes*/
    end

    /* **** Edit sport activity codes*/
    if (KG0GM010.KUJXSPND[KG0GWCNT] == KG0GW04.KUJXSPND[KG0GWCNT]
     && KG0GM010.KG0GMSP1[KG0GWCNT] == KG0GW04.KG0GWSP1[KG0GWCNT]
     && KG0GM010.KG0GMSP2[KG0GWCNT] == KG0GW04.KG0GWSP2[KG0GWCNT]
     && KG0GM010.KG0GMSP3[KG0GWCNT] == KG0GW04.KG0GWSP3[KG0GWCNT]
     && KG0GM010.KG0GMSP4[KG0GWCNT] == KG0GW04.KG0GWSP4[KG0GWCNT])
       /* next sentence*/
    else
      KG0G440(); /* edit sport activity codes*/
    end

    /* **** Edit quality codes*/
    if (KG0GM010.KUJXQAND[KG0GWCNT] == KG0GW04.KUJXQAND[KG0GWCNT]
     && KG0GM010.KG0GMQA1[KG0GWCNT] == KG0GW04.KG0GWQA1[KG0GWCNT]
     && KG0GM010.KG0GMQA2[KG0GWCNT] == KG0GW04.KG0GWQA2[KG0GWCNT]
     && KG0GM010.KG0GMQA3[KG0GWCNT] == KG0GW04.KG0GWQA3[KG0GWCNT]
     && KG0GM010.KG0GMQA4[KG0GWCNT] == KG0GW04.KG0GWQA4[KG0GWCNT])
       /* next sentence*/
    else
      KG0G460(); /* edit quality codes*/
    end


    KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
  end

  if (KG0GW01.KG0GWCHG == "Y") /* to dept change*/
    KG0GW01.KG0GWPND = "Y";
    KG0G480(); /* rewrite dept temp storage*/
  end


end // end KG0G400

// shift fields to the left
Function KG0G410()
   /* **************************************/
   /* * KG0G410 - shift fields to the left*/
   /* **************************************/

   /* **** shift life cycle cd to the left*/

  if (KG0GM010.KG0GMLC3[KG0GWCNT] == " ")
    KG0GM010.KG0GMLC3[KG0GWCNT] = KG0GM010.KG0GMLC4[KG0GWCNT];
    KG0GM010.KG0GMLC4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMLC2[KG0GWCNT] == " ")
    KG0GM010.KG0GMLC2[KG0GWCNT] = KG0GM010.KG0GMLC3[KG0GWCNT];
    KG0GM010.KG0GMLC3[KG0GWCNT] = KG0GM010.KG0GMLC4[KG0GWCNT];
    KG0GM010.KG0GMLC4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMLC1[KG0GWCNT] == " ")
    KG0GM010.KG0GMLC1[KG0GWCNT] = KG0GM010.KG0GMLC2[KG0GWCNT];
    KG0GM010.KG0GMLC2[KG0GWCNT] = KG0GM010.KG0GMLC3[KG0GWCNT];
    KG0GM010.KG0GMLC3[KG0GWCNT] = KG0GM010.KG0GMLC4[KG0GWCNT];
    KG0GM010.KG0GMLC4[KG0GWCNT] = " ";
  end

   /* **** shift sport activity codes to the left*/

  if (KG0GM010.KG0GMSP3[KG0GWCNT] == " ")
    KG0GM010.KG0GMSP3[KG0GWCNT] = KG0GM010.KG0GMSP4[KG0GWCNT];
    KG0GM010.KG0GMSP4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMSP2[KG0GWCNT] == " ")
    KG0GM010.KG0GMSP2[KG0GWCNT] = KG0GM010.KG0GMSP3[KG0GWCNT];
    KG0GM010.KG0GMSP3[KG0GWCNT] = KG0GM010.KG0GMSP4[KG0GWCNT];
    KG0GM010.KG0GMSP4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMSP1[KG0GWCNT] == " ")
    KG0GM010.KG0GMSP1[KG0GWCNT] = KG0GM010.KG0GMSP2[KG0GWCNT];
    KG0GM010.KG0GMSP2[KG0GWCNT] = KG0GM010.KG0GMSP3[KG0GWCNT];
    KG0GM010.KG0GMSP3[KG0GWCNT] = KG0GM010.KG0GMSP4[KG0GWCNT];
    KG0GM010.KG0GMSP4[KG0GWCNT] = " ";
  end

   /* **** shift quality codes to the left*/

  if (KG0GM010.KG0GMQA3[KG0GWCNT] == " ")
    KG0GM010.KG0GMQA3[KG0GWCNT] = KG0GM010.KG0GMQA4[KG0GWCNT];
    KG0GM010.KG0GMQA4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMQA2[KG0GWCNT] == " ")
    KG0GM010.KG0GMQA2[KG0GWCNT] = KG0GM010.KG0GMQA3[KG0GWCNT];
    KG0GM010.KG0GMQA3[KG0GWCNT] = KG0GM010.KG0GMQA4[KG0GWCNT];
    KG0GM010.KG0GMQA4[KG0GWCNT] = " ";
  end
  if (KG0GM010.KG0GMQA1[KG0GWCNT] == " ")
    KG0GM010.KG0GMQA1[KG0GWCNT] = KG0GM010.KG0GMQA2[KG0GWCNT];
    KG0GM010.KG0GMQA2[KG0GWCNT] = KG0GM010.KG0GMQA3[KG0GWCNT];
    KG0GM010.KG0GMQA3[KG0GWCNT] = KG0GM010.KG0GMQA4[KG0GWCNT];
    KG0GM010.KG0GMQA4[KG0GWCNT] = " ";
  end


end // end KG0G410

// edit life cycle
Function KG0G420()
   /* **************************************/
   /* * KG0G420 - edit life cycle codes*/
   /* **************************************/

   /* **** edit life cycle codes*/

  if (KG0GM010.KG0GMLC4[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWLC4[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWLC4[KG0GWCNT] = KG0GM010.KG0GMLC4[KG0GWCNT];
      KG0GM010.KG0GMLA4[KG0GWCNT] = " ";
      set KG0GM010.KG0GMLC4[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMLC4[KG0GWCNT] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMLC4[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMLA4[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWLC4[KG0GWCNT] = KG0GM010.KG0GMLC4[KG0GWCNT];
        KG0GM010.KG0GMLA4[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        set KG0GM010.KG0GMLC4[KG0GWCNT] initialAttributes;
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMLC4[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMLA4[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMLC3[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWLC3[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWLC3[KG0GWCNT] = KG0GM010.KG0GMLC3[KG0GWCNT];
      KG0GM010.KG0GMLA3[KG0GWCNT] = " ";
      set KG0GM010.KG0GMLC3[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMLC3[KG0GWCNT] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMLC3[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMLA3[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWLC3[KG0GWCNT] = KG0GM010.KG0GMLC3[KG0GWCNT];
        set KG0GM010.KG0GMLC3[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMLA3[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMLC3[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMLA3[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMLC2[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWLC2[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWLC2[KG0GWCNT] = KG0GM010.KG0GMLC2[KG0GWCNT];
      KG0GM010.KG0GMLA2[KG0GWCNT] = " ";
      set KG0GM010.KG0GMLC2[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMLC2[KG0GWCNT] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMLC2[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMLA2[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWLC2[KG0GWCNT] = KG0GM010.KG0GMLC2[KG0GWCNT];
        set KG0GM010.KG0GMLC2[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMLA2[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMLC2[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMLA2[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMLC1[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWLC1[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWLC1[KG0GWCNT] = KG0GM010.KG0GMLC1[KG0GWCNT];
      KG0GM010.KG0GMLA1[KG0GWCNT] = " ";
      set KG0GM010.KG0GMLC1[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMLC1[KG0GWCNT] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMLC1[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMLA1[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWLC1[KG0GWCNT] = KG0GM010.KG0GMLC1[KG0GWCNT];
        set KG0GM010.KG0GMLC1[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMLA1[KG0GWCNT] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMLC1[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMLA1[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


  if (KG0GW01.KG0GWERR == "Y")
    return;
  end


   /* ****** edit buy restrict ind*/
  if (KG0GM010.KUJXLCND[KG0GWCNT] == " "
   || KG0GM010.KUJXLCND[KG0GWCNT] == "N")
    if (KG0GW04.KG0GWLC1[KG0GWCNT] == " "
     && KG0GW04.KG0GWLC2[KG0GWCNT] == " "
     && KG0GW04.KG0GWLC3[KG0GWCNT] == " "
     && KG0GW04.KG0GWLC4[KG0GWCNT] == " ")
      if (KG0GW04.KUJXLCND[KG0GWCNT] == " ")
        /* next sentence*/
      else
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
        KG0GW04.KUJXLCND[KG0GWCNT] = " ";
      end
    else
      set KG0GM010.KUJXLCND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
      converseLib.validationFailed(05); /* code is required*/
      KG0GW01.KG0GWERR = "Y";
    end
  else
    if (KG0GM010.KUJXLCND[KG0GWCNT] == "A"
     || KG0GM010.KUJXLCND[KG0GWCNT] == "R")
      if (KG0GW04.KG0GWLC1[KG0GWCNT] == " "
       && KG0GW04.KG0GWLC2[KG0GWCNT] == " "
       && KG0GW04.KG0GWLC3[KG0GWCNT] == " "
       && KG0GW04.KG0GWLC4[KG0GWCNT] == " ")
        set KG0GM010.KUJXLCND[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
        converseLib.validationFailed(408); /* code is not required*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KUJXLCND[KG0GWCNT] = KG0GM010.KUJXLCND[KG0GWCNT];
        set KG0GM010.KUJXLCND[KG0GWCNT] initialAttributes;
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        if (KG0GM010.KUJXLCND[KG0GWCNT] == "A")
          KG0GM010.KG0GMBLC[KG0GWCNT] = "ALLOWED ONLY   ";
        else
          KG0GM010.KG0GMBLC[KG0GWCNT] = "RESTRICTED FROM";
        end
      end
    else
      set KG0GM010.KUJXLCND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBLC[KG0GWCNT] = " ";
      converseLib.validationFailed(407); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


end // end KG0G420

// edit sport activity
Function KG0G440()
   /* **************************************/
   /* * KG0G440 - edit sport activity*/
   /* **************************************/

   /* **** edit sport activity codes*/

  if (KG0GM010.KG0GMSP4[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWSP4[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWSP4[KG0GWCNT] = KG0GM010.KG0GMSP4[KG0GWCNT];
      KG0GM010.KG0GMSA4[KG0GWCNT] = " ";
      set KG0GM010.KG0GMSP4[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMSP4[KG0GWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMSP4[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMSA4[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWSP4[KG0GWCNT] = KG0GM010.KG0GMSP4[KG0GWCNT];
        set KG0GM010.KG0GMSP4[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMSA4[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMSP4[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMSA4[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMSP3[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWSP3[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWSP3[KG0GWCNT] = KG0GM010.KG0GMSP3[KG0GWCNT];
      KG0GM010.KG0GMSA3[KG0GWCNT] = " ";
      set KG0GM010.KG0GMSP3[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMSP3[KG0GWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMSP3[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMSA3[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWSP3[KG0GWCNT] = KG0GM010.KG0GMSP3[KG0GWCNT];
        set KG0GM010.KG0GMSP3[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMSA3[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMSP3[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMSA3[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMSP2[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWSP2[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWSP2[KG0GWCNT] = KG0GM010.KG0GMSP2[KG0GWCNT];
      KG0GM010.KG0GMSA2[KG0GWCNT] = " ";
      set KG0GM010.KG0GMSP2[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMSP2[KG0GWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMSP2[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMSA2[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWSP2[KG0GWCNT] = KG0GM010.KG0GMSP2[KG0GWCNT];
        set KG0GM010.KG0GMSP2[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMSA2[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMSP2[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMSA2[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMSP1[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWSP1[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWSP1[KG0GWCNT] = KG0GM010.KG0GMSP1[KG0GWCNT];
      KG0GM010.KG0GMSA1[KG0GWCNT] = " ";
      set KG0GM010.KG0GMSP1[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMSP1[KG0GWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMSP1[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMSA1[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWSP1[KG0GWCNT] = KG0GM010.KG0GMSP1[KG0GWCNT];
        set KG0GM010.KG0GMSP1[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMSA1[KG0GWCNT] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMSP1[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMSA1[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


  if (KG0GW01.KG0GWERR == "Y")
    return;
  end


   /* ****** edit buy restrict ind*/
  if (KG0GM010.KUJXSPND[KG0GWCNT] == " "
   || KG0GM010.KUJXSPND[KG0GWCNT] == "N")
    if (KG0GW04.KG0GWSP1[KG0GWCNT] == " "
     && KG0GW04.KG0GWSP2[KG0GWCNT] == " "
     && KG0GW04.KG0GWSP3[KG0GWCNT] == " "
     && KG0GW04.KG0GWSP4[KG0GWCNT] == " ")
      if (KG0GW04.KUJXSPND[KG0GWCNT] == " ")
        /* next sentence*/
      else
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
        KG0GW04.KUJXSPND[KG0GWCNT] = " ";
      end
    else
      set KG0GM010.KUJXSPND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
      converseLib.validationFailed(05); /* code is required*/
      KG0GW01.KG0GWERR = "Y";
    end
  else
    if (KG0GM010.KUJXSPND[KG0GWCNT] == "A"
     || KG0GM010.KUJXSPND[KG0GWCNT] == "R")
      if (KG0GW04.KG0GWSP1[KG0GWCNT] == " "
       && KG0GW04.KG0GWSP2[KG0GWCNT] == " "
       && KG0GW04.KG0GWSP3[KG0GWCNT] == " "
       && KG0GW04.KG0GWSP4[KG0GWCNT] == " ")
        set KG0GM010.KUJXSPND[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
        converseLib.validationFailed(408); /* code is not required*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KUJXSPND[KG0GWCNT] = KG0GM010.KUJXSPND[KG0GWCNT];
        set KG0GM010.KUJXSPND[KG0GWCNT] initialAttributes;
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        if (KG0GM010.KUJXSPND[KG0GWCNT] == "A")
          KG0GM010.KG0GMBSP[KG0GWCNT] = "ALLOWED ONLY   ";
        else
          KG0GM010.KG0GMBSP[KG0GWCNT] = "RESTRICTED FROM";
        end
      end
    else
      set KG0GM010.KUJXSPND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBSP[KG0GWCNT] = " ";
      converseLib.validationFailed(407); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


end // end KG0G440

// edit quality codes
Function KG0G460()
   /* **************************************/
   /* * KG0G460 - edit quality codes*/
   /* **************************************/

   /* **** edit quality codes codes*/

  if (KG0GM010.KG0GMQA4[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWQA4[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWQA4[KG0GWCNT] = KG0GM010.KG0GMQA4[KG0GWCNT];
      KG0GM010.KG0GMQD4[KG0GWCNT] = " ";
      set KG0GM010.KG0GMQA4[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMQA4[KG0GWCNT] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMQA4[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMQD4[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWQA4[KG0GWCNT] = KG0GM010.KG0GMQA4[KG0GWCNT];
        set KG0GM010.KG0GMQA4[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMQD4[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMQA4[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMQD4[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMQA3[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWQA3[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWQA3[KG0GWCNT] = KG0GM010.KG0GMQA3[KG0GWCNT];
      KG0GM010.KG0GMQD3[KG0GWCNT] = " ";
      set KG0GM010.KG0GMQA3[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMQA3[KG0GWCNT] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMQA3[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMQD3[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWQA3[KG0GWCNT] = KG0GM010.KG0GMQA3[KG0GWCNT];
        set KG0GM010.KG0GMQA3[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMQD3[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMQA3[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMQD3[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMQA2[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWQA2[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWQA2[KG0GWCNT] = KG0GM010.KG0GMQA2[KG0GWCNT];
      KG0GM010.KG0GMQD2[KG0GWCNT] = " ";
      set KG0GM010.KG0GMQA2[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMQA2[KG0GWCNT] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMQA2[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMQD2[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWQA2[KG0GWCNT] = KG0GM010.KG0GMQA2[KG0GWCNT];
        set KG0GM010.KG0GMQA2[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMQD2[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMQA2[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMQD2[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end

  if (KG0GM010.KG0GMQA1[KG0GWCNT] == " ")
    if (KG0GW04.KG0GWQA1[KG0GWCNT] == " ")
       /* next sentence*/
    else
      KG0GW04.KG0GWQA1[KG0GWCNT] = KG0GM010.KG0GMQA1[KG0GWCNT];
      KG0GM010.KG0GMQD1[KG0GWCNT] = " ";
      set KG0GM010.KG0GMQA1[KG0GWCNT] initialAttributes;
      KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
    end
  else
    if (KG0GM010.KG0GMQA1[KG0GWCNT] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KG0GM010.KG0GMQA1[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMQD1[KG0GWCNT] = " ";
        converseLib.validationFailed(71); /* code is inactive*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KG0GWQA1[KG0GWCNT] = KG0GM010.KG0GMQA1[KG0GWCNT];
        set KG0GM010.KG0GMQA1[KG0GWCNT] initialAttributes;
        KG0GM010.KG0GMQD1[KG0GWCNT] = XQATBL.XQAABRV[sysVar.arrayIndex];
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
      end
    else
      set KG0GM010.KG0GMQA1[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMQD1[KG0GWCNT] = " ";
      converseLib.validationFailed(17); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


  if (KG0GW01.KG0GWERR == "Y")
    return;
  end


   /* ****** edit buy restrict ind*/
  if (KG0GM010.KUJXQAND[KG0GWCNT] == " "
   || KG0GM010.KUJXQAND[KG0GWCNT] == "N")
    if (KG0GW04.KG0GWQA1[KG0GWCNT] == " "
     && KG0GW04.KG0GWQA2[KG0GWCNT] == " "
     && KG0GW04.KG0GWQA3[KG0GWCNT] == " "
     && KG0GW04.KG0GWQA4[KG0GWCNT] == " ")
      if (KG0GW04.KUJXQAND[KG0GWCNT] == " ")
        /* next sentence*/
      else
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
        KG0GW04.KUJXQAND[KG0GWCNT] = " ";
      end
    else
      set KG0GM010.KUJXQAND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
      converseLib.validationFailed(05); /* code is required*/
      KG0GW01.KG0GWERR = "Y";
    end
  else
    if (KG0GM010.KUJXQAND[KG0GWCNT] == "A"
     || KG0GM010.KUJXQAND[KG0GWCNT] == "R")
      if (KG0GW04.KG0GWQA1[KG0GWCNT] == " "
       && KG0GW04.KG0GWQA2[KG0GWCNT] == " "
       && KG0GW04.KG0GWQA3[KG0GWCNT] == " "
       && KG0GW04.KG0GWQA4[KG0GWCNT] == " ")
        set KG0GM010.KUJXQAND[KG0GWCNT] cursor, bold;
        KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
        converseLib.validationFailed(408); /* code is not required*/
        KG0GW01.KG0GWERR = "Y";
      else
        KG0GW04.KUJXQAND[KG0GWCNT] = KG0GM010.KUJXQAND[KG0GWCNT];
        set KG0GM010.KUJXQAND[KG0GWCNT] initialAttributes;
        KG0GW01.KG0GWCHG = "Y"; /* to dept change*/
        if (KG0GM010.KUJXQAND[KG0GWCNT] == "A")
          KG0GM010.KG0GMBQA[KG0GWCNT] = "ALLOWED ONLY   ";
        else
          KG0GM010.KG0GMBQA[KG0GWCNT] = "RESTRICTED FROM";
        end
      end
    else
      set KG0GM010.KUJXQAND[KG0GWCNT] cursor, bold;
      KG0GM010.KG0GMBQA[KG0GWCNT] = " ";
      converseLib.validationFailed(407); /* invalid code*/
      KG0GW01.KG0GWERR = "Y";
    end
  end


end // end KG0G460

// rewrite dept temp storage
Function KG0G480()
   /* *********************************************/
   /* * KG0G480 - rewrite dept temp storage*/
   /* *********************************************/

  set KG0GW02 empty;
  KG0GW02.KG0GW2RC = 0; /* return code*/
  KG0GW02.KG0GW2FC = "U";
  KG0GW02.KG0GW2AP = "KW04";
  KG0GW02.KG0GW2CT = KG0GW01.KG0GWDIX;
  KG0GW04.KG0GW4LG = KG0GW01.KG0GWSIZ;
  call "TA0050" (KG0GW04, KG0GW02) {isNoRefresh = yes, isExternal = yes};
  if (KG0GW02.KG0GW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KG0GW01.KG0GWEND = "Y";
    KG0GW01.KG0GWERR = "Y";
    converseLib.validationFailed(228);
  end


end // end KG0G480

// test all depts for change
Function KG0G490()
   /* ********************************************/
   /* * KG0G490 - test all rows for changes*/
   /* ********************************************/

  KG0GW01.KG0GWDIX = 1;
  KG0GW01.KG0GWPND = "N";
  while (KG0GW01.KG0GWDIX <= KG0GW01.KG0GWPGT
   && KG0GW01.KG0GWPND == "N")
    KG0G310(); /* read store temp storage*/
    KG0GW01.KG0GWCNT = 1;
    while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWMAX
     && KG0GW01.KG0GWPND == "N")
      KUJREC.KUJGRP = KG0GW04.KUJGRP[KG0GWCNT];
      KG0GW01.KG0GWXNU = KUJREC.XNXCD;
      if (KG0GW04.KG0GWXNX[KG0GWCNT] > " ")
        if (KG0GW04.KUJXLCND[KG0GWCNT] == KUJREC.KUJXLCND
         && KG0GW04.KG0GWLC1[KG0GWCNT] == KUJREC.XLCCD[1]
         && KG0GW04.KG0GWLC2[KG0GWCNT] == KUJREC.XLCCD[2]
         && KG0GW04.KG0GWLC3[KG0GWCNT] == KUJREC.XLCCD[3]
         && KG0GW04.KG0GWLC4[KG0GWCNT] == KUJREC.XLCCD[4]
         && KG0GW04.KUJXSPND[KG0GWCNT] == KUJREC.KUJXSPND
         && KG0GW04.KG0GWSP1[KG0GWCNT] == KUJREC.XSPCD[1]
         && KG0GW04.KG0GWSP2[KG0GWCNT] == KUJREC.XSPCD[2]
         && KG0GW04.KG0GWSP3[KG0GWCNT] == KUJREC.XSPCD[3]
         && KG0GW04.KG0GWSP4[KG0GWCNT] == KUJREC.XSPCD[4]
         && KG0GW04.KUJXQAND[KG0GWCNT] == KUJREC.KUJXQAND
         && KG0GW04.KG0GWQA1[KG0GWCNT] == KUJREC.XQACD[1]
         && KG0GW04.KG0GWQA2[KG0GWCNT] == KUJREC.XQACD[2]
         && KG0GW04.KG0GWQA3[KG0GWCNT] == KUJREC.XQACD[3]
         && KG0GW04.KG0GWQA4[KG0GWCNT] == KUJREC.XQACD[4])
          /* next sentence*/
        else
          KG0GW01.KG0GWPND = "Y";
          KG0GW01.KG0GWXXX = KG0GW01.KG0GWDIX;
        end
      end /* of no dept*/
      KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
    end
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWDIX + 1;
  end

  if (KG0GW01.KG0GWPGT > 0)
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWPGC; /* get current page#*/
    KG0G310(); /* return current page*/
  end


end // end KG0G490

// test company changing
Function KG0G500()
   /* **********************************/
   /* * KG0G500 - test for changes*/
   /* **********************************/

  if (KG0GM010.KUCCOID != KG0GW01.KG0GWCO) /* companies changed*/
    if (KG0GW01.KG0GWPND == "Y") /* updates are pending*/
      converseLib.validationFailed(121); /* "updates not completed" msg*/
      KG0GW01.KG0GWERR = "Y";
      set KG0GM010.KUCCOID cursor, bold;
      KG0GM010.KUCCOID = KG0GW01.KG0GWCO;
    else
      KG0GW01.KG0GWCO = KG0GM010.KUCCOID;
      KG0G200(); /* process new companies*/
    end
  end


end // end KG0G500

// cursor > first dept change
Function KG0G550()
   /* *********************************************************/
   /* * KG0G550 - SCROLL SCREEN TO ERROR*/
   /* *********************************************************/

  if (KG0GW01.KG0GWXXX != KG0GW01.KG0GWDIX)
    KG0GW01.KG0GWPGC = KG0GW01.KG0GWXXX;
    KG0GM010.KG0GMPG1 = KG0GW01.KG0GWPGC;
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWXXX;
    KG0G270(); /* move dept to screen*/
  end

   /* **************************************/
   /* *  set cursor on first changed dept*/
   /* **************************************/

  KG0GW01.KG0GWCNT = 1;

  while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWSIZ)
    /* IF kg0gW04.kg0gWXNX(kg0gWCNT) NE kg0gW04.kg0gWXNX(kg0gWCNT);*/
       /* SET kg0gM010.kg0gWXNX(kg0gWCNT) CURSOR,BRIGHT;*/
       /* MOVE 04 TO kg0gW01.kg0gWCNT;*/
     /* END ;*/
    KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
  end
end // end KG0G550

// process department changes
Function KG0G600()
   /* ********************************************/
   /* * KG0G600 - process restriction changes*/
   /* ********************************************/

  KG0GW01.KG0GWDIX = 1;
  while (KG0GW01.KG0GWDIX <= KG0GW01.KG0GWPGT)
    KG0G310(); /* read store temp storage*/
    KG0GW01.KG0GWCNT = 1;
    KG0GW01.KG0GWPND = "N";
    while (KG0GW01.KG0GWCNT < KG0GW01.KG0GWMAX)
      if (KG0GW04.KG0GWXNX[KG0GWCNT] > " ")
        KG0G620(); /* test for changes & update*/
      end
      KG0GW01.KG0GWCNT = KG0GW01.KG0GWCNT + 1;
    end
    if (KG0GW01.KG0GWPND == "Y") /* temp page changed*/
      KG0G480(); /* rewrite temp page*/
    end
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWDIX + 1;
  end

  KG0G200(); /* rebuild from the database*/
  converseLib.validationFailed(279); /* "upd completed" msg*/


end // end KG0G600

// test for chgs and update dept
Function KG0G620()
   /* ********************************************/
   /* * KG0G620 - test for changes and update*/
   /* ********************************************/

  if (KG0GW04.KUJGRP[KG0GWCNT] == " ") /* no before image*/
    /* next sentence*/
  else

    KUJREC.KUJGRP = KG0GW04.KUJGRP[KG0GWCNT];
    KG0GW01.KG0GWXNU = KUJREC.XNXCD;
    if (KG0GW04.KUJXLCND[KG0GWCNT] == KUJREC.KUJXLCND
     && KG0GW04.KG0GWLC1[KG0GWCNT] == KUJREC.XLCCD[1]
     && KG0GW04.KG0GWLC2[KG0GWCNT] == KUJREC.XLCCD[2]
     && KG0GW04.KG0GWLC3[KG0GWCNT] == KUJREC.XLCCD[3]
     && KG0GW04.KG0GWLC4[KG0GWCNT] == KUJREC.XLCCD[4]
     && KG0GW04.KUJXSPND[KG0GWCNT] == KUJREC.KUJXSPND
     && KG0GW04.KG0GWSP1[KG0GWCNT] == KUJREC.XSPCD[1]
     && KG0GW04.KG0GWSP2[KG0GWCNT] == KUJREC.XSPCD[2]
     && KG0GW04.KG0GWSP3[KG0GWCNT] == KUJREC.XSPCD[3]
     && KG0GW04.KG0GWSP4[KG0GWCNT] == KUJREC.XSPCD[4]
     && KG0GW04.KUJXQAND[KG0GWCNT] == KUJREC.KUJXQAND
     && KG0GW04.KG0GWQA1[KG0GWCNT] == KUJREC.XQACD[1]
     && KG0GW04.KG0GWQA2[KG0GWCNT] == KUJREC.XQACD[2]
     && KG0GW04.KG0GWQA3[KG0GWCNT] == KUJREC.XQACD[3]
     && KG0GW04.KG0GWQA4[KG0GWCNT] == KUJREC.XQACD[4])
       /* next sentence*/
    else
      KG0G640(); /* update department rec*/
    end
  end


end // end KG0G620

// update department record
Function KG0G640()
   /* ********************************************/
   /* * KG0G640 - update department database*/
   /* ********************************************/

  KUJREC.KUCCOID = KG0GW01.KG0GWCO;
  KG0GW01.KG0GWXCH = KG0GW04.KG0GWXNX[KG0GWCNT];
  KUJREC.XNXCD = KG0GW01.KG0GWXNU;
   /* move the rest of the fields to kujrec*/
  KG0G650();

  XX0XS01();
  KUJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;


   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VDEPT001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KG0GW04.KUJGRP[KG0GWCNT];


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0G   ";
    TA1REC.TA1LOCAT[1] = "KG0G640  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KG0GM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KG0G660(); /* write audit trail add image*/



  call "IO0290" ("U ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KG0G640";
    TA1REC.TA1LOC = "UPDATE VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KG0GW01.KG0GWKC = KUJREC.KUCCOID;
    KG0GW01.KG0GWKD = KUJREC.XNXCD;
    TA1REC.TA1TBLKE = KG0GW01.KG0GWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


   /* ****************************/
   /* format after look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VDEPT001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUJREC.KUJGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KG0G   ";
    TA1REC.TA1LOCAT[1] = "KG0G640  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KG0GM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPTY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KG0G660(); /* write audit trail after image*/


end // end KG0G640

// move temp storage to dept
Function KG0G650()
   /* ********************************************/
   /* * KG0G650 - move temp storage to dept*/
   /* ********************************************/

  KUJREC.KUJXLCND = KG0GW04.KUJXLCND[KG0GWCNT];
  KUJREC.XLCCD[1] = KG0GW04.KG0GWLC1[KG0GWCNT];
  KUJREC.XLCCD[2] = KG0GW04.KG0GWLC2[KG0GWCNT];
  KUJREC.XLCCD[3] = KG0GW04.KG0GWLC3[KG0GWCNT];
  KUJREC.XLCCD[4] = KG0GW04.KG0GWLC4[KG0GWCNT];
  KUJREC.KUJXSPND = KG0GW04.KUJXSPND[KG0GWCNT];
  KUJREC.XSPCD[1] = KG0GW04.KG0GWSP1[KG0GWCNT];
  KUJREC.XSPCD[2] = KG0GW04.KG0GWSP2[KG0GWCNT];
  KUJREC.XSPCD[3] = KG0GW04.KG0GWSP3[KG0GWCNT];
  KUJREC.XSPCD[4] = KG0GW04.KG0GWSP4[KG0GWCNT];
  KUJREC.KUJXQAND = KG0GW04.KUJXQAND[KG0GWCNT];
  KUJREC.XQACD[1] = KG0GW04.KG0GWQA1[KG0GWCNT];
  KUJREC.XQACD[2] = KG0GW04.KG0GWQA2[KG0GWCNT];
  KUJREC.XQACD[3] = KG0GW04.KG0GWQA3[KG0GWCNT];
  KUJREC.XQACD[4] = KG0GW04.KG0GWQA4[KG0GWCNT];


end // end KG0G650

// write customer audit image
Function KG0G660()
   /* ********************************************/
   /* * KG0G660 - write customer audit image*/
   /* ********************************************/


  set SQLCA empty;

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KG0G660";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KG0G660

// page up for depts
Function KG0G700()
   /* **********************************/
   /* * KG0G700 - page up for stores*/
   /* **********************************/

  if (KG0GW01.KG0GWDIX > 1)
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWDIX - 1;
    KG0GW01.KG0GWPGC = KG0GW01.KG0GWPGC - 1;
    KG0GM010.KG0GMPG1 = KG0GW01.KG0GWPGC;
    KG0G300(); /* move stores to screen*/
  else
    converseLib.validationFailed(208); /* at begining of data*/
  end


end // end KG0G700

// page down for depts
Function KG0G710()
   /* *************************/
   /* * KG0G710 - page down*/
   /* *************************/

  if (KG0GW01.KG0GWDIX >= KG0GW01.KG0GWPGT) /* if at end of depts*/
    converseLib.validationFailed(206);
  else
    KG0GW01.KG0GWDIX = KG0GW01.KG0GWDIX + 1;
    KG0GW01.KG0GWPGC = KG0GW01.KG0GWPGC + 1; /* page counter*/
    KG0GM010.KG0GMPG1 = KG0GW01.KG0GWPGC;
    KG0G300(); /* move depts to screen*/
  end


end // end KG0G710

// windowing routine for xnx
Function KG0G750()
   /* ***************************************/
   /* * KG0G750 - pop up window for xnxcd*/
   /* ***************************************/

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID DEPARTMENT CODES    ";

  while (XX0XW02.XX0XWEND == "N")
    XPXNX01(); /* perform xnxcd pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KG0GW01.KG0GWDIX = KG0GW01.KG0GWPGC; /* get current page#*/
  KG0G310(); /* return current page*/


end // end KG0G750

// windowing routine for xlc
Function KG0G760()
   /* ************************************/
   /* * KG0G760 - pop up window for xlc*/
   /* ************************************/

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID LIFE CYCLE CODES    ";

  while (XX0XW02.XX0XWEND == "N")
    XPXLC01(); /* perform xlc pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KG0GW01.KG0GWDIX = KG0GW01.KG0GWPGC; /* get current page#*/
  KG0G310(); /* return current page*/


end // end KG0G760

// windowing routine for xsp
Function KG0G770()
   /* *************************************/
   /* * KG0G770 - pop up window for xsp*/
   /* *************************************/

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID SPORT ACTIVITY CODES";

  while (XX0XW02.XX0XWEND == "N")
    XPXSP01(); /* perform xsp pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KG0GW01.KG0GWDIX = KG0GW01.KG0GWPGC; /* get current page#*/
  KG0G310(); /* return current page*/


end // end KG0G770

// windowing routine for xqa
Function KG0G790()
   /* *************************************/
   /* * KG0G770 - pop up window for xqa*/
   /* *************************************/

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID QUALITY CODES       ";

  while (XX0XW02.XX0XWEND == "N")
    XPXQA01(); /* perform xqa pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KG0GW01.KG0GWDIX = KG0GW01.KG0GWPGC; /* get current page#*/
  KG0G310(); /* return current page*/


end // end KG0G790

//*** RECORD=KG0GW01 ****
// working storage for rep maintenance screen
// ***********************
Record KG0GW01 type basicRecord
  10 KG0GWUSR KG0GWUSR ; 
    15 KG0GWCO KG0GWCO ; 
      20 KG0GWCO-CHAR KG0GWCO-CHAR ; 
    15 * num(10) ; 
  10 KG0GWKEY KG0GWKEY ; 
    15 KG0GWKC KG0GWKC ; 
    15 KG0GWKD KG0GWKD ; 
    15 * char(21) ; 
  10 KG0GWSIZ KG0GWSIZ ; 
  10 KG0GWMAX KG0GWMAX ; 
  10 KG0GWUPD KG0GWUPD ; 
  10 KG0GWERR KG0GWERR ; 
  10 KG0GWCHG KG0GWCHG ; 
  10 KG0GWPND KG0GWPND ; 
  10 KG0GWEND KG0GWEND ; 
  10 XATCD XATCD ; 
  10 KG0GWFND KG0GWFND ; 
  10 KG0GWCNT KG0GWCNT ; 
  10 KG0GWPGC KG0GWPGC ; 
  10 KG0GWPGT KG0GWPGT ; 
  10 KG0GWDIX KG0GWDIX ; 
  10 KG0GWXXX KG0GWXXX ; 
  10 KG0GWXNU KG0GWXNU ; 
    15 * char(2) ; 
    15 KG0GWXCH KG0GWXCH ; 
      20 KG0GWXC1 KG0GWXC1 ; 
      20 KG0GWXC2 KG0GWXC2 ; 
end // end KG0GW01

//*** RECORD=KG0GW02 ****
// working storage record for parm to ta0050 (temp storage)
// ***********************
Record KG0GW02 type basicRecord
  10 KG0GW2AP KG0GW2AP ; 
  10 KG0GW2CT KG0GW2CT ; 
  10 KG0GW2FC KG0GW2FC ; 
  10 KG0GW2RC KG0GW2RC ; 
end // end KG0GW02

//*** RECORD=KG0GW04 ****
// ;
// ***********************
Record KG0GW04 type basicRecord
  3 KG0GW4GR KG0GW4GR ; 
    10 KG0GW4LG KG0GW4LG ; 
    10 KG0GWGRP KG0GWGRP [5] ; 
      15 KG0GWXNX KG0GWXNX ; 
      15 XNXABRV XNXABRV ; 
      15 KUJSLFID KUJSLFID ; 
      15 KUJSLFNM KUJSLFNM ; 
      15 KUJCRIND KUJCRIND ; 
      15 XXXSTAT XXXSTAT ; 
      15 KUJXLCND KUJXLCND ; 
      15 KG0GWLC1 KG0GWLC1 ; 
      15 KG0GWLC2 KG0GWLC2 ; 
      15 KG0GWLC3 KG0GWLC3 ; 
      15 KG0GWLC4 KG0GWLC4 ; 
      15 KUJXSPND KUJXSPND ; 
      15 KG0GWSP1 KG0GWSP1 ; 
      15 KG0GWSP2 KG0GWSP2 ; 
      15 KG0GWSP3 KG0GWSP3 ; 
      15 KG0GWSP4 KG0GWSP4 ; 
      15 KUJXQAND KUJXQAND ; 
      15 KG0GWQA1 KG0GWQA1 ; 
      15 KG0GWQA2 KG0GWQA2 ; 
      15 KG0GWQA3 KG0GWQA3 ; 
      15 KG0GWQA4 KG0GWQA4 ; 
      15 KUJGRP KUJGRP ; 
end // end KG0GW04

// application
DataItem KG0GW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KG0GW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KG0GW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KG0GW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for w04
DataItem KG0GW4GR char(1334)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD LENGTH
DataItem KG0GW4LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to dept change
DataItem KG0GWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen detail counter
DataItem KG0GWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem KG0GWCO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID
DataItem KG0GWCO-CHAR char(7)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// dept index
DataItem KG0GWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of dept flag
DataItem KG0GWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error flag
DataItem KG0GWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept found flag
DataItem KG0GWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// grp level for w04
DataItem KG0GWGRP char(266)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KG0GWKC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   department number
DataItem KG0GWKD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key for abending
DataItem KG0GWKEY char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KG0GWLC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KG0GWLC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KG0GWLC3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KG0GWLC4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max nbr of occurances
DataItem KG0GWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page counter
DataItem KG0GWPGC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total nbr of dept temp recs
DataItem KG0GWPGT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates pending flag
DataItem KG0GWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KG0GWQA1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KG0GWQA2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KG0GWQA3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KG0GWQA4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size of temp storage
DataItem KG0GWSIZ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KG0GWSP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KG0GWSP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KG0GWSP3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KG0GWSP4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update mode flag
DataItem KG0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea passed
DataItem KG0GWUSR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first char for xnxcd
DataItem KG0GWXC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second char for xnxcd
DataItem KG0GWXC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character xnxcd
DataItem KG0GWXCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric xnxcd
DataItem KG0GWXNU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nike dept code
DataItem KG0GWXNX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first screen with updates
DataItem KG0GWXXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

