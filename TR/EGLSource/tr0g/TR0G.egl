package tr0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TR0G ****
// ************************************************************
// **               TRANSPORTATION SYSTEM                    **
// ************************************************************
// **                                                        **
// 
//           DOWN LOAD CORP TABLES FOR VALID FF CODES
//           ----------------------------------------
// 
// This application will download corporate tables for valid
// ff-codes.
// 
// After validating input data, it will submit batch process
// TS2861 in the back ground, on pressing PF9 key.
// 
// This application can be accessed from one of the following
// applications:
// 
//    1. TS0A - TRANSPORTATION MAIN MENU
// 
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
// TS1758   08/12/98 RVEMPA  NEW APPLICATION
//          09/21/98 SMANN2  Incorporate call to Ts2901 proc
// *********************
Program TR0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TR0GW01 TR0GW01; // record
  TR0GW02 TR0GW02; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSWREC TSWREC; // record
  XCTHREC XCTHREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TR0GTBL {deleteAfterUse = yes}; // table
  use TR0GT01 {deleteAfterUse = yes}; // table
  use TR0GTP1 {deleteAfterUse = yes}; // table
  use TR0GM.TA0PM001,  // forms
      TR0GM.TR0GM001, 
      TR0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTR001: XPTR001();

     /* ------------------------------------------------------------*/
      /* Initialize maps and working storage records.*/
     /* ------------------------------------------------------------*/

    set TR0GM001 initial;

    set TR0GW01 empty;

    set TA1REC empty;
    set TAEREC empty;
    set SQLCA empty;


    TR0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " ";

     /* ------------------------------------------------------------*/
     /* Store valid FF codes from CSP table in a temporary array:*/
     /* ------------------------------------------------------------*/

    TR0GW02.TR0GTAIX = 1;

    while (TR0GTBL.FFCODE[TR0GTAIX] != "EOF")
      TR0GW02.TR0GTAFF[TR0GTAIX] = TR0GTBL.FFCODE[TR0GTAIX];
      TR0GW02.TR0GTAIX = TR0GW02.TR0GTAIX + 1;
    end

    TR0GW02.TR0GTAIX = 0;


     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto TR0G-01000;

     /* ********************** End of XPTR001 - FLOW ****************/
    TR0G-01000: TR0G-01000();
    goto TR0G-01000;
  end // end main
end // end TR0G

// Format/submit a background job
Function TR0G-001()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TR0GTP1.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TR0GWPRM = " "; /* INITIALIZE*/
      TR0GWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TR0GW01.TR0GWP-FF-CODE = TR0GM001.FF-CODE; /* FF CODE*/
      TA6REC.TARJCL[TA6INDEX] = TR0GWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TR0GTP1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TR0GTP1.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TR0GTP1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(436);
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of TR0G-001   ********************/

end // end TR0G-001

// Format/submit a background job
Function TR0G-002()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TR0GT01.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TR0GWPRM = " "; /* INITIALIZE*/
      TR0GWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TR0GW01.TR0GWP-FF-CODE = TR0GM001.FF-CODE; /* FF CODE*/
      TA6REC.TARJCL[TA6INDEX] = TR0GWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TR0GT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TR0GT01.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TR0GT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(436);
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of TR0G-002 ********************/

end // end TR0G-002

// Main process
Function TR0G-01000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  TR0G-10000(); /* Format and display MAP 1*/

  TR0G-20000(); /* Check attention identifier*/

  TR0G-30000(); /* Reset fields to normal intensity*/

  TR0G-40000(); /* Verify the data that was entered*/

  TR0G-50000(); /* perform the download*/

  TR0G-60000(); /* Exit to application*/

   /* **                                                        ***/
   /* ********************** End of TR0G-01000 ********************/

end // end TR0G-01000

// Display MAP 1
Function TR0G-10000()
   /* ------------------------------------------------------------*/
   /* Show the map.*/
   /* Indicate sound alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/
    TR0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  else
    set TR0GM001 alarm; /* Indicate sound alarm*/
  end

  if (TSWREC.XXXMSGNO != 0)
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end
                                   /* Error message passed back from*/
                                  /* called application*/
    TSWREC.XXXMSGNO = 0;
    set TR0GM001 alarm; /* Indicate sound alarm*/
  end

  converse TR0GM001 ;

  TR0G-11000();
   /* **                                                        ***/
   /* ********************** End of TR0G-10000 ********************/


end // end TR0G-10000

Function TR0G-11000()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TR0GM001.FF-CODE == "?") /* if any ? entered*/
    TR0GW01.POPSW = "Y";
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   FF        "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      TR0G-FF01(); /* perform ff window*/
    end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TR0GM001.FF-CODE = TR0GTBL.FFCODE[XX0XWPIX]; /* mv cd*/
    else
      TR0GM001.FF-CODE = " "; /* clear fields*/
    end
    set TR0GM001.FF-CODE cursor; /* Set cursor*/

    converseLib.clearScreen();
     /* Restore the original map*/

    exit stack;

  end
end // end TR0G-11000

// Check attention identifier
Function TR0G-20000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TR0GM001 initial; /* Clear MAP 1*/

    set TR0GW01 empty;

    exit stack; /* Exit to redisplay map*/

  end

  if (TR0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = TR0GM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = TR0GM001.CAITEM; /* Application data*/

      XSTSS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set TR0GM001.CATOAP cursor, modified, bold; /* Highlight*/

    TR0GM001.XXXPRCNM = "F-20000"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (TR0GM001.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set TR0GM001.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        TR0GM001.XXXPRCNM = "F-20000"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "F-20000"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "TS0A"; /* Transfer to Trans  menu*/
      end

      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        COMMAREA.CATOAP = "MN0M"; /* Transfer to Master menu*/
      end
    end

    XSTSS02(); /* Exit to another application*/

    TR0GM001.XXXPRCNM = "F-20000"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  /* IF EZEAID IS ENTER              /* ENTER was not pressed*/
  /* OR EZEAID IS PF9;*/
   /* NEXT SENTENCE*/
  if (TR0GM001.FF-CODE == "?"
   && converseVar.eventKey is enter)
       /* NEXT SENTENCE*/
  else

    if (converseVar.eventKey is pf9) /* PF9 was*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      TR0GM001.XXXPRCNM = "F-20000"; /* Process name*/

      if (converseVar.eventKey is pa1 /* PA1 was pressed*/
       || converseVar.eventKey is pa3) /* or PA3 was pressed*/

        set TR0GM001 initial; /* Clear MAP 1*/

        set TR0GW01 empty;

      end

      exit stack; /* Exit to redisplay map*/

    end
  end

   /* **                                                        ***/
   /* ********************** End of TR0G-20000 ********************/
end // end TR0G-20000

// Reset highlighted fields
Function TR0G-30000()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TR0GM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set TR0GM001.CAITEM initialAttributes; /* FAST PATH application data*/

  set TR0GM001.FF-CODE initialAttributes; /* FF CODE*/

end // end TR0G-30000

// Verify data that was entered
Function TR0G-40000()
   /* ------------------------------------------------------------*/
   /* Verify entered values on MAP 1.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (TR0GM001 is modified) /* If MAP 1 modified*/
    TR0GW01.MODSW = "Y"; /* set up mod. switch*/
    TR0GW01.WHSE-ERR-SW = " "; /* any change requires WHSECD verify*/
  end

  if (TR0GW01.POPSW == "Y")
    TR0GW01.MODSW = "Y"; /* set up mod. switch*/
    TR0GW01.WHSE-ERR-SW = " "; /* any change requires WHSECD verify*/
  end


   /* -----------------------------------------------------------*/
   /* Check for valid FF codes:*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf9)
    if (TR0GM001.FF-CODE == " ")
      converseLib.validationFailed(35);
    else
      TR0GW02.TR0GTAFL = "N";
      TR0GW02.TR0GTAIX = 1;

      while (TR0GW02.TR0GTAFL == "N"
       && TR0GW02.TR0GTAIX <= 12)
        if (TR0GM001.FF-CODE == TR0GW02.TR0GTAFF[TR0GTAIX])
          TR0GW02.TR0GTAFL = "Y";
        else
          TR0GW02.TR0GTAIX = TR0GW02.TR0GTAIX + 1;
        end
      end

      if (TR0GW01.MODSW == "Y")
         /* NEXT SENTENCE*/
      end

      if (TR0GW02.TR0GTAFL == "N")
        converseLib.validationFailed(437);
        exit stack;
      end
    end
  end

  if (TR0GW01.MODSW == "Y")
    TR0GW01.MODSW = " ";
    TR0GW01.UPDSW = " "; /* Init. 'ready to update' switch*/
    TR0GW01.POPSW = " "; /* Init. 'ready to update' switch*/

    if (TR0GM001.FF-CODE > " ") /* If FF CODE entered*/
      if (TR0GM001.FF-CODE == TR0GW01.FF-CODE)
        if (TR0GW01.WHSE-ERR-SW == "Y") /* already verified and in error*/
          set TR0GM001.FF-CODE cursor, bold;
          converseLib.validationFailed(437); /* Indicate invalid selection*/
          TR0GM001.XXXPRCNM = "F-40000"; /* Process name*/

          exit stack; /* Exit to redisplay map*/
        end
      else /* New po or/and new region entered*/
        TR0GW01.FF-CODE = " "; /* Initialize w.s. fields*/
        TR0GW01.WHSE-ERR-SW = " "; /* and error switch*/

        TR0GW01.FF-CODE = TR0GM001.FF-CODE;
        TR0G-41000(); /* Verify FF Code*/

        TR0GW01.FF-CODE = TR0GM001.FF-CODE; /* Save FF CODE*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          TR0GW01.WHSE-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    else
      set TR0GM001.FF-CODE cursor, bold;
      converseLib.validationFailed(35); /* Indicate invalid selection*/
      TR0GM001.XXXPRCNM = "F-20000"; /* Process name*/

      exit stack; /* Exit to redisplay map*/
    end

    TR0GM001.XXXPRCNM = "TR0G   ";
    TR0GW01.MODSW = " "; /* Init. 'map modified' switch*/


  end

   /* **                                                        ***/
   /* ********************** End of TR0G-40000 ********************/
end // end TR0G-40000

// Process input
Function TR0G-41000()
   /* ------------------------------------------------------------*/
   /*  */
   /* redisplay screen, scroll screen, continue or exit*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* ===> if errors have occurred*/
    return; /* ===> redisplay screen*/
  end

   /* IF EZEAID IS ENTER*/
  if (converseVar.eventKey is pf9)
    if (TR0GW02.TR0GTAFL == "N")
      TR0GM001.XXXPRCNM = "F-41000"; /* ===> Module Identity*/
      converseLib.validationFailed(437); /* ===> FF  code invalid*/
    else
      if (TR0GW01.UPDSW != "Y")
        converseLib.validationFailed(435); /* ===> Confirm download*/
        TR0GW01.UPDSW = "Y"; /* ===> Set Update switch*/
      end
    end
    return; /* ===> Exit to Display map*/

  end

  if (converseVar.eventKey is enter)
    if ((TR0GM001.FF-CODE > " "))
      converseLib.validationFailed(4);
      exit stack;
    end
  end
   /* **                                                        ***/
   /* ********************** End of TR0G-41000 ********************/
end // end TR0G-41000

// Process PF9 key
Function TR0G-50000()
   /* ------------------------------------------------------------*/
   /*  */
   /* redisplay screen, scroll screen, continue or exit*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   && TR0GW01.UPDSW == "Y")
    if (TR0GW02.TR0GTAFL == "N")
      converseLib.validationFailed(437); /* ===> FF code invalid*/
      TR0GM001.XXXPRCNM = "F-50000"; /* ===> Module Identity*/
      TR0GW01.UPDSW = " ";
      exit stack; /* ===> Exit to Display map*/
    else
      TR0G-51000();
      exit stack;
    end
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of TR0G-50000 ********************/
end // end TR0G-50000

// process valid input request
Function TR0G-51000()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end
                                           /* successful*/
  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TR0G-001(); /* format prod batch sub*/
  else
    TR0G-002(); /* format test batch sub*/
  end

  return;

   /* **                                                        ***/
   /* ********************** End of TR0G-51000 ********************/
end // end TR0G-51000

// transfer to other applications
Function TR0G-60000()
   /* ----------------------------------------------------*/
   /* exit application*/
   /* ----------------------------------------------------*/
   /*  */

  COMMAREA.CATOAP = "TS0A"; /* Set current to TS0A*/
  COMMAREA.CAFROMAP = "TR0G"; /* Set coming from to TR0G*/
  TSWREC.TSWFRAPP = " ";
  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  XSTSS01(); /* transfer to application*/

  TR0GM001.XXXPRCNM = "F-60000"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

   /* **                                                        ***/
   /* ********************** End of TR0G-60000 ********************/
end // end TR0G-60000

// converse pop up window
Function TR0G-FF01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && TR0GTBL.FFCODE[XX0XWCT1] != "EOF") /* Or end of data*/

        XX0XM001.XX0XMCD[XX0XWCT2] = TR0GTBL.FFCODE[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/

        XX0XM001.XX0XMCD[XX0XWCT2] = TR0GTBL.FFCODE[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && TR0GTBL.FFCODE[XX0XWCT1] == "EOF") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end TR0G-FF01

//*** RECORD=TR0GW01 ****
// Working storage for application TR0G.
// 
// ***********************
Record TR0GW01 type basicRecord
  10 * char(1) ; // MAP 1 modify switch
  10 MAP2MODSW MAP2MODSW ; 
  10 MAP2SW MAP2SW ; 
  10 SELSW SELSW ; 
  10 UPDSW UPDSW ; 
  10 MODSW MODSW ; 
  10 POPSW POPSW ; 
  10 TR0GWSWF TR0GWSWF ; 
  10 TR0GMMSG TR0GMMSG ; 
  10 TR0GWSWC TR0GWSWC ; 
  10 TR0GWPSW TR0GWPSW ; 
  10 TR0GWFEX TR0GWFEX ; 
  10 WHSE-ERR-SW WHSE-ERR-SW ; 
  10 * char(1) ; // Cursor end of file switch
  10 TR0GWMAP TR0GWMAP ; 
  10 TR0GWMGC TR0GWMGC ; 
  10 TR0GWSCC TR0GWSCC ; 
  10 FF-CODE FF-CODE ; 
  10 TR0GWPRM TR0GWPRM ; 
    15 TR0GWPID TR0GWPID ; 
    15 TR0GWP-FF-CODE TR0GWP-FF-CODE ; 
    15 TR0GWFIL TR0GWFIL ; 
end // end TR0GW01

//*** RECORD=TR0GW02 ****
// Store valid FF codes from CSP table in a temporary array
// ***********************
Record TR0GW02 type basicRecord
  10 TR0GTAFL TR0GTAFL ; 
  10 TR0GTAIX TR0GTAIX ; 
  10 TR0GTAFF TR0GTAFF [12] ; 
end // end TR0GW02

// FF-CODE
DataItem FF-CODE char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up-window switch
DataItem POPSW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GMMSG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary array FF CODE
DataItem TR0GTAFF char(9)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Temporary array flag
DataItem TR0GTAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary array index
DataItem TR0GTAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0GWFEX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWFIL char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWMAP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWMGC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWP-FF-CODE char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWPID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TR0GWPSW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0GWSCC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0GWSWC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TR0GWSWF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

