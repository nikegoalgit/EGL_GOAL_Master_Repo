package tr0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TR0E ****
// This is a Transportaion Program designed to allow users to
// identify then select PO numbers that need to be RE-sent.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/08/98   JGuido   New application.
// *********************
Program TR0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC8REC PC8REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TR0EW01 TR0EW01; // record
  TR0EW02 TR0EW02; // record
  TR0EW03 TR0EW03; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  VFCTY002 VFCTY002; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOREG01 VPOREG01; // record
  VPOTYP01 VPOTYP01; // record
  VPOVFY01 VPOVFY01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use TR0EM.TR0EM001,  // forms
      TR0EM.TR0EM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTR001: XPTR001();
     /* ------------------------------------------------------------*/
     /* Initialize maps and working storage records.*/
     /* ------------------------------------------------------------*/

    set TR0EM001 initial;
    set TR0EM002 initial;

    set VPOITM03 empty;
    set TR0EW01 empty;
    set TR0EW02 empty;
    set TA1REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set XX0XW02 empty;


    TR0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " ";

     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto TR0E001;


    TR0E001: TR0E001();
     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto TR0E001;


  end // end main
end // end TR0E

// Main process
Function TR0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TR0EW01.MAP2SW != "Y")

    TR0E100(); /* Format and display MAP 1*/

    TR0E200(); /* Check attention identifier*/

    TR0E300(); /* Reset fields to normal intensity*/

    TR0E400(); /* Verify the data that was entered*/

  else

    TR0E500(); /* MAP 2 routine*/

  end

end // end TR0E001

// Display MAP 1
Function TR0E100()
   /* ------------------------------------------------------------*/
   /* Show the map.*/
   /* Indicate sound alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/

    TR0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  else

    set TR0EM001 alarm; /* Indicate sound alarm*/

  end

  if (TSWREC.XXXMSGNO != 0)

    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end
                                   /* Error message passed back from*/
                                  /* called application*/
    TSWREC.XXXMSGNO = 0;

    set TR0EM001 alarm; /* Indicate sound alarm*/

  end

  converse TR0EM001 ;


end // end TR0E100

// Check attention identifier
Function TR0E200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TR0EM001 initial; /* Clear MAP 1*/

    set VPOITM03 empty; /* Clear w.s. records*/
    set TR0EW01 empty;
    set TR0EW02 empty;
    TR0ES83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/

  end

  if (TR0EM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = TR0EM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = TR0EM001.CAITEM; /* Application data*/

      TR0ES83(); /* Purge tsq*/

      XSTSS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set TR0EM001.CATOAP cursor, modified, bold; /* Highlight*/

    TR0EM001.XXXPRCNM = "TR0E200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (TR0EM001.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set TR0EM001.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        TR0EM001.XXXPRCNM = "TR0E200"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TR0EM001"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "TS0A"; /* Transfer to Trans  menu*/
      end

      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        COMMAREA.CATOAP = "MN0M"; /* Transfer to Master menu*/
      end
    end

    TR0ES83(); /* Purge tsq*/

    XSTSS02(); /* Exit to another application*/

    TR0EM001.XXXPRCNM = "TR0E200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TR0EM001.XXXPRCNM = "TR0E200"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set TR0EM001 initial; /* Clear MAP 1*/

      set VPOITM03 empty; /* Clear w.s. records*/
      set TR0EW01 empty;
      set TR0EW02 empty;
      TR0ES83(); /* Purge tsq*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end TR0E200

// Reset highlighted fields
Function TR0E300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TR0EM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set TR0EM001.CAITEM initialAttributes; /* FAST PATH application data*/

  set TR0EM001.PONBR initialAttributes; /* PO*/
  set TR0EM001.XGPCD initialAttributes; /* GPC*/

end // end TR0E300

// Verify data that was entered
Function TR0E400()
   /* ------------------------------------------------------------*/
   /* Verify entered values on MAP 1.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (TR0EM001 is modified) /* If MAP 1 modified*/
    TR0EW01.MODSW = "Y"; /* set up mod. switch*/
    TR0EW01.WRITE-TSQ-SW = " "; /* init. 'data written to tsq' sw.*/
    TR0EW01.PO-ERR-SW = " "; /* any change requires PO verify*/
  end


  if (TR0EW01.MODSW == "Y")
    TR0EW01.UPDSW = " "; /* Init. 'ready to update' switch*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TR0EM001.XGPCD in XGPTBL.XGPCD) /* Check valid code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XGPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(028); /* Display error message*/
      TR0EM001.XXXPRCNM = "TR0E400"; /* Process name*/
      set TR0EM001.XGPCD cursor, modified, bold; /* highlight field*/

      exit stack; /* Exit to redisplay map*/

    else /* Move description to table*/
      TSWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex]; /* save code*/
    end


    if (TR0EM001.PONBR > 0) /* If PO NUMBER entered*/
      if (TR0EM001.PONBR == TR0EW01.PONBR)
        if (TR0EW01.PO-ERR-SW == "Y") /* already verified and in error*/
          set TR0EM001.PONBR cursor, bold;
          converseLib.validationFailed(69); /* Indicate invalid selection*/
          TR0EM001.XXXPRCNM = "TR0E400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/
        end
      else /* New po or/and new region entered*/
        TR0EW01.PONBR = 0; /* Initialize w.s. fields*/
        TR0EW01.PO-ERR-SW = " "; /* and error switch*/

        TR0EW01.PC3PONBR = TR0EM001.PONBR;
        TR0ES60(); /* Verify po number*/

        TR0EW01.PONBR = TR0EM001.PONBR; /* Save the values*/

        if (converseVar.validationMsgNum != 0) /* If error*/
          if (SQLCA.VAGen_SQLCODE == 100) /* If po not found*/
            TR0EW01.PO-ERR-SW = "Y";
          end

          exit stack; /* Exit to redisplay map*/

        end
      end
    else
      set TR0EM001.PONBR cursor, bold;
      converseLib.validationFailed(35); /* Indicate invalid selection*/
      TR0EM001.XXXPRCNM = "TR0E400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/
    end


    TR0EM001.XXXPRCNM = "TR0E   ";
    TR0EW01.MAP2SW = "Y"; /* Show MAP 2*/
    TR0EW01.MODSW = " "; /* Init. 'map modified' switch*/

  end



end // end TR0E400

// MAP 2 routine
Function TR0E500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  TR0E510(); /* Format and display MAP 2*/

  TR0E520(); /* Check attention identifier*/

  TR0E530(); /* Reset fields to normal intensity*/

  TR0E540(); /* Verify the data that was entered*/

  TR0E550(); /* Process valid input request*/



end // end TR0E500

// Display MAP 2
Function TR0E510()
   /* ------------------------------------------------------------*/
   /* Write data selected from DPRODC.VPOITM03 to temporary*/
   /* storage queue.*/
   /* Display MAP 2.*/
   /* If error, display the returned message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* If no errors*/
    if (TR0EW01.WRITE-TSQ-SW == " ") /* If data is not written to tsq*/

      set TR0EM002 initial; /* Clear MAP 2*/
      set TR0EW02 empty; /* Clear w.s. tsq rec.*/

      TR0EW01.MAP2MODSW = " "; /* Init. MAP 2 modified switch*/

      TR0EW01.STOPSW = " "; /* Init. stop processing switch*/

                                  /* Init. update items*/
      TR0EW01.METSDT = 0; /* ETS date*/
      TR0EW01.MYMTCD = " "; /* Mode trans.*/
      TR0EW01.MPC6STAT = " "; /* Status*/


      TR0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

      TR0ES80(); /* Select rows from DPRODC.VPOITM03*/

      TR0ES81(); /* Fetch first row*/
      if (TR0EW01.STOPSW == "Y") /* If wrong selection*/
        set TR0EM001.XGPCD cursor;
        TR0EM001.XXXPRCNM = "TR0E510"; /* Module name*/
        TR0EW01.MAP2SW = " "; /* Show MAP 1*/
        converseLib.validationFailed(276); /* Send error msg*/

        exit stack;

      end


      TR0ES83(); /* Purge tsq*/


      TR0EW01.TR0ESUB1 = 1;

      while (TR0EW01.STOPSW != "Y") /* Write VPOITM03 data to tsq*/

        if (TR0EW01.TR0ESUB1 > 12)

          TR0ES84(); /* Write page to tsq*/

          set TR0EW02 empty; /* Clear w.s. tsq rec*/

          TR0EW01.TR0ESUB1 = 1;
        end

        /* Move DB2 data to tsq rec.*/

        TR0EW02.TR0EW02-DATA[TR0ESUB1] = VPOITM03.VPOITM03-GROUP;

        TR0EW01.TR0ESUB1 = TR0EW01.TR0ESUB1 + 1;

        TR0ES81(); /* Fetch next row*/

      end


      TR0ES84(); /* Write page to tsq*/


      TR0ES82(); /* Close cursor*/

      TR0EW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' switch*/
                                  /* Save max. number of pages*/
      TR0EW01.TR0E-PAGE-COUNT-MAX = TR0EW01.TR0E-PAGE-COUNT;
      TR0EW01.TR0E-PAGE-COUNT = 1; /* Set page counter*/
      TR0E522(); /* Display tsq data on map*/
    end
  end



  converse TR0EM002 ;
end // end TR0E510

// Check attention identifier
Function TR0E520()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf10 /* Pf10 was pressed (go to MAP 1)*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/
    TR0EW01.MAP2SW = " "; /* Init. MAP 2 switch*/
    TR0EW01.MODSW = "Y"; /* Init. MAP 1 modified switch*/
                            /* Init. 'selected data written to tsq' switch*/
    TR0EW01.WRITE-TSQ-SW = " ";

    TR0ES83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf7) /* Pf7 was pressed (scroll back)*/
    TR0E521(); /* Check if rows were selected on map*/
                                  /* for update*/
    if (TR0EW01.TR0E-PAGE-COUNT < 2) /* If there is no previous page*/
      converseLib.validationFailed(2); /* display message*/
      TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/
    else
      TR0EW01.TR0E-PAGE-COUNT = TR0EW01.TR0E-PAGE-COUNT - 1;

                                  /* Save update items*/


      set TR0EM002 initial; /* Clear MAP 2*/
      TR0E522(); /* Display tsq data on map*/
    end

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf8) /* Pf8 was pressed (scroll forward)*/
    TR0E521(); /* Check if rows were selected on map*/
                                  /* for update*/
    if (TR0EW01.TR0E-PAGE-COUNT >= TR0EW01.TR0E-PAGE-COUNT-MAX)
                                  /* If there are no more pages*/
      converseLib.validationFailed(3); /* display message*/
      TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/
    else
      TR0EW01.TR0E-PAGE-COUNT = TR0EW01.TR0E-PAGE-COUNT + 1;

                                  /* Save update items*/


      set TR0EM002 initial; /* Clear MAP 2*/
      TR0E522(); /* Display tsq data on map*/
    end
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TR0EM001 initial; /* Clear MAP 1*/
    set TR0EM002 initial; /* Clear MAP 2*/

    set VPOITM03 empty; /* Clear w.s. records*/
    set TR0EW01 empty;
    set TR0EW02 empty;
    TR0ES83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/

  end

  if (TR0EM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = TR0EM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = TR0EM002.CAITEM; /* Application data*/

      TR0ES83(); /* Purge tsq*/

      XSTSS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set TR0EM002.CATOAP cursor, modified, bold; /* Highlight*/

    TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (TR0EM002.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set TR0EM002.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TR0EM002"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        COMMAREA.CATOAP = "TS0A"; /* Transfer to Master menu*/
      end
    end

    TR0ES83(); /* Purge tsq*/

    XSTSS01(); /* Exit to another application*/

    TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* PF6 was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TR0EM002.XXXPRCNM = "TR0E520"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set TR0EM001 initial; /* Clear MAP 1*/
      set TR0EM002 initial; /* Clear MAP 2*/

      set VPOITM03 empty; /* Clear w.s. records*/
      set TR0EW01 empty;
      set TR0EW02 empty;
      TR0ES83(); /* Purge tsq*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end TR0E520

// Check select code values
Function TR0E521()
   /* ------------------------------------------------------------*/
   /* Check if rows for update were selected on map.*/
   /* Make select values on map and on tsq match.*/
   /* ------------------------------------------------------------*/

                        /* Check if rows were selected on map for update*/
  TR0EW01.TR0ESUB1 = 1;
  while (TR0ESUB1 <= 12
   && TR0EM002.PO-DATA[TR0ESUB1] != " ")

    if (TR0EM002.TR0ESEL[TR0ESUB1] != " ")
      TR0EW01.MAP2MODSW = "Y"; /* Set 'map2 modified' switch*/
      if (TR0EM002.TR0ESEL[TR0ESUB1] != "S") /* Verify if 'S' was entered*/
        set TR0EM002.TR0ESEL[TR0ESUB1] cursor, bold;
        converseLib.validationFailed(13); /* Indicate invalid selection*/
        TR0EM002.XXXPRCNM = "TR0E521"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
    TR0ESUB1 = TR0ESUB1 + 1;
  end


                                  /* Select code values on map*/
                                  /* should match tsq select values*/
  TR0EW01.SELSW = " ";
  TR0EW01.TR0ESUB1 = 1;
  while (TR0ESUB1 <= 12
   && TR0EM002.PO-DATA[TR0ESUB1] != " ")

    if (TR0EM002.TR0ESEL[TR0ESUB1] != TR0EW02.TR0ESEL[TR0ESUB1])
      TR0EW02.TR0ESEL[TR0ESUB1] = TR0EM002.TR0ESEL[TR0ESUB1];
      TR0EW01.SELSW = "Y";
    end

    TR0ESUB1 = TR0ESUB1 + 1;
  end

                                  /* If select values on map were*/
  if (TR0EW01.SELSW == "Y") /* changed,*/
    TR0ES85(); /* rewrite tsq page*/
  end

end // end TR0E521

// Format MAP 2
Function TR0E522()
   /* ------------------------------------------------------------*/
   /* Read tsq page.*/
   /* Move data from tsq page and w.s. to MAP 2.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = TR0EW01.TR0E-PAGE-COUNT; /* Page number*/
  TR0ES86(); /* Read tsq page*/


  TR0ESUB1 = 1;

  while (TR0ESUB1 <= 12
   && TR0EW02.PC3PONBR[TR0ESUB1] != 0)

    TR0EM002.TR0ESEL[TR0ESUB1] = TR0EW02.TR0ESEL[TR0ESUB1];
    TR0EW03.PO-DATA = " ";
    TR0EW03.PO-REG-CD = TR0EW02.PO-REG-CD[TR0ESUB1];
    TR0EW01.REMOVE-LEAD-ZERO = TR0EW02.PC3PONBR[TR0ESUB1];
    TR0ES35(); /* remove leading zeros*/
    TR0EW03.PC3PONBR-CHAR = TR0EW01.REMOVE-LEAD-ZERO-9BYTES;
    TR0EW01.POID = " ";
    TR0EW01.POID-SESN = TR0EW02.PCFSECD[TR0ESUB1];
    TR0EW01.POIDT = TR0EW02.PC3POIDT[TR0ESUB1];
    TR0EW01.POID-MO-RNG = TR0EW01.POIDT-MO-RNG;
    TR0EW01.POID-FCTY = TR0EW02.FY1FCTYC[TR0ESUB1];
    TR0EW03.POID = TR0EW01.POID;
    TR0EW03.SY1STNBR = TR0EW02.SY1STNBR[TR0ESUB1];
    TR0EW03.SY2CLRID = TR0EW02.SY2CLRID[TR0ESUB1];
    TR0EW03.PC4ORTYP = TR0EW02.PC4ORTYP[TR0ESUB1];
    TR0EW03.XWHCD = TR0EW02.XWHCD[TR0ESUB1];
    TR0EW03.PC2CUXID = TR0EW02.PC2CUXID[TR0ESUB1];
    TR0EW03.PC6PLAN-NUMERIC = TR0EW02.PC6PLAN[TR0ESUB1];
    TR0EW03.CHANGEDT = TR0EW02.ZZZCHGDT[TR0ESUB1];
    TR0EW01.REMOVE-LEAD-ZERO = TR0EW02.PC6TORDE[TR0ESUB1];
    TR0ES35(); /* remove leading zeros*/
    TR0EW03.PC6TORDE-CHAR = TR0EW01.REMOVE-LEAD-ZERO-7BYTES;
    TR0EW03.YMTCD = TR0EW02.YMTCD[TR0ESUB1];
    TR0EW03.PC6STAT = TR0EW02.PC6STAT[TR0ESUB1];
    TR0EM002.PO-DATA[TR0ESUB1] = TR0EW03.PO-DATA;

    TR0ESUB1 = TR0ESUB1 + 1;
  end


  while (TR0ESUB1 <= 12) /* Protect select codes of empty map*/
                                  /* lines*/

    set TR0EM002.TR0ESEL[TR0ESUB1] skip, noHighLight;
    TR0EM002.PO-DATA[TR0ESUB1] = " ";

    TR0ESUB1 = TR0ESUB1 + 1;
  end



  TR0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Display current date*/

                                  /* Display update items*/





end // end TR0E522

// Reset highlighted fields
Function TR0E530()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TR0EM002.CATOAP initialAttributes; /* FAST PATH to application*/
  set TR0EM002.CAITEM initialAttributes; /* FAST PATH application data*/


  TR0EW01.TR0ESUB2 = 1;

  while (TR0ESUB2 <= 12 /* Select code*/
   && TR0EM002.PO-DATA[TR0ESUB2] != " ")

    set TR0EM002.TR0ESEL[TR0ESUB2] initialAttributes;

    TR0ESUB2 = TR0ESUB2 + 1;
  end

end // end TR0E530

// Verify data that was entered
Function TR0E540()
   /* ------------------------------------------------------------*/
   /* Verify entered update items.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (TR0EM002 is modified) /* If MAP 2 modified*/
    TR0EW01.MAP2MODSW = "Y"; /* Set 'map 2 modified' switch*/
    TR0EW01.UPDSW = " "; /* Init. 'ready to update ' switch*/
  end


  if (converseVar.eventKey is pf6)
    TR0E542(); /* Pf6 (select all) routine*/
    TR0EW01.MAP2MODSW = "Y"; /* Set 'map 2 modified' switch*/
  end


  if (TR0EW01.MAP2MODSW == "Y")

    if (converseVar.eventKey not pf6)
      TR0E521(); /* Check if rows were selected on map*/
                                  /* for update*/
    end
                                  /* If update items not entered:*/


    TR0EW01.MAP2MODSW = " "; /* Init. 'map 2 modified' switch*/
    TR0EW01.UPDSW = "Y"; /* Set update switch ('ready to update')*/
    TR0EM002.XXXPRCNM = "TR0E   ";
    if (converseVar.eventKey is pf6)
      converseLib.validationFailed(531); /* Display 'updating all' msg*/
    else
      converseLib.validationFailed(384); /* Display 'pf9 to confirm request' msg*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end TR0E540

// PF6 (select all) routine
Function TR0E542()
   /* ------------------------------------------------------------*/
   /* If PF6 pressed, show that all tsq data selected for update.*/
   /* ------------------------------------------------------------*/


                                  /* Process all tsq pages*/
  TR0EW01.TR0E-UPD-PAGE-COUNT = 1;
  while (TR0EW01.TR0E-UPD-PAGE-COUNT <= TR0EW01.TR0E-PAGE-COUNT-MAX)

    TA5REC.TA5TSQIX = TR0EW01.TR0E-UPD-PAGE-COUNT;
    TR0ES86(); /* Read tsq page*/

                                  /* Process all lines of a page*/
    TR0EW01.TR0ESUB1 = 1;
    while (TR0EW01.TR0ESUB1 <= 12
     && TR0EW02.PC3PONBR[TR0ESUB1] != 0)

      TR0EW02.TR0ESEL[TR0ESUB1] = "S";

      TR0EW01.TR0ESUB1 = TR0EW01.TR0ESUB1 + 1;

    end

    TR0ES85(); /* Rewrite tsq page*/

    TR0EW01.TR0E-UPD-PAGE-COUNT = TR0EW01.TR0E-UPD-PAGE-COUNT + 1;
  end


                                  /* Save update items*/


  set TR0EM002 initial; /* Clear MAP 2*/
  TR0E522(); /* Display tsq data on map*/



end // end TR0E542

// Process valid input request
Function TR0E550()
   /* ------------------------------------------------------------*/
   /* Process all TSQ pages.*/
   /* Update database.*/
   /* ------------------------------------------------------------*/


  if (TR0EW01.UPDSW == "Y") /* If ready to update*/
    if (converseVar.eventKey is pf9 /* If PF9 was pressed*/
    )                              
      TR0EW01.SELSW = " "; /* Init. select switch*/
      TR0EW01.MODSW = "Y"; /* Set MAP 1 modified switch*/
      TR0EW01.MAP2SW = " "; /* Init. MAP 2 switch*/
      TR0EW01.WRITE-TSQ-SW = " "; /* Init. 'data written to tsq' sw.*/

                                  /* Process all tsq pages*/
      TR0EW01.TR0E-UPD-PAGE-COUNT = 1;
      while (TR0EW01.TR0E-UPD-PAGE-COUNT <= TR0EW01.TR0E-PAGE-COUNT-MAX)

        TA5REC.TA5TSQIX = TR0EW01.TR0E-UPD-PAGE-COUNT;
        TR0ES86(); /* Read tsq page*/

                                  /* Process all lines of a page*/
        TR0EW01.TR0ESUB1 = 1;
        while (TR0EW01.TR0ESUB1 <= 12
         && TR0EW02.PC3PONBR[TR0ESUB1] != 0)

          if (TR0EW02.TR0ESEL[TR0ESUB1] == "S") /* If map line selected*/


            TR0E551(); /* Database update routine*/

            TR0EW01.SELSW = "Y"; /* Set select switch*/
          end

          TR0EW01.TR0ESUB1 = TR0EW01.TR0ESUB1 + 1;

        end

        TR0EW01.TR0E-UPD-PAGE-COUNT = TR0EW01.TR0E-UPD-PAGE-COUNT + 1;
      end

                                  /* If update requested*/
      if (TR0EW01.SELSW == " ") /* but no lines selected*/
        converseLib.validationFailed(530); /* display msg*/
        set TR0EM002.TR0ESEL[1] cursor;
        TR0EM002.XXXPRCNM = "TR0E550";
        TR0EW01.MAP2SW = "Y"; /* Set up switch to display MAP 2*/
        TR0EW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' sw.*/
        TA5REC.TA5TSQIX = TR0EW01.TR0E-PAGE-COUNT; /* Page nbr*/
        TR0ES86(); /* Read tsq page*/
        return;
      end

      TR0ES83(); /* Purge tsq*/
      converseLib.validationFailed(1); /* Display 'update successful' msg*/
      TR0EW01.UPDSW = " "; /* Init. 'ready to update' switch*/

    else /* If PF9 was not pressed*/
      if (converseVar.eventKey is pf6) /* If PF6 was pressed*/
        converseLib.validationFailed(531); /* Display 'updating all' msg*/
      else
        converseLib.validationFailed(384); /* Display 'pf9 to confirm request' msg*/
      end
    end
  end


end // end TR0E550

// Database update routine
Function TR0E551()
   /* --------------------------------------------------------------*/
   /* Update all rows on VPOITM03 with the same POnbr as the one/s*/
   /* selected*/
   /* --------------------------------------------------------------*/

                 /* Move before update data from tsq to VPOITM03*/
  VPOITM03.VPOITM03-GROUP = TR0EW02.TR0EW02-DATA[TR0ESUB1];



  XX0XS01(); /* Get date and time of update*/




  TR0ES96(); /* Update (merge) po item (VPOITM03)*/


end // end TR0E551

// removes leading zeros
Function TR0ES35()
   /* ------------------------------------------------------------*/
   /* removes the leading zeros from the first 8 characters of*/
   /* a 9 byte field.*/
   /* ------------------------------------------------------------*/

  TR0EW01.SIGNIFICANT-FOUND = "N";

  if (TR0EW01.REMOVE-LEAD-ZERO1 == "0")
    TR0EW01.REMOVE-LEAD-ZERO1 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO2 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO2 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO3 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO3 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO4 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO4 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO5 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO5 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO6 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO6 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO7 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO7 = " ";
  else
    TR0EW01.SIGNIFICANT-FOUND = "Y";
  end

  if (TR0EW01.REMOVE-LEAD-ZERO8 == "0"
   && TR0EW01.SIGNIFICANT-FOUND == "N")
    TR0EW01.REMOVE-LEAD-ZERO8 = " ";
  end

end // end TR0ES35

// Select unique from VPOHDR02
Function TR0ES60()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/

  VPOHDR02.XGPCD = TSWREC.XGPCD; /* GPC*/

  VPOHDR02.PC3PONBR = TR0EW01.PC3PONBR; /* PO number*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOHDR02 to verify PO NUMBER.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set TR0EM001.PONBR cursor, bold;
        TR0EM001.XXXPRCNM = "TR0ES60"; /* Module name*/
        converseLib.validationFailed(69); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  TR0EM001.XXXPRCNM = "TR0ES60"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TR0EM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "TR0ES60"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end TR0ES60

// Select rows from VPOITM03
Function TR0ES80()
   /* --------------------------------------------------------------*/
   /* Clear the row storage area and format the select information.*/
   /* --------------------------------------------------------------*/

  set VPOITM03 empty;
  set PCYREC empty;

  VPOITM03.XGPCD = TSWREC.XGPCD; /* GPC*/


  if (TR0EM001.PONBR > 0) /* PO number entered*/

    TR0EW01.POSELSW = "Y"; /* Set 'PO selected' switch*/

    VPOITM03.PC3PONBR = TR0EM001.PONBR;

    PCYREC.PCYFUNC = "S2";
  end


   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOITM03*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TR0EW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TR0EM001.XXXPRCNM = "TR0ES80"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TR0EM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "TR0ES80"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TR0ES80

// Fetch row from VPOITM03
Function TR0ES81()
   /* ------------------------------------------------------------*/
   /* Fetch row from DPRODC.VPOITM03.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N2"; /* GET NEXT*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        TR0EW01.STOPSW = "Y"; /* Set up stop switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TR0EW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TR0EM001.XXXPRCNM = "TR0ES81"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TR0EM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "TR0ES81"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TR0ES81

// Close cursor for VPOITM03
Function TR0ES82()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOITM03*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C2"; /* CLOSE CURSOR*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TR0EW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TR0EM001.XXXPRCNM = "TR0ES82"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TR0EM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "TR0ES82"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TR0ES82

// Purge temp. storage queue
Function TR0ES83()
   /* ------------------------------------------------------------*/
   /* Purge a temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TR0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TR0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0ES83"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0EM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TR0EW01.TR0E-PAGE-COUNT = 0; /* Reset current page number*/
  TR0EW01.TR0E-PAGE-COUNT-MAX = 0; /* Reset highest page number*/


end // end TR0ES83

// Write a page to temp. storage
Function TR0ES84()
   /* ------------------------------------------------------------*/
   /* Write a page to temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TR0EW02.TR0ELEN = 3268; /* Temporary storage length*/
  TA5REC.TA5APPID = "TR0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TR0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* Return code normal*/
    TR0EW01.TR0E-PAGE-COUNT = TA5REC.TA5TSQIX; /* Page number*/
  else /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0ES84"; /* Module name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0EM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0EM002.XXXPRCNM = "TR0ES84"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to display map*/

  end


end // end TR0ES84

// Rewrite temp. storage page
Function TR0ES85()
   /* ------------------------------------------------------------*/
   /* Rewrite a temporary storage page*/
   /* ------------------------------------------------------------*/

  TR0EW02.TR0ELEN = 3268; /* Temporary storage length*/
  TA5REC.TA5APPID = "TR0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (TR0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0ES85"; /* Process name*/
    TA1REC.TA1LOC = "REWRITE TEMPORARY STORAGE PAGE";
    TA1REC.TA1MAP = "TR0EM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0EM001.XXXPRCNM = "TR0ES85"; /* Module name*/
    converseLib.validationFailed(10); /* Indicate system error*/


    exit stack; /* Exit to redisplay map*/

  end


end // end TR0ES85

// Read temp. storage queue
Function TR0ES86()
   /* ------------------------------------------------------------*/
   /* Read a temporary storage page of data*/
   /* ------------------------------------------------------------*/

  TR0EW02.TR0ELEN = 3268; /* Temporary storage length*/
  TA5REC.TA5APPID = "TR0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TR0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0ES86"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0EM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0EM001.XXXPRCNM = "TR0ES86"; /* Module name*/
    converseLib.validationFailed(10); /* Indicate system error*/


    exit stack; /* Exit to redisplay map*/

  end


end // end TR0ES86

// Update row on VPOITM03
Function TR0ES96()
   /* ------------------------------------------------------------*/
   /* Update row of DPRODC.VPOITM03*/
   /* ------------------------------------------------------------*/


  VPOITM03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/
  VPOITM03.XXXUSRID = "TR0E/RES"; /* Source of change*/


  PCYREC.PCYFUNC = "UA";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      TR0EM001.XXXPRCNM = "TR0ES96"; /* Module name*/
      converseLib.validationFailed(12); /* Send message*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back changes*/
      exit stack; /* Exit to display map*/
    end
    if (VPOITM03.PO-REG-CD == "01" /* If Region '01'*/
     && SQLCA.VAGen_SQLCODE == 0)  /* Update was successful*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Also update Europe or Asia Region if necessary*/
   /* ------------------------------------------------------------*/
  if (VPOITM03.PO-REG-CD != "01" /* Only if not region '01'*/
   && sysVar.errorCode == "00000000") /* and region '01' Call successful*/
    PCYREC.PCYFUNC = "VA";
    try
      call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
    end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        return; /* Return to previous process*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          TR0EW01.ZZZCHGCT = 0;
          while (SQLCA.VAGen_SQLCODE == 100
           && sysVar.errorCode == "00000000"
           && TR0EW01.ZZZCHGCT < 50)
            VPOITM03.ZZZCHGCT = TR0EW01.ZZZCHGCT;
            try
              call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
            end /* Updt*/
            TR0EW01.ZZZCHGCT = TR0EW01.ZZZCHGCT + 1;
          end
        end
        return; /* Return to previous process*/
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TR0EM001.XXXPRCNM = "TR0ES96"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TR0EM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ITEM ROW           ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "TR0ES96"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/

  exit stack; /* Exit to display map*/

end // end TR0ES96

//*** RECORD=TR0EW01 ****
// Working storage for application TR0E.
// Added PONBR, ZZZCHGCT       06/15/98.
// ***********************
Record TR0EW01 type basicRecord
  10 SELECT-CNT num(4) ; // delivery month
  10 PC6ETSDT PC6ETSDT ; 
  10 TR0EREG char(2) ; // region
  10 TR0EREGION char(2) ; // region
  10 PO-REG-CD PO-REG-CD ; 
    15 PO-REG-CHAR1 PO-REG-CHAR1 ; 
    15 PO-REG-CHAR2 PO-REG-CHAR2 ; 
  10 EDITDT8 num(8) ; // edit date (8 digits)
    15 EDITCC num(2) ; // edit date - cent.
    15 EDITDT6 num(6) ; // edit date (6 digits)
      20 EDITYY num(2) ; // edit date - year
        25 EDITYY1 num(1) ; // edit date - year - digit1
        25 EDITYY2 num(1) ; // edit date - year- digit2
      20 EDITMM num(2) ; // edit date - month
      20 EDITDD num(2) ; // edit date - day
  10 MODSW char(1) ; // MAP 1 modify switch
  10 MERGESW char(1) ; // MAP 1 modify switch
  10 MAP2MODSW char(1) ; // MAP 2 modify switch
  10 MAP2SW char(1) ; // MAP 2 switch
  10 SELSW char(1) ; // select row switch
  10 UPDSW char(1) ; // update switch
  10 STOPSW char(1) ; // stop processing switch
  10 WRITE-TSQ-SW char(1) ; // write selected data to tsq sw.
  10 REG-ARRAY-SW char(1) ; // 'region array loaded' switch
  10 TYP-ARRAY-SW char(1) ; // 'type array loaded' switch
  10 POSELSW char(1) ; // PO selected switch
  10 YMTCD YMTCD ; 
  10 MYMTCD char(2) ; // YMT_MODE_CD
  10 YACCD char(2) ; // YAC-COMNT-CD
  10 MYACCD char(2) ; // YAC-COMNT-CD
  10 MYACDESC char(30) ; // audit code description
  10 ETSDT num(8) ; // ETS date
  10 METSDT num(8) ; // ETS date
  10 WETSDT num(8) ; // ETS date
  10 PO-REG-DATA char(32) [99] ; // region array data
    15 PO-REG char(2) ; // region
    15 PO-REG-DESC char(30) ; // PO_REG_DESC
  10 PO-TYP-DATA char(32) [99] ; // po type array data
    15 PO-TYP char(2) ; // po type
    15 PO-TYP-DESC char(30) ; // po type description
  10 TR0ESUB1 smallint ; // subscript 1
  10 TR0ESUB2 smallint ; // subscript 2
  10 TR0E-PAGE-COUNT num(4) ; // page count
  10 TR0E-UPD-PAGE-COUNT num(4) ; // page count (for update)
  10 TR0E-PAGE-COUNT-MAX num(4) ; // tsq max. page nbr
  10 ZZZCHGCT ZZZCHGCT ; 
  10 REGSUB num(2) ; // region subscript
  10 REGSUBMAX num(2) ; // region array nbr of entries
  10 TYPSUB num(2) ; // po type subscript
  10 TYPSUBMAX num(2) ; // po type array nbr of entries
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 STNBR char(6) ; // SY_STY_NBR
  10 SY2CLRID SY2CLRID ; 
  10 PONBR PONBR ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCFSECD PCFSECD ; 
  10 PC6STAT PC6STAT ; 
  10 MPC6STAT char(2) ; // PC_ITM_STAT_CD
  10 UPDSTAT char(2) ; // PC_ITM_STAT_CD
  10 TR0ESESN char(2) ; // season cd
  10 TR0EYR num(4) ; // year
  10 POID char(10) ; // po id
    15 POID-SESN char(2) ; // po id (season)
    15 POID-MO-RNG char(4) ; // po id (month range)
    15 POID-FCTY char(4) ; // po id (factory)
  10 POIDT num(8) ; // PC_PO_ID_MO_RNG
    15 POIDT-YR num(4) ; // PC_PO_ID_MO_RNG(year)
    15 POIDT-MO-RNG num(4) ; // PC_PO_ID_MO_RNG(month range)
  10 ETSDT-ERR-SW char(1) ; // ETS date error switch
  10 REG-ERR-SW char(1) ; // region error switch
  10 PO-ERR-SW char(1) ; // po error switch
  10 FCTY-ERR-SW char(1) ; // factory error switch
  10 STY-ERR-SW char(1) ; // style error switch
  10 COLR-ERR-SW char(1) ; // color error switch
  10 SESN-ERR-SW char(1) ; // season/year error switch
  10 TYP-ERR-SW char(1) ; // type error switch
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 TR0EW-FRMT-CUST-ORD TR0EW-FRMT-CUST-ORD ; 
    15 * num(8) ; // ws for op1cuoid
    15 TR0EW-FRMT-PART-NBR TR0EW-FRMT-PART-NBR ; 
  10 PCJSEQNO PCJSEQNO ; 
  10 REMOVE-LEAD-ZERO num(9) ; // PC_EST_HDT
    15 REMOVE-LEAD-ZERO-9BYTES char(9) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO1 char(1) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO2 char(1) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO-7BYTES char(7) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO3 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO4 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO5 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO6 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO7 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO8 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO9 char(1) ; // PC_EST_HDT
  10 SIGNIFICANT-FOUND char(1) ; // PC_EST_HDT
end // end TR0EW01

//*** RECORD=TR0EW02 ****
// Working storage used to send data to tsq.
// 
// ***********************
Record TR0EW02 type basicRecord
  5 TR0ELEN TR0ELEN ; 
  5 TR0ESEL TR0ESEL [12] ; 
  5 TR0EW02-DATA TR0EW02-DATA [12] ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TR0EW02

//*** RECORD=TR0EW03 ****
// Working storage display po data on the map
// 
// ***********************
Record TR0EW03 type basicRecord
  5 PO-DATA PO-DATA ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC3PONBR-CHAR char(9) ; // PC_PO_NBR
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 POID char(10) ; // PC_PO_ID_MO_RNG
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 SY1STNBR SY1STNBR ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 SY2CLRID SY2CLRID ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 XWHCD XWHCD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC2CUXID PC2CUXID ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6PLAN-NUMERIC num(3) ; // PC_PO_PLAN_NBR
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6TORDE-CHAR char(7) ; // PC_TOT_ON_ORD_QTY
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 YMTCD YMTCD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6STAT PC6STAT ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 CHANGEDT num(8) ; // PC_EST_HDT
end // end TR0EW03

DataItem PONBR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ length
DataItem TR0ELEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line select
DataItem TR0ESEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws for op1cuoid
DataItem TR0EW-FRMT-CUST-ORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws to get ord-part-char
DataItem TR0EW-FRMT-PART-NBR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0EW02-DATA char(271)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

