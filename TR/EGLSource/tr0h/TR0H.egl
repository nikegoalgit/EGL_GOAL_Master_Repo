package tr0h;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TR0H ****
// This program allows users to pull up packing list
// information and allows them to update the factory invoice
// number.
// Currently this application can only be reached from the
// application PV0A.
// PV0A passes the Vendor number, Vendor group code and the
// Invoice number to this application. TR0H fetches the item
// details from the table DPINVC.VPVITM01. And for each PV
// item the corresponding Transportation packing list details
// are fetched and displayed on the screen.
// Users can select the packing lists and those packing lists
// will be updated with the invoice number which was passed
// from PV0A.
// PF5 can be used to get the packing list details for the
// next PV item. PF3 is used to go back to the PV0A application
// 
// CONTROL    DATE    NAME   DESCRIPTION OF CHANGE
// -------  -------- ------  ----------------------------------
//          01/07/00 VKUMAR  Initial Creation
// TS00     01/31/00 SVADDI  Made changes to populate Quality
//                           Code with corresponding dcorp.vxqa
//                           values
// TS00     06/21/00 PGHOSH  TR0HM-TS-QTY of map is increased
//                           to nine digits from five.
// 
//  ***********************************************************
// *********************
Program TR0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PVBREC PVBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TR0HW01 TR0HW01; // record
  TR0HW02 TR0HW02; // record
  TR0HW03 TR0HW03; // record
  TR0HW04 TR0HW04; // record
  TR0HW05 TR0HW05; // record
  TSHREC TSHREC; // record
  TSWREC TSWREC; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TR0HM.TR0HM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TR0H000: TR0H000();
     /* ---------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Packing list update screen*/
     /* ---------------------------------------------------------------*/

    set TSHREC empty;
    set VCPLHDJ4 empty;
    set VCPLHD04 empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TR0HW01 empty; /* Initialize working storage*/
    set TR0HW02 empty; /* Initialize temporary storage*/
    set TR0HW03 empty; /* Initialize temporary storage*/
    set TR0HM001 initial; /* Initialize map output area*/

    TR0HW01.TR0HWSWR = "Y"; /* Indicate request for data*/
    TR0HW01.TR0HWPSW = "N"; /* No errors*/
    TR0HW01.TR0HUPDS = "N"; /* Initialize successful update flag*/
    TR0HW01.TR0HDISP = "N"; /* Initialize flag*/

    TSWREC.TSWFRAPP = " "; /* Clear from application*/
    TR0HW01.TR0HWIXM = 1; /* set index*/
    TR0HW01.TR0HWITX = 0; /* set index*/


     /* ------------------------------------------------------------*/
     /* Determine whether control came from an allowed application.*/
     /* ------------------------------------------------------------*/

    goto TR0H-00000; /* Check valid from appln*/

    TR0H-00000: TR0H-00000();
     /* ------------------------------------------------------------*/
     /* Init TR0H - Update packing lists*/
     /* ------------------------------------------------------------*/

    goto TR0H001;


     /* **                                                        ***/
     /* ********************** End of TR0H-00000  - FLOW ************/
    TR0H001: TR0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Carrier Inquiry.       .*/
     /* ------------------------------------------------------------*/

    goto TR0H001; /* Converse Shipment Carrier Inquiry*/


  end // end main
end // end TR0H

// Check valid from applin
Function TR0H-00000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PV0A") /* From allowed application*/

     /* ==========  NEXT SENTENCE ==========>*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0H-00000 ********************/
end // end TR0H-00000

// Application initialization
Function TR0H000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another OR*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "PV") /* Came from pv system*/

    TSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work recor*/
  else
    set TSWREC empty; /* Initialize work record area*/

  end


end // end TR0H000

// Packing list update
Function TR0H001()
   /* ------------------------------------------------------------*/

                /* FACTORY INVOICE NUMBER UPDATE*/

   /* This is the main process used to display all the packing*/
   /* lists for the PO, style, color and dimension. And the*/
   /* selected packing lists are updated with the invc on the header.*/
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TR0HW01.TR0HWSWR == "Y" /* If request for data is yes*/
   && TR0HW01.TR0HWPSW == "N") /* and no errors*/
    TR0H100(); /* Obtain the data to display*/
  end

  TR0H200(); /* Format and display map*/

  TR0H300(); /* Check attention identifier*/

  TR0H400(); /* Reset fields to normal intensity*/

  TR0H500(); /* Verify entered data*/

  if (TR0HW01.TR0HWPSW == "N") /* If no errors*/
    TR0H600(); /* Process valid input request*/
  end

end // end TR0H001

// Obtain the data to display
Function TR0H100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move passed parameters to working storage.*/
   /* 2) Select sets and open cursors for DTRANS.VCPLHDJ4.*/

   /* ------------------------------------------------------------*/

  if (TR0HW01.TR0HWITX == 0) /* PV Item count*/

    set PVBREC empty; /* Initialize records*/

    PVBREC.PVAIVCID = TSWREC.INVC-ID; /* Invoice id*/
    PVBREC.PVOVENDR = TSWREC.VENDOR-NBR; /* Vendor number*/
    PVBREC.PVOVENDG = TSWREC.VENDOR-GRP-CD; /* Vendor group cd*/

    TR0HS06(); /* Select PV Item DPINVC.VPVITM01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set TR0HW05 empty;
      TR0HW01.TR0HWSW2 = "N"; /* Set end of selected set switch*/
      TR0HW01.TR0HWINX = 0; /* Set counter for screen ws*/

      while (TR0HW01.TR0HWSW2 == "N") /* While data exists to fetch*/
        TR0HS07(); /* Fetch and store in a table*/
      end

   /* Total number of items*/
      TR0HW01.TR0HTOIT = TR0HW01.TR0HWINX;
      TR0HS08(); /* Close PV Item*/
    end
  end


  if (TR0HW01.TR0HTOIT == 0) /* No data to display*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TR0HW01.TR0HWPSW = "Y"; /* Set problem switch*/
    TR0HW01.TR0HW-NO-DATA = "Y"; /* Set no data map 1 to 'Y'*/
    TR0HM001.TR0HPRCNM = "TR0H100"; /* Process name*/
  else
    TR0HW01.TR0HW-NO-DATA = "N"; /* Set no data*/
  end

  if (TR0HW01.TR0HWITX <= TR0HW01.TR0HTOIT) /* current item count < total*/

    if (TR0HW01.TR0HUPDS == "N") /* if not after update*/
      TR0HW01.TR0HWITX = TR0HW01.TR0HWITX + 1;
    end

    TR0HW01.TR0HUPDS = "N";

    TR0H110(); /* Purge any temporary storage*/

    TR0HS01(); /* Select set, open the cursor VCPLHDJ4*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
      set TR0HW02 empty; /* Set screen WS empty*/
      TR0HW01.TR0HWSW1 = "N"; /* Set end of selected set switch*/
      TR0HW01.TR0HWIXM = 1; /* Set counter for screen ws*/

      while (TR0HW01.TR0HWSW1 == "N") /* While data exists to fetch*/
        TR0HS02(); /* Fetch and process information*/
        if (TR0HW01.TR0HWIXM > 13) /* page is fulll page exists*/
          TR0H120(); /* add that page to temp storage*/
        end
      end

      if (TR0HW01.TR0HWSW1 == "Y") /* If last fetch of detail done*/
        if (TR0HW01.TR0HWIXM > 1) /* and a partial page exists*/
          TR0H120(); /* add that page to temp storage*/
        end
        if (TR0HW01.TR0HWSPG == 0) /* if save page is not set*/
          TR0HW01.TR0HWTSP = 1; /* initialize page number*/
        else
          TR0HW01.TR0HWTSP = TR0HW01.TR0HWSPG;
        end
        TR0HS04(); /* Close the shphd selected set*/
      end

    end
  end

  if (TR0HW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TR0HW01.TR0HWPSW = "Y";
    TR0HW01.TR0HW-NO-DATA = "Y"; /* Set no packing list*/
    TR0HM001.TR0HPRCNM = "TR0H100"; /* Process name*/
  else
    TR0HW01.TR0HW-NO-DATA = "N"; /* Set no data map*/
  end

end // end TR0H100

// Purge any temporary storage
Function TR0H110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TR0H"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TR0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0H110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TR0HW01.TR0HWTSP = 0; /* Reset current page number*/
  TR0HW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TR0H110

// Add page to temporary storage
Function TR0H120()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TR0HW02.TR0HWLEN = 1014; /* Temporary storage length*/
  TA5REC.TA5APPID = "TR0H"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TR0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0H120"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0H120"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TR0HW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TR0HW01.TR0HWIXM = 1; /* Reset display line number*/

  set TR0HW02 empty; /* Clear temporary storage record*/


end // end TR0H120

// Format and display    TR0HM001
Function TR0H200()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) If no packing list data then move only header details*/
   /* ------------------------------------------------------------*/

  if (TR0HW01.TR0HWPSW == "N" /* No error*/
   || TR0HW01.TR0HW-NO-DATA == "Y") /* If no pklist data*/
    set TR0HM001 initial; /* clear the map*/

       /* Move  heading data*/

    TR0HM001.TR0HM-GPC-CD = TR0HW05.XGP-GPC-CD[TR0HWITX];
    TR0HM001.TR0HM-PO-NBR = TR0HW05.PC-PO-NBR[TR0HWITX];
    TR0HM001.TR0HM-QUAL-CD = TR0HW05.XQA-QUAL-CD[TR0HWITX];
    TR0HM001.TR0HM-STY-NBR = TR0HW05.SY-STY-NBR[TR0HWITX];
    TR0HM001.TR0HM-COLR-CD-ID = TR0HW05.SY-COLR-CD-ID[TR0HWITX];
    TR0HM001.TR0HM-DIM-CD = TR0HW05.XDM-DIM-CD[TR0HWITX];
    TR0HM001.TR0HM-FIVC-NBR = TR0HW05.INVC-ID[TR0HWITX];
    TR0HM001.TR0HM-PRDCU-ID = TR0HW05.PC-PRDCU-ID[TR0HWITX];
    TR0HM001.TR0HM-UOM-CD = TR0HW05.XUM-UOM-CD[TR0HWITX];
    TR0HM001.TR0HM-ISEG-CD = TR0HW05.PC-CU-IN-SEG-CD[TR0HWITX];
    TR0HM001.TR0HM-WHSE-CD = TR0HW05.XWH-WHSE-CD[TR0HWITX];
    TR0HM001.TR0HM-VNDR-NBR = TR0HW05.VENDOR-NBR[TR0HWITX];
    TR0HM001.TR0HM-VNDR-GRP-CD = TR0HW05.VENDOR-GRP-CD[TR0HWITX];

    set TR0HM001.TR0HM-GPC-CD protect; /* Protect Header fields*/
    set TR0HM001.TR0HM-PO-NBR protect;
    set TR0HM001.TR0HM-QUAL-CD protect;
    set TR0HM001.TR0HM-STY-NBR protect;
    set TR0HM001.TR0HM-COLR-CD-ID protect;
    set TR0HM001.TR0HM-DIM-CD protect;
    set TR0HM001.TR0HM-PRDCU-ID protect;
    set TR0HM001.TR0HM-UOM-CD protect;
    set TR0HM001.TR0HM-ISEG-CD protect;
    set TR0HM001.TR0HM-WHSE-CD protect;
    set TR0HM001.TR0HM-VNDR-NBR protect;
    set TR0HM001.TR0HM-VNDR-GRP-CD protect;

  end

  if (TR0HW01.TR0HWPSW == "N") /* No errors found*/

    TR0H210(); /* Format the data on the page*/

    if (TR0HM001.TR0HM-BOL[1] != " ") /* if detail does exist*/
      set TR0HM001.TR0HMSEL[1] cursor; /* set cursor*/
    end

  end

  TR0HM001.TR0HCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TR0HM001 ;

  TR0HW01.TR0HWPSW = "N"; /* reset problem switch*/
  TR0HW01.TR0HW-INVALID-DATA = "N"; /* reset map problem switch*/


end // end TR0H200

// Format the selected data
Function TR0H210()
   /* ------------------------------------------------------------*/
               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TR0HW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TR0H211(); /* Obtain temporary storage page*/

    set TR0HM001.TR0HLITPG skip; /* Display "PAGE" literal*/
    set TR0HM001.TR0HLITOF skip; /* Display "OF" literal*/

    TR0HM001.TR0HTSPAG = TR0HW01.TR0HWTSP; /* Current page number*/
    TR0HM001.TA5TSQIX = TR0HW01.TA5TSQIX; /* Highest page number*/

    TR0HW01.TR0HWIXM = 1; /* Initialize line indexes*/

      /* move all lines of screen data*/

    while (TR0HW01.TR0HWIXM <= 13 /* Until end of lines*/
     && TR0HW02.TSFBOL[TR0HWIXM] != " ") /* and lines exist*/
      TR0HW01.TR0HWWDT = TR0HW02.TSFDESTE[TR0HWIXM];
                                   /* make date mmddyy*/
      TR0HW01.TR0HWMMM = TR0HW01.TR0HWWMM; /* month*/
      TR0HW01.TR0HWMDD = TR0HW01.TR0HWWDD; /* day*/
      TR0HW01.TR0HWMYY = TR0HW01.TR0HWWYY; /* year*/
      TR0HM001.TR0HM-EST-DEST-DT[TR0HWIXM] = TR0HW01.TR0HWMDT;

      TR0HW03.TSFSHPID[TR0HWIXM] = TR0HW02.TSFSHPID[TR0HWIXM];
      TR0HW03.TSNPLNBR[TR0HWIXM] = TR0HW02.TSNPLNBR[TR0HWIXM];
      TR0HM001.TR0HM-DEST-CD[TR0HWIXM] = TR0HW02.TSEDEST[TR0HWIXM];
      TR0HM001.TR0HM-BOL[TR0HWIXM] = TR0HW02.TSFBOL[TR0HWIXM];
      TR0HM001.TR0HM-CPL-STAT[TR0HWIXM] = TR0HW02.CPLSTAT[TR0HWIXM];
      TR0HM001.TR0HM-TS-QTY[TR0HWIXM] = TR0HW02.TSISHPQT[TR0HWIXM];
      TR0HM001.TR0HM-TS-FIVC[TR0HWIXM] = TR0HW02.TSFIVC[TR0HWIXM];
      TR0HM001.TR0HM-CNTNR-NBR[TR0HWIXM] = TR0HW02.TSHCNTNR[TR0HWIXM];

      set TR0HM001.TR0HMSEL[TR0HWIXM] normal; /* display the selection*/

      TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM + 1; /* Increment line indexes*/

    end
  end

end // end TR0H210

// Read temporary storage page
Function TR0H211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TR0HW02.TR0HWLEN = 1014; /* Temporary storage length*/
  TA5REC.TA5APPID = "TR0H"; /* Application identification*/
  TA5REC.TA5TSQIX = TR0HW01.TR0HWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TR0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0H211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0H211"; /* Process name*/
    TR0HW01.TR0HWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TR0H211

// Check attention identifier
Function TR0H300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, and no more PV items then exit to PV0A*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TR0HW01.TR0HWPSW = "N"; /* Reset problem switch*/
    TR0HW01.TR0HWSWR = "N"; /* Reset request for data*/
    TR0HW01.TR0HWSWF = "N"; /* Reset Warning switch*/
    TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TR0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TR0HM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TR0HM001.CAITEM; /* Application data*/
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TR0H110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/
    end
    set TR0HM001.CATOAP cursor, modified, bold; /* Highlight*/
    TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (TR0HW01.TR0HWITX < TR0HW01.TR0HTOIT /* if some more pv items*/
     && TR0HW01.TR0HDISP == "N")           
      converseLib.validationFailed(447); /* Indicate some more pv items*/
      TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/
      TR0HW01.TR0HDISP = "Y"; /* Display mesg*/
      TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
    else
      COMMAREA.CATOAP = "PV0A"; /* set to FROMr application*/
      COMMAREA.CAITEM = " "; /* clear item field*/
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TR0H110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TR0HM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TR0H110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf5   
   && converseVar.eventKey not pf3) 
    TR0HM001.TR0HPRCNM = "TR0H300"; /* Process name*/
    TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TR0H300

// Reset highlighted fields
Function TR0H400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TR0HM001.TR0HM-GPC-CD initialAttributes; /* Reset all fields*/
  set TR0HM001.TR0HM-PO-NBR initialAttributes;
  set TR0HM001.TR0HM-QUAL-CD initialAttributes;
  set TR0HM001.TR0HM-STY-NBR initialAttributes;
  set TR0HM001.TR0HM-COLR-CD-ID initialAttributes;
  set TR0HM001.TR0HM-DIM-CD initialAttributes;
  set TR0HM001.TR0HM-FIVC-NBR initialAttributes;
  set TR0HM001.TR0HM-PRDCU-ID initialAttributes;
  set TR0HM001.TR0HM-ISEG-CD initialAttributes;
  set TR0HM001.TR0HM-UOM-CD initialAttributes;
  set TR0HM001.TR0HM-WHSE-CD initialAttributes;
  set TR0HM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TR0HM001.CAITEM initialAttributes; /* Commarea application data*/


  TR0HW01.TR0HWIXM = 1; /* Initialize line index*/
  while (TR0HW01.TR0HWIXM <= 13) /* Until end of lines*/
    if (TR0HM001.TR0HM-BOL[TR0HWIXM] != " ") /* if carrier code exists*/
      set TR0HM001.TR0HMSEL[TR0HWIXM] normal; /* Reset select flag*/
    end
    TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM + 1; /* Increment line index*/
  end


end // end TR0H400

// Verify entered data   TR0HM001
Function TR0H500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TR0HM001.CAITEM > " ") /* Application data was entered*/
    set TR0HM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TR0HW01.TR0HWPSW = "Y"; /* indicate error message*/
    TR0HM001.TR0HPRCNM = "TR0H500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TR0H510(); /* Verify scroll request*/
    else
      if (converseVar.eventKey is enter)
        TR0H520(); /* Do edits*/
      else
        if (converseVar.eventKey is pf5 /* If PF5 and already at last item*/
         && TR0HW01.TR0HWITX == TR0HW01.TR0HTOIT)
          converseLib.validationFailed(448); /* Already at last item*/
          TR0HW01.TR0HWPSW = "Y"; /* indicate error message*/
          TR0HM001.TR0HPRCNM = "TR0H500"; /* Process name*/
        end
      end
    end
  end


end // end TR0H500

// Verify scroll request
Function TR0H510()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TR0HW01.TR0HWTSP < 2)       /* and no previous pages*/
    TR0HW01.TR0HWPSW = "Y"; /* indicate problem*/
    TR0HM001.TR0HPRCNM = "TR0H510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TR0HW01.TR0HWTSP >= TR0HW01.TA5TSQIX) /* and no more pages*/
    TR0HW01.TR0HWPSW = "Y"; /* indicate problem*/
    TR0HM001.TR0HPRCNM = "TR0H510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TR0H510

// Verify any changed data
Function TR0H520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TR0HW01.TR0HWSFL = "Y";
  TR0HW01.TR0HWIXM = 13; /* set index to 13*/
  while (TR0HW01.TR0HWIXM > 0) /* until end of selection lines*/
    if (TR0HM001.TR0HMSEL[TR0HWIXM] == "S") /* if selection is made*/
      TR0HW01.TR0HWSFL = "N";
    end
    TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM - 1; /* decrement*/
  end

  if (TR0HW01.TR0HWSFL != "N")
    converseLib.validationFailed(153); /* Error message*/
    TR0HW01.TR0HWPSW = "Y"; /* indicate problem*/
    TR0HM001.TR0HPRCNM = "TR0H520"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* check for at least 1 of the key fields entered*/
   /* ------------------------------------------------------------*/

  TR0H521(); /* invoice number edits*/

  if (TR0HW01.TR0HWPSW == "N")
    TR0HW01.TR0HW-INVALID-DATA = "N"; /* Invalid data*/
  else
    if (TR0HW01.TR0HWPSW == "Y") /* Problem switch set to 'Y'*/
      TR0HW01.TR0HW-INVALID-DATA = "Y";
    end
  end

end // end TR0H520

// Invoice number edits
Function TR0H521()
   /* ------------------------------------------------------------*/

                     /* HEADER EDITS*/
     /* Edits;*/
        /* 1) invoice*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                   /* invoice*/
   /* ------------------------------------------------------------*/

  if (TR0HM001.TR0HM-FIVC-NBR == " ") /* if invoice is blank  entered*/
    converseLib.validationFailed(130); /* invoice is missing*/
    TR0HM001.TR0HPRCNM = "TR0H521"; /* process name*/
    set TR0HM001.TR0HM-FIVC-NBR cursor, modified, bold;
    TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/

  else

    TR0H522(); /* Check for special characters*/

  end


   /* ********************** End of TR0H521************************/
end // end TR0H521

// Validate invoice no entered
Function TR0H522()
   /* *************************************************************/
   /* Validate the invoice number entered                      **/
   /* *************************************************************/

  TR0HW01.TR0HINVC = TR0HM001.TR0HM-FIVC-NBR;
  TR0HW01.TRIVIDX = 1;
  TR0HW01.TR0HINFLG = "N";

  while (TR0HW01.TRIVIDX <= 14
   && TR0HW01.TR0HINFLG == "N")

    if (TR0HW01.TR0HINV[TRIVIDX] != " ")

      if ((TR0HW01.TR0HINV[TRIVIDX] >= "A"
       && TR0HW01.TR0HINV[TRIVIDX] <= "Z")
       || (TR0HW01.TR0HINV[TRIVIDX] >= "0"
       && TR0HW01.TR0HINV[TRIVIDX] <= "9"))
         /* ===========>CONTINUE*/
      else
        converseLib.validationFailed(445);
        TR0HM001.TR0HPRCNM = "TR0H522"; /* process name*/
        set TR0HM001.TR0HM-FIVC-NBR cursor, modified, bold;
        TR0HW01.TR0HWPSW = "Y";
      end
    else
      TR0HW01.TR0HINFLG = "Y";
    end

    TR0HW01.TRIVIDX = TR0HW01.TRIVIDX + 1;
  end

  while (TR0HW01.TRIVIDX <= 14)

    if (TR0HW01.TR0HINV[TRIVIDX] == " ")
      /* ===========>CONTINUE*/
    else
      converseLib.validationFailed(445);
      TR0HM001.TR0HPRCNM = "TR0H522"; /* process name*/
      set TR0HM001.TR0HM-FIVC-NBR cursor, modified, bold;
      TR0HW01.TR0HWPSW = "Y";
    end

    TR0HW01.TRIVIDX = TR0HW01.TRIVIDX + 1;
  end

end // end TR0H522

// Process valid input request
Function TR0H600()
   /* ------------------------------------------------------------*/

              /* PROCESS VALID INPUT REQUESTS*/

     /* 1) If selection is made, record the selection information*/
        /* in the arrays.*/
     /* 2) Update the invoice number for the selected packing lists*/
     /* 3) If a scroll request, adjust temporary storage page*/
        /* number.*/
     /* 4) Transfer to requested map or application according*/
        /* to PFkey pressed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* Check for selections*/
   /* ------------------------------------------------------------*/

  set TR0HW04 empty;

  TR0HW01.TR0HWIXM = 1; /* initialize index*/
  TR0HW01.TR0HWSFL = "Y";

  while (TR0HW01.TR0HWIXM <= 13) /* until end of detail*/
    if (TR0HM001.TR0HM-BOL[TR0HWIXM] != " " /* for each selection field*/
     && TR0HM001.TR0HMSEL[TR0HWIXM] == "S") /* if selection made*/
      TR0HW01.TR0HWSFL = "N"; /* set selection flag*/
      TR0HW04.TSFSHPID[TR0HWIXM] = TR0HW03.TSFSHPID[TR0HWIXM];
      TR0HW04.TSNPLNBR[TR0HWIXM] = TR0HW03.TSNPLNBR[TR0HWIXM];
    end
    TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM + 1;
  end

  TR0HW01.TR0HUPDS = "N"; /* initialize update switch*/
  TR0HW01.TR0HWSPG = 0; /* initialize save page*/

  if (TR0HW01.TR0HWSFL == "N" /* if selection  has been made*/
   && TR0HW01.TR0HWSWF != "Y") /* and no warning has been issued*/
    TR0HW01.TR0HWSWF = "Y"; /* set warning*/
    TR0HW01.TR0HWPSW = "Y"; /* set error flag*/
    converseLib.validationFailed(446); /* indicate confirm message*/
         /* Save the current header invc nbr for recheck purposes*/
    TR0HW01.INVCNBR = TR0HM001.TR0HM-FIVC-NBR;
    return; /* Go to bottom of this process*/
  else
    if (TR0HW01.TR0HWSFL == "N") /* if selection  has been made*/
      if (TR0HM001.TR0HM-FIVC-NBR != TR0HW01.INVCNBR)
        TR0HW01.TR0HWSWF = "Y"; /* set warning*/
        TR0HW01.TR0HWPSW = "Y"; /* set error flag*/
        converseLib.validationFailed(446); /* indicate confirm message*/
         /* Save the current header invc nbr for recheck purposes*/
        TR0HW01.INVCNBR = TR0HM001.TR0HM-FIVC-NBR;
        return; /* Go to bottom of this process*/
      else
        TR0HW01.TR0HWSWF = "N"; /* reset warning*/
        TR0H610(); /* Perform status updates*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with updates*/
          TR0HW01.TR0HWSWR = "Y"; /* Indicate request for data yes*/
          TR0HW01.TR0HUPDS = "Y"; /* Indicate request for data yes*/
          TR0HW01.TR0HWSPG = TR0HW01.TR0HWTSP; /* save curr page*/
          converseLib.validationFailed(44); /* Indicate update successful*/
          return; /* Go to bottom of this process*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* Check for pfkey operations*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TR0HW01.TR0HWTSP = TR0HW01.TR0HWTSP - 1; /* Decrement page number*/
    TR0HW01.TR0HWSWR = "N"; /* Request for data*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TR0HW01.TR0HWTSP = TR0HW01.TR0HWTSP + 1; /* Increment page number*/
      TR0HW01.TR0HWSWR = "N"; /* Request for data*/
    else
      if (converseVar.eventKey is pf5)
        TR0HW01.TR0HWSWR = "Y"; /* Request for data*/
      end
    end
  end


end // end TR0H600

// Perform fivc updates
Function TR0H610()
   /* ------------------------------------------------------------*/

                  /* PERFORM STATUS UPDATES*/

     /* 1) Process and update each packing list row that has*/
        /* been selected.*/

   /* ------------------------------------------------------------*/

  TR0HW01.TR0HWIXM = 1;

  while (TR0HW01.TR0HWIXM <= 13)
    if (TR0HM001.TR0HMSEL[TR0HWIXM] == "S")
      TR0HS05(); /* Update the selected row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If update ok*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      else
        TR0HW01.TR0HWIXM = 99; /* End loop*/
      end
    end
    TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM + 1; /* increment line index*/
  end


end // end TR0H610

// SELECTS FROM VCPLHDJ4
Function TR0HS01()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROW*/

    /* 1) Select the  packing list row.*/

   /* ------------------------------------------------------------*/
  set VCPLHDJ4 empty; /* Initialize records*/

  VCPLHDJ4.PC-PO-NBR = TR0HW05.PC-PO-NBR[TR0HWITX];
  VCPLHDJ4.XGP-GPC-CD = TR0HW05.XGP-GPC-CD[TR0HWITX];
  VCPLHDJ4.SY-STY-NBR = TR0HW05.SY-STY-NBR[TR0HWITX];
  VCPLHDJ4.SY-COLR-CD-ID = TR0HW05.SY-COLR-CD-ID[TR0HWITX];
  VCPLHDJ4.XDM-DIM-CD = TR0HW05.XDM-DIM-CD[TR0HWITX];

  if (TR0HW05.XQA-QUAL-CD[TR0HWITX] == "1S" || 
  TR0HW05.XQA-QUAL-CD[TR0HWITX] == "2S" || 
  TR0HW05.XQA-QUAL-CD[TR0HWITX] == "3S" || 
  TR0HW05.XQA-QUAL-CD[TR0HWITX] == "1" || 
  TR0HW05.XQA-QUAL-CD[TR0HWITX] == "2" || 
  TR0HW05.XQA-QUAL-CD[TR0HWITX] == "3")
    if (TR0HW05.XQA-QUAL-CD[TR0HWITX] == "1S")
      VCPLHDJ4.XQA-QUAL-CD = "01";
    end
    if (TR0HW05.XQA-QUAL-CD[TR0HWITX] == "2S")
      VCPLHDJ4.XQA-QUAL-CD = "02";
    end
    if (TR0HW05.XQA-QUAL-CD[TR0HWITX] == "3S")
      VCPLHDJ4.XQA-QUAL-CD = "03";
    end
    if (TR0HW05.XQA-QUAL-CD[TR0HWITX] == "01"
     || TR0HW05.XQA-QUAL-CD[TR0HWITX] == "02"
     || TR0HW05.XQA-QUAL-CD[TR0HWITX] == "03")
      VCPLHDJ4.XQA-QUAL-CD = TR0HW05.XQA-QUAL-CD[TR0HWITX];
    end
  else
    VCPLHDJ4.XQA-QUAL-CD = "*";
  end

  if (TR0HW05.PC-CU-IN-SEG-CD[TR0HWITX] != " ")
    VCPLHDJ4.PC-CU-IN-SEG-CD = TR0HW05.PC-CU-IN-SEG-CD[TR0HWITX];
  else
    VCPLHDJ4.PC-CU-IN-SEG-CD = "*";
  end

  if (TR0HW05.XUM-UOM-CD[TR0HWITX] != " ")
    VCPLHDJ4.XUM-UOM-CD = TR0HW05.XUM-UOM-CD[TR0HWITX];
  else
    VCPLHDJ4.XUM-UOM-CD = "*";
  end

  if (TR0HW05.XPG-PKG-TYP-CD[TR0HWITX] != " ")
    VCPLHDJ4.XPG-PKG-TYP-CD = TR0HW05.XPG-PKG-TYP-CD[TR0HWITX];
  else
    VCPLHDJ4.XPG-PKG-TYP-CD = "*";
  end

  if (TR0HW05.XWH-WHSE-CD[TR0HWITX] != " ")
    VCPLHDJ4.XWH-WHSE-CD = TR0HW05.XWH-WHSE-CD[TR0HWITX];
  else
    VCPLHDJ4.XWH-WHSE-CD = "*";
  end

  if (TR0HW05.PC-PRDCU-ID[TR0HWITX] != " ")
    VCPLHDJ4.PC-PRDCU-ID = TR0HW05.PC-PRDCU-ID[TR0HWITX];
  else
    VCPLHDJ4.PC-PRDCU-ID = "*";
  end

  VCPLHDJ4.XOWCD = "*";
  VCPLHDJ4.OP-ORD-PART-CHAR = "*";
  VCPLHDJ4.OP-CUST-ORD-ID = -1;
  VCPLHDJ4.OP-NIKE-ORD-ID = -1;

  call "VCPLHDJ4" ("S8", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0HS01"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0HS01"; /* Process name*/

  end

   /* **                                                        ***/
   /* ***** **************** End of TR0HS01 ***********************/
end // end TR0HS01

// TO FETCH FROM VCPLHDJ4
Function TR0HS02()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VCPLHDJ4*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("N8", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TR0HW01.TR0HWSW1 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/
      TR0HW01.TR0HWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TR0HS02"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TR0HM001.TR0HPRCNM = "TR0HS02"; /* Process name*/

    else

      TR0HW02.TSFSHPID[TR0HWIXM] = VCPLHDJ4.TS-NIKE-SHP-ID;
      TR0HW02.TSNPLNBR[TR0HWIXM] = VCPLHDJ4.TS-NIKE-PL-NBR;
      TR0HW02.TSFDESTE[TR0HWIXM] = VCPLHDJ4.TS-EST-DEST-DT;
      TR0HW02.TSEDEST[TR0HWIXM] = VCPLHDJ4.TS-DEST-LOC-CD;
      TR0HW02.TSFBOL[TR0HWIXM] = VCPLHDJ4.TS-BOL;
      TR0HW02.CPLSTAT[TR0HWIXM] = VCPLHDJ4.TS-CPL-STAT-CD;
      TR0HW02.TSISHPQT[TR0HWIXM] = VCPLHDJ4.TS-PL-QTOT-SHP;
      TR0HW02.TSFIVC[TR0HWIXM] = VCPLHDJ4.TS-FIVC;

      TR0HS03(); /* get CNTNR NBR*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TR0HW02.TSHCNTNR[TR0HWIXM] = TSHREC.TSHCNTNR;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          TR0HW02.TSHCNTNR[TR0HWIXM] = " ";
        end
      end
      TR0HW01.TR0HWIXM = TR0HW01.TR0HWIXM + 1; /* increment counter*/

    end
  end

end // end TR0HS02

// GET CONTAINER NUMBER
Function TR0HS03()
   /* ------------------------------------------------------------*/

                 /* SELECT CONTAINER ID*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* clear record*/

  TSHREC.TSFSHPID = VCPLHDJ4.TS-NIKE-SHP-ID; /* move key*/

  if (VCPLHDJ4.TS-NIKE-CNTNR-NBR1 > 0)
    TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR1;
  else
    if (VCPLHDJ4.TS-NIKE-CNTNR-NBR2 > 0)
      TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR2;
    else
      if (VCPLHDJ4.TS-NIKE-CNTNR-NBR3 > 0)
        TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR3;
      else
        if (VCPLHDJ4.TS-NIKE-CNTNR-NBR4 > 0)
          TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR4;
        else
          if (VCPLHDJ4.TS-NIKE-CNTNR-NBR5 > 0)
            TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR5;
          else
            if (VCPLHDJ4.TS-NIKE-CNTNR-NBR6 > 0)
              TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR6;
            else
              if (VCPLHDJ4.TS-NIKE-CNTNR-NBR7 > 0)
                TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR7;
              else
                if (VCPLHDJ4.TS-NIKE-CNTNR-NBR8 > 0)
                  TSHREC.TSHNKCN = VCPLHDJ4.TS-NIKE-CNTNR-NBR8;
                end
              end
            end
          end
        end
      end
    end
  end

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0HS03"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HW01.TR0HWPSW = "Y"; /* Indicate Problem*/
    TR0HM001.TR0HPRCNM = "TR0HS03"; /* Process name*/
  end

end // end TR0HS03

// CLOSE VCPLHDJ4
Function TR0HS04()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHDJ4*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("C8", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0HS04"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0HS04"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end
end // end TR0HS04

// call vcplhd04 to update FIVC
Function TR0HS05()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Move in all fields to VCPLHD03.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-FIVC = TR0HM001.TR0HM-FIVC-NBR; /* Factory invoice*/
  VCPLHD04.XGP-GPC-CD = TR0HW05.XGP-GPC-CD[TR0HWITX];
  VCPLHD04.TS-NIKE-SHP-ID = TR0HW04.TSFSHPID[TR0HWIXM];
  VCPLHD04.TS-NIKE-PL-NBR = TR0HW04.TSNPLNBR[TR0HWIXM];
  VCPLHD04.PC-PO-NBR = TR0HW05.PC-PO-NBR[TR0HWITX];
  VCPLHD04.SY-STY-NBR = TR0HW05.SY-STY-NBR[TR0HWITX];
  VCPLHD04.SY-COLR-CD-ID = TR0HW05.SY-COLR-CD-ID[TR0HWITX];
  VCPLHD04.XDM-DIM-CD = TR0HW05.XDM-DIM-CD[TR0HWITX];

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/

  call "VCPLHD04" ("U1", SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0H611"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0HS05"; /* Process name*/
  end
end // end TR0HS05

// Get PV items
Function TR0HS06()
   /* ------------------------------------------------------------*/

                 /* SELECT DPINVC.VPVITM01 ROW*/

   /* ------------------------------------------------------------*/

  call "IO5670" ("S1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0HS06"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPINVC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPVITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0HS06"; /* Process name*/

  end

   /* **                                                        ***/
   /* ********************** End of TR0HS06 ***********************/
end // end TR0HS06

// Fetch from dpinvc.vpvitm01
Function TR0HS07()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW PVBREC*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO5670" ("N1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TR0HW01.TR0HWSW2 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TR0HW01.TR0HWPSW = "Y"; /* Indicate problem*/
      TR0HW01.TR0HWSW2 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TR0HS07"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPINVC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPVITM"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TR0HM001.TR0HPRCNM = "TR0HS07"; /* Process name*/

    else

      TR0HW01.TR0HWINX = TR0HW01.TR0HWINX + 1; /* increment counter*/

      TR0HW05.INVC-ID[TR0HWINX] = PVBREC.PVAIVCID;
      TR0HW05.VENDOR-NBR[TR0HWINX] = PVBREC.PVOVENDR;
      TR0HW05.VENDOR-GRP-CD[TR0HWINX] = PVBREC.PVOVENDG;
      TR0HW05.PC-PO-NBR[TR0HWINX] = PVBREC.PC3PONBR;
      TR0HW05.XGP-GPC-CD[TR0HWINX] = PVBREC.XGPCD;
      TR0HW05.SY-STY-NBR[TR0HWINX] = PVBREC.SY1STNBR;
      TR0HW05.SY-COLR-CD-ID[TR0HWINX] = PVBREC.SY2CLRID;
      TR0HW05.XDM-DIM-CD[TR0HWINX] = PVBREC.XDMCD;
      TR0HW05.XQA-QUAL-CD[TR0HWINX] = PVBREC.XQACD;
      TR0HW05.PC-CU-IN-SEG-CD[TR0HWINX] = PVBREC.PC2INSEG;
      TR0HW05.XPG-PKG-TYP-CD[TR0HWINX] = PVBREC.XPGCD;
      TR0HW05.XUM-UOM-CD[TR0HWINX] = PVBREC.XUMCD;
      TR0HW05.XWH-WHSE-CD[TR0HWINX] = PVBREC.XWHCD;
      TR0HW05.PC-PRDCU-ID[TR0HWINX] = PVBREC.PC2CUXID;

    end
  end

end // end TR0HS07

// close DPINVC.VPVITM01
Function TR0HS08()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPINVC.VPVITM01*/

   /* ------------------------------------------------------------*/

  call "IO5670" ("C1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TR0HS08"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPINVC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPVITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0HM001.TR0HPRCNM = "TR0HS08"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end
end // end TR0HS08

//*** RECORD=TR0HW01 ****
// Working storage for TR0H
// ***********************
Record TR0HW01 type basicRecord
  10 TR0HWIXM TR0HWIXM ; 
  10 TR0HWSW1 TR0HWSW1 ; 
  10 TR0HWSWR TR0HWSWR ; 
  10 TR0HWPSW TR0HWPSW ; 
  10 TR0HW-NO-DATA TR0HW-NO-DATA ; 
  10 TR0HW-INVALID-DATA TR0HW-INVALID-DATA ; 
  10 TR0HWSFL TR0HWSFL ; 
  10 TR0HWSWF TR0HWSWF ; 
  10 TR0HWWDT TR0HWWDT ; 
    15 TR0HWWCC TR0HWWCC ; 
    15 TR0HWWYY TR0HWWYY ; 
    15 TR0HWWMM TR0HWWMM ; 
    15 TR0HWWDD TR0HWWDD ; 
  10 TR0HWMDT TR0HWMDT ; 
    15 TR0HWMMM TR0HWMMM ; 
    15 TR0HWMDD TR0HWMDD ; 
    15 TR0HWMYY TR0HWMYY ; 
  10 TR0HWTSP TR0HWTSP ; 
  10 TR0HWSPG TR0HWSPG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 INVCNBR INVCNBR ; 
  10 TR0HINVC TR0HINVC ; 
    15 TR0HINV TR0HINV [14] ; 
  10 TRIVIDX TRIVIDX ; 
  10 TR0HINFLG TR0HINFLG ; 
  10 TR0HWSW2 TR0HWSW2 ; 
  10 TR0HWINX TR0HWINX ; 
  10 TR0HTOIT TR0HTOIT ; 
  10 TR0HWITX TR0HWITX ; 
  10 TR0HUPDS TR0HUPDS ; 
  10 TR0HDISP TR0HDISP ; 
end // end TR0HW01

//*** RECORD=TR0HW02 ****
// Temporary storage record for TR0H
// ***********************
Record TR0HW02 type basicRecord
  10 TR0HWLEN TR0HWLEN ; 
  10 TR0HWLIN TR0HWLIN [13] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSNPLNBR TSNPLNBR ; 
    15 TSFDESTE TSFDESTE ; 
    15 TSEDEST TSEDEST ; 
    15 TSFBOL TSFBOL ; 
    15 CPLSTAT CPLSTAT ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSFIVC TSFIVC ; 
    15 TSHCNTNR TSHCNTNR ; 
end // end TR0HW02

//*** RECORD=TR0HW03 ****
//    Temporary storage for TR0H
// ***********************
Record TR0HW03 type basicRecord
  5 TSCOGRP TSCOGRP [13] ; 
    10 TSFSHPID TSFSHPID ; 
    10 TSNPLNBR TSNPLNBR ; 
    10 * char(38);
end // end TR0HW03

//*** RECORD=TR0HW04 ****
//    temporary record for TR0H
// ***********************
Record TR0HW04 type basicRecord
  5 TSCOGRP TSCOGRP [13] ; 
    10 TSFSHPID TSFSHPID ; 
    10 TSNPLNBR TSNPLNBR ; 
    10 * char(38);
end // end TR0HW04

//*** RECORD=TR0HW05 ****
//    Working storage for TR0H
// 
// ***********************
Record TR0HW05 type basicRecord
  5 TR0H-IVC-ITEM TR0H-IVC-ITEM [200] ; 
    10 INVC-ID INVC-ID ; 
    10 VENDOR-NBR VENDOR-NBR ; 
    10 VENDOR-GRP-CD VENDOR-GRP-CD ; 
    10 PC-PO-NBR PC-PO-NBR ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 XQA-QUAL-CD XQA-QUAL-CD ; 
    10 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD ; 
    10 XUM-UOM-CD XUM-UOM-CD ; 
    10 XPG-PKG-TYP-CD XPG-PKG-TYP-CD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 PC-PRDCU-ID PC-PRDCU-ID ; 
end // end TR0HW05

DataItem CPLSTAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem INVCNBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD GROUP LEVEL
DataItem TR0H-IVC-ITEM char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HDISP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HINFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HINV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INVOICE FIELD
DataItem TR0HINVC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HTOIT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0HUPDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 1
DataItem TR0HW-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 1 to display
DataItem TR0HW-NO-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HWINX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0HWITX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem TR0HWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TR0HWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TR0HWLIN char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map day
DataItem TR0HWMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map date mmddyy
DataItem TR0HWMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map month
DataItem TR0HWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map year
DataItem TR0HWMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TR0HWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TR0HWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TR0HWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TR0HWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TR0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TR0HWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem TR0HWWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working day
DataItem TR0HWWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date ccyymmdd
DataItem TR0HWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem TR0HWWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working year
DataItem TR0HWWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TRIVIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSFIVC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TSNPLNBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

