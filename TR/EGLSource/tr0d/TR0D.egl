package tr0d;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TR0D ****
// ************************************************************
// **               TRANSPORTATION SYSTEM                    **
// ************************************************************
// **                                                        **
// 
//               CONTAINER SSCC-18 CODE INQUIRY
//               ------------------------------
// 
// This application will display bar codes for all containers
// for a particular shipment.
// 
// This application can be accessed from one of the following
// applications:
// 
//    1. TS02 - CONTAINER CARTON ASSIGNMENT INQUIRY
// 
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          09/25/97 DKESLE  NEW APPLICATION
//          10/01/97 DKESLE  increase vplaux tbl size to 8000
//          02/06/98 PGHOSH  increase vplaux tbl size to 20000
//                           and Fix no of cartons, qty problem
//                           ( refer : TR0D-02200)
//          08/04/98 RKALLA  made the application use XSPG301
// TS1762   09/02/98 PGHOSH  Fix scrolling problem when more
//                           than one container exists
//                           ( refer TR0D-22100 , TR0D-22200)
// TS0000   12/09/99 npulug  Modified to see that only
//                           style/color selected is displayed
//                           for gpc = '03' also
// TS0000   02/09/01 JKUNDU  Change the Map TR0DM001 to acco-
//                           modate carton length as 9(9).
// *********************
Program TR0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  TR0DW01 TR0DW01; // record
  TR0DW02 TR0DW02; // record
  TR0DW07 TR0DW07; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSWREC TSWREC; // record
  VPLAUX01 VPLAUX01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TR0DM.TR0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
    set TR0DM001 initial; /* ===> Initialize - map1 output area*/

    set TR0DW02 empty; /* ===> Initialize - CPLHD W.S.*/
    set TR0DW07 empty; /* ===> Initialize - CPLHD W.S.*/

    TR0DW01.TR0DWMAP = "1"; /* ===> Initialize - map number*/
    TR0DW01.TR0DWSWF = "Y"; /* ===> Initialize map display indic*/

    TR0DW01.TR0DWMGC = 30; /* ===> Set CPLHD  row max*/
    TR0DW01.TR0DWMCR = 20000; /* ===> Set Vplaux row max*/

    TR0DM001.TSFSHPID = TSWREC.TSFSHPID; /* ===> Nike id*/
    TR0DM001.TSFBOL = TSWREC.TSFBOL; /* ===> bill of lading*/

    goto TR0D-00000; /* ===> Check valid from application*/


     /* **                                                        ***/
     /* ********************** End of XPURS01 - FLOW ****************/
    TR0D-00000: TR0D-00000();
     /* ------------------------------------------------------------*/
     /* Flow to init vplaux arrays*/
     /* ------------------------------------------------------------*/

    goto TR0D-01000; /* ===> Flow to init vplaux*/
                                            /* arrays*/

     /* **                                                        ***/
     /* ********************** End of TS02000 - FLOW ****************/
    TR0D-01000: TR0D-01000();
     /* ------------------------------------------------------------*/
     /* Flow to get vplaux data*/
     /* ------------------------------------------------------------*/

    goto TR0D-02000;


    TR0D-02000: TR0D-02000();
     /* ------------------------------------------------------------*/
     /* Flow to pre-mainline*/
     /* ------------------------------------------------------------*/

    goto TR0D-06000;


    TR0D-06000: TR0D-06000();
    /* ------------------------------------------------------------*/
     /* Flow to pre-mainline*/
     /* ------------------------------------------------------------*/

    goto TR0D-06000;


  end // end main
end // end TR0D

// CHECK THE FROM APPL.
Function TR0D-00000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS02" /* From allowed application*/
  )                              
    /* ==========  NEXT SENTENCE =========>*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-00000 ********************/
end // end TR0D-00000

// MAINLINE OF APPLICATION
Function TR0D-00001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /*  */
   /* 2) Check the attention identifier used to respond.*/
   /*  */
   /* 4) Redisplay screen, scroll or exit application*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  TR0D-20000(); /* ===> Format and display the map*/

  TR0D-30000(); /* ===> Check attention identifier*/

  TR0D-60000(); /* ===> Redisplay Screen, scroll*/
   /* or exit application*/


   /* **                                                        ***/
   /* ********************** End of TR0D-00001 ********************/
end // end TR0D-00001

// LOAD DTRANS.VCPLH01 ROWS
Function TR0D-01000()
   /* ------------------------------------------------------------*/
   /*  */
   /* load TR0D CPLHD ROWS*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Load only the CPL headers passed through the TSWREC*/
   /* pass array.*/
   /* ------------------------------------------------------------*/

  TR0DW01.TR0DWCPX = 1; /* ===> set cpl index*/

  while (TR0DW01.TR0DWCPX <= 10) /* ===> while index le max*/

    if (TSWREC.TSW2SHP[TR0DWCPX] > 0
     && TSWREC.TSW2SHP[TR0DWCPX] == TSWREC.TSFSHPID)

      TR0D-01500(); /* ===> select all CPLHD01 that match*/
      TR0DW01.TR0DWCPX = 11;

    end

    TR0DW01.TR0DWCPX = TR0DW01.TR0DWCPX + 1; /* ===> increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-01000 ********************/
end // end TR0D-01000

// Get all CPLHD rows for colors
Function TR0D-01500()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT A SINGLE CPL TABLE ROW*/
   /* Then*/
   /* Select all P/L rows for a product in CPLHD01 table.*/
   /*  */
   /* ------------------------------------------------------------*/

  TR0D-01510(); /* ===> Select (SA) unique TSIREC*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> If row found*/

   /* npulug begins*/
   /* IF TSIREC.XGPCD = '03';*/
   /* MOVE '*' TO TSIREC.SY2CLRID; /* Select all colors for stylE*/
   /* END;*/
   /* npulug ends*/

    TR0D-01520(); /* ===> Select (SB) set TSIREC*/

    TR0DW01.TR0DWGCX = 1; /* ===> initialize index*/
   /* ===> initialize end of set flag*/
    TR0DW01.TR0DWSWC = "N";
    TR0D-01530(); /* ===> Fetch  (NB) next TSIREC*/
    /* ------> Prime   Read*/
            /* ------------*/

    while (TR0DW01.TR0DWSWC == "N") /* ===> Until end of set*/

      /* ------------------------------------------------------------*/
        /* Move the TSIREC fields to working storage.*/
      /* ------------------------------------------------------------*/

      TR0D-01540(); /* ===> Move data to TR0DW02*/


      TR0D-01530(); /* ===> Fetch  (NB) next      TSIREC*/
      /* ------> Driving Read*/
              /* ------------*/

    end /* ===> Until end of set*/

    TR0D-01550(); /* ===> Close  (CB) set       TSIREC*/

  end /* ===> If row found*/

   /* **                                                        ***/
   /* ********************** End of TR0D-01500 ********************/
end // end TR0D-01500

// Select (SA) unique    VCPLHD01
Function TR0D-01510()
   /* ------------------------------------------------------------*/

              /* SELECT A SINGLE CPL TABLE ROW*/

      /* Select all P/L rows for a product in CPLHD01 table.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TSWREC.TSW2SHP[TR0DWCPX]; /* ===> Move in keys*/
  TSIREC.TSIPLNBR = TSWREC.TSWPLNBR[TR0DWCPX];

  TSGREC.TSNFNC = "SA"; /* ===> move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* ===> If row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* ===> Unexpected return code*/

    /* ========= NEXT SENTENCE =========>*/

  else

    if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
      converseLib.validationFailed(11); /* ===> Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
    else
      converseLib.validationFailed(10); /* ===> Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
    TA1REC.TA1PGMNM = "D-01510"; /* ===> Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TR0DM001"; /* ===> Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDE1"; /* ===> Table view name*/
    TR0DM001.XXXPRCNM = "D-01510"; /* ===> Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-01510 ********************/
end // end TR0D-01510

// Select (SB) set       VCPLHD01
Function TR0D-01520()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD01*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "D-01520"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDE1"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0DM001.XXXPRCNM = "D-01520"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-01520 ********************/
end // end TR0D-01520

// Fetch  (NB) next      VCPLHD01
Function TR0D-01530()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD01*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "NB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

    /* ============== NEXT SENTENCE ===========>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100)

      TR0DW01.TR0DWSWC = "Y"; /* ===> close cursor switch*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "D-01530"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHDE1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TR0DM001.XXXPRCNM = "D-01530"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-01530 ********************/
end // end TR0D-01530

// Move data to CPL array
Function TR0D-01540()
   /* ------------------------------------------------------------*/
    /* Move the VCPLHD01 fields to working storage.*/
   /* ------------------------------------------------------------*/

  TR0DW02.TSFSHPID[TR0DWGCX] = TSIREC.TSFSHPID;
  TR0DW02.TSIPLNBR[TR0DWGCX] = TSIREC.TSIPLNBR;
  TR0DW02.PC3PONBR[TR0DWGCX] = TSIREC.PC3PONBR;
  TR0DW02.XGPCD[TR0DWGCX] = TSIREC.XGPCD;
  TR0DW02.TSILOCR[TR0DWGCX] = TSIREC.TSILOCR;
  TR0DW02.TSPFCIVC[TR0DWGCX] = TSIREC.TSPFCIVC;
  TR0DW02.TSIMSCFL[TR0DWGCX] = TSIREC.TSIMSCFL;
  TR0DW02.TSRTEXT[TR0DWGCX] = TSIREC.TSRTEXT;
  TR0DW02.PC2CUXID[TR0DWGCX] = TSIREC.PC2CUXID;
  TR0DW02.SY1STNBR[TR0DWGCX] = TSIREC.SY1STNBR;
  TR0DW02.SY2CLRID[TR0DWGCX] = TSIREC.SY2CLRID;
  TR0DW02.XDMCD[TR0DWGCX] = TSIREC.XDMCD;
  TR0DW02.PC2INSEG[TR0DWGCX] = TSIREC.PC2INSEG;
  TR0DW02.XQACD[TR0DWGCX] = TSIREC.XQACD;
  TR0DW02.XPGCD[TR0DWGCX] = TSIREC.XPGCD;
  TR0DW02.XOWCD[TR0DWGCX] = TSIREC.XOWCD;
  TR0DW02.XUMCD[TR0DWGCX] = TSIREC.XUMCD;
  TR0DW02.OP1CUOID[TR0DWGCX] = TSIREC.OP1CUOID;
  TR0DW02.OP1NORID[TR0DWGCX] = TSIREC.OP1NORID;
  TR0DW02.TSIMSCGR[TR0DWGCX] = TSIREC.TSIMSCGR;


  TR0DW01.TR0DWGCX = TR0DW01.TR0DWGCX + 1; /* increment cpl index*/


   /* **                                                        ***/
   /* ********************** End of TR0D-01540 ********************/
end // end TR0D-01540

// Close  (CB) set       VCPLHD01
Function TR0D-01550()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD01*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "D-01550"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0DM001.XXXPRCNM = "D-01550"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-01550 ********************/
end // end TR0D-01550

// --->Get Vplaux data
Function TR0D-02000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE VPLAUX DATA*/
   /*  */
   /* -------------------------------------------------------*/
    /* select vplaux rows assosiated with each cplhd row*/
      /* selected earlier*/
   /* -------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
    TR0D-02200(); /* select the set of vplaux rows*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02000 ********************/
end // end TR0D-02000

// store vplaux rows
Function TR0D-02200()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT SET OF vplaux rows*/
   /*  */
   /* 1) While the select, fetch, close process*/
   /* a) Select the set of vplaux rows for this shipment*/
   /* b) Fetch each row and save it in working storage 02.*/
   /* c) Close the selected set of rows.*/
   /*  */
   /* ------------------------------------------------------------*/

  set TR0DW07 empty; /* ===> Clear VPLAUX STORAGE table*/
  set VPLAUX01 empty;

  TR0DW01.TR0DWGCX = 1; /* ===> set cplhd index*/
  TR0DW01.TR0DWCDX = 1; /* ===> set vplaux index*/

  TR0DW01.TR0DWCDX-PREV = 0; /* ===> stores index of prev. crtn*/

  TR0DW01.TR0DWIX5 = 0; /* ===> set cntnr index*/
  TR0DW01.TSCNROWS[1] = 0;

  while (TR0DW01.TR0DWGCX <= TR0DW01.TR0DWMGC /* ===> while le max*/
   && TR0DW02.TSIPLNBR[TR0DWGCX] > 0) /* ===> and data exists*/

    TR0D-02210(); /* ===> Get scale code from cplhd*/
    /* gpc, style, color, dim*/

    TR0D-02220(); /* ===> Select (S2) set  VPLAUX01*/

    TR0DW01.TR0DWSWC = "N"; /* ===> initialize end of set flag*/

    TR0D-02230(); /* ===> Fetch  (N2) next  VPLAUX01*/
    /* -------> Prime Read*/
             /* ------------*/

    while (TR0DW01.TR0DWSWC == "N" /* ===> while not end of set*/
     && TR0DW01.TR0DWCDX <= TR0DW01.TR0DWMCR) /* ===> and le max vpl rows*/

        /* **------------------------------------------***/
        /* ** Move the Vplaux01 fields to working storage.*/
        /* **------------------------------------------***/

      TR0DW07-TS-NIKE-CNTNR-NBR[TR0DWCDX] = VPLAUX01.TS-NIKE-CNTNR-NBR;
      TR0DW07-TS-CRTN-NBR[TR0DWCDX] = VPLAUX01.TS-CRTN-NBR;
      TR0DW01.TR0DWIX3 = VPLAUX01.SY-SZ-ID;
      TR0DW07-SY-SZ-DESC[TR0DWCDX] = PG3REC.SY4IDDSC[TR0DWIX3];
      TR0DW07-PK-CRTN-CD[TR0DWCDX] = VPLAUX01.PK-CRTN-CD;
      TR0DW07-TS-UCC-128-CD[TR0DWCDX] = VPLAUX01.TS-UCC-128-CD;
      TR0DW07-TS-CRTN-UNT-SHP[TR0DWCDX] = VPLAUX01.TS-CRTN-UNT-SHP;

      if (TR0DW01.TR0DWIX5 == 0
       || VPLAUX01.TS-NIKE-CNTNR-NBR != TR0DW01.TSHNKCN[TR0DWIX5])
        TR0DW01.TR0DWIX5 = TR0DW01.TR0DWIX5 + 1;
        TR0DW01.TSSTRTRC[TR0DWIX5] = TR0DW01.TR0DWCDX;
        TR0DW01.TSHNKCN[TR0DWIX5] = VPLAUX01.TS-NIKE-CNTNR-NBR;
        TR0D-02250(); /* get ts container name*/
        TR0DW01.TSCNROWS[TR0DWIX5] = 1;
        TR0DW01.TSCNQTY[TR0DWIX5] = VPLAUX01.TS-CRTN-UNT-SHP;
      else

  /* TR0DW01.TSCNROWS(TR0DWIX5) = TR0DW01.TSCNROWS(TR0DWIX5) + 1;*/

        TR0DWCDX-PREV = TR0DWCDX - 1;
        if (TR0DWCDX-PREV != 0)
          if (TR0DW07-TS-CRTN-NBR[TR0DWCDX] != 
          TR0DW07-TS-CRTN-NBR[TR0DWCDX-PREV])
            TR0DW01.TSCNROWS[TR0DWIX5] = TR0DW01.TSCNROWS[TR0DWIX5] + 1;
          end
        else
          TR0DW01.TSCNROWS[1] = 1;
        end
        /*  */
        TR0DW01.TSCNQTY[TR0DWIX5] = TR0DW01.TSCNQTY[TR0DWIX5] + VPLAUX01.TS-CRTN-UNT-SHP;
      end


      TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX + 1; /* ===> increment vplaux*/


      TR0D-02230(); /* ===> Fetch  (N2) next  Vplaux01*/
      /* -------> Driving Read*/
               /* ------------*/

    end

    TR0D-02240(); /* ===> Close  (C2) set  VCPLIT01*/

    TR0DW01.TR0DWGCX = TR0DW01.TR0DWGCX + 1; /* ===> increment*/

  end

  if (TR0DW01.TSCNROWS[1] == 0) /* no vplaux rows loaded*/
    converseLib.validationFailed(417);
    TR0DM001.TR0DMCTR = 0;
    TR0DM001.TR0DWSCC = 0;
    TR0DM001.XXXTSPAG = 0;
    TR0DM001.TA5TSQIX = 0;
    exit stack;
  end

  TR0DW01.TR0DWIXW = 1; /* set intital cntnr number*/
  TR0DM001.XXXTSPAG = 1; /* set intital page number*/

  TR0DW01.TR0DWCDX = 1; /* ===> reset vplaux index*/

   /* **                                                        ***/
   /* ********************** End of TR0D-02200 ********************/
end // end TR0D-02200

// get scale code
Function TR0D-02210()
   /* ------------------------------------------------------------*/

           /* get scale code from gpc, style, color, dim*/

   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = TR0DW02.XGPCD[TR0DWGCX];
  PG3REC.SY1STNBR = TR0DW02.SY1STNBR[TR0DWGCX];
  PG3REC.SY2CLRID = TR0DW02.SY2CLRID[TR0DWGCX];
  PG3REC.XDMCD = TR0DW02.XDMCD[TR0DWGCX];
  PG3REC.XQACD = "**";

  TA1REC.TA1PGMNM = "3-02210"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(114);
  end

  if (PG3REC.PG3RETCD == "00" /* If good return code*/
   || converseVar.validationMsgNum == 114)
    /* -----------------------------------*/
     /* save the size desc in T.S. record*/
    /* -----------------------------------*/
    if (VPLAUX01.SY-SZ-ID > 0) /* If size id exists*/
      TR0DW01.TR0DWIX3 = VPLAUX01.SY-SZ-ID; /* working index*/
      TR0DW07-SY-SZ-DESC[TR0DWCDX] = PG3REC.SY4IDDSC[TR0DWIX3];
    else
      TR0DW07-SY-SZ-DESC[TR0DWCDX] = "*****";
    end

  else

    if (PG3REC.PG3RETCD != "09") /* or not found*/
        /* ========  NEXT SENTENCE=======>*/
    else

      if (PG3REC.PG3RETCD == "09") /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TR0DM001.XXXPRCNM = "3-02210"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02210 ********************/
end // end TR0D-02210

// Select (S5) vplaux set
Function TR0D-02220()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF vplaux TABLE ROWS*/

   /* ------------------------------------------------------------*/

  VPLAUX01.TS-NIKE-SHP-ID = TR0DW02.TSFSHPID[TR0DWGCX];
  VPLAUX01.TS-NIKE-PL-NBR = TR0DW02.TSIPLNBR[TR0DWGCX];

  call "VPLAUX01" ("S5", SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "D-02220"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0DM001.XXXPRCNM = "D-02220"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02220 ********************/
end // end TR0D-02220

// Fetch  (N5) next vplaux
Function TR0D-02230()
   /* ------------------------------------------------------------*/

              /* FETCH SINGLE VPLAUX TABLE ROW*/

   /* ------------------------------------------------------------*/


  call "VPLAUX01" ("N5", SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* ===> Fetch one row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* ===> End of selected set*/
    TR0DW01.TR0DWSWC = "Y"; /* ===> end of set found*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* ===> unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
        converseLib.validationFailed(11); /* ===> Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
      else
        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
      TA1REC.TA1PGMNM = "D-02230"; /* ===> Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW"; /* ===>*/
      TA1REC.TA1MAP = "TR0DM001"; /* ===> Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
      TA1REC.TA1TBLVU = "VPLAUX01"; /* ===> Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diag routine*/

      TR0DM001.XXXPRCNM = "D-02230"; /* ===> Process name*/

      exit stack; /* ===> exit to re-display the map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02230 ********************/
end // end TR0D-02230

// Close (C5) vplaux set
Function TR0D-02240()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF VPLAUX ROWS*/

   /* ------------------------------------------------------------*/

  call "VPLAUX01" ("C5", SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* close vplaux cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "D-02240"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0DM001.XXXPRCNM = "D-02240"; /* Process name*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02240 ********************/
end // end TR0D-02240

// get cntnr name
Function TR0D-02250()
   /* ------------------------------------------------------------*/

                /* get container name*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = VPLAUX01.TS-NIKE-SHP-ID;
  TSHREC.TSHNKCN = VPLAUX01.TS-NIKE-CNTNR-NBR;

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Unexpected return code*/

    TR0DW01.TSHCNTNR[TR0DWIX5] = TSHREC.TSHCNTNR;

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "D-02250"; /* Process name*/
    TA1REC.TA1LOC = "SELECT CONTAINER NAME";
    TA1REC.TA1MAP = "TR0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "TSHREC"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TR0DM001.XXXPRCNM = "D-02250"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-02250 ********************/
end // end TR0D-02250

// ===>Mainline TR0D Application
Function TR0D-06000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, indicate error and exit to Master Menu.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TR0DW01.TR0DWMAP == "1") /* Map 1 was requested*/

    TR0D-00001(); /* Display map 1*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "D-06000"; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = TR0DW01.TR0DWMAP; /* Map name*/
    SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
    TR0DM001.XXXPRCNM = "D-06000"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    XSPF4(); /* Exit to Master Menu*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-06000 ********************/
end // end TR0D-06000

// ---> Format/display TR0DM001
Function TR0D-20000()
   /* ------------------------------------------------------------*/
   /* FORMAT AND DISPLAY THE TR0DM001 MAP*/
   /*  */
   /* 1) Move working storage to map.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  if (converseVar.validationMsgNum == 0 /* ===> No error message to display*/
   && TR0DW01.TR0DWSWF == "Y"           /* ===> display map indicator on*/
  )                                    
    TR0D-21000(); /* ===> Format the map header data*/

    TR0D-22000(); /* ===> Move saved vplaux to screen*/

  end


  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set TR0DM001 alarm; /* ===> Indicate sound alarm*/
  end

  converse TR0DM001 ;

   /* **                                                        ***/
   /* ********************** End of TR0D-20000 ********************/
end // end TR0D-20000

// Format the map header data
Function TR0D-21000()
   /* ------------------------------------------------------------*/
   /* ** Move data for top of screen*/
   /* ----------------------------------------------------*/

  TR0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* ===> Current date*/

  TR0DM001.TR0DMCTR = TR0DW01.TR0DWIXW;
  TR0DM001.TR0DWSCC = TR0DW01.TR0DWIX5;
  TR0DW01.XXXTSPAG = TR0DM001.XXXTSPAG; /* save page number*/
  TR0DM001.TA5TSQIX = TSCNROWS[TR0DWIXW] / 10;
  TR0DW01.TA5TSQIX = TR0DM001.TA5TSQIX * 10;
  if (TR0DW01.TA5TSQIX == TSCNROWS[TR0DWIXW])

  else

    TR0DM001.TA5TSQIX = TR0DM001.TA5TSQIX + 1;

  end

  TR0DM001.TSHCNTNR = TR0DW01.TSHCNTNR[TR0DWIXW];

  TR0DM001.TR0DMPO = TR0DW02.PC3PONBR[1];

  TR0D-21100(); /* get po info and type*/

   /* *npulug changes begin*/
  if (TSWREC.XGPCD == "03") /* if apparel*/
    TR0DM001.TR0DMPYR = PC3REC.PCFSECD;
   /* SET TR0DM001.SY2CLRID AUTOSKIP,DARK;*/
  else
    TR0DM001.TR0DMPYR = TR0DW01.TR0DWPYY;
  end
  TR0DM001.SY2CLRID = TR0DW02.SY2CLRID;
   /* *npulug changes end*/

  TR0DM001.TR0DMPMO = TR0DW01.TR0DWPM1;
  TR0DM001.TR0DMDMO = TR0DW01.TR0DWPM2;
  TR0DM001.FY1FCTYC = PC3REC.FY1FCTYC;
  TR0DM001.PC4ORTYP = PC3REC.PC4ORTYP;

  TR0DM001.PC2CUXID = TR0DW02.PC2CUXID[1];
  TR0DM001.OP1CUOID = TR0DW02.OP1CUOID[1];
  TR0DM001.OP1NORID = TR0DW02.OP1NORID[1];
  TR0DM001.XDMCD = TR0DW02.XDMCD[1];
  TR0DM001.PC2INSEG = TR0DW02.PC2INSEG[1];
  TR0DM001.XPGCD = TR0DW02.XPGCD[1];
  TR0DM001.TSIMSCFL = TR0DW02.TSIMSCFL[1];

  TR0DM001.SY1STNBR = TR0DW02.SY1STNBR[1];
  TR0DM001.SY1SSTNM = PG2REC.SY1SSTNM;
  TR0DM001.XQACD = TR0DW02.XQACD[1];
  TR0DM001.XUMCD = TR0DW02.XUMCD[1];
  TR0DM001.XOWCD = TR0DW02.XOWCD[1];
  TR0DM001.TSIMSCGR = TR0DW02.TSIMSCGR[1];

  TR0DM001.TSILOCR = TR0DW02.TSILOCR[1];
  TR0DM001.TSPFCIVC = TR0DW02.TSPFCIVC[1];
  TR0DM001.TR0DWGCT = TR0DW01.TSCNROWS[TR0DWIXW];
  TR0DM001.TR0DWGST = TR0DW01.TSCNQTY[TR0DWIXW];

  TR0DM001.TSRTEXT = TR0DW02.TSRTEXT[1];


   /* **                                                        ***/
   /* ********************** End of TR0D-21000 ********************/
end // end TR0D-21000

// Obtain po id and type
Function TR0D-21100()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the VPOHDR01*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  set PC3REC empty;
  PC3REC.XGPCD = TSWREC.XGPCD;
  PC3REC.PC3PONBR = TR0DW02.PC3PONBR[1];
  PCYREC.PCYFUNC = "S ";

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* ===> Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* ===> Row found*/

      TR0DW01.TR0DWDAT = PC3REC.PC3POIDT; /* ===> reformat date*/

      return; /* ===> Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* ===> Row not found*/
        return; /* ===> Return to previous process*/
      end

    end

  end

  if (sysVar.errorCode == "00000000" /* ===> Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* ===> Resource not available*/
    converseLib.validationFailed(11); /* ===> Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
  else
    converseLib.validationFailed(10); /* ===> Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* ===> Termination function*/
    converseLib.clearScreen();
     /* ===> Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* ===> Sql commarea*/
  TA1REC.TA1MAP = "TR0DM001"; /* ===> Map id*/

  TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
  TA1REC.TA1PGMNM = "D-21100"; /* ===> Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "PC3REC"; /* ===> Table view name*/
  TA1REC.TA1TBLKE = PC3KEY; /* ===> Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* ===> Error diagnosis routine*/

  TR0DM001.XXXPRCNM = "D-21100"; /* ===> Process name*/

  exit stack; /* ===> exit to re-display map*/

   /* **                                                        ***/
   /* ********************** End of TS02-21100 ********************/
end // end TR0D-21100

// Move stored vplaux to screen
Function TR0D-22000()
   /* ------------------------------------------------------------*/
   /*  */
   /* MOVE stored vplaux rows to screen*/
   /*  */
   /*  */
   /* ------------------------------------------------------------*/

  TR0DW01.TR0DWIX1 = TR0DW01.TR0DWCDX + 10; /* incr idx*/

  TR0D-22100(); /* Check and adjust last page size*/

  TR0DW01.TR0DWIX2 = 1;

  while (TR0DW01.TR0DWCDX < TR0DW01.TR0DWIX1) /* until end of page*/

    TR0DM001.VPCRTN[TR0DWIX2] = TR0DW07-TS-CRTN-NBR[TR0DWCDX];
    TR0DM001.SYSZDESC[TR0DWIX2] = TR0DW07-SY-SZ-DESC[TR0DWCDX];
    TR0DM001.VPCRTNCD[TR0DWIX2] = TR0DW07-PK-CRTN-CD[TR0DWCDX];
    TR0DM001.VPSSCC18[TR0DWIX2] = TR0DW07-TS-UCC-128-CD[TR0DWCDX];
    TR0DM001.VPSHPUNT[TR0DWIX2] = TR0DW07-TS-CRTN-UNT-SHP[TR0DWCDX];

    TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX + 1; /* incr idx*/
    TR0DW01.TR0DWIX2 = TR0DW01.TR0DWIX2 + 1; /* incr idx*/

  end

  TR0D-22200(); /* clear last page records if necessary*/

   /* **                                                        ***/
   /* ********************** End of TR0D-22000 ********************/
end // end TR0D-22000

// scroll backwards
Function TR0D-22100()
   /* ------------------------------------------------------------*/
   /* If last page of any container is having less than 10 cartons*/
   /* to be displayed, on TR0D screen, the rows have to blanked out*/
   /* ------------------------------------------------------------*/

  TR0DW01.TS-EMPTY-REC-CNT = 0;
  TR0DW01.TS-PAG-CRTNS = 0;
  TR0DW01.TR0D-LST-PGE-FLAG = "N";

  if (TR0DW01.XXXTSPAG == TR0DM001.TA5TSQIX)
    TR0DW01.TS-PAG-CRTNS = (TR0DW01.XXXTSPAG * 10);
    if (TR0DW01.TS-PAG-CRTNS > TR0DW01.TSCNROWS[TR0DWIXW])
      TR0DW01.TR0D-LST-PGE-FLAG = "Y";
      TR0DW01.TS-EMPTY-REC-CNT = TR0DW01.TS-PAG-CRTNS - TR0DW01.TSCNROWS[TR0DWIXW];

      TR0DW01.TR0DWIXW-SAVE = TR0DW01.TR0DWIXW;
      TR0DW01.TR0DWIX1-ACCUM = 0;

      while (TR0DWIXW > 0)
        TR0DW01.TR0DWIX1-ACCUM = TR0DW01.TR0DWIX1-ACCUM + TR0DW01.TSCNROWS[TR0DWIXW];
        TR0DW01.TR0DWIXW = TR0DW01.TR0DWIXW - 1;

      end

      TR0DW01.TR0DWIX1 = TR0DW01.TR0DWIX1-ACCUM + 1;

      TR0DW01.TR0DWIXW = TR0DW01.TR0DWIXW-SAVE;
    end

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-22100 ********************/
end // end TR0D-22100

// scroll backwards
Function TR0D-22200()
   /* *****************************************************************/
   /* If last page of each Container contains less than 10 records*/
   /* blank out the records on TR0D screen*/
   /*  */
   /* ****************************************************************/

  if (TR0DW01.TS-EMPTY-REC-CNT > 0)
    while (TR0DW01.TR0DWIX2 < 11) /* until end of page*/
      TR0DM001.VPCRTN[TR0DWIX2] = 0;
      TR0DM001.SYSZDESC[TR0DWIX2] = "     ";
      TR0DM001.VPCRTNCD[TR0DWIX2] = "     ";
      TR0DM001.VPSSCC18[TR0DWIX2] = "                    ";
      TR0DM001.VPSHPUNT[TR0DWIX2] = 0;

      TR0DW01.TR0DWIX2 = TR0DW01.TR0DWIX2 + 1; /* incr idx*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of TR0D-22200 ********************/
end // end TR0D-22200

// --->Check attention identifier
Function TR0D-30000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK THE ATTENTION IDENTIFIER*/
   /*  */
   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* ===> PF3 was pressed*/

    COMMAREA.CATOAP = "TS02"; /* ===> Set current to TS02*/
    COMMAREA.CAFROMAP = "TR0D"; /* ===> Set came from to TR0D*/
    TSWREC.TSWFRAPP = " "; /**/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* ===> move in pass data*/

    XSTSS01(); /* ===> transfer to application*/

    TR0DM001.XXXPRCNM = "D-30000";

    exit stack;

  end




  if (converseVar.eventKey not enter /* ===> ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* ===> and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* ===> and PF8 was not pressed*/

    TR0DM001.XXXPRCNM = "D-30000";
    converseLib.validationFailed(4); /* ===> Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
     || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
      converseLib.clearScreen();
       /* ===> Clear screen before redisplay*/
    end

    exit stack; /* ===> Exit to redisplay map*/

  end


   /* **                                                        ***/
   /* ********************** End of TR0D-30000 ********************/
end // end TR0D-30000

// Process input
Function TR0D-60000()
   /* ------------------------------------------------------------*/
   /*  */
   /* redisplay screen, scroll screen, continue or exit*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* ===> if errors have occurred*/
    return; /* ===> redisplay screen*/
  end

  if (converseVar.eventKey is pf7
  )
    TR0D-61000(); /* ===> scroll backwards*/
    return;

  end

  if (converseVar.eventKey is pf8)

    TR0D-62000(); /* ===> scroll forwards*/
    return;

  end

  if (converseVar.eventKey is enter)

    TR0D-63000(); /* ===> validate page number*/

    if (TR0DM001.XXXTSPAG == TR0DW01.XXXTSPAG)
      if (TR0DW01.TR0DWIXW < TR0DW01.TR0DWIX5) /* ===> more cntnrs*/
        TR0DW01.TR0DWIXW = TR0DW01.TR0DWIXW + 1;
        TR0DM001.XXXTSPAG = 1;
        TR0DW01.TR0DWCDX = TR0DW01.TSSTRTRC[TR0DWIXW];
        TR0DW01.TR0DWSWF = "Y";
        return;
      end
    else
   /* ********************************************************/
   /* TR0DM001.XXXTSPAG contains Current page No requested*/
   /* TR0DW01.XXXTSPAG  contains Prev page from which new page requested*/
   /* ********************************************************/
      if (TR0DM001.XXXTSPAG > TR0DW01.XXXTSPAG)
        TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX + (10 * (TR0DM001.XXXTSPAG               - TR0DW01.XXXTSPAG - 1));
      else
        TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX - (10 * (TR0DW01.XXXTSPAG               - TR0DM001.XXXTSPAG + 1)) + TS-EMPTY-REC-CNT;
      end
      TR0DW01.TR0DWSWF = "Y";
      return;
    end
  end

  TR0D-64000(); /* ===> Exit application*/


   /* **                                                        ***/
   /* ********************** End of TR0D-60000 ********************/
end // end TR0D-60000

// scroll backwards
Function TR0D-61000()
   /* ------------------------------------------------------------*/
   /* If previous pages exist,*/
   /* decrement counters and continue*/
   /* ------------------------------------------------------------*/

  if (TR0DM001.XXXTSPAG < 2) /* ===> No previous pages*/
    converseLib.clearScreen();
    
    TR0DM001.XXXPRCNM = "D-61000"; /* ===> Module identification*/
    converseLib.validationFailed(2); /* ===> No previous page to display*/
    exit stack; /* ===> Exit to re-display map*/
  else
    TR0DW01.TR0DWSWF = "Y";
  /* TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX - 20;*/
    TR0DW01.TR0DWCDX = TR0DW01.TR0DWCDX - 20 + TS-EMPTY-REC-CNT;
    TR0DM001.XXXTSPAG = TR0DM001.XXXTSPAG - 1;
  end


   /* **                                                        ***/
   /* ********************** End Of TR0D-61000 ********************/
end // end TR0D-61000

// scroll forwards
Function TR0D-62000()

   /* ------------------------------------------------------------*/
   /* If more pages remain,*/
   /* increment counters and continue*/
   /* ------------------------------------------------------------*/

  if (TR0DM001.XXXTSPAG >= TR0DM001.TA5TSQIX) /* ===> No more pages*/
    converseLib.clearScreen();
    
    TR0DM001.XXXPRCNM = "D-62000"; /* ===> Module identification*/
    converseLib.validationFailed(3); /* ===> No move pages to display*/
    exit stack; /* ===> Exit to re-display map*/
  else
    TR0DW01.TR0DWSWF = "Y";
    TR0DM001.XXXTSPAG = TR0DM001.XXXTSPAG + 1;
  end


   /* **                                                        ***/
   /* ********************** End Of TR0D-62000 ********************/
end // end TR0D-62000

// edit page number
Function TR0D-63000()

   /* ------------------------------------------------------------*/
   /* make sure page number is valid*/
   /* ------------------------------------------------------------*/

  if (TR0DM001.XXXTSPAG < 1
   || TR0DM001.XXXTSPAG > TR0DM001.TA5TSQIX)
    converseLib.clearScreen();
    
    TR0DM001.XXXPRCNM = "D-63000"; /* ===> Module identification*/
    converseLib.validationFailed(416); /* ===> page number invalid*/
    exit stack; /* ===> Exit to re-display map*/
  end


   /* **                                                        ***/
   /* ********************** End Of TR0D-63000 ********************/
end // end TR0D-63000

// transfer to other applications
Function TR0D-64000()
   /* ----------------------------------------------------*/
   /* exit application*/
   /* ----------------------------------------------------*/
   /*  */

  COMMAREA.CATOAP = "TS02"; /* Set current to TS02*/
  COMMAREA.CAFROMAP = "TR0D"; /* Set coming from to TR0D*/
  TSWREC.TSWFRAPP = " ";
  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  XSTSS01(); /* transfer to application*/

  TR0DM001.XXXPRCNM = "D-64000"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


   /* **                                                        ***/
   /* ********************** End of TR0D-64000 ********************/
end // end TR0D-64000

//*** RECORD=TR0DW01 ****
// Working storage for TR0D - Shipment Container Assignment
// 
//          This working storage contains all working fields
//          and arrays used by this application.
// 
// ***********************
Record TR0DW01 type basicRecord
  10 * char(1) ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TR0DWSWF TR0DWSWF ; 
  10 TR0DWSWC TR0DWSWC ; 
  10 * char(1) ; 
  10 TR0DWGST TR0DWGST ; 
  10 TR0DWGCT TR0DWGCT ; 
  10 TR0DWCPX TR0DWCPX ; 
  10 TR0DWGCX TR0DWGCX ; 
  10 TR0DWMCR TR0DWMCR ; 
  10 TR0DWCDX TR0DWCDX ; 
  10 TR0DWIXW TR0DWIXW ; 
  10 TR0DWIX1 TR0DWIX1 ; 
  10 TR0DWIX2 TR0DWIX2 ; 
  10 TR0DWIX3 TR0DWIX3 ; 
  10 TR0DWIX4 TR0DWIX4 ; 
  10 TR0DWIX5 TR0DWIX5 ; 
  10 * char(1) ; 
  10 TR0DWMAP TR0DWMAP ; 
  10 TR0DWMGC TR0DWMGC ; 
  10 TR0DWSCC TR0DWSCC ; 
  10 * char(1) ; 
  10 TR0DWDAT TR0DWDAT ; 
    15 TR0DWPCN TR0DWPCN ; 
    15 TR0DWPYY TR0DWPYY ; 
    15 TR0DWPM1 TR0DWPM1 ; 
    15 TR0DWPM2 TR0DWPM2 ; 
  10 * char(1) ; 
  10 TS-CNTNR-GROUP TS-CNTNR-GROUP [8] ; 
    15 TSSTRTRC TSSTRTRC ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSCNROWS TSCNROWS ; 
    15 TSCNQTY TSCNQTY ; 
  10 TR0DWCDX-PREV TR0DWCDX-PREV ; 
  10 TS-EMPTY-REC-CNT TS-EMPTY-REC-CNT ; 
  10 TS-PAG-CRTNS TS-PAG-CRTNS ; 
  10 TR0DWIX1-ACCUM TR0DWIX1-ACCUM ; 
  10 TR0DWIXW-SAVE TR0DWIXW-SAVE ; 
  10 TR0D-LST-PGE-FLAG TR0D-LST-PGE-FLAG ; 
end // end TR0DW01

//*** RECORD=TR0DW02 ****
// Working storage to store CPLHD rows
// 
//         This record is used to store DTRANS.VCPLHD01 rows
// ***********************
Record TR0DW02 type basicRecord
  10 TR0DWLN2 TR0DWLN2 [30] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 XGPCD XGPCD ; 
    15 TSILOCR TSILOCR ; 
    15 TSPFCIVC TSPFCIVC ; 
    15 TSIMSCFL TSIMSCFL ; 
    15 TSRTEXT TSRTEXT ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XOWCD XOWCD ; 
    15 XUMCD XUMCD ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TSIMSCGR TSIMSCGR ; 
end // end TR0DW02

//*** RECORD=TR0DW07 ****
// ************************************************************
// **             VPLAUX ROW W.S. RECORD                     **
// **                    -------                             **
// **             -----  TR0DW07  -----                      **
//                       -------
// 
//     This record is used to store bar code information
//        from the dtrans.vplaux01 db2 table. The infor-
//        mation will eventually be displayed on the TR0D
//        screen.
// 
// **                                                        **
// ************************************************************
// ***********************
Record TR0DW07 type basicRecord
  10 TR0DW07-VPLAUX-GROUP TR0DW07-VPLAUX-GROUP [20000] ; 
    15 TR0DW07-TS-NIKE-CNTNR-NBR TR0DW07-TS-NIKE-CNTNR-NBR ; 
    15 TR0DW07-TS-CRTN-NBR TR0DW07-TS-CRTN-NBR ; 
    15 TR0DW07-SY-SZ-DESC TR0DW07-SY-SZ-DESC ; 
    15 TR0DW07-PK-CRTN-CD TR0DW07-PK-CRTN-CD ; 
    15 TR0DW07-TS-UCC-128-CD TR0DW07-TS-UCC-128-CD ; 
    15 TR0DW07-TS-CRTN-UNT-SHP TR0DW07-TS-CRTN-UNT-SHP ; 
end // end TR0DW07

DataItem TR0D-LST-PGE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0DW07-PK-CRTN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0DW07-SY-SZ-DESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS-CRTN-NBR
DataItem TR0DW07-TS-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0DW07-TS-CRTN-UNT-SHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS-CRTN-NBR
DataItem TR0DW07-TS-NIKE-CNTNR-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0DW07-TS-UCC-128-CD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS-CRTN-NBR
DataItem TR0DW07-VPLAUX-GROUP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-carton-detail-index
DataItem TR0DWCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-carton-detail-index
DataItem TR0DWCDX-PREV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-cpl-index
DataItem TR0DWCPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TR0DWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC-CPL  carton   total count
DataItem TR0DWGCT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// gpc-cpl array index
DataItem TR0DWGCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC-CPL  shipping total count
DataItem TR0DWGST num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TR0DWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0DWIX1-ACCUM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working index 2
DataItem TR0DWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 3
DataItem TR0DWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 4
DataItem TR0DWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 5
DataItem TR0DWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working index
DataItem TR0DWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0DWIXW-SAVE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Detail Line
DataItem TR0DWLN2 char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TR0DWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-cartons
DataItem TR0DWMCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-gpc-cpl-table-lines
DataItem TR0DWMGC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TR0DWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TR0DWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TR0DWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TR0DWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// save total # cntnrs to display
DataItem TR0DWSCC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TR0DWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CNTNR_NBR
DataItem TS-CNTNR-GROUP char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-EMPTY-REC-CNT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS-PAG-CRTNS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSCNQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSCNROWS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CNTNR_NBR
DataItem TSSTRTRC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

