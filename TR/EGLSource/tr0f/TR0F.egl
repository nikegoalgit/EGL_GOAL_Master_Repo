package tr0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TR0F ****
// ************************************************************
// **               TRANSPORTATION SYSTEM                    **
// ************************************************************
// **                                                        **
// 
//           DOWN LOAD POS FOR SAMPLE WARE HOUSES 22 & 23
//           -------------------------------------------
// 
// This application will download pos for the given warehouse
// for the last 3 months based on current date.
// 
// After validating input data, it will submit batch process
// TS2702 in the back ground, on pressing PF9 key.
// 
// This application can be accessed from one of the following
// applications:
// 
//    1. TS0A - TRANSPORTATION MAIN MENU
// 
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          07/23/98 SMANN2  NEW APPLICATION
// *********************
Program TR0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TR0FW01 TR0FW01; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSWREC TSWREC; // record
  XCTHREC XCTHREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TR0FTP1 {deleteAfterUse = yes}; // table
  use TR0FT01 {deleteAfterUse = yes}; // table
  use TR0FM.TA0PM001,  // forms
      TR0FM.TR0FM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTR001: XPTR001();

     /* ------------------------------------------------------------*/
      /* Initialize maps and working storage records.*/
     /* ------------------------------------------------------------*/

    set TR0FM001 initial;

    set TR0FW01 empty;

    set TA1REC empty;
    set TAEREC empty;
    set SQLCA empty;


    TR0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " ";

     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto TR0F-01000;

     /* ********************** End of XPTR001 - FLOW ****************/
    TR0F-01000: TR0F-01000();
    goto TR0F-01000;
  end // end main
end // end TR0F

// Format/submit a background job
Function TR0F-001()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TR0FTP1.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TR0FWPRM = " "; /* INITIALIZE*/
      TR0FWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TR0FW01.TR0FWP-WHSE-CD = TR0FM001.XWH-WHSE-CD; /* WHSE CD*/
      TA6REC.TARJCL[TA6INDEX] = TR0FWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TR0FTP1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TR0FTP1.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TR0FTP1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(434);
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of TR0F-001   ********************/

end // end TR0F-001

// Format/submit a background job
Function TR0F-002()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TR0FT01.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TR0FWPRM = " "; /* INITIALIZE*/
      TR0FWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TR0FW01.TR0FWP-WHSE-CD = TR0FM001.XWH-WHSE-CD; /* WHSE CD*/
      TA6REC.TARJCL[TA6INDEX] = TR0FWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TR0FT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TR0FT01.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TR0FT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(434);
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of TR0F-002 ********************/

end // end TR0F-002

// Main process
Function TR0F-01000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  TR0F-10000(); /* Format and display MAP 1*/

  TR0F-20000(); /* Check attention identifier*/

  TR0F-30000(); /* Reset fields to normal intensity*/

  TR0F-40000(); /* Verify the data that was entered*/

  TR0F-50000(); /* perform the download*/

  TR0F-60000(); /* Exit to application*/

   /* **                                                        ***/
   /* ********************** End of TR0F-01000 ********************/

end // end TR0F-01000

// Display MAP 1
Function TR0F-10000()
   /* ------------------------------------------------------------*/
   /* Show the map.*/
   /* Indicate sound alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/
    TR0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  else
    set TR0FM001 alarm; /* Indicate sound alarm*/
  end

  if (TSWREC.XXXMSGNO != 0)
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end
                                   /* Error message passed back from*/
                                  /* called application*/
    TSWREC.XXXMSGNO = 0;
    set TR0FM001 alarm; /* Indicate sound alarm*/
  end

  converse TR0FM001 ;

   /* **                                                        ***/
   /* ********************** End of TR0F-10000 ********************/


end // end TR0F-10000

// Check attention identifier
Function TR0F-20000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TR0FM001 initial; /* Clear MAP 1*/

    set TR0FW01 empty;

    exit stack; /* Exit to redisplay map*/

  end

  if (TR0FM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = TR0FM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = TR0FM001.CAITEM; /* Application data*/

      XSTSS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set TR0FM001.CATOAP cursor, modified, bold; /* Highlight*/

    TR0FM001.XXXPRCNM = "F-20000"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (TR0FM001.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set TR0FM001.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        TR0FM001.XXXPRCNM = "F-20000"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "F-20000"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "TS0A"; /* Transfer to Trans  menu*/
      end

      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        COMMAREA.CATOAP = "MN0M"; /* Transfer to Master menu*/
      end
    end

    XSTSS02(); /* Exit to another application*/

    TR0FM001.XXXPRCNM = "F-20000"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  /* IF EZEAID IS ENTER              /* ENTER was not pressed*/
  /* OR EZEAID IS PF9;*/
   /* NEXT SENTENCE*/
  if (converseVar.eventKey is pf9) /* PF9 was*/
          /* NEXT SENTENCE          /* PF9 was*/
  else
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TR0FM001.XXXPRCNM = "F-20000"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set TR0FM001 initial; /* Clear MAP 1*/

      set TR0FW01 empty;

    end

    exit stack; /* Exit to redisplay map*/

  end

   /* **                                                        ***/
   /* ********************** End of TR0F-20000 ********************/
end // end TR0F-20000

// Reset highlighted fields
Function TR0F-30000()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TR0FM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set TR0FM001.CAITEM initialAttributes; /* FAST PATH application data*/

  set TR0FM001.XWH-WHSE-CD initialAttributes; /* WARE HOUSE CODE*/

   /* **                                                        ***/
   /* ********************** End of TR0F-30000 ********************/
end // end TR0F-30000

// Verify data that was entered
Function TR0F-40000()
   /* ------------------------------------------------------------*/
   /* Verify entered values on MAP 1.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (TR0FM001 is modified) /* If MAP 1 modified*/
    TR0FW01.MODSW = "Y"; /* set up mod. switch*/
    TR0FW01.WHSE-ERR-SW = " "; /* any change requires WHSECD verify*/
  end

  if (converseVar.eventKey is pf9)
    if ((TR0FM001.XWH-WHSE-CD == "22"
     || TR0FM001.XWH-WHSE-CD == "23"))
      if (TR0FW01.MODSW == "Y")
           /* NEXT SENTENCE*/
      end
        /* NEXT SENTENCE*/
    else
      if (TR0FM001.XWH-WHSE-CD == " ")
        converseLib.validationFailed(35);
      else
        converseLib.validationFailed(428);
      end
      exit stack;
    end
  end

  if (TR0FW01.MODSW == "Y")
    TR0FW01.MODSW = " ";
    TR0FW01.UPDSW = " "; /* Init. 'ready to update' switch*/

    if (TR0FM001.XWH-WHSE-CD > " ") /* If WHSE CODE entered*/
      if (TR0FM001.XWH-WHSE-CD == TR0FW01.XWH-WHSE-CD)
        if (TR0FW01.WHSE-ERR-SW == "Y") /* already verified and in error*/
          set TR0FM001.XWH-WHSE-CD cursor, bold;
          converseLib.validationFailed(428); /* Indicate invalid selection*/
          TR0FM001.XXXPRCNM = "F-40000"; /* Process name*/

          exit stack; /* Exit to redisplay map*/
        end
      else /* New po or/and new region entered*/
        TR0FW01.XWH-WHSE-CD = " "; /* Initialize w.s. fields*/
        TR0FW01.WHSE-ERR-SW = " "; /* and error switch*/

        TR0FW01.XWH-WHSE-CD = TR0FM001.XWH-WHSE-CD;
        TR0F-41000(); /* Verify WareHouse Code*/

        TR0FW01.XWH-WHSE-CD = TR0FM001.XWH-WHSE-CD; /* Save WHSE CD*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          TR0FW01.WHSE-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    else
      set TR0FM001.XWH-WHSE-CD cursor, bold;
      converseLib.validationFailed(35); /* Indicate invalid selection*/
      TR0FM001.XXXPRCNM = "F-20000"; /* Process name*/

      exit stack; /* Exit to redisplay map*/
    end

    TR0FM001.XXXPRCNM = "TR0F   ";
    TR0FW01.MODSW = " "; /* Init. 'map modified' switch*/


  end

   /* **                                                        ***/
   /* ********************** End of TR0F-40000 ********************/
end // end TR0F-40000

// Process input
Function TR0F-41000()
   /* ------------------------------------------------------------*/
   /*  */
   /* redisplay screen, scroll screen, continue or exit*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* ===> if errors have occurred*/
    return; /* ===> redisplay screen*/
  end

   /* IF EZEAID IS ENTER*/
  if (converseVar.eventKey is pf9)
    if ((TR0FM001.XWH-WHSE-CD != "22"
     && TR0FM001.XWH-WHSE-CD != "23"))
      TR0FM001.XXXPRCNM = "F-41000"; /* ===> Module Identity*/
      converseLib.validationFailed(428); /* ===> Ware House code invalid*/
    else
      if (TR0FW01.UPDSW != "Y")
        converseLib.validationFailed(431); /* ===> Confirm download*/
        TR0FW01.UPDSW = "Y"; /* ===> Set Update switch*/
      end
    end
    return; /* ===> Exit to Display map*/

  end

  if (converseVar.eventKey is enter)
    if ((TR0FM001.XWH-WHSE-CD > " "))
      converseLib.validationFailed(4);
      exit stack;
    end
  end
   /* **                                                        ***/
   /* ********************** End of TR0F-41000 ********************/
end // end TR0F-41000

// Process PF9 key
Function TR0F-50000()
   /* ------------------------------------------------------------*/
   /*  */
   /* redisplay screen, scroll screen, continue or exit*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   && TR0FW01.UPDSW == "Y")
    if ((TR0FM001.XWH-WHSE-CD != "22"
     && TR0FM001.XWH-WHSE-CD != "23"))
      converseLib.validationFailed(428); /* ===> Ware House code invalid*/
      TR0FM001.XXXPRCNM = "F-50000"; /* ===> Module Identity*/
      TR0FW01.UPDSW = " ";
      exit stack; /* ===> Exit to Display map*/
    else
      TR0F-51000();
    end
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of TR0F-50000 ********************/
end // end TR0F-50000

// process valid input request
Function TR0F-51000()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end
                                           /* successful*/
  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TR0F-001(); /* format prod batch sub*/
  else
    TR0F-002(); /* format test batch sub*/
  end

  return;

   /* **                                                        ***/
   /* ********************** End of TR0F-51000 ********************/
end // end TR0F-51000

// transfer to other applications
Function TR0F-60000()
   /* ----------------------------------------------------*/
   /* exit application*/
   /* ----------------------------------------------------*/
   /*  */

  COMMAREA.CATOAP = "TS0A"; /* Set current to TS0A*/
  COMMAREA.CAFROMAP = "TR0F"; /* Set coming from to TR0F*/
  TSWREC.TSWFRAPP = " ";
  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  XSTSS01(); /* transfer to application*/

  TR0FM001.XXXPRCNM = "F-60000"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

   /* **                                                        ***/
   /* ********************** End of TR0F-60000 ********************/
end // end TR0F-60000

//*** RECORD=TR0FW01 ****
// Working storage for application TR0F.
// 
// ***********************
Record TR0FW01 type basicRecord
  10 * char(1) ; // MAP 1 modify switch
  10 MAP2MODSW MAP2MODSW ; 
  10 MAP2SW MAP2SW ; 
  10 SELSW SELSW ; 
  10 UPDSW UPDSW ; 
  10 MODSW MODSW ; 
  10 TR0FWSWF TR0FWSWF ; 
  10 TR0FMMSG TR0FMMSG ; 
  10 TR0FWSWC TR0FWSWC ; 
  10 TR0FWPSW TR0FWPSW ; 
  10 TR0FWFEX TR0FWFEX ; 
  10 WHSE-ERR-SW WHSE-ERR-SW ; 
  10 * char(1) ; // Cursor end of file switch
  10 TR0FWMAP TR0FWMAP ; 
  10 TR0FWMGC TR0FWMGC ; 
  10 TR0FWSCC TR0FWSCC ; 
  10 XWH-WHSE-CD XWH-WHSE-CD ; 
  10 TR0FWPRM TR0FWPRM ; 
    15 TR0FWPID TR0FWPID ; 
    15 TR0FWP-WHSE-CD TR0FWP-WHSE-CD ; 
    15 TR0FWFIL TR0FWFIL ; 
end // end TR0FW01

DataItem TR0FMMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWFEX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWFIL char(73)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0FWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0FWMGC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWP-WHSE-CD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWPID char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWPRM char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TR0FWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0FWSCC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0FWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TR0FWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

