package tr0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TR0C ****
// This application is for footwear only.
// 
// This application displays the transportation shipments per
// PO/Air Freight request based on the data entered in the
// top of the screen:
// 
// 1.  Air Freight number range (one can be entered).
// 2.  Style, color, dimension range (one can be entered).
// 3.  PO ID month range and factory ex: 94 04 06 BR
// 4.  PO number
// 5.  Accounting status 'O'pen, 'C'losed, or '*' for both.
//     This defaults to 'O'pen.
// 6.  Warehouse
// 7.  Customer cross reference.
// 
// After the header information is entered and the ENTER key is
// pressed, a list of shipments per Air Freight are displayed.
// It is important to note that the PO information is rolled up
// since the shipments are not kept at the PO item detail
// level.  For example, if you have two PO items with every-
// thing the same except the RTA (requested time of arrival)
// dates, the PO On Order quantity is the total of the two
// items.
// 
// The user can page forward (PF8) and backward (PF7).
// 
// Any number of lines can be selected from any or all pages.
// When ENTER is pressed, the user is transferred to the detail
// map (TR0CM002).  Depending on the security level, the
// accounting fields can be updated.
// 
// DETAIL MAP (TR0CM002)
// ---------------------
// 
// This map is used to inquire/maintain the Accounting
// information per shipment/PO/Air Freight (depending on
// security).  The Amount Recovered, Amount Paid, Accounting
// status, and an Accounting comment can be entered or changed.
// 
// The information on the DTRANS.VAFREQ01 database is only
// updated if the PF9 key is pressed (with proper security).
// After PF9 is pressed, the current data remains on the
// screen.
// 
// If ENTER is pressed, only the edit checks are performed.
// The current data remains on the screen.
// 
// The only way to get to the next selected record is to hit
// the PF8 key.  When the last selected record is displayed on
// the screen, and PF8 is pressed, the user is returned to the
// list screen (TR0CM001).
// 
// At any time, the PF3 key can be pressed.  This returns the
// user to the list screen (TR0CM001) regardless of where they
// are in processing the selected records.
// 
// From either the list screen (TR0CM001) or the detail screen
// (TR0CM002), the FAST PATH can be entered to transfer to
// another application.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PA302    03/31/94  DHUFFM  PROTOTYPE
//          04/14/94  MSMIT2  NEW APPLICATION
//          11/07/96  JCARL1  Remove alarm from msgs.
// *********************
Program TR0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PA1REC PA1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TR0CW00 TR0CW00; // record
  TR0CW01 TR0CW01; // record
  TR0CW02 TR0CW02; // record
  TR0CW03 TR0CW03; // record
  TS7REC TS7REC; // record
  TSFREC TSFREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  VAFREQ01 VAFREQ01; // record
  VFRATE01 VFRATE01; // record
  VPAAFH01 VPAAFH01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PACTBL {deleteAfterUse = yes}; // table
  use TR0CM.TR0CM001,  // forms
      TR0CM.TR0CM002, 
      TR0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
    /* ------------------------------------------------------------*/
    /* Initialize working storage and display storage areas.*/
    /* ------------------------------------------------------------*/

    set TR0CM001 initial; /* M001 input/output*/
    set TR0CM002 initial; /* M002 input/output*/
    set TR0CW00 empty; /* Working storage*/
    set TR0CW01 empty; /* M001 display storage*/
    set TR0CW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    TR0CW00.TR0CW-DISPLAY-MAP = "1"; /* Map to be displayed switch*/
    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N"; /* Request for data switch*/

    /* ------------------------------------------------------------*/
    /* SET UP TEMP STORAGE PAGE LENGTH*/
    /* ------------------------------------------------------------*/

    TR0CW00.XXXTSLEN = 1590;

    /* ------------------------------------------------------------*/
    /* If data was passed in the COMMAREA, use as the initial key.*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y"; /* Request for data switch*/

    end

    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto TR0C-001; /* Converse the main process*/


    TR0C-001: TR0C-001();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto TR0C-001; /* Converse the main process*/


  end // end main
end // end TR0C

// Main process to display a map
Function TR0C-001()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* The TR0CW00.TR0CW-DISPLAY-MAP field contains the map number*/
  /* to display.*/
  /*  */
  /* If '1', display TR0CM001 - FOOTWEAR AIR FREIGHT INQUIRE/MAINT.*/
  /* If '2', display TR0CM002 - FOOTWEAR AIR FREIGHT ACCOUNTING INFO*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  if (TR0CW00.TR0CW-DISPLAY-MAP == "1") /* Map 1 was requested*/

    TR0C-100(); /* Display map 1*/

    return;

  end

  if (TR0CW00.TR0CW-DISPLAY-MAP != "2")
    return;
  end

   /* TR0CM002 - FOOWEAR AIR FREIGHT ACCOUNTING INFO SCREEN REQUESTED*/

  if (TR0CW00.TR0CW-MAX-PAGES == 0) /* NOTHING TO DISPLAY*/
    return;
  end

  TR0CW00.TR0CW-CURRENT-TS-PAGE = 1;

   /* PROCESS ALL SELECTED RECORDS*/

  while (TR0CW00.TR0CW-CURRENT-TS-PAGE <= TR0CW00.TR0CW-MAX-PAGES)

    TR0CS-03-TA0050-R(); /* READ TEMP STORAGE PAGE*/

    TR0CW00.XX1 = 1;
    while (TR0CW00.XX1 <= 6)

      if (TR0CW01.TR0CW-SELECTION[XX1] == "S")
        TR0C-200(); /* SHOW MAP 2*/
      end

      if (TR0CW00.TR0CW-PROCESS-NEXT-RECORD == "Y")
        TR0CW00.XX1 = TR0CW00.XX1 + 1;
      end

    end

    TR0CW00.TR0CW-CURRENT-TS-PAGE = TR0CW00.TR0CW-CURRENT-TS-PAGE + 1;

  end

  TR0CW00.TR0CW-CURRENT-TS-PAGE = 1; /* RESET CURRENT PAGE*/

  if (converseVar.eventKey is pf8
   || converseVar.eventKey is pf3)
    TR0CW00.TR0CW-DISPLAY-MAP = "1";
    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y";
  end

end // end TR0C-001

// List screen main process
Function TR0C-100()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  TR0C-110(); /* Obtain the data to display*/

  TR0C-120(); /* Format and display the map*/

  TR0C-130(); /* Check attention identifier*/

  TR0C-140(); /* Reset fields to normal intensity*/

  TR0C-150(); /* Verify the entered data*/

  TR0C-160(); /* Process valid input request*/


end // end TR0C-100

// Obtain the data to display
Function TR0C-110()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (TR0CW00.TR0CW-REQ-FOR-DATA-FLAG != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)     /* or an error was found*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage*/
  /* ------------------------------------------------------------*/

  TR0CS-01-TA0050-P(); /* Purge any temporary storage*/

  /* -------------------------------------------------------------*/
  /* Call TS1590 to open cursor on DPRODC.VPOITM01/DTRANS.VCPLHD02*/
  /* -------------------------------------------------------------*/

  TR0C-111(); /* Select set and open cursor*/

  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/

  TR0CS-06-TS1590-N1(); /* Fetch next row in the cursor*/

  TR0CW00.XX1 = 1; /* Display line index*/

  TR0C-112(); /* SAVE KEY DATA*/

  while (TR0CW00.TR0CW-EOC-VCPLHD02-FLAG == "N") /* Until end of cursor*/

    TR0C-113(); /* Save data in display storage*/

    /* THE PO ITEMS NEED TO HAVE THE ON ORDER QUANTITY ROLLED UP*/

    /* IF THIS RECORD SHOULD BE SKIPPED, READ NEXT RECORD AND INIT*/
    /* SAVED FIELDS.*/

    if (TR0CW00.TR0CW-SKIP-THIS-RECORD == "N")

      TR0CW00.TR0CW-PC-TOT-ON-ORD-QTY = TR0CW00.TR0CW-PC-TOT-ON-ORD-QTY +                                        PC6REC.PC6TORDE;
      TR0CS-06-TS1590-N1(); /* Fetch next row in the cursor*/

      TR0C-114(); /* CHECK KEY BREAK*/

    else
      TR0CS-06-TS1590-N1(); /* Fetch next row in the cursor*/
      TR0C-112(); /* SAVE KEY DATA*/
    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (TR0CW00.XX1 > 6 /* PAGE FULL*/
     || TR0CW00.TR0CW-EOC-VCPLHD02-FLAG == "Y") /* OR END OF CURSOR*/

      TR0CS-02-TA0050-A(); /* Add page to temporary storage*/

      TR0CW00.XX1 = 1;

    end

  end

  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/

  TR0CS-07-TS1590-C1(); /* Close the selected set cursor*/

  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/

  if (TR0CW00.TR0CW-MAX-PAGES == 0) /* No pages formatted*/

    TSWREC.XXXMODID = "11000"; /* Module identification*/
    TSWREC.XXXMSGNO = 21; /* No data was found to display*/
    set TR0CM001.TR0CM-AIR-FRGT-NBR1 cursor;
    TR0CM001.TR0CM-SELECTION[1] = " "; /* reset select field*/
    set TR0CM001.TR0CM-SELECTION[1] skip;

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N"; /* Request for data switch*/


end // end TR0C-110

// SETUP TS1590 SELECT CRITERIA
Function TR0C-111()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set PC6REC empty; /* Clear DPRODC.VPOITM01*/
  set TSTREC empty; /* Clear DTRANS.VCPLHD02*/
  set TR0CW03 empty; /* CLEAR PASS RECORD TO TS1590*/

  /* Use values entered on map to select the data*/

  PC6REC.XGPCD = TR0CW00.XGPCD; /* MOVE IN GPC*/
  PC6REC.YMTCD = "AF"; /* Move Mode Code*/

   /* AIR FREIGHT NUMBER RANGE*/

  if (TR0CM001.TR0CM-AIR-FRGT-NBR1 > 0)
    TR0CW03.TR0CW-IO-FROM-PC6AIRNB = TR0CM001.TR0CM-AIR-FRGT-NBR1;
    if (TR0CM001.TR0CM-AIR-FRGT-NBR2 > 0)
      TR0CW03.TR0CW-IO-TO-PC6AIRNB = TR0CM001.TR0CM-AIR-FRGT-NBR2;
    else
      TR0CW03.TR0CW-IO-TO-PC6AIRNB = TR0CM001.TR0CM-AIR-FRGT-NBR1;
    end
  else
    PC6REC.PC6AIRNB = -1;
  end

   /* STYLE RANGE*/

  if (TR0CM001.TR0CM-SY-STY-NBR1 != " ")
    TR0CW03.TR0CW-IO-FROM-SY1STNBR = TR0CM001.TR0CM-SY-STY-NBR1;
    if (TR0CM001.TR0CM-SY-STY-NBR2 != " ")
      TR0CW03.TR0CW-IO-TO-SY1STNBR = TR0CM001.TR0CM-SY-STY-NBR2;
    else
      TR0CW03.TR0CW-IO-TO-SY1STNBR = TR0CM001.TR0CM-SY-STY-NBR1;
    end
  else
    PC6REC.SY1STNBR = "*";
  end

   /* COLOR RANGE*/

  if (TR0CM001.TR0CM-SY-COLR-CD-ID1 != " ")
    TR0CW03.TR0CW-IO-FROM-SY2CLRID = TR0CM001.TR0CM-SY-COLR-CD-ID1;
    if (TR0CM001.TR0CM-SY-COLR-CD-ID2 != " ")
      TR0CW03.TR0CW-IO-TO-SY2CLRID = TR0CM001.TR0CM-SY-COLR-CD-ID2;
    else
      TR0CW03.TR0CW-IO-TO-SY2CLRID = TR0CM001.TR0CM-SY-COLR-CD-ID1;
    end
  else
    PC6REC.SY2CLRID = "*";
  end

   /* DIMENSION RANGE*/

  if (TR0CM001.TR0CM-XDM-DIM-CD1 != " ")
    TR0CW03.TR0CW-IO-FROM-XDMCD = TR0CM001.TR0CM-XDM-DIM-CD1;
    if (TR0CM001.TR0CM-XDM-DIM-CD2 != " ")
      TR0CW03.TR0CW-IO-TO-XDMCD = TR0CM001.TR0CM-XDM-DIM-CD2;
    else
      TR0CW03.TR0CW-IO-TO-XDMCD = TR0CM001.TR0CM-XDM-DIM-CD1;
    end
  else
    PC6REC.XDMCD = "*";
  end

   /* PO ID DATE*/

  if (TR0CW00.TR0CW-HDR-PC3POIDT > 0)
    PC6REC.PC3POIDT = TR0CW00.TR0CW-HDR-PC3POIDT; /* PO ID date*/
  else
    PC6REC.PC3POIDT = -1;
  end

   /* FACTORY CODE*/

  if (TR0CW00.FY1FCTYC != " ")
    PC6REC.FY1FCTYC = TR0CW00.FY1FCTYC;
  else
    PC6REC.FY1FCTYC = "*";
  end

   /* PO NUMBER*/

  if (TR0CM001.PC3PONBR > 0)
    PC6REC.PC3PONBR = TR0CM001.PC3PONBR; /* PO Number*/
  else
    PC6REC.PC3PONBR = -1;
  end

   /* WAREHOUSE CODE*/

  if (TR0CM001.TR0CM-XWH-WHSE-CD != " ")
    PC6REC.XWHCD = TR0CM001.TR0CM-XWH-WHSE-CD;
  else
    PC6REC.XWHCD = "*";
  end

   /* CUSTOMER CODE*/

  if (TR0CM001.TR0CM-PC-PRDCU-ID != " ") /* If xref code entered*/
    PC6REC.PC2CUXID = TR0CM001.TR0CM-PC-PRDCU-ID; /* Customer Xref*/
  else
    PC6REC.PC2CUXID = "*";
  end

  TR0CS-05-TS1590-S1(); /* SELECT DATA*/

end // end TR0C-111

// SAVE KEY DATA
Function TR0C-112()
  /* ------------------------------------------------------------*/
  /* THIS DATA IS NEEDED TO DETERMINE WHEN TO ROLL UP THE PO*/
  /* INFORMATION (PER SHIPMENT).*/
  /* ------------------------------------------------------------*/

  if (VAGen_SQLCODE != 0)
    return;
  end

  TR0CW00.TR0CW-PC-TOT-ON-ORD-QTY = 0;

  TR0CW00.TR0CW-SAVE-PC3PONBR = PC6REC.PC3PONBR;
  TR0CW00.TR0CW-SAVE-SY1STNBR = PC6REC.SY1STNBR;
  TR0CW00.TR0CW-SAVE-SY2CLRID = PC6REC.SY2CLRID;
  TR0CW00.TR0CW-SAVE-XDMCD = PC6REC.XDMCD;
  TR0CW00.TR0CW-SAVE-XQACD = PC6REC.XQACD;
  TR0CW00.TR0CW-SAVE-XOWCD = PC6REC.XOWCD;
  TR0CW00.TR0CW-SAVE-PC2INSEG = PC6REC.PC2INSEG;
  TR0CW00.TR0CW-SAVE-XPGCD = PC6REC.XPGCD;
  TR0CW00.TR0CW-SAVE-XUMCD = PC6REC.XUMCD;
  TR0CW00.TR0CW-SAVE-FY1FCTYC = PC6REC.FY1FCTYC;
  TR0CW00.TR0CW-SAVE-PC2CUXID = PC6REC.PC2CUXID;
  TR0CW00.TR0CW-SAVE-OP1PARTN = PC6REC.OP1PARTN;
  TR0CW00.TR0CW-SAVE-OP1CUOID = PC6REC.OP1CUOID;
  TR0CW00.TR0CW-SAVE-OP1NORID = PC6REC.OP1NORID;
  TR0CW00.TR0CW-SAVE-XWHCD = PC6REC.XWHCD;
  TR0CW00.TR0CW-SAVE-TSFSHPID = TSTREC.TSFSHPID;

end // end TR0C-112

// Save display data
Function TR0C-113()
  /* ------------------------------------------------------------*/
  /* GET ACCOUNTING AIR FREIGHT INFORMATION*/
  /* ------------------------------------------------------------*/

  set VAFREQ01 empty;

  VAFREQ01.TSFSHPID = TSTREC.TSFSHPID;
  VAFREQ01.TSIPLNBR = TSTREC.TSIPLNBR;

  TR0CS-11-IO7170-S(); /* GET DTRANS.VAFREQ01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    if (TR0CM001.TR0CM-TS-ACCT-STAT-IND != "*") /* SHOW OPEN OR CLOSED*/

      if (VAFREQ01.TS-ACCT-STAT-IND != TR0CM001.TR0CM-TS-ACCT-STAT-IND)
        TR0CW00.TR0CW-SKIP-THIS-RECORD = "Y";
        return;
      end

    end

    TR0CW01.TS-ACCT-STAT-IND[XX1] = VAFREQ01.TS-ACCT-STAT-IND;
    TR0CW01.TS-AFRGT-RCV-AMT[XX1] = VAFREQ01.TS-AFRGT-RCV-AMT;
    TR0CW01.TS-AFRGT-PAY-AMT[XX1] = VAFREQ01.TS-AFRGT-PAY-AMT;
    TR0CW01.TS-ACCT-AFRGTCOMNT[XX1] = VAFREQ01.TS-ACCT-AFRGTCOMNT;

  else

     /* IF THERE IS NOT A DTRANS.VAFREQ01 RECORD, THE ITEM IS CONSIDERED*/
     /* TO BE OPEN.  IF THE HEADER ACCOUTING STATUS IS CLOSED ONLY, SKIP*/
     /* THIS RECORD.*/

    if (TR0CM001.TR0CM-TS-ACCT-STAT-IND == "C") /* SHOW ONLY CLOSED*/
      TR0CW00.TR0CW-SKIP-THIS-RECORD = "Y";
      return;
    end

    TR0CW01.TS-ACCT-STAT-IND[XX1] = "O";

  end

  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  TR0CW01.PC3PONBR[XX1] = PC6REC.PC3PONBR;
  TR0CW01.PC3POIDT[XX1] = PC6REC.PC3POIDT;
  TR0CW01.FY1FCTYC[XX1] = PC6REC.FY1FCTYC;
  TR0CW01.SY1STNBR[XX1] = PC6REC.SY1STNBR;
  TR0CW01.SY2CLRID[XX1] = PC6REC.SY2CLRID;
  TR0CW01.XDMCD[XX1] = PC6REC.XDMCD;
  TR0CW01.XWHCD[XX1] = PC6REC.XWHCD;
  TR0CW01.PC2CUXID[XX1] = PC6REC.PC2CUXID;
  TR0CW01.OP1CUPO[XX1] = PC6REC.OP1CUPO;
  TR0CW01.OP1PARTN[XX1] = PC6REC.OP1PARTN;
  TR0CW01.OP1CUOID[XX1] = PC6REC.OP1CUOID;
  TR0CW01.OP1NORID[XX1] = PC6REC.OP1NORID;
  TR0CW01.PC4ORTYP[XX1] = PC6REC.PC4ORTYP;
  TR0CW01.PC6AIRNB[XX1] = PC6REC.PC6AIRNB;
  TR0CW01.TSFSHPID[XX1] = TSTREC.TSFSHPID;
  TR0CW01.TSIPLNBR[XX1] = TSTREC.TSIPLNBR;
  TR0CW01.TSISHPQT[XX1] = TSTREC.TSISHPQT;
  TR0CW01.TSFBOL[XX1] = TSTREC.TSFBOL;

   /* GET CONTAINER NUMBER FOR AIR FREIGHT*/

  set TSHREC empty;
  TSHREC.TSFSHPID = TSTREC.TSFSHPID;
  TSHREC.TSHNKCN = TSTREC.TSHNKCN1;

  TR0CS-14-IO2590-SA(); /* GET DTRANS.VCNTNR01 RECORD*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TR0CW01.TSHCNTNR[XX1] = TSHREC.TSHCNTNR;
  else
    TR0CW01.TSHCNTNR[XX1] = "NOT AVAILABLE";
  end

  if (TSTREC.TS-TOT-COLL-SCHG > 0
   && TSTREC.TS-TOT-PPD-SCHG > 0)
    TR0CW01.TR0CW-PPD-COLL-SPLT[XX1] = "SPL";
  else
    if (TSTREC.TS-TOT-COLL-SCHG > 0)
      TR0CW01.TR0CW-PPD-COLL-SPLT[XX1] = "CCK";
    else
      if (TSTREC.TS-TOT-PPD-SCHG > 0)
        TR0CW01.TR0CW-PPD-COLL-SPLT[XX1] = "PPD";
      end
    end
  end

  TR0CW01.TS-TOT-COLL-SCHG[XX1] = TSTREC.TS-TOT-COLL-SCHG;
  TR0CW01.TS-TOT-PPD-SCHG[XX1] = TSTREC.TS-TOT-PPD-SCHG;
  TR0CW01.TSFTKG[XX1] = TSTREC.TSFTKG;

  /* ------------------------------------------------------------*/
  /* Get Air Freight Header row*/
  /* ------------------------------------------------------------*/

  if (TR0CW00.XGPCD == "02")
    set VPAAFH01 empty;
    VPAAFH01.PA-AFRGT-RQT-ID = TR0CW01.PC6AIRNB[XX1];

    TR0CS-08-IO7080-S(); /* select VPAAFH01 row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TR0CW01.PA-BLTO-NIKE-PCT[XX1] = VPAAFH01.PA-BLTO-NIKE-PCT;
      TR0CW01.PA-BLTO-FCTY-PCT[XX1] = VPAAFH01.PA-BLTO-FCTY-PCT;
      TR0CW01.PA-BLTO-CUST-PCT[XX1] = VPAAFH01.PA-BLTO-CUST-PCT;
      TR0CW01.PA-BLTO-FRWRDR-PCT[XX1] = VPAAFH01.PA-BLTO-FRWRDR-PCT;
      if (VPAAFH01.PA-DEPT-RSP-IND > " ") /* If responsibility exists*/
        if (VPAAFH01.PA-DEPT-RSP-IND in PACTBL.PA-DEPT-RSP-IND
         /* Code in table*/
         && PACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          TR0CW01.TR0CW-DEPT-RSP-DESC[XX1] = PACTBL.PACTBL-DEPT-RSP-DESC[sysVar.arrayIndex];

        else
          TR0CW01.TR0CW-DEPT-RSP-DESC[XX1] = " ";
        end
      end
    end
  else
    TR0CW01.TR0CW-DEPT-RSP-DESC[XX1] = " ";
  end

  TR0CW01.TSACARCD[XX1] = TSTREC.TSACARCD;
  TR0CW01.TS5CRAFT[XX1] = TSTREC.TS5CRAFT;
  TR0CW01.TSFSHPNB[XX1] = TSTREC.TSFSHPNB;
  TR0CW01.TSEDEST[XX1] = TSTREC.TSEDEST;
  TR0CW01.TSEORIG[XX1] = TSTREC.TSEORIG;
  TR0CW01.TSFDPRTA[XX1] = TSTREC.TSFDPRTA;
  TR0CW01.TSFRWRDR[XX1] = TSTREC.TSFRWRDR;

  TR0CW01.XQACD[XX1] = PC6REC.XQACD;
  TR0CW01.XOWCD[XX1] = PC6REC.XOWCD;
  TR0CW01.PC2INSEG[XX1] = PC6REC.PC2INSEG;
  TR0CW01.XPGCD[XX1] = PC6REC.XPGCD;
  TR0CW01.XUMCD[XX1] = PC6REC.XUMCD;



end // end TR0C-113

// CHECK KEY BREAK
Function TR0C-114()
  /* ------------------------------------------------------------*/
  /* CHECK KEY BREAK*/
  /* ------------------------------------------------------------*/

  if (TR0CW00.TR0CW-EOC-VCPLHD02-FLAG == "N")
    if (TR0CW00.TR0CW-SAVE-PC3PONBR == PC6REC.PC3PONBR
     && TR0CW00.TR0CW-SAVE-SY1STNBR == PC6REC.SY1STNBR
     && TR0CW00.TR0CW-SAVE-SY2CLRID == PC6REC.SY2CLRID
     && TR0CW00.TR0CW-SAVE-XDMCD == PC6REC.XDMCD
     && TR0CW00.TR0CW-SAVE-XQACD == PC6REC.XQACD
     && TR0CW00.TR0CW-SAVE-XOWCD == PC6REC.XOWCD
     && TR0CW00.TR0CW-SAVE-PC2INSEG == PC6REC.PC2INSEG
     && TR0CW00.TR0CW-SAVE-XPGCD == PC6REC.XPGCD
     && TR0CW00.TR0CW-SAVE-XUMCD == PC6REC.XUMCD
     && TR0CW00.TR0CW-SAVE-FY1FCTYC == PC6REC.FY1FCTYC
     && TR0CW00.TR0CW-SAVE-PC2CUXID == PC6REC.PC2CUXID
     && TR0CW00.TR0CW-SAVE-OP1PARTN == PC6REC.OP1PARTN
     && TR0CW00.TR0CW-SAVE-OP1CUOID == PC6REC.OP1CUOID
     && TR0CW00.TR0CW-SAVE-OP1NORID == PC6REC.OP1NORID
     && TR0CW00.TR0CW-SAVE-XWHCD == PC6REC.XWHCD
     && TR0CW00.TR0CW-SAVE-TSFSHPID == TSTREC.TSFSHPID)
         /* NEXT SENTENCE*/
    else
      TR0CW01.PC6TORDE[XX1] = TR0CW00.TR0CW-PC-TOT-ON-ORD-QTY;
      TR0CW00.XX1 = TR0CW00.XX1 + 1;
      TR0C-112(); /* SAVE KEY DATA*/
    end
  else
    TR0CW01.PC6TORDE[XX1] = TR0CW00.TR0CW-PC-TOT-ON-ORD-QTY;
    TR0CW00.XX1 = TR0CW00.XX1 + 1;
  end
end // end TR0C-114

// Format and display the map
Function TR0C-120()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* Error was found*/

    TR0C-121(); /* FORMAT HEADER INFORMATION*/

    if (TR0CW00.TR0CW-MAX-PAGES > 0)

        /* CHECK TO SEE IF PF7 OR PF8 PRESSED.  THIS IS SO THAT EVEN*/
        /* IF THERE ARE ERRORS, PAGING IS ALLOWED.*/

      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        TR0CM001.XXXTSPAG = TR0CW00.TR0CW-CURRENT-TS-PAGE;
      end

      TR0C-122(); /* FORMAT DATA IN THE BODY OF THE MAP*/

    else
      sysVar.arrayIndex = 1;
      while (sysVar.arrayIndex <= 6)
        set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] skip, invisible;
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end
  else

    if (TR0CW00.TR0CW-DB2-ERROR == "Y")
      TR0C-121(); /* FORMAT HEADER INFORMATION*/
    end

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

    /* CLEAR OUT TEMP STORAGE*/

    if (converseVar.validationMsgNum == 405 /* INVALID ACCOUNTING STATUS*/
     || converseVar.validationMsgNum == 101 /* INVALID GPC*/
     || converseVar.validationMsgNum == 82) /* INVALID WAREHOUSE*/
      TR0CS-01-TA0050-P();
      TR0C-123(); /* CLEAR OUT BODY OF THE MAP*/
    end

    /* CHECK TO SEE IF PF7 OR PF8 PRESSED.  THIS IS SO THAT EVEN*/
    /* IF THERE ARE ERRORS, PAGING IS ALLOWED.*/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum != 2 /* NO PREVIOUS PAGES TO DISPLAY*/
       || converseVar.validationMsgNum != 3) /* NO MORE PAGES TO DISPLAY*/
        TR0CM001.XXXTSPAG = TR0CW00.TR0CW-CURRENT-TS-PAGE;
        TR0C-122(); /* FORMAT DATA IN THE BODY OF THE MAP*/
      end
    end

    sysVar.arrayIndex = 1;

    while (sysVar.arrayIndex <= 6)
      if (TR0CM001.PC6AIRNB[sysVar.arrayIndex] == 0)
        set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] skip, invisible;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

  end

  converse TR0CM001 ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = TR0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TR0CM001.CAITEM; /* Application data*/
end // end TR0C-120

// FORMAT HEADER INFORMATION
Function TR0C-121()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set TR0CM001 initial; /* M001 input/output area*/

  /* ------------------------------------------------------------*/
  /* FORMAT THE FROM/TO PAGE INFO*/
  /* ------------------------------------------------------------*/

  TR0CM001.XXXCURDT = VGVar.currentShortGregorianDate;
  TR0CM001.XXXTSPAG = TR0CW00.TR0CW-CURRENT-TS-PAGE; /* FROM PAGE*/
  TR0CM001.TA5TSQIX = TR0CW00.TR0CW-MAX-PAGES; /* TO PAGE*/

  if (TR0CW00.TR0CW-CURRENT-TS-PAGE == 0
   && TR0CW00.TR0CW-MAX-PAGES == 0)
    set TR0CM001.XXXLITPG skip, invisible;
    set TR0CM001.XXXTSPAG skip, invisible;
    set TR0CM001.XXXLITOF skip, invisible;
    set TR0CM001.TA5TSQIX skip, invisible;
  end

  /* ------------------------------------------------------------*/
  /* FORMAT THE HEADER INFORMATION*/
  /* ------------------------------------------------------------*/

   /* IF NOT GPC NOT ENTERED, DEFAULT TO '02' FOOTWEAR*/

  if (TR0CW00.XGPCD == " ")
    TR0CW00.XGPCD = "02";
    if (TR0CW00.XGPCD in XGPTBL.XGPCD)
      TR0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
  else
    TR0CM001.XGPDESC = TR0CW00.XGPDESC;
  end

  TR0CM001.XGPCD = TR0CW00.XGPCD;

                /* Air Freight Number Request*/
  TR0CM001.TR0CM-AIR-FRGT-NBR1 = TR0CW00.TR0CW-AIR-FRGT-NBR1;
  TR0CM001.TR0CM-AIR-FRGT-NBR2 = TR0CW00.TR0CW-AIR-FRGT-NBR2;

                /* Style/Color/Dimension*/
  TR0CM001.TR0CM-SY-STY-NBR1 = TR0CW00.TR0CW-SY-STY-NBR1;
  TR0CM001.TR0CM-SY-COLR-CD-ID1 = TR0CW00.TR0CW-SY-COLR-CD-ID1;
  TR0CM001.TR0CM-XDM-DIM-CD1 = TR0CW00.TR0CW-XDM-DIM-CD1;
  TR0CM001.TR0CM-SY-STY-NBR2 = TR0CW00.TR0CW-SY-STY-NBR2;
  TR0CM001.TR0CM-SY-COLR-CD-ID2 = TR0CW00.TR0CW-SY-COLR-CD-ID2;
  TR0CM001.TR0CM-XDM-DIM-CD2 = TR0CW00.TR0CW-XDM-DIM-CD2;

                /* PO ID Date*/
  TR0CM001.TR0CM-PO-ID-YY = TR0CW00.TR0CW-HDR-PC3POIDT-YY;
  TR0CM001.TR0CM-PO-ID-M1 = TR0CW00.TR0CW-HDR-PC3POIDT-M1;
  TR0CM001.TR0CM-PO-ID-M2 = TR0CW00.TR0CW-HDR-PC3POIDT-M2;
  TR0CM001.FY1FCTYC = TR0CW00.FY1FCTYC;
  TR0CM001.PC3PONBR = TR0CW00.PC3PONBR;

   /* IF NOT STATUS REQUESTED, DEFAULT TO OPEN*/

  if (TR0CW00.TR0CW-TS-ACCT-STAT-IND == " ")
    TR0CW00.TR0CW-TS-ACCT-STAT-IND = "O";
  end

  TR0CM001.TR0CM-TS-ACCT-STAT-IND = TR0CW00.TR0CW-TS-ACCT-STAT-IND;
  TR0CM001.TR0CM-XWH-WHSE-CD = TR0CW00.TR0CW-XWH-WHSE-CD;
  TR0CM001.TR0CM-PC-PRDCU-ID = TR0CW00.TR0CW-PC-PRDCU-ID;

end // end TR0C-121

// FORMAT DATA IN THE BODY OF MAP
Function TR0C-122()
  /* ------------------------------------------------------------*/
  /* FORMAT THE DATA IN THE BODY OF THE MAP.*/
  /* ------------------------------------------------------------*/

   /* RETRIEVE RECODS FROM TEMP STORAGE*/

  if (TR0CW00.TR0CW-DB2-ERROR == "Y")
    return;
  end

  set TR0CW01 empty;

  TR0CS-03-TA0050-R(); /* READ 1 PAGE OF TEMP STORAGE*/

   /* INITIALIZED THE SAVED FIELDS.  THIS IS SO THAT IF THE AIR FREIGHT*/
   /* REQUEST'S SHIPMENTS SPILL OVER TO THE NEXT PAGE, THE PO INFORMATION*/
   /* IS REPEATED ON THE FIRST LINE OF THE NEXT PAGE.*/

  TR0CW00.TR0CW-SAVED-FIELDS = " ";

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 6)

    TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] = TR0CW01.TR0CW-SELECTION[sysVar.arrayIndex];

    TR0CM001.PC6AIRNB[sysVar.arrayIndex] = TR0CW01.PC6AIRNB[sysVar.arrayIndex];

    if (TR0CW01.PC6AIRNB[sysVar.arrayIndex] == 0)
      set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] skip, invisible;
    end

    TR0CM001.SY1STNBR[sysVar.arrayIndex] = TR0CW01.SY1STNBR[sysVar.arrayIndex];
    TR0CM001.SY2CLRID[sysVar.arrayIndex] = TR0CW01.SY2CLRID[sysVar.arrayIndex];
    TR0CM001.XDMCD[sysVar.arrayIndex] = TR0CW01.XDMCD[sysVar.arrayIndex];

    TR0CM001.PC6TORDE[sysVar.arrayIndex] = TR0CW01.PC6TORDE[sysVar.arrayIndex];
    TR0CM001.TSISHPQT[sysVar.arrayIndex] = TR0CW01.TSISHPQT[sysVar.arrayIndex];
    TR0CM001.XWHCD[sysVar.arrayIndex] = TR0CW01.XWHCD[sysVar.arrayIndex];
    TR0CM001.PC2CUXID[sysVar.arrayIndex] = TR0CW01.PC2CUXID[sysVar.arrayIndex];
    TR0CM001.TSHCNTNR[sysVar.arrayIndex] = TR0CW01.TSHCNTNR[sysVar.arrayIndex];
    TR0CM001.TSFBOL[sysVar.arrayIndex] = TR0CW01.TSFBOL[sysVar.arrayIndex];

   /* Billing indicator*/
    TR0CM001.TR0CM-PPD-COLL-SPLT[sysVar.arrayIndex] = TR0CW01.TR0CW-PPD-COLL-SPLT[sysVar.arrayIndex];
    TR0CM001.TS-ACCT-STAT-IND[sysVar.arrayIndex] = TR0CW01.TS-ACCT-STAT-IND[sysVar.arrayIndex];
    TR0CM001.TS-AFRGT-RCV-AMT[sysVar.arrayIndex] = TR0CW01.TS-AFRGT-RCV-AMT[sysVar.arrayIndex];
    TR0CM001.TS-AFRGT-PAY-AMT[sysVar.arrayIndex] = TR0CW01.TS-AFRGT-PAY-AMT[sysVar.arrayIndex];
   /* Accounting Comments*/
    TR0CM001.TS-ACCT-AFRGTCOMNT[sysVar.arrayIndex] = TR0CW01.TS-ACCT-AFRGTCOMNT[sysVar.arrayIndex];

    if (TR0CW01.PC6AIRNB[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-PC6AIRNB)

      set TR0CM001.PC6AIRNB[sysVar.arrayIndex] skip, invisible;
      set TR0CM001.SY1STNBR[sysVar.arrayIndex] skip, invisible;
      set TR0CM001.SY2CLRID[sysVar.arrayIndex] skip, invisible;
      set TR0CM001.XDMCD[sysVar.arrayIndex] skip, invisible;

      if (TR0CW01.PC3PONBR[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-PC3PONBR
       && TR0CW01.SY1STNBR[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-SY1STNBR
       && TR0CW01.SY2CLRID[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-SY2CLRID
       && TR0CW01.XDMCD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XDMCD
       && TR0CW01.XQACD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XQACD
       && TR0CW01.XOWCD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XOWCD
       && TR0CW01.PC2INSEG[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-PC2INSEG
       && TR0CW01.XPGCD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XPGCD
       && TR0CW01.XUMCD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XUMCD
       && TR0CW01.FY1FCTYC[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-FY1FCTYC
       && TR0CW01.PC2CUXID[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-PC2CUXID
       && TR0CW01.OP1PARTN[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-OP1PARTN
       && TR0CW01.OP1CUOID[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-OP1CUOID
       && TR0CW01.OP1NORID[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-OP1NORID
       && TR0CW01.XWHCD[sysVar.arrayIndex] == TR0CW00.TR0CW-SAVE-XWHCD)
      /* AND TR0CW01.TSFSHPID(EZETST) = TR0CW00.TR0CW-SAVE-TSFSHPID;*/

        set TR0CM001.PC6TORDE[sysVar.arrayIndex] skip, invisible;
        set TR0CM001.XWHCD[sysVar.arrayIndex] skip, invisible;
        set TR0CM001.PC2CUXID[sysVar.arrayIndex] skip, invisible;

      else

        TR0C-12201(); /* SAVE PO FIELDS*/

      end

    else
      TR0CW00.TR0CW-SAVE-PC6AIRNB = TR0CW01.PC6AIRNB[sysVar.arrayIndex];
      TR0C-12201(); /* SAVE PO FIELDS*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

end // end TR0C-122

// SAVE PO DATA
Function TR0C-12201()
  /* ---------------------------------------------------------------*/
  /* SAVE THE PO DATA.  THIS IS SO THAT THE REPEATING PO INFORMATION*/
  /* CAN BE DARKENED.*/
  /* ------------------------------------------------------------*/

  TR0CW00.TR0CW-SAVE-PC3PONBR = TR0CW01.PC3PONBR[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-SY1STNBR = TR0CW01.SY1STNBR[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-SY2CLRID = TR0CW01.SY2CLRID[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XDMCD = TR0CW01.XDMCD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XQACD = TR0CW01.XQACD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XOWCD = TR0CW01.XOWCD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-PC2INSEG = TR0CW01.PC2INSEG[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XPGCD = TR0CW01.XPGCD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XUMCD = TR0CW01.XUMCD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-FY1FCTYC = TR0CW01.FY1FCTYC[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-PC2CUXID = TR0CW01.PC2CUXID[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-OP1PARTN = TR0CW01.OP1PARTN[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-OP1CUOID = TR0CW01.OP1CUOID[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-OP1NORID = TR0CW01.OP1NORID[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-XWHCD = TR0CW01.XWHCD[sysVar.arrayIndex];
  TR0CW00.TR0CW-SAVE-TSFSHPID = TR0CW01.TSFSHPID[sysVar.arrayIndex];

end // end TR0C-12201

// CLEAR OUT THE BODY OF THE MAP
Function TR0C-123()
  /* ------------------------------------------------------------*/
  /* FORMAT THE DATA IN THE BODY OF THE MAP.*/
  /* ------------------------------------------------------------*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 6)

    TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] = " ";
    set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] skip, invisible;
    TR0CM001.PC6AIRNB[sysVar.arrayIndex] = 0;
    TR0CM001.SY1STNBR[sysVar.arrayIndex] = " ";
    TR0CM001.SY2CLRID[sysVar.arrayIndex] = " ";
    TR0CM001.XDMCD[sysVar.arrayIndex] = " ";
    TR0CM001.PC6TORDE[sysVar.arrayIndex] = 0;
    TR0CM001.TSISHPQT[sysVar.arrayIndex] = 0;
    TR0CM001.XWHCD[sysVar.arrayIndex] = " ";
    TR0CM001.PC2CUXID[sysVar.arrayIndex] = " ";
    TR0CM001.TSHCNTNR[sysVar.arrayIndex] = " ";
    TR0CM001.TSFBOL[sysVar.arrayIndex] = " ";
    TR0CM001.TR0CM-PPD-COLL-SPLT[sysVar.arrayIndex] = " ";
    TR0CM001.TS-ACCT-STAT-IND[sysVar.arrayIndex] = " ";
    TR0CM001.TS-AFRGT-RCV-AMT[sysVar.arrayIndex] = 0;
    TR0CM001.TS-AFRGT-PAY-AMT[sysVar.arrayIndex] = 0;
    TR0CM001.TS-ACCT-AFRGTCOMNT[sysVar.arrayIndex] = " ";

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

end // end TR0C-123

// Check attention identifier
Function TR0C-130()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TR0CW00.TR0CW-REQ-FOR-DATA-FLAG == "Y") /* Request for data*/
      set TR0CW01 empty; /* M001 display storage*/
    end

    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSTSS01(); /* Exit to another application*/

    else

      TSWREC.XXXMODID = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

      set TR0CM001.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TR0CM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TS0A"; /* TO application*/
    end

    TR0CS-01-TA0050-P(); /* Purge temporary storage*/

    XSTSS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    TSWREC.XXXMODID = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end TR0C-130

// Reset fields to normal intensi
Function TR0C-140()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes*/
  /* ------------------------------------------------------------*/

  set TR0CM001.TR0CM-AIR-FRGT-NBR1 initialAttributes;
  set TR0CM001.TR0CM-AIR-FRGT-NBR2 initialAttributes;
  set TR0CM001.TR0CM-PO-ID-YY initialAttributes;
  set TR0CM001.TR0CM-PO-ID-M1 initialAttributes;
  set TR0CM001.TR0CM-PO-ID-M2 initialAttributes;
  set TR0CM001.FY1FCTYC initialAttributes;
  set TR0CM001.PC3PONBR initialAttributes;
  set TR0CM001.SY1STNBR initialAttributes;
  set TR0CM001.SY2CLRID initialAttributes;
  set TR0CM001.XDMCD initialAttributes;

  sysVar.arrayIndex = 1; /* Initialize line index*/

  while (sysVar.arrayIndex <= 6 /* * Until end of lines*/
  )
    if (TR0CM001.PC6AIRNB[sysVar.arrayIndex] != 0) /* end of display*/

      set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] initialAttributes; /* Reset select flag*/

    else

      set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] skip, invisible;

    end

    /* THESE FIELDS MAY HAVE BEEN DARKENED WHEN POS ROLLED UP*/

    set TR0CM001.PC6AIRNB[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.SY1STNBR[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.SY2CLRID[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.XDMCD[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.PC6TORDE[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.XWHCD[sysVar.arrayIndex] initialAttributes;
    set TR0CM001.PC2CUXID[sysVar.arrayIndex] initialAttributes;

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment line index*/

  end

  set TR0CM001.CATOAP initialAttributes; /* TO application*/
  set TR0CM001.CAITEM initialAttributes; /* Application data*/


end // end TR0C-140

// Verify the entered data
Function TR0C-150()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "15000"; /* Module identification*/
    set TR0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TR0C-151(); /* Verify scroll request*/

    if (converseVar.validationMsgNum == 2 /* NO PREVIOUS PAGES TO DISPLAY*/
     || converseVar.validationMsgNum == 3) /* NO MORE PAGES TO DISPLAY*/
      TR0C-15204(); /* UPDATE SELECTIONS ON CURRENT PAGE*/
      exit stack;
    end

    TR0C-152(); /* VERIFY DATA*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is enter /* Enter was pressed*/
     || converseVar.eventKey is pf14  /* PF16 was pressed*/
    )                                
      TR0C-152(); /* Verify data in the line*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
        /* NEXT SENTENCE*/
    else
      exit stack; /* Exit to display map*/
    end
  end


end // end TR0C-150

// Verify scroll request
Function TR0C-151()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TR0CW00.TR0CW-CURRENT-TS-PAGE < 2) /* and no previous pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TR0CW00.TR0CW-CURRENT-TS-PAGE >= TR0CW00.TR0CW-MAX-PAGES)

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

end // end TR0C-151

// VERIFY DATA
Function TR0C-152()

  /* ------------------------------------------------------------*/
  /* DETERMINE IF THE HEADER INFORMATION HAS CHANGED*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.XGPCD != TR0CW00.XGPCD
   || TR0CM001.TR0CM-AIR-FRGT-NBR1 != TR0CW00.TR0CW-AIR-FRGT-NBR1
   || TR0CM001.TR0CM-AIR-FRGT-NBR2 != TR0CW00.TR0CW-AIR-FRGT-NBR2
   || TR0CM001.TR0CM-SY-STY-NBR1 != TR0CW00.TR0CW-SY-STY-NBR1
   || TR0CM001.TR0CM-SY-COLR-CD-ID1 != TR0CW00.TR0CW-SY-COLR-CD-ID1
   || TR0CM001.TR0CM-XDM-DIM-CD1 != TR0CW00.TR0CW-XDM-DIM-CD1
   || TR0CM001.TR0CM-SY-STY-NBR2 != TR0CW00.TR0CW-SY-STY-NBR2
   || TR0CM001.TR0CM-SY-COLR-CD-ID2 != TR0CW00.TR0CW-SY-COLR-CD-ID2
   || TR0CM001.TR0CM-XDM-DIM-CD2 != TR0CW00.TR0CW-XDM-DIM-CD2
   || TR0CM001.TR0CM-PO-ID-YY != TR0CW00.TR0CW-HDR-PC3POIDT-YY
   || TR0CM001.TR0CM-PO-ID-M1 != TR0CW00.TR0CW-HDR-PC3POIDT-M1
   || TR0CM001.TR0CM-PO-ID-M2 != TR0CW00.TR0CW-HDR-PC3POIDT-M2
   || TR0CM001.FY1FCTYC != TR0CW00.FY1FCTYC
   || TR0CM001.PC3PONBR != TR0CW00.PC3PONBR
   || TR0CM001.TR0CM-TS-ACCT-STAT-IND != TR0CW00.TR0CW-TS-ACCT-STAT-IND
   || TR0CM001.TR0CM-XWH-WHSE-CD != TR0CW00.TR0CW-XWH-WHSE-CD
   || TR0CM001.TR0CM-PC-PRDCU-ID != TR0CW00.TR0CW-PC-PRDCU-ID)

    TR0C-15201(); /* VERIFY GPC/WAREHOUSE*/

    TR0C-15202(); /* VERIFY HEADER DATA*/

    if (converseVar.validationMsgNum != 0)
      return;
    end

     /* PURGE TEMP STORAGE*/

    TR0CS-01-TA0050-P();

    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y";
    TR0CW00.TR0CW-DISPLAY-MAP = "1";

    TR0C-15203();

    return;

  else

    if (TR0CW00.TR0CW-MAX-PAGES == 0)
      TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y";
      return;
    end

    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N";

    TR0C-15204();

  end


end // end TR0C-152

// Check for ? GPC/WHSE
Function TR0C-15201()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK FOR ? IN GPC CODE OR WAREHOUSE CODE*/
   /*  */
   /* IF '?' HAS BEEN ENTERED IN THE GPC CODE OR WAREHOUSE, DISPLAY*/
   /* THE POP-UP WINDOW.*/
   /*  */
   /* Set map page after all windows displayed*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TR0CM001.XGPCD == "?"
   || TR0CM001.TR0CM-XWH-WHSE-CD == "?")

    if (TR0CM001.XGPCD == "?")

      XPXX001(); /* perform pop-up window initialize*/

      XX0XW02.XX0XWHDR = "                   GPC "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform product code window*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TR0CM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* GPC CODE*/
        TR0CM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* DESCRIPTION*/
      else
        TR0CM001.XGPCD = " "; /* clear fields*/
      end

    end

    if (TR0CM001.TR0CM-XWH-WHSE-CD == "?")

      XPXX001(); /* perform pop-up window initialize*/

      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform product code window*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TR0CM001.TR0CM-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      else
        TR0CM001.TR0CM-XWH-WHSE-CD = " ";
      end

    end

    converseLib.clearScreen();
     /* restore the original map*/

    return;

  end

  if (TR0CM001.XGPCD == "  ") /* DEFAULT TO '02' FOOTWEAR*/
    TR0CM001.XGPCD = "02";
  end

  if (TR0CM001.XGPCD in XGPTBL.XGPCD)
    if (TR0CM001.XGPCD in XGPTBL.XGPCD)
      TR0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
  else
    TSWREC.XXXMODID = "15201";
    set TR0CM001.XGPCD cursor, bold;
    converseLib.validationFailed(101); /* GPC INVALID*/
  end

  if (TR0CM001.TR0CM-XWH-WHSE-CD == " ")
    return;
  end

  if (TR0CM001.TR0CM-XWH-WHSE-CD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
     /* NEXT SENTENCE*/
  else
    TSWREC.XXXMODID = "15201";
    set TR0CM001.TR0CM-XWH-WHSE-CD cursor, bold;
    converseLib.validationFailed(82); /* WAREHOUSE INVALID*/
  end

end // end TR0C-15201

// VERIFY HEADER INFO
Function TR0C-15202()

  /* ------------------------------------------------------------*/
  /* VALIDATE ACCOUNTING STATUS*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.TR0CM-TS-ACCT-STAT-IND != TR0CW00.TR0CW-TS-ACCT-STAT-IND)
    if (TR0CM001.TR0CM-TS-ACCT-STAT-IND != "O"
     && TR0CM001.TR0CM-TS-ACCT-STAT-IND != "C"
     && TR0CM001.TR0CM-TS-ACCT-STAT-IND != "*")
      set TR0CM001.TR0CM-TS-ACCT-STAT-IND cursor, bold;
      TSWREC.XXXMODID = "152";
      converseLib.validationFailed(405); /* INVALID ACCOUNTING STATUS*/
    end
  end

  /* ------------------------------------------------------------*/
  /* IF PO ID ZERO, INITIALIZE CENTURY TO ZEROES.*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.TR0CM-PO-ID-YY == 0
   && TR0CM001.TR0CM-PO-ID-M1 == 0
   && TR0CM001.TR0CM-PO-ID-M2 == 0)
    TR0CW00.TR0CW-HDR-PC3POIDT-CC = 0;
    return;
  end

  /* ------------------------------------------------------------*/
  /* POID Delivery Month*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.TR0CM-PO-ID-M2 < 1
   || TR0CM001.TR0CM-PO-ID-M2 > 12)
    TSWREC.XXXMODID = "15202"; /* Module identification*/
    set TR0CM001.TR0CM-PO-ID-M2 cursor, bold;
    converseLib.validationFailed(167); /* date invalid*/
  end

  /* ------------------------------------------------------------*/
  /* POID Production Month*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.TR0CM-PO-ID-M1 < 1
   || TR0CM001.TR0CM-PO-ID-M1 > 12)
    TSWREC.XXXMODID = "15202"; /* Module identification*/
    set TR0CM001.TR0CM-PO-ID-M1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(167); /* date invalid*/
  end

  /* ------------------------------------------------------------*/
  /* DETERMINE POID CC*/
  /* ------------------------------------------------------------*/

  if (TR0CM001.TR0CM-PO-ID-YY > 50)
    TR0CW00.TR0CW-HDR-PC3POIDT-CC = 19;
  else
    TR0CW00.TR0CW-HDR-PC3POIDT-CC = 20;
  end

end // end TR0C-15202

// MOVE MAP HEADER DATA TO W00
Function TR0C-15203()

   /* MOVE MAP HEADER DATA TO TR0CW00*/

  TR0CW00.XGPCD = TR0CM001.XGPCD;
  TR0CW00.XGPDESC = TR0CM001.XGPDESC;
  TR0CW00.TR0CW-AIR-FRGT-NBR1 = TR0CM001.TR0CM-AIR-FRGT-NBR1;
  TR0CW00.TR0CW-AIR-FRGT-NBR2 = TR0CM001.TR0CM-AIR-FRGT-NBR2;
  TR0CW00.TR0CW-SY-STY-NBR1 = TR0CM001.TR0CM-SY-STY-NBR1;
  TR0CW00.TR0CW-SY-COLR-CD-ID1 = TR0CM001.TR0CM-SY-COLR-CD-ID1;
  TR0CW00.TR0CW-XDM-DIM-CD1 = TR0CM001.TR0CM-XDM-DIM-CD1;
  TR0CW00.TR0CW-SY-STY-NBR2 = TR0CM001.TR0CM-SY-STY-NBR2;
  TR0CW00.TR0CW-SY-COLR-CD-ID2 = TR0CM001.TR0CM-SY-COLR-CD-ID2;
  TR0CW00.TR0CW-XDM-DIM-CD2 = TR0CM001.TR0CM-XDM-DIM-CD2;
  TR0CW00.TR0CW-HDR-PC3POIDT-YY = TR0CM001.TR0CM-PO-ID-YY;
  TR0CW00.TR0CW-HDR-PC3POIDT-M1 = TR0CM001.TR0CM-PO-ID-M1;
  TR0CW00.TR0CW-HDR-PC3POIDT-M2 = TR0CM001.TR0CM-PO-ID-M2;
  TR0CW00.FY1FCTYC = TR0CM001.FY1FCTYC;
  TR0CW00.PC3PONBR = TR0CM001.PC3PONBR;
  TR0CW00.TR0CW-TS-ACCT-STAT-IND = TR0CM001.TR0CM-TS-ACCT-STAT-IND;
  TR0CW00.TR0CW-XWH-WHSE-CD = TR0CM001.TR0CM-XWH-WHSE-CD;
  TR0CW00.TR0CW-PC-PRDCU-ID = TR0CM001.TR0CM-PC-PRDCU-ID;

end // end TR0C-15203

// VERIFY DETAIL LINE
Function TR0C-15204()

  /* ------------------------------------------------------------*/
  /* If selection was entered and is not an "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/

  sysVar.arrayIndex = 6; /* initialize index*/

  TR0CW00.TR0CW-SELECTION-UPDATED = "N";
  TR0CW00.TR0CW-SELECTION-MADE = "N";

  while (sysVar.arrayIndex > 0) /* until end of lines*/

    if (TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] != 
    TR0CW01.TR0CW-SELECTION[sysVar.arrayIndex])
      if (TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] != "S"
       && TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] != " ") /* and is not a "S"*/
        TSWREC.XXXMODID = "15200"; /* Module identification*/
        set TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] cursor, bold; /* Highlight*/
        converseLib.validationFailed(13); /* Only "S" may be entered*/
      else
        TR0CW00.TR0CW-SELECTION-UPDATED = "Y";
        TR0CW01.TR0CW-SELECTION[sysVar.arrayIndex] = TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex];
        if (TR0CM001.TR0CM-SELECTION[sysVar.arrayIndex] == "S")
          TR0CW00.TR0CW-SELECTION-MADE = "Y";
        end
      end
    end

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* decrement line number*/

  end

  if (TR0CW00.TR0CW-SELECTION-UPDATED == "Y")
    TR0CS-04-TA0050-U();
  end

end // end TR0C-15204

// Process valid input request
Function TR0C-160()
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page number*/
  /* and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TR0CW00.TR0CW-CURRENT-TS-PAGE = TR0CW00.TR0CW-CURRENT-TS-PAGE - 1;
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page number*/
  /* and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll frwd requested*/

    TR0CW00.TR0CW-CURRENT-TS-PAGE = TR0CW00.TR0CW-CURRENT-TS-PAGE + 1;
    return; /* Return to previous process*/

  end

  if (TR0CW00.TR0CW-DISPLAY-MAP == "1")
    if (TR0CW00.TR0CW-REQ-FOR-DATA-FLAG == "Y"
     || TR0CW00.TR0CW-SELECTION-MADE == "N") /* NO RECORDS SELECTED*/
      return;
    end
  end

  if (converseVar.eventKey is enter) /* enter*/
    TR0CW00.TR0CW-DISPLAY-MAP = "2"; /* Map to be displayed switch*/
    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y"; /* yes request data*/
    TR0CW00.TR0CW-PROCESS-NEXT-RECORD = "Y";
  end


end // end TR0C-160

// Style Information main process
Function TR0C-200()
   /* ------------------------------------------------------------*/

             /* AIR FREIGHT ACCOUNTING INFORMATION*/

   /* This screen allows the accounting air freight information*/
   /* to be updated.*/

   /* ------------------------------------------------------------*/

  TR0C-210(); /* Obtain the data for display*/

  TR0C-220(); /* Format and display the map*/

  TR0C-230(); /* Check attention identifier*/

  TR0C-240(); /* Reset fields to normal intensity*/

  TR0C-250(); /* Verify the entered data*/

  TR0C-260(); /* Process valid input request*/

end // end TR0C-200

// Obtain the data for display
Function TR0C-210()
  /* ------------------------------------------------------------*/
  /* If an error was found, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If an error was found*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* GET CUSTOMER NUMBER/NAME*/
  /* ------------------------------------------------------------*/

  set TR0CW02 empty;

  if (TR0CW01.PC2CUXID[XX1] > " ") /* If customer xref exists*/
    PC2REC.XGPCD = TR0CW00.XGPCD;
    PC2REC.PC2CUXID = TR0CW01.PC2CUXID[XX1];

    TR0CS-09-IO3340-S(); /* select customer*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      TR0CW02.PC2NAME = PC2REC.PC2NAME;
      TR0CW02.KUCCOID = PC2REC.KUCCOID;
      TR0CW02.KUMSTRID = PC2REC.KUMSTRID;
      TR0CW02.XNXCD = PC2REC.XNXCD;
    end
  end

  /* ------------------------------------------------------------*/
  /* GET STYLE SHORT DESCRIPTION*/
  /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = TR0CW00.XGPCD;
  PG2REC.SY1STNBR = TR0CW01.SY1STNBR[XX1];
  PG2REC.SY2CLRID = TR0CW01.SY2CLRID[XX1];
  PG2REC.XDMCD = TR0CW01.XDMCD[XX1];

  TR0CS-16-IO3120-S();

  if (VAGen_SQLCODE == 0)
    TR0CW02.SY1SSTNM = PG2REC.SY1SSTNM;
  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N"; /* Request for data switch*/

  /* ------------------------------------------------------------*/
  /* DETERMINE ACTUAL AND CONTRACTED DOLLAR PER KILO*/
  /* ------------------------------------------------------------*/

  TR0C-211();

end // end TR0C-210

// CALC ACTUAL/CONTRACT $/KILO
Function TR0C-211()
  /* ------------------------------------------------------------*/
  /* CALCULATE THE ACTUAL DOLLAR PER KILO.*/
  /* ------------------------------------------------------------*/

  TR0CW02.TR0CW-ACT-DOLL-PER-KILO = 0;

  if (TR0CW01.TSFTKG[XX1] > 0)
    TR0CW02.TR0CW-ACT-DOLL-PER-KILO = (TR0CW01.TS-TOT-COLL-SCHG[XX1] + TR0CW01.TS-TOT-PPD-SCHG[XX1]) /    TR0CW01.TSFTKG[XX1];
  end

   /* CALCULATE THE CONTRACTED DOLLAR PER KILO.*/

  TR0CW02.TR0CW-CON-DOLL-PER-KILO = 0;

  if (TR0CW01.TSFTKG[XX1] > 0)

    TR0C-21101(); /* DETERMINE CORRECT INDEX FOR VFRATE01*/

    set VFRATE01 empty;

    VFRATE01.YMTCD = "AF";
    VFRATE01.XGPCD = TR0CW00.XGPCD;
    VFRATE01.TS-CARR-GRP-CD = TR0CW01.TSFRWRDR[XX1];
    VFRATE01.TSEORIG = TR0CW01.TSEORIG[XX1];
    VFRATE01.TSEDEST = TR0CW01.TSEDEST[XX1];
    VFRATE01.TSDBEGDT = TR0CW01.TSFDPRTA[XX1];

    TR0CS-15-IO7000-SB(); /* GET DTRANS.VFRATE01*/

    if (VAGen_SQLCODE == 0)
      TR0CW02.TR0CW-CON-DOLL-PER-KILO = VFRATE01.TS-FRGT-CHG-AMT[XX2];
    end

  end

end // end TR0C-211

// FIND KG INDEX FOR VFRATE01
Function TR0C-21101()

   /* FIND THE INDEX TO USE TO DETERMINE CONTRACTED DOLLAR PER*/
   /* KILOGRAM.*/

  if (TR0CW01.TSFTKG[XX1] < 45)
    TR0CW00.XX2 = 1;
    return;
  end

  if (TR0CW01.TSFTKG[XX1] < 100)
    TR0CW00.XX2 = 2;
    return;
  end

  if (TR0CW01.TSFTKG[XX1] < 300)
    TR0CW00.XX2 = 3;
    return;
  end

  if (TR0CW01.TSFTKG[XX1] < 500)
    TR0CW00.XX2 = 4;
    return;
  end

  if (TR0CW01.TSFTKG[XX1] < 1000)
    TR0CW00.XX2 = 5;
    return;
  end

  if (TR0CW01.TSFTKG[XX1] < 2000)
    TR0CW00.XX2 = 6;
    return;
  end

  TR0CW00.XX2 = 7;


   /* ------------------ End of Process TR0C-21101 ---------------*/

end // end TR0C-21101

// Format and display the map
Function TR0C-220()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  TR0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TR0C-221();

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TR0CM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TR0CM002.XXXPRCNM = TSWREC.XXXMODID; /* Module identification*/

  /* SET TR0CM002 ALARM;            /* Indicate sound alarm*/

  end

  converse TR0CM002 ;

   /* ----------------------------------------------------------------*/
   /* CLEAR THE MESSAGE FIELDS AND SAVE FAST PATH INFORMATION*/
   /* ----------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* MODULE ID*/
  TSWREC.XXXMSGNO = 0; /* MESSAGE NUMBER*/

  COMMAREA.CATOAP = TR0CM002.CATOAP; /* TO APPLICATION*/
  COMMAREA.CAITEM = TR0CM002.CAITEM; /* APPLICATION DATA*/

end // end TR0C-220

// Format Inquiry screen
Function TR0C-221()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set TR0CM002 initial; /* M002 input/output area*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  TR0CM002.XGPCD = TR0CW00.XGPCD;
  TR0CM002.XGPDESC = TR0CW00.XGPDESC;

  TR0CM002.PC6AIRNB = TR0CW01.PC6AIRNB[XX1];
  TR0CM002.TSHCNTNR = TR0CW01.TSHCNTNR[XX1];
  TR0CM002.TSFSHPID = TR0CW01.TSFSHPID[XX1];
  TR0CM002.TSFBOL = TR0CW01.TSFBOL[XX1];
  TR0CM002.PC3PONBR = TR0CW01.PC3PONBR[XX1];
  TR0CM002.PC4ORTYP = TR0CW01.PC4ORTYP[XX1];
  TR0CM002.TSACARCD = TR0CW01.TSACARCD[XX1];
  TR0CM002.TS5CRAFT = TR0CW01.TS5CRAFT[XX1];
  TR0CM002.TSFSHPNB = TR0CW01.TSFSHPNB[XX1];

  TR0CW02.TR0CW-PO-ID = TR0CW01.PC3POIDT[XX1];
  TR0CM002.TR0CM-PO-ID-YY = TR0CW02.TR0CW-PO-ID-YY;
  TR0CM002.TR0CM-PO-ID-M1 = TR0CW02.TR0CW-PO-ID-M1;
  TR0CM002.TR0CM-PO-ID-M2 = TR0CW02.TR0CW-PO-ID-M2;

  TR0CM002.FY1FCTYC = TR0CW01.FY1FCTYC[XX1];
  TR0CM002.SY1STNBR = TR0CW01.SY1STNBR[XX1];
  TR0CM002.SY2CLRID = TR0CW01.SY2CLRID[XX1];
  TR0CM002.XDMCD = TR0CW01.XDMCD[XX1];
  TR0CM002.SY1SSTNM = TR0CW02.SY1SSTNM;
  TR0CM002.PC2CUXID = TR0CW01.PC2CUXID[XX1];
  TR0CM002.PC2NAME = TR0CW02.PC2NAME;
  TR0CM002.KUCCOID = TR0CW02.KUCCOID;
  TR0CM002.KUMSTRID = TR0CW02.KUMSTRID;
  TR0CM002.XNXCD = TR0CW02.XNXCD;
  TR0CM002.OP1CUOID = TR0CW01.OP1CUOID[XX1];
  TR0CM002.OP1NORID = TR0CW01.OP1NORID[XX1];

  if (TR0CW01.OP1CUOID[XX1] != 0)
    set TR0CM002.TR0CM-SO-PERIOD initialAttributes;
  else
    set TR0CM002.TR0CM-SO-PERIOD skip, invisible;
    set TR0CM002.OP1NORID skip, invisible;
  end

  TR0CM002.XWHCD = TR0CW01.XWHCD[XX1];
  TR0CM002.OP1CUPO = TR0CW01.OP1CUPO[XX1];

  TR0CM002.TSFRWRDR = TR0CW01.TSFRWRDR[XX1];
  TR0CM002.TSFDPRTA = TR0CW01.TSFDPRTA[XX1];
  TR0CM002.TSEORIG = TR0CW01.TSEORIG[XX1];
  TR0CM002.TSEDEST = TR0CW01.TSEDEST[XX1];
  TR0CM002.TSISHPQT = TR0CW01.TSISHPQT[XX1];
  TR0CM002.TSFTKG = TR0CW01.TSFTKG[XX1];
  TR0CM002.TR0CM-ACT-DOLL-PER-KILO = TR0CW02.TR0CW-ACT-DOLL-PER-KILO;
  TR0CM002.TR0CM-CON-DOLL-PER-KILO = TR0CW02.TR0CW-CON-DOLL-PER-KILO;
  TR0CM002.TS-TOT-PPD-SCHG = TR0CW01.TS-TOT-PPD-SCHG[XX1];
  TR0CM002.TS-TOT-COLL-SCHG = TR0CW01.TS-TOT-COLL-SCHG[XX1];

  TR0CM002.PA-BLTO-NIKE-PCT = TR0CW01.PA-BLTO-NIKE-PCT[XX1];
  TR0CM002.TR0CM-PA-DEPT-RSP-DESC = TR0CW01.TR0CW-DEPT-RSP-DESC[XX1];
  TR0CM002.PA-BLTO-FCTY-PCT = TR0CW01.PA-BLTO-FCTY-PCT[XX1];
  TR0CM002.PA-BLTO-CUST-PCT = TR0CW01.PA-BLTO-CUST-PCT[XX1];
  TR0CM002.PA-BLTO-FRWRDR-PCT = TR0CW01.PA-BLTO-FRWRDR-PCT[XX1];

  TR0CW02.TR0CW-PA-BLTO-TOTAL-PCT = TR0CW01.PA-BLTO-NIKE-PCT[XX1] +       TR0CW01.PA-BLTO-FCTY-PCT[XX1] +       TR0CW01.PA-BLTO-CUST-PCT[XX1] +       TR0CW01.PA-BLTO-FRWRDR-PCT[XX1];

  TR0CM002.TR0CM-PA-BLTO-TOTAL-PCT = TR0CW02.TR0CW-PA-BLTO-TOTAL-PCT;

  TR0CM002.TS-AFRGT-RCV-AMT = TR0CW01.TS-AFRGT-RCV-AMT[XX1];
  TR0CM002.TS-AFRGT-PAY-AMT = TR0CW01.TS-AFRGT-PAY-AMT[XX1];
  TR0CM002.TS-ACCT-STAT-IND = TR0CW01.TS-ACCT-STAT-IND[XX1];

  if (TR0CW01.TS-ACCT-STAT-IND[XX1] == "O")
    TR0CM002.TR0CM-ACCT-STAT-DESC = "OPEN";
  else
    if (TR0CW01.TS-ACCT-STAT-IND[XX1] == "C")
      TR0CM002.TR0CM-ACCT-STAT-DESC = "CLOSED";
    end
  end

  TR0CM002.TS-ACCT-AFRGTCOMNT = TR0CW01.TS-ACCT-AFRGTCOMNT[XX1];

   /* IF INQUIRY ONLY, PROTECT FIELDS.*/
   /* OTHERWISE, POSITION CURSOR ON FIRST EMPTY FIELD*/

  if (COMMAREA.CAALVL[1] == "N")
    set TR0CM002.TS-AFRGT-RCV-AMT protect;
    set TR0CM002.TS-AFRGT-PAY-AMT protect;
    set TR0CM002.TS-ACCT-STAT-IND protect;
    set TR0CM002.TS-ACCT-AFRGTCOMNT protect;
    set TR0CM002.CATOAP cursor;
  else

    if (TR0CM002.TS-ACCT-AFRGTCOMNT == " ")
      set TR0CM002.TS-ACCT-AFRGTCOMNT cursor;
    end

    if (TR0CM002.TS-ACCT-STAT-IND == " ")
      set TR0CM002.TS-ACCT-STAT-IND cursor;
    end

    if (TR0CM002.TS-AFRGT-PAY-AMT == 0)
      set TR0CM002.TS-AFRGT-PAY-AMT cursor;
    end

    if (TR0CM002.TS-AFRGT-RCV-AMT == 0)
      set TR0CM002.TS-AFRGT-RCV-AMT cursor;
    end

  end

end // end TR0C-221

// Check the attention identifier
Function TR0C-230()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/

  TR0CW00.TR0CW-PROCESS-NEXT-RECORD = "Y";

  if (converseVar.eventKey is pa2) /* PA2 - CANCEL*/

    if (TR0CW00.TR0CW-REQ-FOR-DATA-FLAG == "Y") /* Request for data*/
      set TR0CW02 empty; /* M002 display storage*/
    end

    TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* IF FAST PATH WAS REQUESTED, TRANSFER TO THE APPLICATION.*/
  /* ------------------------------------------------------------*/

  if (TR0CM002.CATOAP > " ") /* FAST PATH WAS REQUESTED*/

    if (converseVar.eventKey is enter) /* ENTER PRESSED*/
      XSTSS01(); /* EXIT TO ANOTHER APPLICATION*/
    else
      TSWREC.XXXMODID = "230";
      converseLib.validationFailed(5); /* PA/PF KEY INVALID WITH FAST PATH*/
      set TR0CM002.CATOAP cursor, bold;
    end

  end

  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TR0CM002"; /* Application find code*/
    end

    TR0CS-01-TA0050-P(); /* Purge any temporary storage*/

    XSTSS01(); /* Exit to another application*/

    TR0CW00.TR0CW-DISPLAY-MAP = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* PF3 - EXIT*/
   && converseVar.eventKey not pf8   /* PF8 - NEXT SELECTED RECORD*/
   && converseVar.eventKey not pf9)  /* PF9 - UPDATE*/

    TSWREC.XXXMODID = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    return;

  end

  if (converseVar.eventKey is pf3) /* PF3 - EXIT*/
    TR0CW00.TR0CW-DISPLAY-MAP = "1";
    exit stack;
  end

  if (converseVar.eventKey is pf9) /* PF9 - UPDATE*/
    TR0CW00.TR0CW-PROCESS-NEXT-RECORD = "N";
    if (COMMAREA.CAALVL[1] == "N")
      TSWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(6); /* Not authorized message*/
    end
  end

  if (converseVar.eventKey is enter)
    TR0CW00.TR0CW-PROCESS-NEXT-RECORD = "N";
  end

end // end TR0C-230

// Reset fields to normal intensi
Function TR0C-240()
   /* ------------------------------------------------------------*/

                 /* RESET HIGHLIGHTED FIELDS*/

     /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TR0CM002.TS-AFRGT-RCV-AMT initialAttributes;
  set TR0CM002.TS-AFRGT-PAY-AMT initialAttributes;
  set TR0CM002.TS-ACCT-STAT-IND initialAttributes;
  set TR0CM002.TS-ACCT-AFRGTCOMNT initialAttributes;

end // end TR0C-240

// EDIT INPUT FIELDS
Function TR0C-250()
   /* ******************************************************************/
   /* EDIT THE INPUT FIELDS                                          **/
   /* ******************************************************************/

  if (TR0CM002.TS-ACCT-AFRGTCOMNT != TR0CW01.TS-ACCT-AFRGTCOMNT[XX1])
    TR0CW01.TS-ACCT-AFRGTCOMNT[XX1] = TR0CM002.TS-ACCT-AFRGTCOMNT;
  end

  if (TR0CM002.TS-ACCT-STAT-IND != TR0CW01.TS-ACCT-STAT-IND[XX1])
    if (TR0CM002.TS-ACCT-STAT-IND != "C"
     && TR0CM002.TS-ACCT-STAT-IND != "O")
      TSWREC.XXXMODID = "251";
      converseLib.validationFailed(404); /* ACCOUTING STATUS INVALID*/
      set TR0CM002.TS-ACCT-STAT-IND cursor, bold;
      TR0CM002.TR0CM-ACCT-STAT-DESC = " ";
    else
      TR0CW00.TR0CW-ACCT-STAT-CHANGED = "Y";
      TR0CW01.TS-ACCT-STAT-IND[XX1] = TR0CM002.TS-ACCT-STAT-IND;
      if (TR0CM002.TS-ACCT-STAT-IND == "C")
        TR0CM002.TR0CM-ACCT-STAT-DESC = "CLOSED";
      else
        TR0CM002.TR0CM-ACCT-STAT-DESC = "OPEN";
      end
    end
  end

  if (TR0CM002.TS-AFRGT-PAY-AMT != TR0CW01.TS-AFRGT-PAY-AMT[XX1])
    TR0CW01.TS-AFRGT-PAY-AMT[XX1] = TR0CM002.TS-AFRGT-PAY-AMT;
  end

  if (TR0CM002.TS-AFRGT-RCV-AMT != TR0CW01.TS-AFRGT-RCV-AMT[XX1])
    TR0CW01.TS-AFRGT-RCV-AMT[XX1] = TR0CM002.TS-AFRGT-RCV-AMT;
  end
end // end TR0C-250

// Process valid input request
Function TR0C-260()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (converseVar.eventKey not pf9)
    return;
  end

  if (COMMAREA.CAALVL[1] == "N")
    TSWREC.XXXMODID = "260";
    converseLib.validationFailed(208); /* YOU ARE NOT AUTHORIZED TO UPDATE THIS DATA*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* SELECT EXISTING DTRANS.VAFREQ01*/
  /* ------------------------------------------------------------*/

  set VAFREQ01 empty;

  VAFREQ01.TSFSHPID = TR0CW01.TSFSHPID[XX1];
  VAFREQ01.TSIPLNBR = TR0CW01.TSIPLNBR[XX1];

  TR0CS-11-IO7170-S();

  /* ------------------------------------------------------------*/
  /* IF RECORD EXISTS, UPDATE DTRANS.VAFREQ01*/
  /* ------------------------------------------------------------*/

  if (VAGen_SQLCODE == 0)

    VAFREQ01.TS-AFRGT-RCV-AMT = TR0CW01.TS-AFRGT-RCV-AMT[XX1];
    VAFREQ01.TS-AFRGT-PAY-AMT = TR0CW01.TS-AFRGT-PAY-AMT[XX1];
    VAFREQ01.TS-ACCT-STAT-IND = TR0CW01.TS-ACCT-STAT-IND[XX1];
    VAFREQ01.TS-ACCT-AFRGTCOMNT = TR0CW01.TS-ACCT-AFRGTCOMNT[XX1];
    VAFREQ01.XXXUSRID = COMMAREA.CAUSERID;
    VAFREQ01.ZZZSDT = XX0XW01.XX0XWDAT;
    VAFREQ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VAFREQ01.ZZZSTM = XX0XW01.XX0XWTIM;
    VAFREQ01.ZZZCHGTM = XX0XW01.XX0XWTIM;

    if (TR0CW00.TR0CW-ACCT-STAT-CHANGED == "Y")
      VAFREQ01.TS-ACCT-STAT-DT = XX0XW01.XX0XWDAT;
      TR0CW00.TR0CW-ACCT-STAT-CHANGED = "N";
    end

    TR0CS-13-IO7170-U();

    TSWREC.XXXMODID = "260";
    converseLib.validationFailed(1); /* TABLE UPDATE WAS SUCCESSFULLY COMPLETED*/

  else

  /* ------------------------------------------------------------*/
  /* IF RECORD DOES NOT EXIST, ADD DTRANS.VAFREQ01*/
  /* ------------------------------------------------------------*/

    VAFREQ01.TSFSHPID = TR0CW01.TSFSHPID[XX1];
    VAFREQ01.TSIPLNBR = TR0CW01.TSIPLNBR[XX1];
    VAFREQ01.TS-AFRGT-RCV-AMT = TR0CW01.TS-AFRGT-RCV-AMT[XX1];
    VAFREQ01.TS-AFRGT-PAY-AMT = TR0CW01.TS-AFRGT-PAY-AMT[XX1];
    VAFREQ01.TS-ACCT-STAT-IND = TR0CW01.TS-ACCT-STAT-IND[XX1];
    VAFREQ01.TS-ACCT-AFRGTCOMNT = TR0CW01.TS-ACCT-AFRGTCOMNT[XX1];
    VAFREQ01.XXXUSRID = COMMAREA.CAUSERID;
    VAFREQ01.ZZZSDT = XX0XW01.XX0XWDAT;
    VAFREQ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VAFREQ01.TS-ACCT-STAT-DT = XX0XW01.XX0XWDAT;
    VAFREQ01.ZZZSTM = XX0XW01.XX0XWTIM;
    VAFREQ01.ZZZCHGTM = XX0XW01.XX0XWTIM;

    TR0CS-12-IO7170-A();

    TSWREC.XXXMODID = "260";
    converseLib.validationFailed(1); /* TABLE UPDATE WAS SUCCESSFULLY COMPLETED*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

  TR0CW00.TR0CW-REQ-FOR-DATA-FLAG = "Y";

end // end TR0C-260

// DELETE TEMP STORAGE
Function TR0CS-01-TA0050-P()
   /* -------------------------------------------*/
    /* PURGE ANY TEMPORARY STORAGE*/
   /* -------------------------------------------*/

  set TR0CW01 empty;

  TA5REC.TA5TSQIX = 0; /* CURRENT PAGE NUMBER;*/
  TR0CW00.TR0CW-MAX-PAGES = 0;

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
      /* NEXT SENTENCE*/
  else
    TR0CW00.TR0CW-CURRENT-TS-PAGE = 1; /* CURRENT TEMP STORE PAGE*/
  end

  TA5REC.TA5APPID = "TR0C"; /* APPL ID*/
  TA5REC.TA5FNCCD = "P"; /* SET FUNCTION CODE*/

  try
    call "TA0050" (TR0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* TEMPORARY STORAGE*/

   /* -------------------------------------------*/
    /* IF SUCCESSFUL RETURN TO CALLING ROUTINE*/
   /* -------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && TA5REC.TA5RTNCD == 0)          /* NORMAL RETURN*/

    return;

  end

   /* -------------------------------------------------------*/
    /* OTHERWISE, INDICATE THAT A SYSTEM ERROR HAS OCCURRED.*/
   /* -------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP RETURN CODE*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* SUBROUTINE PARAMETERS*/

  TSWREC.XXXMODID = "S01";
  converseLib.validationFailed(10); /* SYSTEM ERROR*/

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* MAP APPLICATION*/
  TA1REC.TA1MAP = "M001";
  SQLCA.SQLCAREC = TA5REC.TA5DATA;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TR0CS-01-TA0050-P

// WRITE TEMP STORAGE
Function TR0CS-02-TA0050-A()
   /* ------------------------------------------------*/
   /* WRITE TEMP STORAGE*/
   /* -----------------------------------------------*/

  sysVar.arrayIndex = 0;
  TR0CW01.XXXTSLEN = TR0CW00.XXXTSLEN; /* TEMP STORAGE PAGE LENGTH*/
  TA5REC.TA5APPID = "TR0C"; /* SET APPLICATION ID*/
  TA5REC.TA5FNCCD = "A"; /* SET FUNCTION CODE*/

  try
    call "TA0050" (TR0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* TEMPORARY STORAGE*/

   /* ----------------------------------------------------------*/
   /* IF SUCCESSFUL, INITIALIZE THE STORAGE AREA AND INDICATORS*/
   /* TO BE USED. RETURN TO THE PREVIOUS PROCESS.*/
   /* ----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && TA5REC.TA5RTNCD == 0)          /* AND NORMAL RETURN CODE*/

    TR0CW00.TR0CW-MAX-PAGES = TA5REC.TA5TSQIX;

    set TR0CW01 empty;

    sysVar.arrayIndex = 0;

    return;

  end

   /* ----------------------------------------------------------*/
   /* OTHERWISE, INDICATE THAT A SYSTEM ERROR HAS OCCURRED.*/
   /* ----------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP RETURN CODE*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* SUBROUTINE PARAMETERS*/

  TSWREC.XXXMODID = "S02";
  converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1PGMNM = "TR0CS02";
  TA1REC.TA1LOC = "WRITE  TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* MAP APPLICATION*/
  TA1REC.TA1MAP = "M001";

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end TR0CS-02-TA0050-A

// READ TEMP STORAGE
Function TR0CS-03-TA0050-R()
   /* ---------------------------------------------*/
    /* OBTAIN TEMP STORAGE PAGE*/
   /* ---------------------------------------------*/

  TR0CW01.XXXTSLEN = TR0CW00.XXXTSLEN; /* TEMP STORAGE PAGE LENGTH*/
  TA5REC.TA5TSQIX = TR0CW00.TR0CW-CURRENT-TS-PAGE;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TR0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "TR0CS03"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* MAP APPLICATION*/
  TA1REC.TA1MAP = "M001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TR0CS-03-TA0050-R

// UPDATE TEMP STORAGE
Function TR0CS-04-TA0050-U()
   /* ------------------------------------------------*/
   /* WRITE TEMP STORAGE*/
   /* -----------------------------------------------*/

  sysVar.arrayIndex = 0;
  TR0CW01.XXXTSLEN = TR0CW00.XXXTSLEN; /* TEMP STORAGE PAGE LENGTH*/
  TA5REC.TA5APPID = "TR0C"; /* SET APPLI ID*/
  TA5REC.TA5FNCCD = "U"; /* SET FUNCTION CODE*/

  call "TA0050" (TR0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------*/
   /* IF SUCCESSFUL, RETURN TO THE PREVIOUS PROCESS*/
   /* -----------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && TA5REC.TA5RTNCD == 0)         

    return;

  end

   /* ------------------------------------------------------*/
   /* OTHERWISE, INDICATE THAT A SYSTEM ERROR HAS OCCURRED.*/
   /* ------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP RETURN CODE*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* SUBROUTINE PARAMETERS*/

  TSWREC.XXXMODID = "S04";
  converseLib.validationFailed(10); /* SYSTEM ERROR*/

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* MAP APPLICATION*/
  TA1REC.TA1MAP = "M001";
  SQLCA.SQLCAREC = TA5REC.TA5DATA;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TR0CS-04-TA0050-U

// Select 'S1' TRANS/PO DATA
Function TR0CS-05-TS1590-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested cursor.*/
   /* ------------------------------------------------------------*/

  TR0CW03.TR0CW-IO-FUNCTION = "S1";

  try
    call "TS1590" (TR0CW03, SQLCA, PC6REC, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
    )                           
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TRANS/PO DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* TABLE KEY*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-05-TS1590-S1

// Fetch 'N1' TRANS/PO DATA
Function TR0CS-06-TS1590-N1()
   /* ------------------------------------------------------------*/
   /* Select the requested cursor.*/
   /* ------------------------------------------------------------*/

  TR0CW03.TR0CW-IO-FUNCTION = "N1";

  try
    call "TS1590" (TR0CW03, SQLCA, PC6REC, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TR0CW00.TR0CW-SKIP-THIS-RECORD = "N";
      TR0CW00.TR0CW-EOC-VCPLHD02-FLAG = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
        TR0CW00.TR0CW-EOC-VCPLHD02-FLAG = "Y";
        return;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 TRANS/PO DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-06-TS1590-N1

// Select 'C1' TRANS/PO DATA
Function TR0CS-07-TS1590-C1()
   /* ------------------------------------------------------------*/
   /* Close the requested cursor.*/
   /* ------------------------------------------------------------*/

  TR0CW03.TR0CW-IO-FUNCTION = "C1";

  try
    call "TS1590" (TR0CW03, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
    )                           
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 TRANS/PO DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-07-TS1590-C1

// Select 'S' VPAAFH01
Function TR0CS-08-IO7080-S()
   /* ------------------------------------------------------------*/
   /* Select DPRODA.VPAAFH01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7080" ("S ", SQLCA, VPAAFH01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODA.VPAAFH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAAFH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPAAFH01.VPAAFH01-GROUP; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-08-IO7080-S

// Select 'S ' DPRODC.VPRDCU01
Function TR0CS-09-IO3340-S()

   /* ------------------------------------------------------------*/
   /* Select unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S DPRODC.VPRDCU01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-09-IO3340-S

// Select 'S ' DTRANS.VAFREQ01
Function TR0CS-11-IO7170-S()

   /* ------------------------------------------------------------*/
   /* Select unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7170" ("S ", SQLCA, VAFREQ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S DTRANS.VAFREQ01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFREQ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAFREQ01.VAFREQ01-KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-11-IO7170-S

// ADD DTRANS.VAFREQ01
Function TR0CS-12-IO7170-A()

   /* ------------------------------------------------------------*/
   /* ADD DTRANS.VAFREQ01*/
   /* ------------------------------------------------------------*/

  try
    call "IO7170" ("A ", SQLCA, VAFREQ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DTRANS.VAFREQ01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFREQ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAFREQ01.VAFREQ01-KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-12-IO7170-A

// Select 'S ' DTRANS.VAFREQ01
Function TR0CS-13-IO7170-U()

   /* ------------------------------------------------------------*/
   /* UPDATE DTRANS.VAFREQ01*/
   /* ------------------------------------------------------------*/

  try
    call "IO7170" ("U ", SQLCA, VAFREQ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DTRANS.VAFREQ01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFREQ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAFREQ01.VAFREQ01-KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-13-IO7170-U

// Select 'S' VCNTNR01
Function TR0CS-14-IO2590-SA()
   /* ------------------------------------------------------------*/
   /* Select DTRANS.VCNTNR01*/
   /* ------------------------------------------------------------*/

  try
    call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DTRANS.VCNTNR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-14-IO2590-SA

// SELECT 'SB' DTRANS.VFRATE01
Function TR0CS-15-IO7000-SB()
   /* ------------------------------------------------------------*/
   /* Select 'SB' DTRANS.VFRATE01*/
   /* ------------------------------------------------------------*/

  try
    call "IO7000" ("SB", SQLCA, VFRATE01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TR0CW00.TR0CW-DB2-ERROR = "Y";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"SB\" DTRANS.VFRATE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFRATE01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFRATE01.VFRATE01-GROUP; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-15-IO7000-SB

// Select 'S ' DPRODG.VSYCLR01
Function TR0CS-16-IO3120-S()

   /* ------------------------------------------------------------*/
   /* Select unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S DPRODG.VSYCLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TR0CS-16-IO3120-S

//*** RECORD=TR0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TR0CW00 type basicRecord
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 TR0CW-EOC-VCPLHD02-FLAG TR0CW-EOC-VCPLHD02-FLAG ; 
  10 TR0CW-DISPLAY-MAP TR0CW-DISPLAY-MAP ; 
  10 TR0CW-REQ-FOR-DATA-FLAG TR0CW-REQ-FOR-DATA-FLAG ; 
  10 TR0CW-AIR-FRGT-NBR1 TR0CW-AIR-FRGT-NBR1 ; 
  10 TR0CW-AIR-FRGT-NBR2 TR0CW-AIR-FRGT-NBR2 ; 
  10 TR0CW-SY-STY-NBR1 TR0CW-SY-STY-NBR1 ; 
  10 TR0CW-SY-COLR-CD-ID1 TR0CW-SY-COLR-CD-ID1 ; 
  10 TR0CW-XDM-DIM-CD1 TR0CW-XDM-DIM-CD1 ; 
  10 TR0CW-SY-STY-NBR2 TR0CW-SY-STY-NBR2 ; 
  10 TR0CW-SY-COLR-CD-ID2 TR0CW-SY-COLR-CD-ID2 ; 
  10 TR0CW-XDM-DIM-CD2 TR0CW-XDM-DIM-CD2 ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC3PONBR PC3PONBR ; 
  10 TR0CW-TS-ACCT-STAT-IND TR0CW-TS-ACCT-STAT-IND ; 
  10 TR0CW-XWH-WHSE-CD TR0CW-XWH-WHSE-CD ; 
  10 TR0CW-PC-PRDCU-ID TR0CW-PC-PRDCU-ID ; 
  10 TR0CW-HDR-PC3POIDT TR0CW-HDR-PC3POIDT ; 
    15 TR0CW-HDR-PC3POIDT-CC TR0CW-HDR-PC3POIDT-CC ; 
    15 TR0CW-HDR-PC3POIDT-YY TR0CW-HDR-PC3POIDT-YY ; 
    15 TR0CW-HDR-PC3POIDT-M1 TR0CW-HDR-PC3POIDT-M1 ; 
    15 TR0CW-HDR-PC3POIDT-M2 TR0CW-HDR-PC3POIDT-M2 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TR0CW-PC-TOT-ON-ORD-QTY TR0CW-PC-TOT-ON-ORD-QTY ; 
  10 TR0CW-SAVED-FIELDS TR0CW-SAVED-FIELDS ; 
    15 TR0CW-SAVE-PC6AIRNB TR0CW-SAVE-PC6AIRNB ; 
    15 TR0CW-SAVE-PC3PONBR TR0CW-SAVE-PC3PONBR ; 
    15 TR0CW-SAVE-SY1STNBR TR0CW-SAVE-SY1STNBR ; 
    15 TR0CW-SAVE-SY2CLRID TR0CW-SAVE-SY2CLRID ; 
    15 TR0CW-SAVE-XDMCD TR0CW-SAVE-XDMCD ; 
    15 TR0CW-SAVE-XQACD TR0CW-SAVE-XQACD ; 
    15 TR0CW-SAVE-XOWCD TR0CW-SAVE-XOWCD ; 
    15 TR0CW-SAVE-PC2INSEG TR0CW-SAVE-PC2INSEG ; 
    15 TR0CW-SAVE-XPGCD TR0CW-SAVE-XPGCD ; 
    15 TR0CW-SAVE-XUMCD TR0CW-SAVE-XUMCD ; 
    15 TR0CW-SAVE-FY1FCTYC TR0CW-SAVE-FY1FCTYC ; 
    15 TR0CW-SAVE-PC2CUXID TR0CW-SAVE-PC2CUXID ; 
    15 TR0CW-SAVE-OP1PARTN TR0CW-SAVE-OP1PARTN ; 
    15 TR0CW-SAVE-OP1CUOID TR0CW-SAVE-OP1CUOID ; 
    15 TR0CW-SAVE-OP1NORID TR0CW-SAVE-OP1NORID ; 
    15 TR0CW-SAVE-XWHCD TR0CW-SAVE-XWHCD ; 
    15 TR0CW-SAVE-TSFSHPID TR0CW-SAVE-TSFSHPID ; 
  10 TR0CW-SKIP-THIS-RECORD TR0CW-SKIP-THIS-RECORD ; 
  10 TR0CW-MAX-PAGES TR0CW-MAX-PAGES ; 
  10 TR0CW-CURRENT-TS-PAGE TR0CW-CURRENT-TS-PAGE ; 
  10 TR0CW-DB2-ERROR TR0CW-DB2-ERROR ; 
  10 TR0CW-SELECTION-UPDATED TR0CW-SELECTION-UPDATED ; 
  10 TR0CW-ACCT-STAT-CHANGED TR0CW-ACCT-STAT-CHANGED ; 
  10 TR0CW-PROCESS-NEXT-RECORD TR0CW-PROCESS-NEXT-RECORD ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 TR0CW-SELECTION-MADE TR0CW-SELECTION-MADE ; 
end // end TR0CW00

//*** RECORD=TR0CW01 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record TR0CW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1590) ; // Temporary storage page length
    10 * char(265) [6] ; // Temporary storage page length
      15 TR0CW-SELECTION TR0CW-SELECTION ; 
      15 PC6AIRNB PC6AIRNB ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 PC6TORDE PC6TORDE ; 
      15 TSISHPQT TSISHPQT ; 
      15 TSHCNTNR TSHCNTNR ; 
      15 TSFBOL TSFBOL ; 
      15 TR0CW-PPD-COLL-SPLT TR0CW-PPD-COLL-SPLT ; 
      15 TS-ACCT-STAT-IND TS-ACCT-STAT-IND ; 
      15 TS-AFRGT-RCV-AMT TS-AFRGT-RCV-AMT ; 
      15 TS-AFRGT-PAY-AMT TS-AFRGT-PAY-AMT ; 
      15 TS-ACCT-AFRGTCOMNT TS-ACCT-AFRGTCOMNT ; 
      15 PC3PONBR PC3PONBR ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP1CUPO OP1CUPO ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PA-BLTO-NIKE-PCT PA-BLTO-NIKE-PCT ; 
      15 PA-BLTO-FCTY-PCT PA-BLTO-FCTY-PCT ; 
      15 PA-BLTO-CUST-PCT PA-BLTO-CUST-PCT ; 
      15 PA-BLTO-FRWRDR-PCT PA-BLTO-FRWRDR-PCT ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSIPLNBR TSIPLNBR ; 
      15 TS-TOT-COLL-SCHG TS-TOT-COLL-SCHG ; 
      15 TS-TOT-PPD-SCHG TS-TOT-PPD-SCHG ; 
      15 TSFTKG TSFTKG ; 
      15 PA-DEPT-RSP-IND PA-DEPT-RSP-IND ; 
      15 PC3POIDT PC3POIDT ; 
      15 TR0CW-DEPT-RSP-DESC TR0CW-DEPT-RSP-DESC ; 
      15 TSACARCD TSACARCD ; 
      15 TS5CRAFT TS5CRAFT ; 
      15 TSFSHPNB TSFSHPNB ; 
      15 TSEDEST TSEDEST ; 
      15 TSEORIG TSEORIG ; 
      15 TSFDPRTA TSFDPRTA ; 
      15 TSFRWRDR TSFRWRDR ; 
end // end TR0CW01

//*** RECORD=TR0CW02 ****
// /*
// /*      application working storage for map 2
// /*
// ***********************
Record TR0CW02 type basicRecord
  10 PC2NAME PC2NAME ; 
  10 TR0CW-PO-ID TR0CW-PO-ID ; 
    15 * num(3) ; 
    15 TR0CW-PO-ID-YY TR0CW-PO-ID-YY ; 
    15 TR0CW-PO-ID-M1 TR0CW-PO-ID-M1 ; 
    15 TR0CW-PO-ID-M2 TR0CW-PO-ID-M2 ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 TR0CW-ACT-DOLL-PER-KILO TR0CW-ACT-DOLL-PER-KILO ; 
  10 TR0CW-CON-DOLL-PER-KILO TR0CW-CON-DOLL-PER-KILO ; 
  10 TR0CW-PA-BLTO-TOTAL-PCT TR0CW-PA-BLTO-TOTAL-PCT ; 
end // end TR0CW02

//*** RECORD=TR0CW03 ****
// ***************** po date pass record *********************
// 
//   This record contains the from/to data to be passed to the
//   TS1590 IOMOD.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 04/20/94   MSMIT2   New record.
// ***********************
Record TR0CW03 type basicRecord
  5 TR0CW-IO-GROUP TR0CW-IO-GROUP ; 
    10 TR0CW-IO-FUNCTION TR0CW-IO-FUNCTION ; 
    10 TR0CW-IO-FROM-PC6AIRNB TR0CW-IO-FROM-PC6AIRNB ; 
    10 TR0CW-IO-TO-PC6AIRNB TR0CW-IO-TO-PC6AIRNB ; 
    10 TR0CW-IO-FROM-SY1STNBR TR0CW-IO-FROM-SY1STNBR ; 
    10 TR0CW-IO-FROM-SY2CLRID TR0CW-IO-FROM-SY2CLRID ; 
    10 TR0CW-IO-FROM-XDMCD TR0CW-IO-FROM-XDMCD ; 
    10 TR0CW-IO-TO-SY1STNBR TR0CW-IO-TO-SY1STNBR ; 
    10 TR0CW-IO-TO-SY2CLRID TR0CW-IO-TO-SY2CLRID ; 
    10 TR0CW-IO-TO-XDMCD TR0CW-IO-TO-XDMCD ; 
end // end TR0CW03

//*** RECORD=VAFREQ01 ****
// ************** AIR FREIGHT HEADER RECORD *******************
// 
// DB2 TABLE VIEW:      DTRANS.VAFREQ01
// 
// COPYLIB MEMBER:      DAFREQ01
// 
// I/O MODULE:
// 
// KEY TO DB2 TABLE:
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 04/18/94   MSMIT2   New record.
// ************************
Record VAFREQ01 type basicRecord
  5 VAFREQ01-GROUP VAFREQ01-GROUP ; 
    10 VAFREQ01-KEY VAFREQ01-KEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSIPLNBR TSIPLNBR ; 
    10 TS-AFRGT-PAY-AMT TS-AFRGT-PAY-AMT ; 
    10 TS-AFRGT-RCV-AMT TS-AFRGT-RCV-AMT ; 
    10 TS-ACCT-AFRGTCOMNT TS-ACCT-AFRGTCOMNT ; 
    10 TS-ACCT-STAT-IND TS-ACCT-STAT-IND ; 
    10 TS-ACCT-STAT-DT TS-ACCT-STAT-DT ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VAFREQ01

DataItem TR0CW-ACCT-STAT-CHANGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-ACT-DOLL-PER-KILO decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Air Freight Number (from nbr)
DataItem TR0CW-AIR-FRGT-NBR1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Air Freight Number (to nbr)
DataItem TR0CW-AIR-FRGT-NBR2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-CON-DOLL-PER-KILO decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-CURRENT-TS-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-DB2-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YES_STAT_CD1
DataItem TR0CW-DEPT-RSP-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem TR0CW-DISPLAY-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TR0CW-EOC-VCPLHD02-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-HDR-PC3POIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-HDR-PC3POIDT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-HDR-PC3POIDT-M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-HDR-PC3POIDT-M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-HDR-PC3POIDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_AIR_FRGT_NBR
DataItem TR0CW-IO-FROM-PC6AIRNB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem TR0CW-IO-FROM-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem TR0CW-IO-FROM-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem TR0CW-IO-FROM-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IOMOD FUNCTION
DataItem TR0CW-IO-FUNCTION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-IO-GROUP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_AIR_FRGT_NBR
DataItem TR0CW-IO-TO-PC6AIRNB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem TR0CW-IO-TO-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem TR0CW-IO-TO-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem TR0CW-IO-TO-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-MAX-PAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AIR FREIGHT BILL TO CUST %
DataItem TR0CW-PA-BLTO-TOTAL-PCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-PC-PRDCU-ID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_TOT_ON_ORD_QTY
DataItem TR0CW-PC-TOT-ON-ORD-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-PO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-PO-ID-M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-PO-ID-M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TR0CW-PO-ID-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BILLING INDICATOR
DataItem TR0CW-PPD-COLL-SPLT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-PROCESS-NEXT-RECORD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TR0CW-REQ-FOR-DATA-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD
DataItem TR0CW-SAVE-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem TR0CW-SAVE-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem TR0CW-SAVE-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-part-char
DataItem TR0CW-SAVE-OP1PARTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID
DataItem TR0CW-SAVE-PC2CUXID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_CU_IN_SEG_CD
DataItem TR0CW-SAVE-PC2INSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem TR0CW-SAVE-PC3PONBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_AIR_FRGT_NBR
DataItem TR0CW-SAVE-PC6AIRNB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem TR0CW-SAVE-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem TR0CW-SAVE-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_NIKE_SHP_ID
DataItem TR0CW-SAVE-TSFSHPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDM_DIM_CD
DataItem TR0CW-SAVE-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem TR0CW-SAVE-XOWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG_PKG_TYP_CD
DataItem TR0CW-SAVE-XPGCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem TR0CW-SAVE-XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem TR0CW-SAVE-XUMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem TR0CW-SAVE-XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-SAVED-FIELDS char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LINE SELECTION INDICATOR
DataItem TR0CW-SELECTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-SELECTION-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-SELECTION-UPDATED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-SKIP-THIS-RECORD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem TR0CW-SY-COLR-CD-ID1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem TR0CW-SY-COLR-CD-ID2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem TR0CW-SY-STY-NBR1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem TR0CW-SY-STY-NBR2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-TS-ACCT-STAT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem TR0CW-XDM-DIM-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem TR0CW-XDM-DIM-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TR0CW-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-ACCT-AFRGTCOMNT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-ACCT-STAT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS-ACCT-STAT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-AFRGT-PAY-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS-AFRGT-RCV-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem VAFREQ01-GROUP char(103)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VAFREQ01-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

