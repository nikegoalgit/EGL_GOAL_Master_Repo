package sp0j;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ko.common.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0J ****
// sales program update-  order type only
// 
// overview: ONLY CERTAIN ORDER TYPES QUALIFY FOR A GIVEN SALES
//           PROGRAM.  EACH ORDER TYPE HAS SPECIFIC DISCOUNTS
//           AND TERMS CONNECTED WITH IT.  THIS APPLICATION
//          SUPPORTS ADDING, CHANGING, OR DELETING ORDER TYPES
// 
// date created:  this function of sales program update was
//                separated from the original sp0u in may, 1987
// 
// maintenance history:
// 
// 
//   WHEN       WHO        WHAT
// --------  ---------  --------------------------------------
// 05/08/87   S.Job     SP0J separated from SP0U
// 12/16/88   JWOOD     ADDED NONCSP OPTION TO CALLS
// 12/16/88   JWOOD     ADDED XSSEGTR LOGIC
// 01/26/88   S.JOB     E25: default aa, td, & co-op to '00'
// 07/13/89   rcoron    changed the logic to use the new tier
//                      table instead of the discount table.
//                      maps sp0jm030,sp0jm050 and sp0jm100
//                      were modified.
// 10/05/89   S.JOB     E2: add abreviations to disc.codes.
// 11/29/89   S.JOB     B1: allow date updating after selecting
//                      an order type.
// 09/05/90   S.JOB     E10: support sales program usage flag.
// 11/12/90   S.JOB     E3:INCREASE QTY MIN FOR SALES PROGRAM
//                         FROM 99,999.99 TO 9,999,999.99
// 02/25/91   S.JOB     E0:delete all references to freight cd
// 03/13/92   scantr    db changes & clean up records list
// 06/02/92   s.job     #xxx-Modify screen to display default
//                      value of 0% for all tiers.
// 02/29/94   dmeier    db2 changes - removed sy5rec from
//                      record list - not being used
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  11/06/97 WSQUIR Y2K MODIFICATIONS MADE TO SP0JS3A,
//                         SP0JS3D, SP0JS3E, SP0JS38, SP0JS55,
//                         SP0JS56, SP0JS57, SP0JS61, SP0JS75.
// 03/30/98   jflor1     modified hard-coded default dates
//                       in SP0JS38 for year 2000 compliance.
//                       changed last cancel date and
//                       delivery end date to 2043 per Becky
//                       Hicks.  Used 2043 as century end date
//                       because that is the last date Oracle
//                       can handle.
// *********************
Program SP0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KOFREC KOFREC; // record
  SP0JW01 SP0JW01; // record
  SP0JW02 SP0JW02; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAATBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSMTBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use SP0JM.SP0JM030,  // forms
      SP0JM.SP0JM050, 
      SP0JM.SP0JM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0J010: SP0J010();



    if (SP0JM030.SP1ID <= " ") /* there still is no s.p.id*/
      SP0JM030.SP0JMMSG = "PLEASE ENTER A SALES PROGRAM ID ";
      goto SP0J010;
    else
      if (SP0JM030.SP1NM == "NEW SPID")
        SP0JM030.SP1NM = " ";
        COMMAREA.CAITEM = SP0JM030.SP1ID;
        goto SP0J010;
      end
    end



    if (SP0JW01.SP0JWMSG == " ")
      goto SP0J020;
    else
      SP0JM030.SP0JMMSG = SP0JW01.SP0JWMSG;
      goto SP0J020;
    end



    SP0J020: SP0J020();



    if (SP0JW01.SP0JWMSG != " ")
      SP0JM030.SP0JMMSG = SP0JW01.SP0JWMSG;
    end


    goto SP0J030;



    SP0J030: SP0J030();


    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SP0J030;
    end

    if (SP0JW01.SP0JWVF == "N"
     || converseVar.validationMsgNum > 0)
      goto SP0J030;
    end


    if (SP0JM030.SP1ID == " "
     || SP0JM030.SP1ID != SP0JW01.SP1ID)
      COMMAREA.CAITEM = SP0JM030.SP1ID;
      goto SP0J010;
    end



    if (converseVar.eventKey is enter
     && SP0JM030.SP0JWMOP[SP0JWSB2] == "S"
     && SP0JW01.SP0JWVF == "Y")
      set SP0JM050 initial;
      SP0JM050.SP0JMMSG = "ENTER ANY CHANGES OR PF3 TO EXIT";
      goto SP0J040; /* to change / delete a record*/
    else
      if (SP0JM030.SP0JWMOP[SP0JWSB2] == "D"
       && SP0JW01.SP0JWVF == "Y")
        set SP0JM050 initial;
        SP0JM050.SP0JMMSG = "HIT ENTER TO DELETE - OR PF3 TO EXIT";
        goto SP0J040; /* to change / delete a record*/
      else
        if (SP0JM030.SP0JWMOP[SP0JWSB2] == "A"
         && SP0JW01.SP0JWVF == "A")
          COMMAREA.CAITEM = SP0JM030.SP1ID;
          goto SP0J020;
        else
          goto SP0J030;
        end
      end
    end


    SP0J040: SP0J040();


    goto SP0J050;


    SP0J050: SP0J050();


    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      goto SP0J030;
    end



    if (SP0JW01.SP0JWVF == "N"
     || converseVar.validationMsgNum > 0)
      goto SP0J050;
    end


    if (converseVar.eventKey is enter
     && SP0JW01.SP0JWVF1 == "D")
      goto SP0J020;
    else
      if (converseVar.eventKey is enter
       && SP0JW01.SP0JWHDM == "N" /* no header data changed*/
       && SP0JW01.SP0JWSDM == "Y") /* select option was picked*/
        SP0JW01.SP0JWMSG = "YOU MAY ADD A NEW CODE, OR DELETE ANY SHOWING";
        if (SP0JM050.SP0JMMQT is data)
          goto SP0J060;
        end /* quantity discount*/
        if (SP0JM050.SP0JMMDL is data)
          goto SP0J060;
        end /* dollar   discount*/
      else
        goto SP0J050;
      end
      goto SP0J050;
    end






    SP0J060: SP0J060();


    if (SP0JM030.SP0JMMSG == "BAD I/O RECEIVED IN SP0JS40 ------ TRY AGAIN")
      goto SP0J050;
    else
      goto SP0J070;
    end




    SP0J070: SP0J070();



    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      set SP0JM050.SP0JMOP1 cursor;
      goto SP0J050;
    else
      goto SP0J070;
    end



  end // end main
end // end SP0J

// order s.p.id changer....
Function SP0J010()



  XSENTRY();


  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  set SP0JW01 empty;
  converseLib.validationFailed(0);

  if (COMMAREA.CAITEM == " ")
    set SP0JM030 initial;
    SP0JS10(); /* set up sp0jm030 attributes*/
  else
    SP0JM030.SP1ID = COMMAREA.CAITEM;
    SP0JW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
    SP0JS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0JM030.SP1ID > " ")
    exit stack;
  end

  SP0JM030.SP1NM = "NEW SPID";

  SP0JM030.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0JM030.XXXERRID = "SP0J010";
  SP0JM030.XXXRVNBR = "02";


  converse SP0JM030 ;


  SP0JS14(); /* check fastpathing*/
  SP0JS13(); /* reset sp0jm030 attributes*/




end // end SP0J010

// select set - s.p. order types
Function SP0J020()


   /* ************************************************************/
      /* the purpose of this process is to set up a working*/
      /* storage array of order types that have been set up for*/
      /* the sales program selected.  this array of order types*/
      /* will be used for subsequent processing by the user.*/
      /* the array has a limit of 200 associated which should*/
      /* be 25 to 50 times larger than any anticipated size for*/
      /* the table.*/
   /* ************************************************************/






  SP0JW01.SP0JWMSG = " "; /* clear w.s error message*/
  SP0JW01.SP0JWTBL = " "; /* clear out w.s. array*/

  set SP2REC empty;
  set SQLCA empty;

  SP2REC.SP1ID = SP1REC.SP1ID;

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* position cursor*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0JW01.SP0JWTSZ = +0;
    SP0JW01.SP0JWSB1 = +1;
    while (SP0JW01.SP0JWSB1 <= +200
     && SQLCA.VAGen_SQLCODE == +0)
      SP0JS20(); /* select next sp2rec*/
    end
    call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0JW01.SP0JWTSZ = SP0JW01.SP0JWSB1 - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0J   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0J020 ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0JM020";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0JW01.SP0JWMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (SP0JW01.SP0JWVF == "A")
    set SP0JM030 empty;
    SP0JM030.SP0JMMSG = "ORDER TYPE ADDED TO SALES PROGRAM";
    set SP0JM030 alarm;
    set SP0JM030.SP0JWMOP[1] cursor, modified, bold;
    set SP0JM030.XOTCD[1] modified, bold;
    set SP0JM030.XOTDESC[1] skip, bold;
  else
    if (SP0JW01.SP0JWVF1 == "D")
      set SP0JM030 empty;
      SP0JM030.SP0JMMSG = "ORDER TYPE & ANY SP3REC DELETED";
    else
      if (SP0JW01.SP0JWVF1 == "X")
        set SP0JM030 empty, alarm;
        set SP0JM030.XOTCD[1] modified, bold;
        set SP0JM030.SP0JWMOP[1] cursor, modified, bold;
        converseLib.validationFailed(88);
        SP0JM030.SP0JMMSG = "ERROR IN DELETING ORDER TYPE - TRY AGAIN";
      else
        if (SP0JW01.SP0JWVF1 == "S")
          set SP0JM030 empty;
          set SP0JM030 alarm;
          set SP0JM030.SP0JWMOP[1] cursor, modified, bold;
          set SP0JM030.XOTCD[1] modified, bold;
          set SP0JM030.XOTDESC[1] skip, bold;
          SP0JM030.SP0JMMSG = "ORDER TYPE UPDATED - CONTINUE ";
        else
          SP0JW01.SP0JWVF = "Y";
          set SP0JM030 empty;
          set SP0JM030.SP0JWMOP[1] cursor, modified, bold;
          SP0JM030.SP0JMMSG = "VALID SELECTION CODES ===> A, D OR S";
        end
      end
    end
  end



   /* ************************************************************/
      /* select the first 14 order types for this s.p. and*/
      /* show on map sp0jm030.*/
   /* ************************************************************/



  SP0JS21();



end // end SP0J020

// order type listing for s.p.-
Function SP0J030()



      /* ********************************************************/
      /* *  this process is used to control access to order    **/
      /* *  types that are valid for a sales program.  this    **/
      /* *  allows the user to add, delete, or select an order **/
      /* *  type based upon the selected set of order type for **/
      /* *  the sales program.  the user can also scroll       **/
      /* *  forward and backwards through the order type set.  **/
      /* ********************************************************/



  SP0JM030.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0JM030.XXXERRID = "SP0J030";
  SP0JM030.XXXRVNBR = "02";
  move SP1REC to SP0JM030 byName;
  SP0JM030.SP1ID = SP2REC.SP1ID;
  SP0JW01.SP0JWSB1 = 0;



      /* sp0js31 used to scroll forward*/
      /* sp0js32 used to scroll backward*/



  if (converseVar.eventKey is pf8)
    SP0JS31();
  else
    if (converseVar.eventKey is pf7)
      SP0JS32();
    end
  end




  converse SP0JM030 ;




  if (SP0JM030.CAITEM != " ")
    COMMAREA.CAITEM = SP0JM030.CAITEM;
  end


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    exit stack;
  end



   /* ************************************************************/
      /* sp0js33  main edit routine.....*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0jw1.sp0jwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/



  SP0JS33();

  if (SP0JW01.SP0JWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end




      /* sp0js38  used to add new s.p. order types*/
               /* changes and deletes are thru the sp0u030 series*/



  SP2REC.SP1ID = SP0JM030.SP1ID;
  SP2REC.XOTCD = SP0JM030.XOTCD[SP0JWSB2];
  SP0JW01.SP0JWOTH = SP2REC.XOTCD;

  if (SP0JM030.SP0JWMOP[SP0JWSB2] == "A")
    SP0JS38();
  end



end // end SP0J030

// initialization and reset-
Function SP0J040()



   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the order type s.p. add / change.*/
   /* ************************************************************/



  SP0JM050.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0JM050.XXXERRID = "SP0J050";
  SP0JM050.XXXRVNBR = "02";
  SP0JM050.SP1ID = SP0JM030.SP1ID;
  SP0JM050.XOTCD = SP0JM030.XOTCD[SP0JWPOS];
  SP0JM050.SP1LIFEF = SP1REC.SP1LIFEF;
  SP0JM050.SP1STAT = SP1REC.SP1STAT;

  if (SP0JM030.SP0JWMOP[SP0JWPOS] != "A") /* this is a update or delete*/
    move SP2REC to SP0JM050 withV60Compat;
    if (SP2REC.SP2DIND == "U")
      SP0JM050.SP0JMMQT = "*";
      SP0JM050.SP0JMMDL = " ";
    else
      SP0JM050.SP0JMMQT = " ";
      SP0JM050.SP0JMMDL = "*";
    end
  end

  if (SP0JM050.SP2SLSVF == " ") /* default the sales vol flag to yes.*/
    SP0JM050.SP2SLSVF = "Y";
  end


   /* *********************************************************/
      /* these groups get table descriptions for all codes*/
   /* *********************************************************/

   /* SP0JS41;*/
   /* SP0JS42;*/
   /* SP0JS43;*/
   /* SP0JS44;*/
   /* SP0JS45;*/
  SP0JS46(); /* verify net bill allowed*/
  SP0JS47(); /* verify spcl-comm-codes/sls-vol-fl*/


   /* *********************************************************/
      /* protect fields for 'a' 'i' or 'f' status*/
   /* *********************************************************/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP0JMMQT skip;
    set SP0JM050.SP0JMMDL skip;
  end


   /* *********************************************************/
      /* for a delete set all fields autoskip*/
   /* *********************************************************/

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2RPBDT skip;
    set SP0JM050.SP2RPXDT skip;
    set SP0JM050.SP2BKBDT skip;
    set SP0JM050.SP2BKXDT skip;
    set SP0JM050.SP2DLBDT skip;
    set SP0JM050.SP2DLXDT skip;
    set SP0JM050.SP2LEDTM skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2LCDT skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP0JMMQT skip;
    set SP0JM050.SP0JMMDL skip;
  end



end // end SP0J040

// order type del/change for sp
Function SP0J050()



   /* ************************************************************/
      /* this process is used to converse the header screen.*/
      /* the screen can be used to del and / or change order*/
      /* types for sales programs.*/
   /* ************************************************************/



  converse SP0JM050 ;



  COMMAREA.CAITEM = SP0JM050.CAITEM;


   /* ** sp0js51   this is the main edit process  ****/

  SP0JS51();

  if (SP0JM050.SP0JMMDL == " " /* somehow erased both indicators*/
   && SP0JM050.SP0JMMQT == " ")
    if (SP2REC.SP2DIND == "D") /* dollars*/
      SP0JM050.SP0JMMDL = "*";
      SP0JM050.SP0JMMQT = " ";
    else
      if (SP2REC.SP2DIND == "U") /* units*/
        SP0JM050.SP0JMMDL = " ";
        SP0JM050.SP0JMMQT = "*";
      end
    end
  end



  if (SP1REC.SP1LIFEF == "Y"
   && SP0JW01.SP0JWTSZ > 1)
    if (SP0JM050.SP0JMMQT != " ")
      if (SP2REC.SP2DIND == "D")
        set SP0JM050.SP0JMMDL cursor, modified, bold;
        converseLib.validationFailed(18);
        SP0JM050.SP0JMMSG = "THIS RECORD HAS A DOLLAR DISCOUNT";
        SP0JM050.SP0JMMQT = " ";
        SP0JW01.SP0JWVF = "N";
      end
    end

    if (SP0JM050.SP0JMMDL != " ")
      if (SP2REC.SP2DIND == "U")
        set SP0JM050.SP0JMMQT cursor, modified, bold;
        converseLib.validationFailed(18);
        SP0JM050.SP0JMMSG = "THIS RECORD HAS A QUANTITY DISCOUNT";
        SP0JM050.SP0JMMDL = " ";
        SP0JW01.SP0JWVF = "N";
      end
    end
  end


  if (SP0JW01.SP0JWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end

  if (converseVar.eventKey is pf3)
    if (SP0JM030.SP0JWMOP[SP0JWPOS] == "S")
      SP0JM030.SP0JWMOP[SP0JWPOS] = "V"; /* viewed option*/
      SP0JW01.SP0JWPS2 = SP0JW01.SP0JWPOS + 1;
      set SP0JM030.SP0JWMOP[SP0JWPS2] cursor;
    end
    exit stack;
  end


  if (converseVar.eventKey is enter)
    if (SP0JW01.SP0JWHDM == "Y"
     || SP0JW01.SP0JWSDM == "Y"
     || SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
      SP0JW01.SP2DIND = "N";
      SP0JS38(); /* update sp2rec/sp6rec*/
      exit stack;
    else
      SP0JM050.SP0JMMSG = "PLEASE CONTINUE ------";
    end
  end


  if (SP2REC.SP2DIND == "U")
    SP0JM050.SP0JMMQT = "*";
    SP0JM050.SP0JMMDL = " ";
  else
    SP0JM050.SP0JMMQT = " ";
    SP0JM050.SP0JMMDL = "*";
  end
  SP0JW01.SP0JWMSG = " ";



end // end SP0J050

// initialization and reset-
Function SP0J060()



   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the order type s.p. quantity discounts.*/
      /* select the any quantity/dollar discounts for this*/
      /* spgm and show on map sp0jm100.*/
   /* ************************************************************/



  SP0JS61();



end // end SP0J060

// order type qty/dlr discount-
Function SP0J070()



   /* ************************************************************/
      /* this process is used to converse the tiered discount*/
      /* screen.*/
   /* ************************************************************/



  if (SP0JW01.SP0JWUPF == "Y")
    SP0JS61(); /* set up map sp0jm100*/
    SP0JW01.SP0JWUPF = "N";
  end

  SP0JM100.SP0JMMSG = SP0JW01.SP0JWMSG;
  SP0JW01.SP0JWSB2 = 0;
  SP0JW01.SP0JWSB1 = 0;
  SP0JW01.SP0JWVF = "Y";

  SP0JS76();



  converse SP0JM100 ;

  SP0JS62(); /* reorder screen entries*/

  COMMAREA.CAITEM = SP0JM100.CAITEM;


   /* ************************************************************/
      /* sp0js71  main edit routine*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0jw1.sp0jwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/



  SP0JW01.SP0JWUPF = "N";



  SP0JS71();

  if (SP0JW01.SP0JWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end


  if (converseVar.eventKey is pf3)
    exit stack;
  end




   /* ************************************************/
   /* *   update the sp6rec if there were changes   **/
   /* ************************************************/


  if (SP0JM100.SP6DOVRC != SP6REC.SP6DOVRC
   || SP0JM100.SP6AAPCT != SP6REC.SP6AAPCT
   || SP0JM100.SP6TDPCT != SP6REC.SP6TDPCT
   || SP0JM100.SP0JMLVL != SP6REC.SP6TIER[1]
   || SP0JM100.SP0JMDSC != SP6REC.SP6MDISC[1]
   || SP0JM100.SP0JMAAC != SP6REC.SP6TAACD[1]
   || SP0JM100.SP0JMTDC != SP6REC.SP6TTDCD[1]
   || SP0JM100.SP0JMCOC != SP6REC.SP6TCOCD[1]
   || SP0JM100.SP0JMPTC != SP6REC.SP6TPTCD[1])
    SP0JW01.SP0JWUPF = "Y";
  end


  SP0JW01.SP0JWSB1 = 1;
  SP0JW01.SP0JWSB2 = 2;
  while (SP0JW01.SP0JWUPF == "N"
   && SP0JW01.SP0JWSB1 < 10)
    if (SP0JM100.SP6TIER[SP0JWSB1] != SP6REC.SP6TIER[SP0JWSB2]
     || SP0JM100.SP6MDISC[SP0JWSB1] != SP6REC.SP6MDISC[SP0JWSB2]
     || SP0JM100.SP6TTDCD[SP0JWSB1] != SP6REC.SP6TTDCD[SP0JWSB2]
     || SP0JM100.SP6TCOCD[SP0JWSB1] != SP6REC.SP6TCOCD[SP0JWSB2]
     || SP0JM100.SP6TAACD[SP0JWSB1] != SP6REC.SP6TAACD[SP0JWSB2]
     || SP0JM100.SP6TPTCD[SP0JWSB1] != SP6REC.SP6TPTCD[SP0JWSB2])
      SP0JW01.SP0JWUPF = "Y";
    end
    SP0JWSB1 = SP0JWSB1 + 1;
    SP0JWSB2 = SP0JWSB2 + 1;
  end


  if (SP0JWUPF == "Y")
    SP0JS75(); /* update sp6rec;*/
  end



end // end SP0J070

// set up sp1id receive screen
Function SP0JS10()



  set SP0JM030.SP1ID cursor, bold;
  set SP0JM030.SP1NM protect, invisible;
  set SP0JM030.SP1STAT protect, invisible;

  SP0JW01.SP0JWSB1 = 1;
  while (SP0JW01.SP0JWSB1 <= 14)
    set SP0JM030.SP0JWMOP[SP0JWSB1] protect, invisible;
    set SP0JM030.XOTCD[SP0JWSB1] protect, invisible;
    set SP0JM030.XOTDESC[SP0JWSB1] protect, invisible;
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end

  SP0JM030.SP0JMMSG = "ENTER A SALES PROGRAM ID";



end // end SP0JS10

// validate sales program id
Function SP0JS12()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0JW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0JM030 withV60Compat;
    SP0JW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0U";
      COMMAREA.CAITEM = SP0JM030.SP1ID;
      XSEXIT();
    else
      SP0JW01.SP0JWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0JS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0JS12

// reset sp1id receive screen
Function SP0JS13()



  set SP0JM030.SP1ID cursor, bold;
  set SP0JM030.SP1NM initialAttributes;
  set SP0JM030.SP1STAT initialAttributes;

  SP0JW01.SP0JWSB1 = 1;
  while (SP0JW01.SP0JWSB1 <= 14)
    set SP0JM030.SP0JWMOP[SP0JWSB1] normal;
    set SP0JM030.XOTCD[SP0JWSB1] normal;
    set SP0JM030.XOTDESC[SP0JWSB1] normal;
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end



end // end SP0JS13

// edit for fast path, data modif
Function SP0JS14()

   /* **********************************************************/
   /* ***** check fast pathing........                    ******/
   /* **********************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0JM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
   /* *                     pf1, and pf4.*/
   /* *********************************************************/

  if (SP0JM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0JM030.CATOAP;
    COMMAREA.CAITEM = SP0JM030.CAITEM;
    XSEXIT();
  end


   /* *********************************************************/
      /* transfer to help program*/
   /* *********************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end

      /* transfer to main menu program mn0m*/


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0JS14

// sp2rec sp for ord type table
Function SP0JS20()


  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0JW01.XOTCD[SP0JWSB1] = SP2REC.XOTCD;
    SP0JW01.SP2UIND[SP0JWSB1] = SP2REC.SP2UIND; /* usage ind.*/
    if (SP2REC.XOTCD == SP0JW01.SP0JWOTH)
      SP0JW01.SP0JWPOS = SP0JW01.SP0JWSB1;
    end
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE != +100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS20 ";
      TA1REC.TA1LOCAT[3] = "IO0080  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VORTYP01";
      TA1TBLKE = SP2REC.SP2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0JW01.SP0JWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0JS20

// to load 1st 14 order type-
Function SP0JS21()



   /* ************************************************************/
      /* select the first 14 order types for this s.p. and*/
      /* show on map sp0jm020.*/
   /* ************************************************************/



   /* ***************************************************/
      /* exit for a file i/o error in sp0js20*/
   /* ***************************************************/

  if (converseVar.validationMsgNum != +0)
    return;
  end


  move SP1REC to SP0JM030 withV60Compat;


  SP0JW01.SP0JWPOS = SP0JW01.SP0JWPOS - 1; /* determines cursor position*/

  if (SP0JW01.SP0JWPOS > SP0JW01.SP0JWTSZ)
    SP0JW01.SP0JWPOS = SP0JW01.SP0JWTSZ - 2;
  end

  if (SP0JW01.SP0JWPOS < 0)
    SP0JW01.SP0JWPOS = 0;
  end

  SP0JW01.SP0JWSB1 = 0;

  while (SP0JW01.SP0JWSB1 < 14)
    SP0JW01.SP0JWPOS = SP0JW01.SP0JWPOS + 1;
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
    if (SP0JW01.SP0JWSB1 > SP0JW01.SP0JWTSZ)
      SP0JM030.XOTCD[SP0JWSB1] = " ";
      SP0JM030.XOTDESC[SP0JWSB1] = " ";
      SP0JM030.SP0JMUSE[SP0JWSB1] = " ";
      SP0JW01.SP0JWSB1 = 99;
    else
      if (SP0JW01.XOTCD[SP0JWPOS] != " ")
        SP0JM030.XOTCD[SP0JWSB1] = SP0JW01.XOTCD[SP0JWPOS];
        if (SP0JW01.SP2UIND[SP0JWPOS] == "S")
          SP0JM030.SP0JMUSE[SP0JWSB1] = "NO ORDERS";
        else
          if (SP0JW01.SP2UIND[SP0JWPOS] == "O")
            SP0JM030.SP0JMUSE[SP0JWSB1] = "ORDERS ENTERED";
          else
            if (SP0JW01.SP2UIND[SP0JWPOS] == "I")
              SP0JM030.SP0JMUSE[SP0JWSB1] = "INVOICED ORDERS";
            end
          end
        end
        if (SP0JW01.XOTCD[SP0JWPOS] in XOTTBL.XOTCD)
          SP0JM030.XOTDESC[SP0JWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0JW01.XOTCD[SP0JWPOS] == " ")
            SP0JM030.XOTDESC[SP0JWSB1] = "BLANK";
          else
            SP0JM030.XOTDESC[SP0JWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (SP0JW01.SP0JWTSZ == 0)
    SP0JM030.SP0JMMSG = "NO ORDER TYPES CURRENTLY EXIST FOR THIS S.P.";
    SP0JM030.VAGen_EZEMSG = "VALID SELECTIONS ==>  'a' to add -- or exit ";
  end



end // end SP0JS21

// forward scroll - order types
Function SP0JS31()



      /* sp0js31 user to scroll forward*/



  if (SP0JW01.SP0JWTSZ <= 14)
    SP0JM030.SP0JMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



  if (SP0JM030.SP0JMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0JW01.SP0JWTSZ > 14)
    set SP0JM030 empty;
    SP0JM030.XXXCURDT = VGVar.currentShortGregorianDate;
    SP0JM030.XXXERRID = "SP0J030";
    SP0JM030.XXXRVNBR = "02";
    move SP1REC to SP0JM030 withV60Compat;
    while (SP0JW01.SP0JWSB1 < 14)
      SP0JW01.SP0JWPOS = SP0JW01.SP0JWPOS + 1;
      SP0JW01.SP0JWSB1 = 1 + SP0JW01.SP0JWSB1;
      set SP0JM030.SP0JWMOP[SP0JWSB1] initialAttributes;
      set SP0JM030.XOTCD[SP0JWSB1] initialAttributes;
      set SP0JM030.XOTDESC[SP0JWSB1] initialAttributes;
      if (SP0JW01.SP0JWPOS > SP0JW01.SP0JWTSZ)
        SP0JM030.SP0JMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0JM030.XOTCD[SP0JWSB1] = " ";
        SP0JM030.XOTDESC[SP0JWSB1] = " ";
        SP0JM030.SP0JMUSE[SP0JWSB1] = " ";
      else
        SP0JM030.SP0JMMSG = " ";
        SP0JM030.XOTCD[SP0JWSB1] = SP0JW01.XOTCD[SP0JWPOS];
        if (SP0JW01.SP2UIND[SP0JWPOS] == "S")
          SP0JM030.SP0JMUSE[SP0JWSB1] = "NO ORDERS";
        else
          if (SP0JW01.SP2UIND[SP0JWPOS] == "O")
            SP0JM030.SP0JMUSE[SP0JWSB1] = "ORDERS ENTERED";
          else
            if (SP0JW01.SP2UIND[SP0JWPOS] == "I")
              SP0JM030.SP0JMUSE[SP0JWSB1] = "INVOICED ORDERS";
            end
          end
        end
        if (SP0JW01.XOTCD[SP0JWPOS] in XOTTBL.XOTCD)
          SP0JM030.XOTDESC[SP0JWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0JW01.XOTCD[SP0JWPOS] == " ")
            SP0JM030.XOTDESC[SP0JWSB1] = "BLANK";
          else
            SP0JM030.XOTDESC[SP0JWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0JW01.SP0JWPOS == SP0JW01.SP0JWTSZ)
    SP0JM030.SP0JMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0JS31

// backward scroll - order type
Function SP0JS32()



      /* sp0js32 used to scroll backward*/



  if (converseVar.eventKey is pf7)
    SP0JW01.SP0JWPOS = SP0JW01.SP0JWPOS - 28;
    if (SP0JW01.SP0JWPOS < 0)
      SP0JW01.SP0JWPOS = 0;
    end
  end



  if (SP0JM030.SP0JMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    set SP0JM030 empty;
    SP0JM030.XXXCURDT = VGVar.currentShortGregorianDate;
    SP0JM030.XXXERRID = "SP0J030";
    SP0JM030.XXXRVNBR = "02";
    move SP1REC to SP0JM030 withV60Compat;
    while (SP0JW01.SP0JWSB1 < 14)
      SP0JW01.SP0JWPOS = SP0JW01.SP0JWPOS + 1;
      SP0JW01.SP0JWSB1 = 1 + SP0JW01.SP0JWSB1;
      set SP0JM030.SP0JWMOP[SP0JWSB1] initialAttributes;
      set SP0JM030.XOTCD[SP0JWSB1] initialAttributes;
      set SP0JM030.XOTDESC[SP0JWSB1] initialAttributes;
      if (SP0JW01.SP0JWPOS > SP0JW01.SP0JWTSZ)
        SP0JM030.SP0JMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
        SP0JM030.XOTCD[SP0JWSB1] = " ";
        SP0JM030.XOTDESC[SP0JWSB1] = " ";
        SP0JM030.SP0JMUSE[SP0JWSB1] = " ";
      else
        SP0JM030.SP0JMMSG = " ";
        SP0JM030.XOTCD[SP0JWSB1] = SP0JW01.XOTCD[SP0JWPOS];
        if (SP0JW01.SP2UIND[SP0JWPOS] == "S")
          SP0JM030.SP0JMUSE[SP0JWSB1] = "NO ORDERS ";
        else
          if (SP0JW01.SP2UIND[SP0JWPOS] == "O")
            SP0JM030.SP0JMUSE[SP0JWSB1] = "ORDERS ENTERED";
          else
            if (SP0JW01.SP2UIND[SP0JWPOS] == "I")
              SP0JM030.SP0JMUSE[SP0JWSB1] = "INVOICED ORDERS";
            end
          end
        end
        if (SP0JW01.XOTCD[SP0JWPOS] in XOTTBL.XOTCD)
          SP0JM030.XOTDESC[SP0JWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0JW01.XOTCD[SP0JWPOS] == " ")
            SP0JM030.XOTDESC[SP0JWSB1] = "BLANK";
          else
            SP0JM030.XOTDESC[SP0JWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0JW01.SP0JWPOS == 14)
    SP0JM030.SP0JMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0JS32

// main edit group for ord type
Function SP0JS33()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0JW01.SP0JWVF1 = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0JW01.SP0JWVF = "N";
    return;
  end




   /* *************************************************************/
      /* sp0js35  used to set fields to normal, and*/
               /* to check fields for entry.  if a bad selection*/
               /* code is used sp0uw1.sp0uwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
   /* *************************************************************/

  SP0JS35();



  if (SP0JM030.SP1ID != SP0JW01.SP1ID) /* change in key*/
    if (SP0JW01.SP0JWVF != " ") /* screen edit found*/
      SP0JM030.SP0JMMSG = "CAN NOT MIX UPDATES & CHANGE SALES PGM ID";
      SP0JM030.SP1ID = SP0JW01.SP1ID; /* move original sp id back*/
    else
      exit stack;
    end
  end


      /* sp0js34 check for fast path, modified data, pf1, pf4*/



  SP0JS34();

  if (converseVar.validationMsgNum > 0
   || SP0JW01.SP0JWVF == "N")
    SP0JW01.SP0JWVF = "N";
    return;
  end



      /* was an option selected ?*/
      /* was pa2 or pf3 hit to transfer?*/



  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pf3)
    return;
  end



      /* was an option selected ? eg a, s, or d.  if not,*/
      /* send a message to select an option.*/



  if (SP0JW01.SP0JWVF == " ")
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(4);
    SP0JM030.SP0JMMSG = "PLEASE SELECT AN OPTION OR SELECT A RECORD";
    return;
  end



      /* sp0us26  checking for valid order types & descriptions*/



  SP0JS36();

  if (SP0JW01.SP0JWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end



      /* sp0js37  does the s.p. order type already exist ?*/
               /* will check when a,s, or d is entered.*/



  if (SP0JM030.SP0JWMOP[SP0JWSB2] != " ")
    SP0JS37();
  end

  if (SP0JW01.SP0JWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end



end // end SP0JS33

// edit for fast path-data modif
Function SP0JS34()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0JM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0JM030.CATOAP != " ")
    if (SP0JW01.SP0JWVF != " ") /* if header modified*/
      SP0JM030.SP0JMMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0JM030.CATOAP = " ";
      SP0JM030.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0JM030.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0JM030.CATOAP;
      COMMAREA.CAITEM = SP0JM030.CAITEM;
      XSEXIT();
      SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
      SP0JM030.CATOAP = " ";
      SP0JM030.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



   /* ***************************************************/
      /* transfer to help program*/
   /* ***************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


   /* ***************************************************/
      /* transfer to main menu program mn0m*/
   /* ***************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0JM030.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0JS34

// validate add/delete/select cd-
Function SP0JS35()



   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
      /* or 's' select.*/
   /* ************************************************************/



  SP0JM030.SP0JMMSG = " ";
  SP0JW01.SP0JWVF = " ";
  SP0JW01.SP0JWSB1 = 0;

  while (SP0JW01.SP0JWSB1 < 14)
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
    set SP0JM030.SP0JWMOP[SP0JWSB1] normal;
    set SP0JM030.XOTCD[SP0JWSB1] normal;
    set SP0JM030.XOTDESC[SP0JWSB1] initialAttributes;
    if (SP0JM030.XOTCD[SP0JWSB1] == " ") /* end of table*/
      SP0JM030.SP0JWMOP[SP0JWSB1] = " ";
      SP0JM030.XOTCD[SP0JWSB1] = " ";
      SP0JM030.XOTDESC[SP0JWSB1] = " ";
    end
  end

  SP0JW01.SP0JWSB2 = 1;

  if ("A" in SP0JM030.SP0JWMOP
   || "D" in SP0JM030.SP0JWMOP
   || "S" in SP0JM030.SP0JWMOP)
    SP0JW01.SP0JWSB2 = sysVar.arrayIndex;
    SP0JW01.SP0JWPOS = sysVar.arrayIndex;
    SP0JW01.SP0JWVF = "Y";
    SP0JM030.SP0JMMSG = " ";
  else
    while (SP0JW01.SP0JWSB2 < 14)
      if (SP0JM030.SP0JWMOP[SP0JWSB2] == " "
       || SP0JM030.SP0JWMOP[SP0JWSB2] == "V")
        SP0JW01.SP0JWSB2 = SP0JW01.SP0JWSB2 + 1;
            /* valid entry*/
      else
            /* invalid character*/
        SP0JW01.SP0JWVF = "N";
        set SP0JM030.SP0JWMOP[SP0JWSB2] cursor, modified, bold;
        set SP0JM030.XOTCD[SP0JWSB2] modified, bold;
        set SP0JM030.XOTDESC[SP0JWSB2] skip, bold;
        converseLib.validationFailed(3);
        SP0JM030.SP0JMMSG = "Error, valid entries ==> A, D, S or ' ' OR EXIT";
        return;
      end
    end
  end

  if (sysVar.arrayIndex > 0)
    if (SP0JM030.SP0JWMOP[sysVar.arrayIndex] == "D")
      if (SP1REC.SP1STAT == "A"
       || SP1REC.SP1STAT == "F"
       || SP1REC.SP1STAT == "I")
            /* cannot delete*/
        SP0JW01.SP0JWVF = "N";
        set SP0JM030.SP0JWMOP[sysVar.arrayIndex] cursor, modified, bold;
        set SP0JM030.XOTCD[sysVar.arrayIndex] modified, bold;
        set SP0JM030.XOTDESC[sysVar.arrayIndex] skip, bold;
        SP0JM030.SP0JMMSG = "CANNOT DELETE - THIS S.P. WAS/IS ACTIVE --- ";
        converseLib.validationFailed(12);
        return;
      end
    end
  end



end // end SP0JS35

// validate order type codes-
Function SP0JS36()



   /* ************************************************************/
      /* this statement group is validate order codes*/
      /* have been entered against the order code table.*/

      /* the order type must also be active.*/
   /* ************************************************************/



  SP0JW01.SP0JWVF = "Y";

  if (SP0JM030.SP0JWMOP[SP0JWSB2] == "D")
    return;
  end

  if (SP0JM030.XOTCD[SP0JWSB2] == " ")
    set SP0JM030.XOTCD[SP0JWSB2] normal;
    set SP0JM030.XOTDESC[SP0JWSB2] initialAttributes;
    set SP0JM030.SP0JWMOP[SP0JWSB2] normal;
    SP0JM030.XOTDESC[SP0JWSB2] = "BLANK";
    SP0JM030.SP0JMMSG = " ";
    return;
  end

  if (SP0JM030.XOTCD[SP0JWSB2] in XOTTBL.XOTCD)
    SP0JM030.XOTDESC[SP0JWSB2] = XOTTBL.XOTDESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0)
    converseLib.validationFailed(11);
    SP0JW01.SP0JWVF = "N";
    SP0JM030.XOTDESC[SP0JWSB2] = "INVALID ORDER TYPE CODE";
    set SP0JM030 alarm;
    set SP0JM030.SP0JWMOP[SP0JWSB2] modified, bold;
    set SP0JM030.XOTCD[SP0JWSB2] cursor, modified, bold;
    set SP0JM030.XOTDESC[SP0JWSB2] skip, bold;
    SP0JM030.SP0JMMSG = "THIS IS NOT A VALID ORDER TYPE";
    return;
  else
    SP0JM030.SP0JMMSG = " ";
  end



      /* the order type was found.  is it active?*/



  if (XOTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
    converseLib.validationFailed(11);
    SP0JW01.SP0JWVF = "N";
    set SP0JM030 alarm;
    set SP0JM030.SP0JWMOP[SP0JWSB2] modified, bold;
    set SP0JM030.XOTCD[SP0JWSB2] cursor, modified, bold;
    set SP0JM030.XOTDESC[SP0JWSB2] skip, bold;
    SP0JM030.SP0JMMSG = "THIS IS NOT AN ACTIVE ORDER TYPE";
    return;
  end

  set SP0JM030.XOTCD[SP0JWSB2] normal;
  set SP0JM030.XOTDESC[SP0JWSB2] initialAttributes;
  set SP0JM030.SP0JWMOP[SP0JWSB2] normal;



end // end SP0JS36

// does s.p. order type exist ?-
Function SP0JS37()



   /* ************************************************************/
      /* this statement group is used to determine if an s.p.*/
      /* order type record already exists.*/
   /* ************************************************************/



  SP2REC.SP1ID = SP0JM030.SP1ID;
  SP2REC.XOTCD = SP0JM030.XOTCD[SP0JWSB2];
  SP0JW01.SP0JWVF = "Y";

  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   && SP0JM030.SP0JWMOP[SP0JWSB2] == "A")
    set SP0JM030.XOTCD[SP0JWSB2] modified, bold;
    set SP0JM030.XOTDESC[SP0JWSB2] skip, bold;
    set SP0JM030.SP0JWMOP[SP0JWSB2] cursor, modified, bold;
    SP0JM030.SP0JMMSG = "THIS ORDER TYPE ALREADY EXITS FOR THIS S. P.";
    set SP0JM030 alarm;
    SP0JW01.SP0JWVF = "N";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0JW01.SP0JWVF = "Y";
      SP0JM030.SP0JMMSG = " ";
      return;
    else
      if (SP0JM030.SP0JWMOP[SP0JWSB2] != "A")
        SP0JM030.SP0JMMSG = "ORDER TYPE WAS NOT FOUND";
        set SP0JM030.XOTCD[SP0JWSB2] modified, bold;
        set SP0JM030.SP0JWMOP[SP0JWSB2] cursor, modified, bold;
        set SP0JM030 alarm;
        SP0JW01.SP0JWVF = "N";
        return;
      end
    end
  end



end // end SP0JS37

// order type header add/chg/del
Function SP0JS38()


   /* ************************************************************/
      /* this statement group is used to add , change, or delete*/
      /* an order type for a sales program.*/
   /* ************************************************************/


  SP2REC.SP1ID = SP0JM030.SP1ID;
  SP2REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS];
  SP0JW01.SP0JWOTH = SP2REC.XOTCD;

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "A"
   && converseVar.validationMsgNum != 11)
    set SP2REC empty;
    set SQLCA empty;
    SP2REC.SP1ID = SP0JM030.SP1ID;
    SP2REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS];
    SP2REC.SP2UIND = "S"; /* usage ind.*/
    SP2REC.XSMTYPCD = " ";
    SP2REC.KOFCOMCD = " ";
    SP2REC.SP2NTALW = "N";
    SP2REC.SP2LEDTM = 0;
    SP2REC.SP2MNQTY = 0;
    SP2REC.SP2MNDLR = 0;
    SP2REC.SP2MXPCT = 999.99;
   /* use 2043 to accomodate oracle end of century date. jflor1*/
    SP2REC.SP2LCDT = 020431231;
    SP2REC.SP2RPBDT = 019870101;
    SP2REC.SP2RPXDT = 020431231;
    SP2REC.SP2BKBDT = 019870101;
    SP2REC.SP2BKXDT = 020431231;
    SP2REC.SP2DLBDT = 019870101;
    SP2REC.SP2DLXDT = 020431231;
    SP2REC.ZZZCHGCT = 0;
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP2REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP2REC.SP2DIND = "U";
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.ZZZCHGDT = SP0JW01.SP0JWD;
    call "IO0080" ("A ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0JW01.SP0JWVF = "A";
      SP0JS3D(); /* add the corresponding sp6rec*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS38 ";
      TA1REC.TA1LOCAT[3] = "IO0080  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VORTYP01";
      TA1TBLKE = SP2REC.SP2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "A"
   && SQLCA.VAGen_SQLCODE == +0
   && SP0JW01.SP0JWFL1 == "*")
    return;
  else
    if (SP0JM030.SP0JWMOP[SP0JWPOS] == "A"
     && SQLCA.VAGen_SQLCODE == +0
     && SP0JW01.SP0JWFL1 == " ") /* 1st order type record*/
      call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +0)
        SP0JW01.SP0JWUPF = "Y";
        SP0JW01.SP0JWFL1 = "*";
        SP0JS39(); /* check for status change*/
        SP0JS3A(); /* update sp1rec*/
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0J   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0JS38 ";
        TA1REC.TA1LOCAT[3] = "IO0070  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0JM030";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VSPGM001";
        TA1TBLKE = SP1REC.SP1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end



  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "S") /* to change a rec*/
    move SP0JM050 to SP2REC withV60Compat;
    if (SP0JM050.SP0JMMDL != " ")
      SP2REC.SP2DIND = "D";
    else
      SP2REC.SP2DIND = "U";
    end
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP2REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.ZZZCHGDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2LCDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2LCDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2RPBDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2RPBDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2RPXDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2RPXDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2BKBDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2BKBDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2BKXDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2BKXDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2DLBDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2DLBDT = SP0JW01.SP0JWD;
    SP0JW01.SP0JWD = SP2REC.SP2DLXDT;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP2REC.SP2DLXDT = SP0JW01.SP0JWD;
    call "IO0080" ("U ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      if (SP0JW01.SP0JWSDM == "Y")
        SP0JS3E(); /* update sp6rec.sp6uomi*/
      end
      set SP0JM050.SP0JMMQT cursor;
      SP0JM050.SP0JMMSG = "ORDER TYPE UPDATED ------ CONTINUE";
      SP0JW01.SP0JWVF1 = "S";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SP0JW01.SP0JWVF = "N";
        set SP0JM050 alarm;
        move SP2REC to SP0JM030 withV60Compat;
        set SP0JM050.SP2LCDT modified; /* just to make something modified*/
        converseLib.validationFailed(77);
        SP0JM050.SP0JMMSG = "UNABLE TO UPDATE DATA - TRY AGAIN";
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0J   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0JS38 ";
        TA1REC.TA1LOCAT[3] = "IO0080  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0JM030";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VORTYP01";
        TA1TBLKE = SP2REC.SP2KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D") /* to delete a rec*/
    move SP0JM050 to SP2REC withV60Compat;
    call "IO0080" ("D ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0JW01.SP0JWVF1 = "D";
      if (SP1REC.SP1LIFEF == "N") /* ok to delete sp6rec if not seasonal*/
        SP0JS3C(); /* del the sp6rec*/
      else
        if (SP1REC.SP1LIFEF == "Y" /* spgm is seasonal and xot deleted*/
         && SP0JW01.SP0JWTSZ == 1) /* is the last. ok to delete sp6rec*/
          SP0JS3C(); /* del the last seasonal sp6rec*/
        end
      end
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS38 ";
      TA1REC.TA1LOCAT[3] = "IO0080  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0UM020";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VORTYP01";
      TA1TBLKE = SP2REC.SP2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D" /* to delete a rec*/
   && SQLCA.VAGen_SQLCODE <= +100        
   && SP0JW01.SP0JWTSZ == 1)             /* this was the last order type rec*/
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0JW01.SP0JWUPF = "Y";
      SP0JW01.SP0JWFL1 = " ";
      SP0JS39(); /* check for status change*/
      SP0JS3A(); /* update sp1rec*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS38 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  SP0JW01.SP0JWPOS = 1; /* rebuild m020 screen*/



end // end SP0JS38

// check for status update-
Function SP0JS39()


  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    return;
  end

  if (SP0JW01.SP0JWFL1 == "*") /* order type info exists*/
    if (SP1REC.SP1OTIND != "Y")
      SP1REC.SP1OTIND = "Y";
      SP0JW01.SP0JWUPF = "Y";
    end
  else
    if (SP1REC.SP1OTIND == "Y")
      SP1REC.SP1OTIND = "N";
      SP0JW01.SP0JWUPF = "Y";
    end
  end


  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   || SP1REC.SP1PIND == "Y"  /* product info exists*/
   || SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == " ") /* status is blank*/
      SP1REC.SP1STAT = "P";
      SP0JM030.SP1STAT = "P";
      SP0JW01.SP0JWUPF = "Y";
    end
  end


  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   && SP1REC.SP1PIND == "Y"  /* product info exists*/
   && SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == "P" /* status is partial*/
     || SP1REC.SP1STAT == " ")
      SP1REC.SP1STAT = "C";
      SP0JM030.SP1STAT = "C";
      SP0JW01.SP0JWUPF = "Y";
    end
  else
    if (SP1REC.SP1STAT == "C") /* status is complete*/
      SP1REC.SP1STAT = "P";
      SP0JM030.SP1STAT = "P";
      SP0JW01.SP0JWUPF = "Y";
    end
  end



end // end SP0JS39

// update sp1rec-
Function SP0JS3A()


   /* ************************************************************/
      /* this statement group is used to update the sp1rec.*/
      /* it assumes that all the necessary information has*/
      /* moved into the record before this statement group*/
      /* was called.*/
   /* ************************************************************/

  if (SP0JW01.SP0JWUPF != "Y")
    return;
  end

  move SP0JM030 to SP1REC withV60Compat;

  SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
  SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
  SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
  SP1REC.ZZZCHGTM = SP0JW01.SP0JWT2;

  SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ************************* Y2K IN BEGIN ********************************/
   /*  */
  if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ************************* Y2K IN END **********************************/
   /*  */
    SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ************************* Y2K IN BEGIN ********************************/
   /*  */
  else
    SP0JW01.SP0JWD1 = 020;
  end
   /*  */
   /* ************************* Y2K IN END **********************************/
   /*  */
  SP1REC.ZZZCHGDT = SP0JW01.SP0JWD;

  SP1REC.ZZZCHGCT = SP0JW01.ZZZCHGCT;

  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update return*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SP0JM030.SP0JMMSG = "DATA BASE UPDATED - CONTINUE";
    SP0JW01.ZZZCHGCT = SP0JW01.ZZZCHGCT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0JM030.SP0JMMSG = "UNABLE TO UPDATE DATA. TRY AGAIN.";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3A ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0JS3B(); /* db2 error routine*/
    end
  end


end // end SP0JS3A

// db2 error routine-
Function SP0JS3B()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0JS3B

// del sp6rec -
Function SP0JS3C()



   /* ************************************************************/
      /* this statement group is used to delete the sp6rec.*/
      /* it is deleted when its sp2rec for order types is*/
      /* deleted.*/
   /* ************************************************************/



  SP6REC.SP1ID = SP0JM030.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**"; /* pointer set in sp0jsxx*/
  else
    SP6REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS]; /* pointer set in sp0jsxx*/
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* an sp6rec does exist*/
    call "IO4220" ("D ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* good delete of sp6rec*/
       /* record deleted*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "D       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3C ";
      SP0JM050.XXXERRID = "SP0JS3C ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* it is ok if there is no sp6rec found*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3C ";
      SP0JM050.XXXERRID = "SP0JS3C ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end SP0JS3C

// add new sp6rec
Function SP0JS3D()



   /* ************************************************************/
      /* this statement group is used to add a new sp6rec.*/
      /* it is added whenever an sp2rec is added.*/
   /* ************************************************************/



  set SP6REC empty;
  set SQLCA empty;
  SP6REC.SP1ID = SP0JM030.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**"; /* seasonal*/
  else
    SP6REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS]; /* non seasonal*/
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +100) /* an sp6rec does not exist*/
    SP6REC.SP6DOVRC = "S";
    SP6REC.SP6AAPCT = 0;
    SP6REC.SP6TDPCT = 0;
    SP6REC.SP6COPCT = 100;
    SP6REC.SP6UOMI = "U";
    SP6REC.SP6TAACD[1] = "00";
    SP6REC.SP6TCOCD[1] = "00";
    SP6REC.SP6TTDCD[1] = "00";
    SP6REC.SP6TPTCD[1] = "  ";
    SP6REC.SP6TIER[1] = 0;
    SP6REC.SP6MDISC[1] = 0;
    SP6REC.ZZZCHGCT = 0;
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
    SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
    call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* good add of sp6rec*/
       /* record added*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3D ";
      SP0JM050.XXXERRID = "SP0JS3D ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE == +0) /* if record exists, modify it*/
      if (SP6REC.XOTCD != "**") /* add sp6rec only for non seasonal*/
        SP6REC.SP6DOVRC = "S";
        SP6REC.SP6AAPCT = 0;
        SP6REC.SP6TDPCT = 0;
        SP6REC.SP6COPCT = 100;
        SP6REC.SP6UOMI = "U";
        SP6REC.SP6TIER[1] = 0;
        SP6REC.SP6MDISC[1] = 0;
        SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
        SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
        SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
        SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
        SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
        if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
          SP0JW01.SP0JWD1 = 019;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
        else
          SP0JW01.SP0JWD1 = 020;
        end
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
        SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
        call "IO4220" ("U ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE != +0)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SP0J   ";
          TA1REC.TA1LOCAT[1] = "U       ";
          TA1REC.TA1LOCAT[2] = "SP0JS3D ";
          SP0JM050.XXXERRID = "SP0JS3D ";
          TA1REC.TA1LOCAT[3] = "IO4220  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SP0JM050";
          TA1REC.TA1DBASE = "DSPGM.";
          TA1REC.TA1TBLVU = "VTIERS01";
          TA1TBLKE = SP6REC.SP6KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    else /* db2 error on read sp6rec*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3D ";
      SP0JM050.XXXERRID = "SP0JS3D ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end SP0JS3D

// updt sp6rec.sp6uomi
Function SP0JS3E()



   /* ************************************************************/
      /* this statement group is used to update the discount*/
      /* indicator of sp6rec to make it consistent with the*/
      /* value in sp2rec.*/
   /* ************************************************************/



  set SP6REC empty;
  set SQLCA empty;
  SP6REC.SP1ID = SP0JM030.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**"; /* seasonal*/
  else
    SP6REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS]; /* non seasonal*/
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* an sp6rec exists*/
    if (SP2REC.SP2DIND != SP6REC.SP6UOMI) /* and uomi is different*/
      SP6REC.SP6UOMI = SP2REC.SP2DIND;
      SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
      SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
      SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
      SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
      SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ************************ Y2K IN END ***********************************/
   /*  */
        SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      else
        SP0JW01.SP0JWD1 = 020;
      end
   /*  */
   /* ************************ Y2K IN END ***********************************/
   /*  */
      SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
      call "IO4220" ("U ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +0) /* good updt of sp6rec*/
         /* record added*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0J   ";
        TA1REC.TA1LOCAT[1] = "U       ";
        TA1REC.TA1LOCAT[2] = "SP0JS3E ";
        SP0JM050.XXXERRID = "SP0JS3E ";
        TA1REC.TA1LOCAT[3] = "IO4220  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0JM050";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VTIERS01";
        TA1TBLKE = SP6REC.SP6KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no sp6rec was found to update*/
      SP6REC.SP6UOMI = SP2REC.SP2DIND;
                                   /* so create one with defaults*/
      SP6REC.SP6TAACD[1] = "00";
      SP6REC.SP6TTDCD[1] = "00";
      SP6REC.SP6TCOCD[1] = "00";
      SP6REC.SP6TPTCD[1] = "  ";
      SP6REC.SP6COPCT = 100;
      SP6REC.SP6AAPCT = 0;
      SP6REC.SP6TDPCT = 0;
      SP6REC.SP6DOVRC = "S";
      SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
      SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
      SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
      SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
      SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ************************ Y2K IN END ***********************************/
   /*  */
        SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      else
        SP0JW01.SP0JWD1 = 020;
      end
   /*  */
   /* ************************ Y2K IN END ***********************************/
   /*  */
      SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
      SP6REC.ZZZCHGCT = 0;
      call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +0) /* good add of missing sp6rec*/
         /* record added with correct dind/uomi*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0J   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0JS3E ";
        SP0JM050.XXXERRID = "SP0JS3E ";
        TA1REC.TA1LOCAT[3] = "IO4220  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0JM050";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VTIERS01";
        TA1TBLKE = SP6REC.SP6KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    else /* db2 error on read sp6rec*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0JS3E ";
      SP0JM050.XXXERRID = "SP0JS3E ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end SP0JS3E

// validate net-bill allowed flag
Function SP0JS46()



   /* ************************************************************/
      /* this statement group is validate the net bill allowed*/
      /* flag. valid entries are 'y' or 'n'.  the default value*/
      /* is 'n'.*/
   /* ************************************************************/


  set SP0JM050.SP2NTALW normal;

  SP0JW01.SP0JWVF = "Y";

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    return;
  end

  if (SP0JM050.SP2NTALW == " ")
    SP0JM050.SP2NTALW = "N";
    return;
  end

  if (SP0JM050.SP2NTALW != "N"
   && SP0JM050.SP2NTALW != "Y")
    SP0JW01.SP0JWVF = "N";
    set SP0JM050 alarm;
    set SP0JM050.SP2NTALW cursor, modified, bold;
    SP0JM050.SP0JMMSG = "net bill allowed flag must be 'y' or 'n'";
    return;
  end



end // end SP0JS46

// validate spec comm-type/code
Function SP0JS47()


  set SP0JM050.XSMTYPCD normal;
  set SP0JM050.KOFCOMCD normal;
  set SP0JM050.SP2SLSVF normal;

  SP0JW01.SP0JWVF = "Y";

  if (SP0JM050.XSMTYPCD == " "
   && SP0JM050.KOFCOMCD == " "
   && SP0JM050.SP2SLSVF == "Y")
                                   /* yes,do include in sales vol calc.*/
    return;
  end

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    return;
  end

     /* ********************************************************/
     /* *   when the sales volume flag is 'no', the special   **/
     /* *   commission code must exist and it's replacement   **/
     /* *   code must be 'yes'.                               **/
     /* ********************************************************/


  if (SP0JM050.SP2SLSVF == "Y"
   || SP0JM050.SP2SLSVF == "N")
    /* .....good code*/
  else
    SP0JW01.SP0JWVF = "N";
    set SP0JM050.SP2SLSVF cursor, modified, bold;
    SP0JM050.SP0JMMSG = "accum.sales volume  must be 'y' or 'n'";
    return;
  end

  if (SP0JM050.XSMTYPCD != "S")
    if (SP0JM050.SP2SLSVF == "N")
      SP0JW01.SP0JWVF = "N";
      set SP0JM050.XSMTYPCD cursor, modified, bold;
      set SP0JM050.SP2SLSVF modified, bold;
      SP0JM050.SP0JMMSG = "spec.comm code must be 's' for sales-vol-fl = n";
      return;
    end
  else
    if (SP0JM050.SP2SLSVF == "N")
      if (SP0JM050.XSMTYPCD in XSMTBL.XSMCD)
        if (sysVar.arrayIndex != 0)
          if (XSMTBL.XSMREPFL[sysVar.arrayIndex] == "Y")
               /* ....replacement code is yes for this comm code*/
          else
            SP0JW01.SP0JWVF = "N";
            set SP0JM050.SP2SLSVF cursor, modified, bold;
            SP0JM050.SP0JMMSG = "SALES VOL FLAG MUST = Y FOR THIS SPEC.COMM CODE";
            return;
          end
        else
          SP0JW01.SP0JWVF = "N";
          set SP0JM050.SP2SLSVF cursor, modified, bold;
          SP0JM050.SP0JMMSG = "PROBLEM ACCESSING XSMTBL...TRY AGAIN           ";
          return;
        end
      end
    end
  end




  if (SP0JM050.XSMTYPCD != "I"
   && SP0JM050.XSMTYPCD != "S"
   && SP0JM050.XSMTYPCD != " ")
    SP0JW01.SP0JWVF = "N";
    set SP0JM050.XSMTYPCD cursor, modified, bold;
    SP0JM050.SP0JMMSG = "special commission code must be 'i' or 's'";
    return;
  end





  set KOFREC empty;
  set SQLCA empty;

  KOFREC.XSMTYPCD = SP0JM050.XSMTYPCD;
  KOFREC.KOFCOMCD = SP0JM050.KOFCOMCD;

  call "IO0710" ("S ", SQLCA, KOFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (KOFREC.XXXSTAT != "A")
      SP0JW01.SP0JWVF = "N";
      set SP0JM050.XSMTYPCD cursor, modified, bold;
      set SP0JM050.KOFCOMCD modified, bold;
      SP0JM050.SP0JMMSG = "INACTIVE SPECIAL COMMISSION TYPE/CODE";
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SP0JW01.SP0JWVF = "N";
      set SP0JM050 alarm;
      set SP0JM050.XSMTYPCD cursor, modified, bold;
      set SP0JM050.KOFCOMCD modified, bold;
      SP0JM050.SP0JMMSG = "INVALID SPECIAL COMMISSION CODE/TYPE";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS47 ";
      TA1REC.TA1LOCAT[3] = "IO0710  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DCOMM.";
      TA1REC.TA1TBLVU = "VSMSCH01";
      TA1TBLKE = KOFREC.KOFKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


end // end SP0JS47

// 2nd edit group for order-type
Function SP0JS51()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0JW01.SP0JWVF = "Y";
  SP0JM050.SP0JMMSG = " ";



      /* reset map field attributes*/

  set SP0JM050.SP0JMOP1 normal;
  set SP0JM050.SP2RPBDT cursor, normal;
  set SP0JM050.SP2RPXDT normal;
  set SP0JM050.SP2BKBDT normal;
  set SP0JM050.SP2BKXDT normal;
  set SP0JM050.SP2DLBDT normal;
  set SP0JM050.SP2DLXDT normal;
  set SP0JM050.SP2LEDTM normal;
  set SP0JM050.SP2MNQTY normal;
  set SP0JM050.SP2MNDLR normal;
  set SP0JM050.SP2LCDT normal;
  set SP0JM050.SP2MXPCT normal;
  set SP0JM050.SP2NTALW normal;
  set SP0JM050.XSMTYPCD normal;
  set SP0JM050.KOFCOMCD normal;
  set SP0JM050.SP2SLSVF normal;
  set SP0JM050.SP0JMMQT normal;
  set SP0JM050.SP0JMMDL normal;
  set SP0JM050.CATOAP normal;
  set SP0JM050.CAITEM normal;



      /* protect fields for 'a' 'i' or 'f' status*/



  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
  end



      /* for a delete set all fields autoskip*/



  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2RPBDT skip;
    set SP0JM050.SP2RPXDT skip;
    set SP0JM050.SP2BKBDT skip;
    set SP0JM050.SP2BKXDT skip;
    set SP0JM050.SP2DLBDT skip;
    set SP0JM050.SP2DLXDT skip;
    set SP0JM050.SP2LEDTM skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2LCDT skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP0JMMQT skip;
    set SP0JM050.SP0JMMDL skip;
  end




      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0JW01.SP0JWVF = "N";
    return;
  end



   /* ********************************************************/
      /* sp0js52  is used to check for modified data*/
      /* sp0js53  is used to check for selected options*/
   /* ********************************************************/

  SP0JW01.SP0JWMDF = "N";

  SP0JS52();
  SP0JS53();


   /* ********************************************************/
      /* sp0js54 check for fast path, modified data, pf1, pf4*/
   /* ********************************************************/

  SP0JS54();

  if (converseVar.validationMsgNum > 0)
    SP0JW01.SP0JWVF = "N";
    return;
  end


   /* ********************************************************/
      /* was an option selected or data modified.*/
   /* ********************************************************/

  if (converseVar.eventKey is enter
   && SP0JM030.SP0JWMOP[SP0JWPOS] != "D")
    if (SP0JW01.SP0JWHDM == "N"
     && SP0JW01.SP0JWSDM == "N")
      converseLib.validationFailed(4);
      SP0JW01.SP0JWVF = "N";
      SP0JM050.SP0JMMSG = "ENTER DATA OR SELECT AN OPTION";
      return;
    end
  end


   /* ********************************************************/
      /* no errors - was pf3 used?......*/
   /* ********************************************************/

  if (converseVar.eventKey is pf3)
    return;
  end



   /* ********************************************************/
      /* all edits ok and this is a delete.*/
   /* ********************************************************/

  if (converseVar.eventKey is enter
   && SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    return;
  end



   /* ********************************************************/
      /* sp0js45  is used to verify payment codes*/
      /* sp0js43  is used to verify trade discount codes*/
      /* sp0js42  is used to verify ad allowance codes*/
      /* sp0js57  is used to verify date ranges*/
      /* sp0js41  is used to verify coop codes.*/
   /* ********************************************************/

  SP0JS55(); /* validate order type copy*/

  SP0JS57(); /* validate date ranges*/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    return;
  else
      /* SP0JS41;*/
      /* SP0JS42;*/
      /* SP0JS43;*/
      /* SP0JS44;*/
      /* SP0JS45;*/
    SP0JS46(); /* validate net bill allowed*/
    SP0JS47(); /* validate spcl comm codes*/

    if (SP0JM050.SP0JMMQT != " "
     && SP0JM050.SP0JMMDL != " ")
      SP0JW01.SP0JWVF = "N";
      set SP0JM050.SP0JMMQT bold;
      set SP0JM050.SP0JMMDL bold;
      SP0JM050.SP0JMMSG = "CAN'T SELECT BOTH DISCOUNT BY DLR & UNITS";
    end
  end


   /* ********************************************************/
      /* protect fields for 'a' 'i' or 'f' status*/
   /* ********************************************************/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
  end


   /* ********************************************************/
      /* for a delete set all fields autoskip*/
   /* ********************************************************/

  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    set SP0JM050.SP0JMOP1 skip;
    set SP0JM050.SP2RPBDT skip;
    set SP0JM050.SP2RPXDT skip;
    set SP0JM050.SP2BKBDT skip;
    set SP0JM050.SP2BKXDT skip;
    set SP0JM050.SP2DLBDT skip;
    set SP0JM050.SP2DLXDT skip;
    set SP0JM050.SP2LEDTM skip;
    set SP0JM050.SP2NTALW skip;
    set SP0JM050.XSMTYPCD skip;
    set SP0JM050.KOFCOMCD skip;
    set SP0JM050.SP2SLSVF skip;
    set SP0JM050.SP2MNQTY skip;
    set SP0JM050.SP2MNDLR skip;
    set SP0JM050.SP2LCDT skip;
    set SP0JM050.SP2MXPCT skip;
    set SP0JM050.SP0JMMQT skip;
    set SP0JM050.SP0JMMDL skip;
  end



end // end SP0JS51

// check for modified data-header
Function SP0JS52()



   /* ************************************************************/
      /* this statement group is used to determine if any of*/
      /* the fields within the header screen have been*/
      /* modified.*/
   /* ************************************************************/



  SP0JW01.SP0JWHDM = "N";

  if (SP0JM050.SP0JMOP1 is modified
   && SP0JM050.SP0JMOP1 != "  ")
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - THIS S.P. WAS/IS ACTIVE --- ";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.SP2RPBDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2RPXDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2BKBDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2BKXDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2DLBDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2DLXDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2LEDTM is modified)
    SP0JW01.SP0JWHDM = "Y";
  end


  if (SP0JM050.SP2MNQTY is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - THIS S.P. WAS/IS ACTIVE --- ";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.SP2MNDLR is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - THIS S.P. WAS/IS ACTIVE --- ";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.SP2LCDT is modified)
    SP0JW01.SP0JWHDM = "Y";
  end

  if (SP0JM050.SP2MXPCT is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - THIS S.P. WAS/IS ACTIVE --- ";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.SP2NTALW is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - THIS S.P. WAS/IS ACTIVE ---";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.XSMTYPCD is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - S.P. WAS/IS ACTIVE";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JM050.KOFCOMCD is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - S.P. WAS/IS ACTIVE";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end


  if (SP0JM050.SP2SLSVF is modified)
    SP0JW01.SP0JWHDM = "Y";
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "F"
     || SP1REC.SP1STAT == "I")
          /* cannot change*/
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(12);
      SP0JM050.SP0JMMSG = "CANNOT CHANGE - S.P. WAS/IS ACTIVE";
      SP0JM050.VAGen_EZEMSG = " ";
      return;
    end
  end

  if (SP0JW01.SP0JWHDM == "Y")
    SP0JW01.SP0JWMDF = "Y"; /* set flag for header data modified*/
  end



end // end SP0JS52

// check for modified select-area
Function SP0JS53()



   /* ************************************************************/
      /* this statement group is used to determine if any of*/
      /* option fields on the sales program header screen*/
      /* have been modified*/
   /* ************************************************************/



  SP0JW01.SP0JWSDM = "N";

  if (SP0JM050.SP0JMMQT != " ")
    SP0JW01.SP0JWSDM = "Y";
  end

  if (SP0JM050.SP0JMMDL != " ")
    SP0JW01.SP0JWSDM = "Y";
  end

  if (SP0JW01.SP0JWSDM == "Y") /* select item picked*/
    SP0JW01.SP0JWMDF = "Y";
  end



end // end SP0JS53

// edit for fast path option,mdt
Function SP0JS54()



  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf3)
    return;
  end


   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* and option selected or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0JM050.CATOAP != " ")
    if (SP0JW01.SP0JWMDF == "Y") /* if select or header modified*/
      SP0JM050.SP0JMMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0JM050.CATOAP = " ";
      SP0JM050.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0JM050.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0JM050.CATOAP;
      COMMAREA.CAITEM = SP0JM050.CAITEM;
      XSEXIT();
      SP0JM050.SP0JMMSG = COMMAREA.CAMSG;
      SP0JM050.CATOAP = " ";
      SP0JM050.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0JM050.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0JM050.SP0JMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0JS54

// copy another xot to sp0jm050
Function SP0JS55()



   /* ************************************************************/
      /* this statement group is used to copy parameters*/
      /* from one order type to another order type within*/
      /* sales programs*/
   /* ************************************************************/


  if (SP0JM050.SP0JMOP1 == "  ")
    return;
  end



  if (SP0JM050.SP0JMOP1 in SP0JW01.XOTCD) /* valid xot code for spgm*/
     /* next sentence*/
  else
    set SP0JM050.SP0JMOP1 cursor, bold;
    SP0JM050.SP0JMMSG = "ORDER TYPE FOR SPGM NOT FOUND";
    SP0JW01.SP0JWVF = "N";
    exit stack;
  end

  if (SP0JM050.SP0JMOP1 == SP0JM050.XOTCD) /* trying to copy to itself*/
    set SP0JM050.SP0JMOP1 cursor, bold;
    SP0JM050.SP0JMMSG = "ORDER TYPE CAN NOT BE COPIED TO ITSELF";
    SP0JW01.SP0JWVF = "N";
    exit stack;
  end


    /* cannot delete sp6rec if seasonal because it is the same*/
    /* record for all sp2rec within the same spgm id.*/

  if (SP1REC.SP1LIFEF != "Y") /* for non-seasonal spgm's*/
    SP0JS6C(); /* delete existing sp6rec*/
  end

                                   /* delete existing sp2rec*/

  SP2REC.SP1ID = SP0JM050.SP1ID;
  SP2REC.XOTCD = SP0JM050.XOTCD;
  SP0JW01.SP2DIND = SP2REC.SP2DIND; /* save for seasonal recs*/
  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    call "IO0080" ("D ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
     /* good return*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0J   ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = "SP0JS55 ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0JM050";
    SP0JM050.XXXERRID = "SP0JM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

          /* retrieve the sp2rec to copy into the current sp2rec*/

  SP2REC.SP1ID = SP0JM050.SP1ID; /* setup the key for the*/
  SP2REC.XOTCD = SP0JM050.SP0JMOP1; /* source sp2rec*/
  SP0JW01.SP0JWOT = SP0JM050.XOTCD; /* save current xot cd*/

  SP0JW01.SP0JWVF = "Y";

  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != +0) /* the source sp2rec was not found*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0J   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0JS55 ";
    SP0JM050.XXXERRID = "SP0JS55 ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0JM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



  SP2REC.SP1ID = SP0JM050.SP1ID;
  SP2REC.XOTCD = SP0JW01.SP0JWOT; /* reset to current xot code*/

  if (SP1REC.SP1LIFEF == "Y") /* for seasonal spgm's,*/
    SP2REC.SP2DIND = SP0JW01.SP2DIND; /* use consistent discount*/
  end /* unit of measure*/

  SP0JW01.SP0JWT1 = VGVar.currentFormattedTime; /* added 9/3*/
  SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1; /* added 9/3*/
  SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1; /* added 9/3*/
  SP2REC.ZZZCHGTM = SP0JW01.SP0JWT2; /* added 9/3*/
  SP0JW01.SP0JWD = VGVar.currentShortGregorianDate; /* added 9/3*/
   /*  */
   /* ************************** Y2K IN BEGIN *******************************/
   /*  */
  if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ************************** Y2K IN END *********************************/
   /*  */
    SP0JW01.SP0JWD1 = 019; /* added 9/3*/
   /*  */
   /* ************************** Y2K IN BEGIN *******************************/
   /*  */
  else
    SP0JW01.SP0JWD1 = 020;
  end
   /*  */
   /* ************************** Y2K IN END *********************************/
   /*  */
  SP2REC.ZZZCHGDT = SP0JW01.SP0JWD; /* added 9/3*/
  SP2REC.ZZZCHGCT = 0; /* added 9/3*/

  call "IO0080" ("A ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SP1REC.SP1LIFEF != "Y") /* for non-seasonal spgm's*/
      SP0JS56(); /* get the sp6rec to copy and add*/
    end
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    move SP2REC to SP0JM050 withV60Compat;
    if (SP2REC.SP2DIND == "U")
      SP0JM050.SP0JMMQT = "*"; /* quantity*/
      SP0JM050.SP0JMMDL = " "; /* dollars*/
    else
      SP0JM050.SP0JMMQT = " "; /* quantity*/
      SP0JM050.SP0JMMDL = "*"; /* dollars*/
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0J   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0JS55 ";
    SP0JM050.XXXERRID = "SP0JS55 ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0JM030";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  SP0JM050.SP0JMOP1 = "  ";



end // end SP0JS55

// copy sp6rec-
Function SP0JS56()



   /* ************************************************************/
      /* this statement group is used to copy the existing*/
      /* sp6rec when copying information from one order type*/
      /* to another. if an sp2rec is copied, the corresponding*/
      /* sp6rec will also be copied.*/
      /* this routine is only done for non-seasonal spgm's*/
   /* ************************************************************/



  SP6REC.SP1ID = SP0JM050.SP1ID;
  SP6REC.XOTCD = SP0JM050.SP0JMOP1;

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes}; /* get the source sp6rec*/

   /* set up the target sp6rec and add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* a non-seasonal sp6rec to copy is found*/
    SP6REC.SP1ID = SP0JM050.SP1ID;
    SP6REC.XOTCD = SP0JM050.XOTCD; /* add the target sp6rec*/
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
    SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
    SP6REC.ZZZCHGCT = 0;
    call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* good add*/
      SP0JW01.SP0JWMSG = "DATA BASE UPDATED ---------- CONTINUE";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS56 ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else /* the sp6rec to copy was not found or db2 error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0J   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0JS56 ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0JM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0JS56

// used to verify date ranges-
Function SP0JS57()



   /* *********************************************************/
      /* this statement group is used to verify date ranges*/
      /* for the order type map sp0jm050.*/
   /* *********************************************************/



      /* ignor if this is a delete*/


  set SP0JM050.SP2RPBDT cursor, normal;
  set SP0JM050.SP2RPXDT normal;
  set SP0JM050.SP2BKBDT normal;
  set SP0JM050.SP2BKXDT normal;
  set SP0JM050.SP2DLBDT normal;
  set SP0JM050.SP2DLXDT normal;
  set SP0JM050.SP2LCDT normal;



  if (SP0JM030.SP0JWMOP[SP0JWPOS] == "D")
    return;
  end



  SP0JW01.SP0JWVF = "Y";
  SP0JM050.SP0JMMSG = " ";


   /* ****************************************************/
      /* verify date ranges-*/
   /* ****************************************************/


    /* ***** last cancel date lt first booking date *****/


  SP0JW01.SP0JWDT1 = SP0JM050.SP2LCDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2BKBDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 < SP0JW01.SP0JWDT2)
    set SP0JM050.SP2LCDT cursor, modified, bold;
    set SP0JM050.SP2BKBDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "CANCELLATION DATE PRIOR TO ORDER DATE";
    SP0JW01.SP0JWVF = "N";
  end

   /* *********************************************************/



    /* ***** last cancel date gt last delivery date *****/

  SP0JW01.SP0JWDT1 = SP0JM050.SP2LCDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2DLXDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 > SP0JW01.SP0JWDT2)
    set SP0JM050.SP2LCDT cursor, modified, bold;
    set SP0JM050.SP2DLXDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "CANCELLATION DATE EXCEEDS DELIVERY DATE";
    SP0JW01.SP0JWVF = "N";
  end


    /* ***** first delivery date gt last delivery date **/


  SP0JW01.SP0JWDT1 = SP0JM050.SP2DLBDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2DLXDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 > SP0JW01.SP0JWDT2)
    set SP0JM050.SP2DLBDT cursor, modified, bold;
    set SP0JM050.SP2DLXDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "BEGINNING DATE EXCEEDS THE ENDING DATE";
    SP0JW01.SP0JWVF = "N";
  end


    /* ***** first booking gt last booking  ******** ****/

  SP0JW01.SP0JWDT1 = SP0JM050.SP2BKBDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2BKXDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 > SP0JW01.SP0JWDT2)
    set SP0JM050.SP2BKBDT cursor, modified, bold;
    set SP0JM050.SP2BKXDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "BEGINNING DATE EXCEEDS THE ENDING DATE";
    SP0JW01.SP0JWVF = "N";
  end

    /* ***** first rep booking date gt last rep booking**/

  SP0JW01.SP0JWDT1 = SP0JM050.SP2RPBDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2RPXDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 > SP0JW01.SP0JWDT2)
    set SP0JM050.SP2RPBDT cursor, modified, bold;
    set SP0JM050.SP2RPXDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "BEGINNING DATE EXCEEDS THE ENDING DATE";
    SP0JW01.SP0JWVF = "N";
  end


    /* ***** first del. date lt order deadline date    **/


  SP0JW01.SP0JWDT1 = SP0JM050.SP2DLBDT;
  SP0JW01.SP0JWDT2 = SP0JM050.SP2BKBDT;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC1 == 0)
    if (SP0JW01.SP0JWDT1 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC1 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC1 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0JW01.SP0JWDC2 == 0)
    if (SP0JW01.SP0JWDT2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
      SP0JW01.SP0JWDC2 = 19;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
    else
      SP0JW01.SP0JWDC2 = 20;
    end
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */

  if (SP0JW01.SP0JWDT1 < SP0JW01.SP0JWDT2)
    set SP0JM050.SP2DLBDT cursor, modified, bold;
    set SP0JM050.SP2BKBDT modified, bold;
    converseLib.validationFailed(19);
    SP0JM050.SP0JMMSG = "DELIVERY DATE IS BEFORE THE ORDER DATE";
    SP0JW01.SP0JWVF = "N";
  end



end // end SP0JS57

// sp6rec sp for tiered disc.
Function SP0JS61()




   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the quantity info to sp0jm100.*/
      /* this process is used to initialize the necessary*/
      /* fields for the order type s.p. discounts.*/
   /* ************************************************************/

  set SP0JM100 initial;
  SP0JM100.XXXERRID = "SP0J100";
  SP0JM100.XXXRVNBR = "01";
  SP0JM100.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0JM100.SP1ID = SP0JM050.SP1ID;
  SP0JM100.XOTCD = SP0JM050.XOTCD;
  SP0JM100.SP1LIFEF = SP1REC.SP1LIFEF;
  SP0JM100.SP1STAT = SP1REC.SP1STAT;
  if (SP2REC.SP2DIND == "D")
    SP0JM100.SP0JMMEA = "DOLLARS";
  else
    SP0JM100.SP0JMMEA = " UNITS ";
  end



  set SP6REC empty;
  SP6REC.SP1ID = SP2REC.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**";
  else
    SP6REC.XOTCD = SP0JM050.XOTCD;
  end


   /* ************************************************************/
      /* select the discounts for this s.p. and*/
      /* show on map sp0jm100.  if sp6rec was not found,*/
      /* create one with default values.*/
   /* ************************************************************/


  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +100)
    SP6REC.SP6UOMI = SP2REC.SP2DIND;
    SP6REC.SP6TAACD[1] = "00";
    SP6REC.SP6TTDCD[1] = "00";
    SP6REC.SP6TCOCD[1] = "00";
    SP6REC.SP6TPTCD[1] = "  ";
    SP6REC.SP6COPCT = 100;
    SP6REC.SP6TDPCT = 0;
    SP6REC.SP6AAPCT = 0;
    SP6REC.SP6DOVRC = "S";
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
    SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
    SP6REC.ZZZCHGCT = 0;
    call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS61 ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0JS61 ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

                  /* move sp6rec fields into sp0jm100*/

  SP0JM100.SP0JMLVL = SP6REC.SP6TIER[1];
  SP0JM100.SP0JMDSC = SP6REC.SP6MDISC[1];
  SP0JM100.SP0JMAAC = SP6REC.SP6TAACD[1];
  SP0JM100.SP0JMCOC = SP6REC.SP6TCOCD[1];
  SP0JM100.SP0JMTDC = SP6REC.SP6TTDCD[1];
  SP0JM100.SP0JMPTC = SP6REC.SP6TPTCD[1];

  SP0JW01.SP0JWSB1 = 1;
  while (SP0JW01.SP0JWSB1 < 9)
    SP0JW01.SP0JWSB2 = SP0JW01.SP0JWSB1 + 1;
    SP0JM100.SP6TIER[SP0JWSB1] = SP6REC.SP6TIER[SP0JWSB2];
    SP0JM100.SP6MDISC[SP0JWSB1] = SP6REC.SP6MDISC[SP0JWSB2];
    SP0JM100.SP6TAACD[SP0JWSB1] = SP6REC.SP6TAACD[SP0JWSB2];
    SP0JM100.SP6TCOCD[SP0JWSB1] = SP6REC.SP6TCOCD[SP0JWSB2];
    SP0JM100.SP6TTDCD[SP0JWSB1] = SP6REC.SP6TTDCD[SP0JWSB2];
    SP0JM100.SP6TPTCD[SP0JWSB1] = SP6REC.SP6TPTCD[SP0JWSB2];
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end

  SP0JM100.SP6DOVRC = SP6REC.SP6DOVRC;
  SP0JM100.SP6TDPCT = SP6REC.SP6TDPCT;
  SP0JM100.SP6AAPCT = SP6REC.SP6AAPCT;

  SP0JM100.SP0JMCP1 = 100.00 - SP6REC.SP6TDPCT;
  SP0JM100.SP0JMCP2 = 100.00 - SP6REC.SP6AAPCT;
  SP0JM100.XOTCD = SP0JM050.XOTCD;


   /* **********************************************************/
      /* sp0js62  sort method for tiered levels in map array.*/
   /* **********************************************************/

  SP0JS62();



end // end SP0JS61

// sort method for qty/dlr array
Function SP0JS62()



   /* ************************************************************/
      /* sort method for map array.*/
   /* ************************************************************/


   /* ************************************************************/
    /* sort discount levels on the screen into sp0jw02*/
     /* note: sp0jw02 is an internal table with 9 element*/
           /* occurence. increase this if the map is increased*/
           /* in size.*/

  set SP0JW02 empty;
  move SP0JM100 to SP0JW02 withV60Compat; /* move screen to workarea for sort*/
  SP0JW01.SP0JWSB1 = 1;
  SP0JW01.SP0JWSB2 = 2;
                             /* sort the workarea*/
  while (SP0JW01.SP0JWSB1 < 10)
    while (SP0JW01.SP0JWSB2 < 10)
      if (SP0JW02.SP0JWR2[SP0JWSB1] > SP0JW02.SP0JWR2[SP0JWSB2])

        SP0JW01.SP0JWLVL = SP0JW02.SP6TIER[SP0JWSB2];
        SP0JW01.SP0JWPCT = SP0JW02.SP6MDISC[SP0JWSB2];
        SP0JW01.SP0JWTTD = SP0JW02.SP6TTDCD[SP0JWSB2];
        SP0JW01.SP0JWTCO = SP0JW02.SP6TCOCD[SP0JWSB2];
        SP0JW01.SP0JWTAA = SP0JW02.SP6TAACD[SP0JWSB2];
        SP0JW01.SP0JWTPT = SP0JW02.SP6TPTCD[SP0JWSB2];

        SP0JW02.SP6TIER[SP0JWSB2] = SP0JW02.SP6TIER[SP0JWSB1];
        SP0JW02.SP6MDISC[SP0JWSB2] = SP0JW02.SP6MDISC[SP0JWSB1];
        SP0JW02.SP6TTDCD[SP0JWSB2] = SP0JW02.SP6TTDCD[SP0JWSB1];
        SP0JW02.SP6TCOCD[SP0JWSB2] = SP0JW02.SP6TCOCD[SP0JWSB1];
        SP0JW02.SP6TAACD[SP0JWSB2] = SP0JW02.SP6TAACD[SP0JWSB1];
        SP0JW02.SP6TPTCD[SP0JWSB2] = SP0JW02.SP6TPTCD[SP0JWSB1];

        SP0JW02.SP6TIER[SP0JWSB1] = SP0JW01.SP0JWLVL;
        SP0JW02.SP6MDISC[SP0JWSB1] = SP0JW01.SP0JWPCT;
        SP0JW02.SP6TTDCD[SP0JWSB1] = SP0JW01.SP0JWTTD;
        SP0JW02.SP6TCOCD[SP0JWSB1] = SP0JW01.SP0JWTCO;
        SP0JW02.SP6TAACD[SP0JWSB1] = SP0JW01.SP0JWTAA;
        SP0JW02.SP6TPTCD[SP0JWSB1] = SP0JW01.SP0JWTPT;
      end
      SP0JW01.SP0JWSB2 = SP0JW01.SP0JWSB2 + 1;
    end
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
    SP0JW01.SP0JWSB2 = SP0JW01.SP0JWSB1 + 1;
  end

   /* ************************************************************/
    /* loc position of 1st valid row to move back to sp0jm100*/

  SP0JW01.SP0JWSB1 = 1;
  SP0JW01.SP0JWSZ2 = 0;

    /* find the first non-blank row*/

  while (SP0JW01.SP0JWSB1 < 10)
    if (SP0JW02.SP6TIER[SP0JWSB1] == 0
     && SP0JW02.SP6MDISC[SP0JWSB1] == 0
     && SP0JW02.SP6TTDCD[SP0JWSB1] == " "
     && SP0JW02.SP6TCOCD[SP0JWSB1] == " "
     && SP0JW02.SP6TAACD[SP0JWSB1] == " "
     && SP0JW02.SP6TPTCD[SP0JWSB1] == " ")
        /* skip*/
    else
      SP0JW01.SP0JWSZ2 = 10 - SP0JW01.SP0JWSB1; /* set tbl size*/
      SP0JW01.SP0JWSB1 = 99;
    end
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end

    /* sp0jwsz2 will contain the no. of valued rows after the 1st*/
    /* sp0jwsb2 will contain the starting position of the first*/
      /* valued row in the sorted working storage area sp0jw02.*/

  SP0JW01.SP0JWSB2 = 10 - SP0JW01.SP0JWSZ2;



  SP0JW01.SP0JWSB1 = 1;

  while (SP0JW01.SP0JWSB1 < 10)
    if (SP0JW01.SP0JWSB2 < 10)
      SP0JM100.SP6TIER[SP0JWSB1] = SP0JW02.SP6TIER[SP0JWSB2];
      SP0JM100.SP6MDISC[SP0JWSB1] = SP0JW02.SP6MDISC[SP0JWSB2];
      SP0JM100.SP6TTDCD[SP0JWSB1] = SP0JW02.SP6TTDCD[SP0JWSB2];
      SP0JM100.SP6TCOCD[SP0JWSB1] = SP0JW02.SP6TCOCD[SP0JWSB2];
      SP0JM100.SP6TAACD[SP0JWSB1] = SP0JW02.SP6TAACD[SP0JWSB2];
      SP0JM100.SP6TPTCD[SP0JWSB1] = SP0JW02.SP6TPTCD[SP0JWSB2];
      SP0JW01.SP0JWSB2 = SP0JW01.SP0JWSB2 + 1;
    else
      SP0JM100.SP6TIER[SP0JWSB1] = 0;
      SP0JM100.SP6MDISC[SP0JWSB1] = 0;
      SP0JM100.SP6TTDCD[SP0JWSB1] = " ";
      SP0JM100.SP6TCOCD[SP0JWSB1] = " ";
      SP0JM100.SP6TAACD[SP0JWSB1] = " ";
      SP0JM100.SP6TPTCD[SP0JWSB1] = " ";
    end

    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end


   /* ************************************************************/
      /* procedure to allow fields to be entered*/

  SP0JW01.SP0JWSB1 = 1;

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    set SP0JM100.SP0JMLVL protect;
    set SP0JM100.SP0JMDSC protect;
    set SP0JM100.SP0JMAAC protect;
    set SP0JM100.SP0JMCOC protect;
    set SP0JM100.SP0JMTDC protect;
    set SP0JM100.SP0JMPTC protect;
    set SP0JM100.SP6DOVRC protect;
    set SP0JM100.SP6AAPCT protect;
    set SP0JM100.SP6TDPCT protect;
    set SP0JM100.CATOAP cursor;
    SP0JW01.SP0JWMSG = "NO UPDATES ALLOWED BECAUSE OF STATUS.";
  else
    set SP0JM100.SP0JMLVL initialAttributes;
    set SP0JM100.SP0JMDSC initialAttributes;
    set SP0JM100.SP0JMAAC initialAttributes;
    set SP0JM100.SP0JMCOC initialAttributes;
    set SP0JM100.SP0JMTDC initialAttributes;
    set SP0JM100.SP0JMPTC initialAttributes;
    set SP0JM100.SP6DOVRC initialAttributes;
    set SP0JM100.SP6AAPCT initialAttributes;
    set SP0JM100.SP6TDPCT initialAttributes;
  end


  while (SP0JW01.SP0JWSB1 < 10)
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "I"
     || SP1REC.SP1STAT == "F")
      set SP0JM100.SP6TIER[SP0JWSB1] protect;
      set SP0JM100.SP6MDISC[SP0JWSB1] protect;
      set SP0JM100.SP6TTDCD[SP0JWSB1] protect;
      set SP0JM100.SP6TCOCD[SP0JWSB1] protect;
      set SP0JM100.SP6TAACD[SP0JWSB1] protect;
      set SP0JM100.SP6TPTCD[SP0JWSB1] protect;
    else
      set SP0JM100.SP6TIER[SP0JWSB1] initialAttributes;
      set SP0JM100.SP6MDISC[SP0JWSB1] initialAttributes;
      set SP0JM100.SP6TTDCD[SP0JWSB1] initialAttributes;
      set SP0JM100.SP6TCOCD[SP0JWSB1] initialAttributes;
      set SP0JM100.SP6TAACD[SP0JWSB1] initialAttributes;
      set SP0JM100.SP6TPTCD[SP0JWSB1] initialAttributes;
    end
    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 + 1;
  end



end // end SP0JS62

// del sp6rec -
Function SP0JS6C()



   /* ************************************************************/
      /* this statement group is used to delete the sp6rec.*/
      /* it is deleted when either all quantity discounts or*/
      /* dollar discounts have been deleted from the record.*/
      /* it is also deleted when its sp2rec for order types is*/
      /* deleted.*/
   /* ************************************************************/



  SP6REC.SP1ID = SP0JM030.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**"; /* pointer set in sp0jsxx*/
  else
    SP6REC.XOTCD = SP0JM030.XOTCD[SP0JWPOS]; /* pointer set in sp0jsxx*/
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* an sp6rec does exist*/
    call "IO4220" ("D ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* good delete of sp6rec*/
       /* record deleted*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS6C ";
      SP0JM050.XXXERRID = "SP0JS6C ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* it is ok if there is no sp6rec found*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0JS6C ";
      SP0JM050.XXXERRID = "SP0JS6C ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end SP0JS6C

// main edit for qty/dlr disc-
Function SP0JS71()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0JW01.SP0JWMSG = " ";
  SP0JW01.SP0JWVF = "Y";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0JW01.SP0JWVF = "N";
    return;
  end



  SP0JS72(); /* sp0js72  validates sp0jm100 entries.*/

  if (SP0JW01.SP0JWVF == "Y")
    SP0JS74(); /* sp0js74 checks for duplicate entries*/
  end



  SP0JS73(); /* sp0js73 check for fast path, modified data, pf1, pf4*/

  if (converseVar.validationMsgNum > 0)
    SP0JW01.SP0JWVF = "N";
    return;
  end



  if (converseVar.eventKey is pf3) /* pf3 returns to sp0jm050*/
    return;
  end



end // end SP0JS71

// validate sp0jm100 entries
Function SP0JS72()



   /* ************************************************************/
      /* this statement group is used to validate the entries*/
      /* in sp0jm100. (levels 2 thru 10 as well as level 1)*/
   /* ************************************************************/


  if (SP0JM100.SP6DOVRC != "S" /* validate terms override*/
   && SP0JM100.SP6DOVRC != "C")
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(52);
    set SP0JM100.SP6DOVRC cursor, bold;
  end


  if (SP0JM100.SP6AAPCT > 100 /* validate ad allowance pcnt banked*/
   || SP0JM100.SP6AAPCT < 0) 
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(53);
    set SP0JM100.SP6AAPCT cursor, bold;
  else
    SP0JM100.SP0JMCP2 = 100 - SP0JM100.SP6AAPCT;
  end


  if (SP0JM100.SP6TDPCT > 100 /* validate trade discount banked*/
   || SP0JM100.SP6TDPCT < 0) 
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(54);
    set SP0JM100.SP6TDPCT cursor, bold;
  else
    SP0JM100.SP0JMCP1 = 100 - SP0JM100.SP6TDPCT;
  end


   /* ************************************************************/
     /* validate tiered levels 10 thru 2*/

  SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSZ2;

  while (SP0JW01.SP0JWSB1 > 0)

                                     /* validate payment terms code*/
    if (SP0JM100.SP6TPTCD[SP0JWSB1] in XPTTBL.XPTCD
     && SP0JM100.SP6TPTCD[SP0JWSB1] != "99")
           /* valid entry*/
    else
      if (SP0JM100.SP6TPTCD[SP0JWSB1] == "  ")
             /* valid entry*/
      else
        SP0JW01.SP0JWVF = "N";
        converseLib.validationFailed(17);
        set SP0JM100.SP6TPTCD[SP0JWSB1] cursor, bold;
      end
    end

                                      /* validate ad allowance code*/
    if (SP0JM100.SP6TAACD[SP0JWSB1] in XAATBL.XAACD
     && SP0JM100.SP6TAACD[SP0JWSB1] != "99")
           /* valid entry*/
    else
      if (SP0JM100.SP6TAACD[SP0JWSB1] == "  ")
             /* valid entry*/
      else
        SP0JW01.SP0JWVF = "N";
        converseLib.validationFailed(14);
        set SP0JM100.SP6TAACD[SP0JWSB1] cursor, bold;
      end
    end

                                              /* validate coop code*/
    if (SP0JM100.SP6TCOCD[SP0JWSB1] in XCPTBL.XCPCD
     && SP0JM100.SP6TCOCD[SP0JWSB1] != "99")
           /* valid entry*/
    else
      if (SP0JM100.SP6TCOCD[SP0JWSB1] == "  ")
             /* valid entry*/
      else
        SP0JW01.SP0JWVF = "N";
        converseLib.validationFailed(13);
        set SP0JM100.SP6TCOCD[SP0JWSB1] cursor, bold;
      end
    end

                                    /* validate trade discount code*/
    if (SP0JM100.SP6TTDCD[SP0JWSB1] in XTDTBL.XTDCD
     && SP0JM100.SP6TTDCD[SP0JWSB1] != "99")
           /* valid entry*/
    else
      if (SP0JM100.SP6TTDCD[SP0JWSB1] == "  ")
             /* valid entry*/
      else
        SP0JW01.SP0JWVF = "N";
        converseLib.validationFailed(15);
        set SP0JM100.SP6TTDCD[SP0JWSB1] cursor, bold;
      end
    end

                               /* validate minimum percent discount*/
    if (SP0JM100.SP6MDISC[SP0JWSB1] >= 0
     && SP0JM100.SP6MDISC[SP0JWSB1] <= 100)
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(55);
      set SP0JM100.SP6MDISC[SP0JWSB1] cursor, bold;
    end


                                 /* validate minimum discount level*/
    if (SP0JM100.SP6TIER[SP0JWSB1] > 0)
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(58);
      set SP0JM100.SP6TIER[SP0JWSB1] cursor, bold;
    end


    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 - 1;
  end

   /* ************************************************************/
    /* validate tiered level 1*/

                                  /* validate payment terms code1*/
  if (SP0JM100.SP0JMPTC in XPTTBL.XPTCD
   && SP0JM100.SP0JMPTC != "99")
         /* valid entry*/
  else
    if (SP0JM100.SP0JMPTC == "  ")
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(17);
      set SP0JM100.SP0JMPTC cursor, bold;
    end
  end

                                   /* validate ad allowance code1*/
  if (SP0JM100.SP0JMAAC in XAATBL.XAACD
   && SP0JM100.SP0JMAAC != "99")
         /* valid entry*/
  else
    if (SP0JM100.SP0JMAAC == "  ")
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(14);
      set SP0JM100.SP0JMAAC cursor, bold;
    end
  end

                                           /* validate coop code1*/
  if (SP0JM100.SP0JMCOC in XCPTBL.XCPCD
   && SP0JM100.SP0JMCOC != "99")
         /* valid entry*/
  else
    if (SP0JM100.SP0JMCOC == "  ")
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(13);
      set SP0JM100.SP0JMCOC cursor, bold;
    end
  end

                                 /* validate trade discount code1*/
  if (SP0JM100.SP0JMTDC in XTDTBL.XTDCD
   && SP0JM100.SP0JMTDC != "99")
         /* valid entry*/
  else
    if (SP0JM100.SP0JMTDC == "  ")
           /* valid entry*/
    else
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(15);
      set SP0JM100.SP0JMTDC cursor, bold;
    end
  end

                            /* validate minimum percent discount1*/
  if (SP0JM100.SP0JMDSC >= 0
   && SP0JM100.SP0JMDSC <= 100)
         /* valid entry*/
  else
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(55);
    set SP0JM100.SP0JMDSC cursor, bold;
  end


                              /* validate minimum discount level1*/
  if (SP0JM100.SP0JMLVL == 0)
         /* valid entry*/
  else
    SP0JW01.SP0JWVF = "N";
    converseLib.validationFailed(57);
    set SP0JM100.SP0JMLVL cursor, bold;
    set SP0JM100.SP0JMDSC bold;
    set SP0JM100.SP0JMAAC bold;
    set SP0JM100.SP0JMTDC bold;
    set SP0JM100.SP0JMCOC bold;
    set SP0JM100.SP0JMPTC bold;
  end



end // end SP0JS72

// edit for fast path, data mod-
Function SP0JS73()




  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end

  if (converseVar.eventKey is pf3)
    return;
  end



   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0JM100.CATOAP != " ")
    COMMAREA.CATOAP = SP0JM100.CATOAP;
    COMMAREA.CAITEM = SP0JM100.CAITEM;
    XSEXIT();
    SP0JW01.SP0JWMSG = COMMAREA.CAMSG;
    SP0JM100.CATOAP = " ";
    SP0JM100.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0JW01.SP0JWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0JW01.SP0JWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0JS73

// val. duplicate tiered levels
Function SP0JS74()



   /* ************************************************************/
      /* this statement group is used to validate duplicate*/
      /* tiered levels 2 to 10 on the screen.*/
   /* ************************************************************/




  SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSZ2;


   /* note that sp0js62 was executed earlier to sort screen*/
   /* entries by sp6tier and sp6mdisc.*/

   /* this checks for duplicate tier level entries.*/

  while (SP0JW01.SP0JWSB1 > 1)
    SP0JWSB2 = SP0JWSB1 - 1;
    if (SP0JM100.SP6TIER[SP0JWSB1] == SP0JM100.SP6TIER[SP0JWSB2])
      SP0JW01.SP0JWVF = "N";
      converseLib.validationFailed(56);
      set SP0JM100.SP6TIER[SP0JWSB1] cursor, bold;
      set SP0JM100.SP6MDISC[SP0JWSB1] bold;
      set SP0JM100.SP6TTDCD[SP0JWSB1] bold;
      set SP0JM100.SP6TCOCD[SP0JWSB1] bold;
      set SP0JM100.SP6TAACD[SP0JWSB1] bold;
      set SP0JM100.SP6TPTCD[SP0JWSB1] bold;
    end

    SP0JWSB1 = SP0JWSB1 - 1;
  end




end // end SP0JS74

// update sp6rec
Function SP0JS75()



   /* ************************************************************/
      /* this statement group is used to update the sp6rec.*/
      /* there is the possibility that the sp6rec*/
      /* was updated by someone else between the time the record*/
      /* was retrieved and the time we wanted to update.  to*/
      /* safeguard around this we will read the record and*/
      /* make sure the change count (zzzchgct) has not changed*/
      /* since we retreived the record.  if the count has*/
      /* changed the record will not be updated.*/
   /* ************************************************************/



  SP0JW01.SP0JWMSG = " ";
  SP6REC.SP1ID = SP0JM100.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**";
  else
    SP6REC.XOTCD = SP0JM100.XOTCD;
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP6REC.SP6DOVRC = SP0JM100.SP6DOVRC;
    SP6REC.SP6AAPCT = SP0JM100.SP6AAPCT;
    SP6REC.SP6TDPCT = SP0JM100.SP6TDPCT;
    SP6REC.SP6TIER[1] = SP0JM100.SP0JMLVL;
    SP6REC.SP6MDISC[1] = SP0JM100.SP0JMDSC;
    SP6REC.SP6TAACD[1] = SP0JM100.SP0JMAAC;
    SP6REC.SP6TCOCD[1] = SP0JM100.SP0JMCOC;
    SP6REC.SP6TTDCD[1] = SP0JM100.SP0JMTDC;
    SP6REC.SP6TPTCD[1] = SP0JM100.SP0JMPTC;
    SP0JWSB1 = 1;
    SP0JWSB2 = 2;
    while (SP0JWSB2 < 11)
      SP6REC.SP6TIER[SP0JWSB2] = SP0JM100.SP6TIER[SP0JWSB1];
      SP6REC.SP6MDISC[SP0JWSB2] = SP0JM100.SP6MDISC[SP0JWSB1];
      SP6REC.SP6TAACD[SP0JWSB2] = SP0JM100.SP6TAACD[SP0JWSB1];
      SP6REC.SP6TCOCD[SP0JWSB2] = SP0JM100.SP6TCOCD[SP0JWSB1];
      SP6REC.SP6TTDCD[SP0JWSB2] = SP0JM100.SP6TTDCD[SP0JWSB1];
      SP6REC.SP6TPTCD[SP0JWSB2] = SP0JM100.SP6TPTCD[SP0JWSB1];
      SP0JWSB1 = SP0JWSB1 + 1;
      SP0JWSB2 = SP0JWSB2 + 1;
    end
    if (SP1REC.SP1LIFEF == "Y")
      SP6REC.XOTCD = "**";
    end
    SP0JW01.SP0JWT1 = VGVar.currentFormattedTime;
    SP0JW01.SP0JWTH2 = SP0JW01.SP0JWTH1;
    SP0JW01.SP0JWTM2 = SP0JW01.SP0JWTM1;
    SP6REC.ZZZCHGTM = SP0JW01.SP0JWT2;
    SP0JW01.SP0JWD = VGVar.currentShortGregorianDate;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    if (SP0JW01.SP0JWD2 > 600000)
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
      SP0JW01.SP0JWD1 = 019;
   /*  */
   /* ****************************** Y2K IN BEGIN ***************************/
   /*  */
    else
      SP0JW01.SP0JWD1 = 020;
    end
   /*  */
   /* ****************************** Y2K IN END *****************************/
   /*  */
    SP6REC.ZZZCHGDT = SP0JW01.SP0JWD;
    call "IO4220" ("U ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* good update*/
      SP0JW01.SP0JWMSG = "DATA BASE UPDATED ---------- CONTINUE";
      set SP0JM100.SP0JMLVL cursor;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* bac update*/
        converseLib.validationFailed(77);
        SP0JW01.SP0JWMSG = "SORRY, DATA HAS BEEN UPDATED. TRY AGAIN.";
        SP0JW01.SP0JWUPF = "N";
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0J   ";
        TA1REC.TA1LOCAT[1] = "U       ";
        TA1REC.TA1LOCAT[2] = "SP0JS75 ";
        TA1REC.TA1LOCAT[3] = "IO4220  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0JM100";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VTIERS01";
        TA1TBLKE = SP6REC.SP6KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
       /* the vortyp01/vtiers01 may have been deleted by others*/
      converseLib.validationFailed(78);
      SP0JW01.SP0JWMSG = "PLEASE BACK-OUT AND TRY AGAIN.";
      SP0JW01.SP0JWUPF = "N";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0J   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0JS75 ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0JM100";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

end // end SP0JS75

// add abrev.to terms codes.
Function SP0JS76()



   /* ************************************************************/
      /* abreviations are added to the map (sp0j100)*/
   /* ************************************************************/

  SP0JW01.SP0JWSB1 = 9;


  while (SP0JW01.SP0JWSB1 > 0)

        /* -------------------------------------  payment terms.*/
    if (SP0JM100.SP6TPTCD[SP0JWSB1] > "  ")
      if (SP0JM100.SP6TPTCD[SP0JWSB1] in XPTTBL.XPTCD)
        SP0JW01.SP0JWABV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex > 0)
        SP0JM100.XPTABRV[SP0JWSB1] = SP0JW01.SP0JWABV;
      else
        SP0JM100.XPTABRV[SP0JWSB1] = "     ";
      end
    end

        /* -------------------------------------  ad allowance code*/
    if (SP0JM100.SP6TAACD[SP0JWSB1] > "  ")
      if (SP0JM100.SP6TAACD[SP0JWSB1] in XAATBL.XAACD)
        SP0JW01.SP0JWABV = XAATBL.XAAABRV[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex > 0)
        SP0JM100.XAAABRV[SP0JWSB1] = SP0JW01.SP0JWABV;
      else
        SP0JM100.XAAABRV[SP0JWSB1] = "    ";
      end
    end

        /* -------------------------------------  coop code*/
    if (SP0JM100.SP6TCOCD[SP0JWSB1] > "  ")
      if (SP0JM100.SP6TCOCD[SP0JWSB1] in XCPTBL.XCPCD)
        SP0JW01.SP0JWABV = XCPTBL.XCPABRV[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex > 0)
        SP0JM100.XCPABRV[SP0JWSB1] = SP0JW01.SP0JWABV;
      else
        SP0JM100.XCPABRV[SP0JWSB1] = "    ";
      end
    end

        /* -------------------------------------  trade discount*/
    if (SP0JM100.SP6TTDCD[SP0JWSB1] > "  ")
      if (SP0JM100.SP6TTDCD[SP0JWSB1] in XTDTBL.XTDCD)
        SP0JW01.SP0JWABV = XTDTBL.XTDABRV[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex > 0)
        SP0JM100.XTDABRV[SP0JWSB1] = SP0JW01.SP0JWABV;
      else
        SP0JM100.XTDABRV[SP0JWSB1] = "   ";
      end
    end


    SP0JW01.SP0JWSB1 = SP0JW01.SP0JWSB1 - 1;
  end


   /* ****  fill in first line definitions. **********/


      /* -------------------------------------  payment terms.*/
  if (SP0JM100.SP0JMPTC > "  ")
    if (SP0JM100.SP0JMPTC in XPTTBL.XPTCD)
      SP0JW01.SP0JWABV = XPTTBL.XPTABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0)
      SP0JM100.SP0JMPTD = SP0JW01.SP0JWABV;
    else
      SP0JM100.SP0JMPTD = "     ";
    end
  end

      /* -------------------------------------  ad allowance code*/
  if (SP0JM100.SP0JMAAC > "  ")
    if (SP0JM100.SP0JMAAC in XAATBL.XAACD)
      SP0JW01.SP0JWABV = XAATBL.XAAABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0)
      SP0JM100.SP0JMAAD = SP0JW01.SP0JWABV;
    else
      SP0JM100.SP0JMAAD = "    ";
    end
  end

      /* -------------------------------------  coop code*/
  if (SP0JM100.SP0JMCOC > "  ")
    if (SP0JM100.SP0JMCOC in XCPTBL.XCPCD)
      SP0JW01.SP0JWABV = XCPTBL.XCPABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0)
      SP0JM100.SP0JMCOD = SP0JW01.SP0JWABV;
    else
      SP0JM100.SP0JMCOD = "    ";
    end
  end

      /* -------------------------------------  trade discount*/
  if (SP0JM100.SP0JMTDC > "  ")
    if (SP0JM100.SP0JMTDC in XTDTBL.XTDCD)
      SP0JW01.SP0JWABV = XTDTBL.XTDABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0)
      SP0JM100.SP0JMTDD = SP0JW01.SP0JWABV;
    else
      SP0JM100.SP0JMTDD = "   ";
    end
  end



end // end SP0JS76

//*** RECORD=SP0JW01 ****
// **
// ***********************
Record SP0JW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0JWUPF SP0JWUPF ; 
  10 SP0JWMSG SP0JWMSG ; 
  10 SP0JWMOP SP0JWMOP [20] ; 
  10 SP0JWD SP0JWD ; 
    20 SP0JWD1 SP0JWD1 ; 
    20 SP0JWD2 SP0JWD2 ; 
  10 SP0JWT1 SP0JWT1 ; 
    20 SP0JWTH1 SP0JWTH1 ; 
    20 SP0JWTC1 SP0JWTC1 ; 
    20 SP0JWTM1 SP0JWTM1 ; 
    20 SP0JWTC2 SP0JWTC2 ; 
    20 SP0JWTS1 SP0JWTS1 ; 
  10 SP0JWT2 SP0JWT2 ; 
    20 SP0JWTH2 SP0JWTH2 ; 
    20 SP0JWTM2 SP0JWTM2 ; 
  10 SP0JWVF SP0JWVF ; 
  10 SP0JWVF1 SP0JWVF1 ; 
  10 SP0JWMDF SP0JWMDF ; 
  10 SP0JWHDM SP0JWHDM ; 
  10 SP0JWSDM SP0JWSDM ; 
  10 SP0JWSID SP0JWSID ; 
  10 SP0JWACF SP0JWACF ; 
  10 SP0JWAPF SP0JWAPF ; 
  10 SP0JWSB1 SP0JWSB1 ; 
  10 SP0JWSB2 SP0JWSB2 ; 
  10 SP0JWSB3 SP0JWSB3 ; 
  10 SP0JWSB4 SP0JWSB4 ; 
  10 SP0JWTSZ SP0JWTSZ ; 
  10 SP0JWSZ2 SP0JWSZ2 ; 
  10 SP0JWPOS SP0JWPOS ; 
  10 SP0JWTBL SP0JWTBL ; 
    15 XOTCD XOTCD [200] ; 
    15 SP2UIND SP2UIND [200] ; 
  10 SP0JWTL2 SP0JWTL2 ; 
    15 SP1ID SP1ID [200] ; 
    15 KUCCOID KUCCOID [200] ; 
    15 KUMSTRID KUMSTRID [200] ; 
    15 XNXCD XNXCD [200] ; 
    15 XGPCD XGPCD [200] ; 
  10 SP5KEY SP5KEY ; 
  10 SP0JWTL3 SP0JWTL3 ; 
    15 SP0JWFIL SP0JWFIL [200] ; 
    15 SY1STNBR SY1STNBR [200] ; 
    15 SY2CLRID SY2CLRID [200] ; 
    15 XDMCD XDMCD [200] ; 
  10 SP0JWTL4 SP0JWTL4 ; 
    15 SP1STAT SP1STAT [200] ; 
    15 SP1NM SP1NM [200] ; 
    15 SP1ABRV SP1ABRV [200] ; 
    15 XNDCD XNDCD [200] ; 
  10 XFMCD XFMCD ; 
  10 XFMDESC XFMDESC ; 
  10 XAUCD XAUCD ; 
  10 XAUDESC XAUDESC ; 
  10 XSGCD XSGCD ; 
  10 XSGDESC XSGDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP0JWOTH SP0JWOTH ; 
  10 SP0JWLVL SP0JWLVL ; 
  10 SP0JWPCT SP0JWPCT ; 
  10 SP0JWTTD SP0JWTTD ; 
  10 SP0JWTCO SP0JWTCO ; 
  10 SP0JWTAA SP0JWTAA ; 
  10 SP0JWTPT SP0JWTPT ; 
  10 SP4KEY SP4KEY ; 
    15 SP0JWID SP0JWID ; 
    15 SP0JWKC SP0JWKC ; 
    15 SP0JWKM SP0JWKM ; 
    15 SP0JWXN SP0JWXN ; 
    15 SP0JWXG SP0JWXG ; 
  10 SP2DIND SP2DIND ; 
  10 SP0JWF3 SP0JWF3 ; 
  10 SP0JWFL1 SP0JWFL1 ; 
  10 SP0JWFL2 SP0JWFL2 ; 
  10 SP0JWFL3 SP0JWFL3 ; 
  10 SP0JWFL4 SP0JWFL4 ; 
  10 SP0JWFL5 SP0JWFL5 ; 
  10 SP0JWFL6 SP0JWFL6 ; 
  10 SP0JWFL7 SP0JWFL7 ; 
  10 SP0JWFL8 SP0JWFL8 ; 
  10 SP0JWFL9 SP0JWFL9 ; 
  10 SP0JWFLA SP0JWFLA ; 
  10 XSMREPFL XSMREPFL ; 
  10 SP0JWHTY SP0JWHTY ; 
  10 SP0JWDT1 SP0JWDT1 ; 
    15 SP0JWDC1 SP0JWDC1 ; 
    15 * num(6) ; 
  10 SP0JWDT2 SP0JWDT2 ; 
    15 SP0JWDC2 SP0JWDC2 ; 
    15 * num(6) ; 
  10 SP0JWOT SP0JWOT ; 
  10 SP0JWABV SP0JWABV ; 
  10 SP0JWPS2 SP0JWPS2 ; 
end // end SP0JW01

//*** RECORD=SP0JW02 ****
// ** work area for sorting data on sp0jm100
// ***********************
Record SP0JW02 type basicRecord
  10 SP0JWR2 SP0JWR2 [9] ; 
    20 SP6TIER SP6TIER ; 
    20 SP6MDISC SP6MDISC ; 
    20 SP6TAACD SP6TAACD ; 
    20 SP6TCOCD SP6TCOCD ; 
    20 SP6TTDCD SP6TTDCD ; 
    20 SP6TPTCD SP6TPTCD ; 
end // end SP0JW02

// terms abrev. temp hold area
DataItem SP0JWABV char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all company flag
DataItem SP0JWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag
DataItem SP0JWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem SP0JWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century
DataItem SP0JWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem SP0JWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// centry
DataItem SP0JWDC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// centry
DataItem SP0JWDC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare date 1
DataItem SP0JWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare date 2
DataItem SP0JWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view only flag....no update
DataItem SP0JWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for sp1id & gpcd
DataItem SP0JWFIL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0JWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt
DataItem SP0JWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold type code......
DataItem SP0JWHTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold
DataItem SP0JWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec kuccoid hold
DataItem SP0JWKC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp4rec kumstrid hold
DataItem SP0JWKM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tiered level qty/dlr hold
DataItem SP0JWLVL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path
DataItem SP0JWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field-
DataItem SP0JWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field
DataItem SP0JWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// original order type
DataItem SP0JWOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold code
DataItem SP0JWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold
DataItem SP0JWPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table position
DataItem SP0JWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript ................
DataItem SP0JWPS2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp0jm100 sort key
DataItem SP0JWR2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem SP0JWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2
DataItem SP0JWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript3
DataItem SP0JWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript4
DataItem SP0JWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt
DataItem SP0JWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0JWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table size for tier
DataItem SP0JWSZ2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time #1
DataItem SP0JWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0JWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ad allowance hold
DataItem SP0JWTAA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type table
DataItem SP0JWTBL char(600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 1
DataItem SP0JWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0JWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// coop discount hold
DataItem SP0JWTCO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0JWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0JWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust company id table
DataItem SP0JWTL2 char(2800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product record table
DataItem SP0JWTL3 char(3400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s.p. browse table
DataItem SP0JWTL4 char(8200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time minute #1
DataItem SP0JWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0JWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// payment terms hold
DataItem SP0JWTPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time second #1
DataItem SP0JWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table size
DataItem SP0JWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade discount hold
DataItem SP0JWTTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws update flag
DataItem SP0JWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0JWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0JWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xgpcd hold
DataItem SP0JWXG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xnxcd hold
DataItem SP0JWXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

