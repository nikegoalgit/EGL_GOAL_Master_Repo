package sp0t;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ko.common.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0T ****
// sales program inquiry- order type only
// 
// overview:
// 
// 
// date created:  this function of sales program inquiry was
//                created via cut & paste in june, 1988.y, 1987
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// 06/07/88   s.job     sp0t created from sp0j
// 12/16/88   JWOOD      ADDED NONCSP OPTION ON CALLS
// 12/16/88   JWOOD      ADDED XSSEGTR LOGIC
// 07/06/89   rcoron    changed screen and logic to use the
//                      new tiers table to pro-rate discounts
//                      on trade, co-op, ad allowances, and
//                      payment terms.
// 10/05/89   sjob      e 2: add abreviations to terms display.
// 11/12/90   sjob      e 3: EXTEND DISPLAY FIELD FOR SP2MNDLR
//                       TO HOLD 9,999,999.99
// 02/25/91   sjob      e0:delete all reference to freight cd.
// 03/13/92   scantr    db changes & clean up records list
// 02/28/94   dmeier    db 2 changes - removed unused sy5rec
// *********************
Program SP0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KOFREC KOFREC; // record
  SP0TW01 SP0TW01; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAATBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use SP0TM.SP0TM030,  // forms
      SP0TM.SP0TM050, 
      SP0TM.SP0TM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0T010: SP0T010();



    if (SP0TM030.SP1ID <= " ") /* there still is no s.p.id*/
      SP0TM030.SP0TMMSG = "PLEASE ENTER A SALES PROGRAM ID ";
      goto SP0T010;
    else
      if (SP0TM030.SP1NM == "NEW SPID")
        SP0TM030.SP1NM = " ";
        COMMAREA.CAITEM = SP0TM030.SP1ID;
        goto SP0T010;
      else
        SP0TM030.SP0TMMSG = "SELECT AN ORDER TYPE     ";
      end
    end


    if (SP0TW01.SP0TWMSG == " ")
      goto SP0T020;
    else
      SP0TM030.SP0TMMSG = SP0TW01.SP0TWMSG;
      goto SP0T020;
    end



    SP0T020: SP0T020();



    if (SP0TW01.SP0TWMSG != " ")
      SP0TM030.SP0TMMSG = SP0TW01.SP0TWMSG;
    end


    goto SP0T030;



    SP0T030: SP0T030();


    if (SP0TM030.SP1ID == " "
     || SP0TM030.SP1ID != SP0TW01.SP1ID)
      COMMAREA.CAITEM = SP0TM030.SP1ID;
      goto SP0T010;
    end


    if (converseVar.validationMsgNum > 0
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SP0T030;
    end


    if (converseVar.eventKey is enter
     && SP0TM030.SP0TWMOP[SP0TWSB2] == "S")
      set SP0TM050 initial;
      SP0TM050.SP0TMMMG = "PF3 TO EXIT                     ";
      goto SP0T040; /* to view order type dates.*/
    else
      goto SP0T030;
    end



    SP0T040: SP0T040();


    goto SP0T050;


    SP0T050: SP0T050();


    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      goto SP0T030;
    end

    if (converseVar.validationMsgNum == 0
     && converseVar.eventKey is enter
     && SP0TW01.SP0TWSDM == "Y") /* select option was picked*/
      if (SP0TM050.SP0TMVTM is data)
        goto SP0T060;
      end /* set up tiered disc map*/
    end

    goto SP0T050;



    SP0T060: SP0T060();


    goto SP0T070;



    SP0T070: SP0T070();


    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      goto SP0T050;
    else
      goto SP0T070;
    end



  end // end main
end // end SP0T

// order s.p.id changer..*.
Function SP0T010()



  XSENTRY();


  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  set SP0TW01 empty;
  converseLib.validationFailed(0);

  if (COMMAREA.CAITEM == " ")
    set SP0TM030 initial;
    SP0TS10(); /* set up receive screen*/
  else
    SP0TM030.SP1ID = COMMAREA.CAITEM;
    SP0TW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAINQFL = COMMAREA.CAINQFL;
    COMMAREA.CAITEM = " ";
    SP0TS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0TM030.SP1ID > " ")
    exit stack;
  end

  SP0TM030.SP1NM = "NEW SPID";



  converse SP0TM030 ;


  SP0TS14(); /* check fastpathing*/
  SP0TS13(); /* reset map attributes*/




end // end SP0T010

// select set * s.p. order types
Function SP0T020()


   /* ************************************************************/
      /* the purpose of this process is to set up a working*/
      /* storage array of order types that have been set up for*/
      /* the sales program selected.  this array of order types*/
      /* will be used for subsequent processing by the user.*/
      /* the array has a limit of 300 associated which should*/
      /* be 25 to 50 times larger than any anticipated size for*/
      /* the table.*/
   /* ************************************************************/



  SP0TW01.SP0TWMSG = " "; /* clear w.s error message*/
  SP0TW01.SP0TWTBL = " "; /* clear out w.s. array*/

  set SP2REC empty;
  set SQLCA empty;

  SP2REC.SP1ID = SP1REC.SP1ID;

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* position cursor*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0TW01.SP0TWTSZ = +0;
    SP0TW01.SP0TWSB1 = +1;
    while (SP0TW01.SP0TWSB1 <= +300
     && SQLCA.VAGen_SQLCODE == +0)
      SP0TS20(); /* select next sp2rec*/
    end
    call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0TW01.SP0TWTSZ = SP0TW01.SP0TWSB1 - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0T   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0T020 ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0TM020";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
    exit stack;
  end



   /* ************************************************************/
      /* select the first 14 order types for this s.p. and*/
      /* show on map sp0jm030.*/
   /* ************************************************************/



  SP0TS21();



end // end SP0T020

// order type listing for s.p.*
Function SP0T030()


      /* ********************************************************/
      /* *  this process is used to control access to order    **/
      /* *  types that are valid for a sales program.          **/
      /* ********************************************************/

  SP0TM030.SP0TMTDT = VGVar.currentShortGregorianDate;
  SP0TM030.SP1ID = SP2REC.SP1ID;
  SP0TM030.SP1NM = SP1REC.SP1NM;
  SP0TM030.SP1STAT = SP1REC.SP1STAT;
  SP0TW01.SP0TWSB1 = 0;


  if (converseVar.eventKey is pf8)
    SP0TS31(); /* scroll forward*/
  else
    if (converseVar.eventKey is pf7)
      SP0TS32(); /* scroll backward*/
    end
  end

  SP0TW01.SP0TWSB1 = 0;
  while (SP0TW01.SP0TWSB1 < 14)
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
    if (SP0TM030.XOTCD[SP0TWSB1] > " ")
      set SP0TM030.SP0TWMOP[SP0TWSB1] initialAttributes;
    else
      set SP0TM030.SP0TWMOP[SP0TWSB1] protect, invisible;
    end
  end


  converse SP0TM030 ;


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    SP0TS33(); /* ;   main edit routine*/
  end



end // end SP0T030

// init. and reset-
Function SP0T040()


  SP0TM050.SP0TMTDT = VGVar.currentShortGregorianDate;
  SP0TM050.XXXERRID = "SP0T050";
  SP0TM050.XXXRVNBR = "02";
  SP0TM050.SP1ID = SP0TM030.SP1ID;
  SP0TM050.XOTCD = SP0TM030.XOTCD[SP0TWPOS];
  SP0TM050.SP1LIFEF = SP1REC.SP1LIFEF;
  SP0TM050.SP1STAT = SP1REC.SP1STAT;
  if (SP1REC.SP1LIFEF == "N")
    SP0TM050.SP0TMPFO = "5:UPDATE";
  else
    SP0TM050.SP0TMPFO = "        ";
  end


  if (SP0TM030.SP0TWMOP[SP0TWPOS] == "S") /* order type selected*/
    SP2REC.SP1ID = SP1REC.SP1ID;
    SP2REC.XOTCD = SP0TM030.XOTCD[SP0TWPOS];
    SP0TS47(); /* *** get vxotyp01 order type record for sp2rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      move SP2REC to SP0TM050 withV60Compat;
      SP0TM030.SP0TWMOP[SP0TWPOS] = "V";
      if (SP2REC.SP2DIND == "D")
        SP0TM050.SP0TMMDL = "*";
        SP0TM050.SP0TMMQT = " ";
      else
        SP0TM050.SP0TMMDL = " ";
        SP0TM050.SP0TMMQT = "*";
      end
    end
  end

  if (SP0TM050.SP2SLSVF == " ") /* default the sales vol flag to yes.*/
    SP0TM050.SP2SLSVF = "Y";
  end



  SP0TS46(); /* validate net-bill allow flag*/



end // end SP0T040

// order type del/change for sp*
Function SP0T050()



  converse SP0TM050 ;



  COMMAREA.CAITEM = SP0TM050.CAITEM;

  SP0TS51(); /* main edit process*/



end // end SP0T050

// init. and reset-
Function SP0T060()


   /* ************************************************************/
      /* selects any quantity discounts for this s.p. and*/
      /* shows on map sp0tm100.*/
   /* ************************************************************/

  SP0TS61();



end // end SP0T060

// tiered discount screen
Function SP0T070()



   /* ************************************************************/
      /* views dollar/quantity discounts for sales programs.*/
   /* ************************************************************/

  SP0TM100.SP0TMMSG = SP0TW01.SP0TWMSG;
   /* MOVE 0 TO SP0TW01.SP0TWSB2;*/
   /* MOVE 0 TO SP0TW01.SP0TWSB1;*/


  converse SP0TM100 ;



  COMMAREA.CAITEM = SP0TM100.CAITEM;


  SP0TS71(); /* main edit process*/



end // end SP0T070

// set up sp1id receive screen *
Function SP0TS10()



  set SP0TM030.SP1ID cursor, bold;
  set SP0TM030.SP1NM protect, invisible;
  set SP0TM030.SP1STAT protect, invisible;

  SP0TW01.SP0TWSB1 = 1;
  while (SP0TW01.SP0TWSB1 <= 14)
    SP0TM030.SP0TWMOP[SP0TWSB1] = " ";
    set SP0TM030.SP0TWMOP[SP0TWSB1] protect, invisible;
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
  end

  SP0TM030.SP0TMMSG = "ENTER A SALES PROGRAM ID";



end // end SP0TS10

// validate sales program id *
Function SP0TS12()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0i....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0TW01.SP1ID;
  SP0TW01.SP0TWSB1 = 1;
  while (SP0TW01.SP0TWSB1 <= 14)
    SP0TM030.SP0TWMOP[SP0TWSB1] = " ";
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
  end
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0TM030 withV60Compat;
  else

     /* *******************************************************/
     /* *   if invalid sales program, transfer to sm0i       **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      SP0TM030.SP0TMMSG = "THIS SALES PROGRAM IS INVALID";
      SP0TW01.SP1ID = " ";
    else
      SP0TW01.SP0TWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0T";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0TS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0TM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0TS12

// reset sp1id receive screen*
Function SP0TS13()


  set SP0TM030.SP1ID cursor, bold;
  set SP0TM030.SP1NM initialAttributes;
  set SP0TM030.SP1STAT initialAttributes;



end // end SP0TS13

// edit for fast path, data mod*
Function SP0TS14()


   /* **********************************************************/
   /* ***** check fast pathing........                    ******/
   /* **********************************************************/

  if (SP0TM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0TM030.CATOAP;
    COMMAREA.CAITEM = SP0TM030.CAITEM;
    XSEXIT();
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0TM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end



end // end SP0TS14

// sp2rec sp for ord type table*
Function SP0TS20()


  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0TW01.XOTCD[SP0TWSB1] = SP2REC.XOTCD;
    if (SP2REC.XOTCD == SP0TW01.SP0TWOTH)
      SP0TW01.SP0TWPOS = SP0TW01.SP0TWSB1;
    end
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE != +100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0T   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0TS20 ";
      TA1REC.TA1LOCAT[3] = "IO0080  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0TM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VORTYP01";
      TA1TBLKE = SP2REC.SP2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0TS20

// to load 1st 14 order type*
Function SP0TS21()



   /* ************************************************************/
      /* select the first 14 order types for this s.p. and*/
      /* show on map sp0tm030.*/
   /* ************************************************************/


   /* ***************************************************/
      /* exit for a file i/o error in sp0ts20*/
   /* ***************************************************/

  if (converseVar.validationMsgNum != +0)
    return;
  end


  move SP1REC to SP0TM030 withV60Compat;


  SP0TW01.SP0TWPOS = SP0TW01.SP0TWPOS - 1; /* determines cursor position*/

  if (SP0TW01.SP0TWPOS > SP0TW01.SP0TWTSZ)
    SP0TW01.SP0TWPOS = SP0TW01.SP0TWTSZ - 2;
  end

  if (SP0TW01.SP0TWPOS < 0)
    SP0TW01.SP0TWPOS = 0;
  end

  SP0TW01.SP0TWSB1 = 0;

  while (SP0TW01.SP0TWSB1 < 14)
    SP0TW01.SP0TWPOS = SP0TW01.SP0TWPOS + 1;
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
    if (SP0TW01.SP0TWSB1 > SP0TW01.SP0TWTSZ)
      SP0TM030.XOTCD[SP0TWSB1] = " ";
      SP0TM030.XOTDESC[SP0TWSB1] = " ";
    else
      if (SP0TW01.XOTCD[SP0TWPOS] != " ")
        SP0TM030.XOTCD[SP0TWSB1] = SP0TW01.XOTCD[SP0TWPOS];
        if (SP0TW01.XOTCD[SP0TWPOS] in XOTTBL.XOTCD)
          SP0TM030.XOTDESC[SP0TWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0TW01.XOTCD[SP0TWPOS] == " ")
            SP0TM030.XOTDESC[SP0TWSB1] = "BLANK";
          else
            SP0TM030.XOTDESC[SP0TWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (SP0TW01.SP0TWTSZ == 0)
    SP0TM030.SP0TMMSG = "NO ORDER TYPES CURRENTLY EXIST FOR THIS S.P.";
    SP0TM030.VAGen_EZEMSG = "                                            ";
  end



end // end SP0TS21

// forward scroll - order types*
Function SP0TS31()


   /* **************************************/
      /* sp0ts31 user to scroll forward*/
   /* **************************************/



  if (SP0TW01.SP0TWTSZ <= 14)
    SP0TM030.SP0TMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



  if (SP0TM030.SP0TMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0TW01.SP0TWTSZ > 14)
    set SP0TM030 empty;
    SP0TM030.SP0TMTDT = VGVar.currentShortGregorianDate; /* date*/
    SP0TM030.SP1ID = SP1REC.SP1ID; /* sales program id*/
    SP0TM030.SP1NM = SP1REC.SP1NM; /* sales prog. name*/
    SP0TM030.SP1STAT = SP1REC.SP1STAT; /* status*/

    while (SP0TW01.SP0TWSB1 < 14)
      SP0TW01.SP0TWPOS = SP0TW01.SP0TWPOS + 1;
      SP0TW01.SP0TWSB1 = 1 + SP0TW01.SP0TWSB1;
      if (SP0TW01.SP0TWPOS > SP0TW01.SP0TWTSZ)
        SP0TM030.SP0TMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0TM030.XOTCD[SP0TWSB1] = " ";
        SP0TM030.XOTDESC[SP0TWSB1] = " ";
      else
        SP0TM030.SP0TMMSG = " ";
        SP0TM030.XOTCD[SP0TWSB1] = SP0TW01.XOTCD[SP0TWPOS];
        if (SP0TW01.XOTCD[SP0TWPOS] in XOTTBL.XOTCD)
          SP0TM030.XOTDESC[SP0TWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0TW01.XOTCD[SP0TWPOS] == " ")
            SP0TM030.XOTDESC[SP0TWSB1] = "BLANK";
          else
            SP0TM030.XOTDESC[SP0TWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0TW01.SP0TWPOS == SP0TW01.SP0TWTSZ)
    SP0TM030.SP0TMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0TS31

// backward scroll - order type*
Function SP0TS32()


   /* **************************************/
      /* sp0ts32 used to scroll backward*/
   /* **************************************/



  if (converseVar.eventKey is pf7)
    SP0TW01.SP0TWPOS = SP0TW01.SP0TWPOS - 28;
    if (SP0TW01.SP0TWPOS < 0)
      SP0TW01.SP0TWPOS = 0;
    end
  end



  if (SP0TM030.SP0TMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    set SP0TM030 empty;
    SP0TM030.SP0TMTDT = VGVar.currentShortGregorianDate;
    SP0TM030.SP1ID = SP1REC.SP1ID;
    SP0TM030.SP1NM = SP1REC.SP1NM;
    SP0TM030.SP1STAT = SP1REC.SP1STAT;

    while (SP0TW01.SP0TWSB1 < 14)
      SP0TW01.SP0TWPOS = SP0TW01.SP0TWPOS + 1;
      SP0TW01.SP0TWSB1 = 1 + SP0TW01.SP0TWSB1;
      if (SP0TW01.SP0TWPOS > SP0TW01.SP0TWTSZ)
        SP0TM030.SP0TMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
        SP0TM030.XOTCD[SP0TWSB1] = " ";
        SP0TM030.XOTDESC[SP0TWSB1] = " ";
      else
        SP0TM030.SP0TMMSG = " ";
        SP0TM030.XOTCD[SP0TWSB1] = SP0TW01.XOTCD[SP0TWPOS];
        if (SP0TW01.XOTCD[SP0TWPOS] in XOTTBL.XOTCD)
          SP0TM030.XOTDESC[SP0TWSB1] = XOTTBL.XOTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          if (SP0TW01.XOTCD[SP0TWPOS] == " ")
            SP0TM030.XOTDESC[SP0TWSB1] = "BLANK";
          else
            SP0TM030.XOTDESC[SP0TWSB1] = "INVALID CODE";
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0TW01.SP0TWPOS == 14)
    SP0TM030.SP0TMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0TS32

// main edit group for ord type*
Function SP0TS33()



   /* *********************************************************/
      /* pf/enter key selection.*/
   /* *********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    SP0TS34(); /* pf key/fast pathing?*/
  else
    converseLib.validationFailed(1);
    SP0TW01.SP0TWVF = "N";
    return;
  end


  SP0TS35(); /* check for entry*/



end // end SP0TS33

// edit for fast path-data mod*
Function SP0TS34()



  if (SP0TM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0TM030.CATOAP;
    COMMAREA.CAITEM = SP0TM030.CAITEM;
    XSEXIT();
    SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
    SP0TM030.CATOAP = " ";
    SP0TM030.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0TM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0TM030.SP0TMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0TS34

// validate select code
Function SP0TS35()


   /* ************************************************************/
      /* validate key entry is only a ' ' or 's'*/
   /* ************************************************************/

  SP0TM030.SP0TMMSG = " ";
  SP0TW01.SP0TWSB1 = 0;

  while (SP0TW01.SP0TWSB1 < 14)
    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
    set SP0TM030.SP0TWMOP[SP0TWSB1] normal;
  end

  SP0TW01.SP0TWSB2 = 1;

  if ("S" in SP0TM030.SP0TWMOP)
    SP0TW01.SP0TWSB2 = sysVar.arrayIndex; /* holds location for next screen*/
    SP0TW01.SP0TWPOS = sysVar.arrayIndex;
    SP0TM030.SP0TMMSG = " ";
  else
    while (SP0TW01.SP0TWSB2 < 14)
      if (SP0TM030.SP0TWMOP[SP0TWSB2] == " "
       || SP0TM030.SP0TWMOP[SP0TWSB2] == "V")
        SP0TW01.SP0TWSB2 = SP0TW01.SP0TWSB2 + 1;
            /* valid entry*/
      else
            /* invalid character*/
        set SP0TM030.SP0TWMOP[SP0TWSB2] cursor, modified, bold;
        converseLib.validationFailed(75);
        SP0TM030.SP0TMMSG = "error, valid entries ==>  s, ' ' OR EXIT";
        return;
      end
    end
  end


  if ("S" in SP0TM030.SP0TWMOP)
     /* o.k.*/
  else
    SP0TM030.SP0TMMSG = "PLEASE SELECT AN ORDER TYPE";
  end



end // end SP0TS35

// validate net-bill allow flag
Function SP0TS46()


  if (SP0TM050.SP2NTALW == " ")
    SP0TM050.SP2NTALW = "N";
    return;
  end



end // end SP0TS46

// sp2rec for ord type      *
Function SP0TS47()


  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != +100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0T   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0TS47 ";
      TA1REC.TA1LOCAT[3] = "IO0080  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0TM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VORTYP01";
      TA1TBLKE = SP2REC.SP2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0TS47

// 2nd edit group for order-type*
Function SP0TS51()



   /* *********************************************************/
      /* main edit process for map sp0tm050*/
   /* *********************************************************/

  SP0TM050.SP0TMMMG = " ";


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    if (converseVar.eventKey is pf5 /* pf5 is valid only if spgm is not seasonal*/
     && SP1REC.SP1LIFEF == "N")    
      /* valid key entered*/
    else
      converseLib.validationFailed(1);
      return;
    end
  end


  SP0TS53(); /* check entry fields*/

  SP0TS54(); /* fast path & pf keys*/


  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0)
    if (SP0TW01.SP0TWHDM == "N"
     && SP0TW01.SP0TWSDM == "N")
      SP0TM050.SP0TMMMG = "SELECT PF3 OR VIEW TERMS ";
      return;
    end
  end



end // end SP0TS51

// check for mod select-area
Function SP0TS53()


   /* ************************************************************/
      /* validate selections*/
   /* ************************************************************/

  SP0TW01.SP0TWSDM = "N";

  if (SP0TM050.SP0TMVTM != " ")
    SP0TM050.SP0TMVTM = "S";
    SP0TW01.SP0TWSDM = "Y";
  end

  if (SP0TW01.SP0TWSDM == "Y") /* select item picked*/
    SP0TW01.SP0TWMDF = "Y";
  end



end // end SP0TS53

// edit for fast path option,mdt*
Function SP0TS54()


  if (converseVar.eventKey is pf5)
    SP0TW01.SP0TWSPI = SP0TM050.SP1ID;
    SP0TW01.SP0TWXOT = SP0TM050.XOTCD;
    COMMAREA.CAITEM = SP0TW01.SP0TWKEY;
    COMMAREA.CATOAP = "SP0K";
    COMMAREA.CAFROMAP = "SP0T";
    XSEXIT();
    SP0TM050.SP0TMMMG = COMMAREA.CAMSG;
    SP0TM050.CATOAP = " ";
    SP0TM050.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end





  if (SP0TM050.CATOAP != " ")
    COMMAREA.CATOAP = SP0TM050.CATOAP;
    COMMAREA.CAITEM = SP0TM050.CAITEM;
    XSEXIT();
    SP0TM050.SP0TMMMG = COMMAREA.CAMSG;
    SP0TM050.CATOAP = " ";
    SP0TM050.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0TM050.SP0TMMMG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf3)
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0TM050.SP0TMMMG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0TS54

// sp3rec sp for quantity disc-*
Function SP0TS61()


   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the quantity info to sp0tm100.*/
   /* ************************************************************/

  set SP0TM100 initial;
  SP0TM100.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0TM100.XXXERRID = "SP0T070";
  SP0TM100.XXXRVNBR = "01";

  set SP6REC empty;
  SP6REC.SP1ID = SP2REC.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**";
  else
    SP6REC.XOTCD = SP0TM030.XOTCD[SP0TWPOS];
  end


  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SP6REC to SP0TM100 withV60Compat;
    SP0TW01.SP0TWSB1 = 2;
    while (SP0TW01.SP0TWSB1 < 11)
      if (SP0TM100.SP6TIER[SP0TWSB1] == 0)
        set SP0TM100.SP6TIER[SP0TWSB1] skip, invisible;
        set SP0TM100.SP6MDISC[SP0TWSB1] skip, invisible;
      else
        set SP0TM100.SP6TIER[SP0TWSB1] initialAttributes;
        set SP0TM100.SP6MDISC[SP0TWSB1] initialAttributes;
      end
      SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 + 1;
    end
  else
    SP0TM100.XXXERRID = "SP0TS61";
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0T   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0TS61 ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0TM100";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  SP0TM100.SP1ID = SP0TM050.SP1ID;
  SP0TM100.XOTCD = SP0TM030.XOTCD[SP0TWPOS];
  SP0TM100.SP1LIFEF = SP1REC.SP1LIFEF;
  SP0TM100.SP1STAT = SP1REC.SP1STAT;
  SP0TM100.SP0TMCP1 = 100.00 - SP0TM100.SP6TDPCT;
  SP0TM100.SP0TMCP2 = 100.00 - SP0TM100.SP6AAPCT;

  if (SP2REC.SP2DIND == "D")
    SP0TM100.SP0TMMEA = "DOLLARS";
  else
    SP0TM100.SP0TMMEA = " UNITS ";
  end

  SP0TS62(); /* fill in abreviations for discounts*/



end // end SP0TS61

// add abrev.to terms codes.
Function SP0TS62()



   /* ************************************************************/
      /* abreviations are added to the map (sp0t100)*/
   /* ************************************************************/

  SP0TW01.SP0TWSB1 = 10;


  while (SP0TW01.SP0TWSB1 > 0)

        /* -------------------------------------  payment terms.*/
    if (SP0TM100.SP6TPTCD[SP0TWSB1] > "  ")
      if (SP0TM100.SP6TPTCD[SP0TWSB1] in XPTTBL.XPTCD)
        SP0TW01.SP0TWABV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      end
      SP0TM100.XPTABRV[SP0TWSB1] = SP0TW01.SP0TWABV;
    end

        /* -------------------------------------  ad allowance code*/
    if (SP0TM100.SP6TAACD[SP0TWSB1] > "  ")
      if (SP0TM100.SP6TAACD[SP0TWSB1] in XAATBL.XAACD)
        SP0TW01.SP0TWABV = XAATBL.XAAABRV[sysVar.arrayIndex];
      end
      SP0TM100.XAAABRV[SP0TWSB1] = SP0TW01.SP0TWABV;
    end

        /* -------------------------------------  coop code*/
    if (SP0TM100.SP6TCOCD[SP0TWSB1] > "  ")
      if (SP0TM100.SP6TCOCD[SP0TWSB1] in XCPTBL.XCPCD)
        SP0TW01.SP0TWABV = XCPTBL.XCPABRV[sysVar.arrayIndex];
      end
      SP0TM100.XCPABRV[SP0TWSB1] = SP0TW01.SP0TWABV;
    end

        /* -------------------------------------  trade discount*/
    if (SP0TM100.SP6TTDCD[SP0TWSB1] > "  ")
      if (SP0TM100.SP6TTDCD[SP0TWSB1] in XTDTBL.XTDCD)
        SP0TW01.SP0TWABV = XTDTBL.XTDABRV[sysVar.arrayIndex];
      end
      SP0TM100.XTDABRV[SP0TWSB1] = SP0TW01.SP0TWABV;
    end


    SP0TW01.SP0TWSB1 = SP0TW01.SP0TWSB1 - 1;
  end



end // end SP0TS62

// main edit for discount screen
Function SP0TS71()


   /* *********************************************************/
      /* initial edits & pf keys*/
   /* *********************************************************/

  SP0TW01.SP0TWMSG = " ";

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
    SP0TS73(); /* process pf key*/
  else
    converseLib.validationFailed(1);
    return;
  end



end // end SP0TS71

// edit for fast path
Function SP0TS73()


  if (SP0TM100.CATOAP != " ")
    COMMAREA.CATOAP = SP0TM100.CATOAP;
    COMMAREA.CAITEM = SP0TM100.CAITEM;
    XSEXIT();
    SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
    SP0TM100.CATOAP = " ";
    SP0TM100.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0TW01.SP0TWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0TS73

//*** RECORD=SP0TW01 ****
// ** main work record for sp0t - order type inquiry
// ***********************
Record SP0TW01 type basicRecord
  10 SP0TWMSG SP0TWMSG ; 
  10 SP0TWMOP SP0TWMOP [20] ; 
  10 SP0TWVF SP0TWVF ; 
  10 SP0TWMDF SP0TWMDF ; 
  10 SP0TWHDM SP0TWHDM ; 
  10 SP0TWSDM SP0TWSDM ; 
  10 SP0TWSID SP0TWSID ; 
  10 SP0TWSB1 SP0TWSB1 ; 
  10 SP0TWSB2 SP0TWSB2 ; 
  10 SP0TWTSZ SP0TWTSZ ; 
  10 SP0TWPOS SP0TWPOS ; 
  10 SP0TWTBL SP0TWTBL ; 
    15 XOTCD XOTCD [200] ; 
  10 SP0TWTL2 SP0TWTL2 ; 
    15 SP1ID SP1ID [200] ; 
  10 SP5KEY SP5KEY ; 
  10 SP0TWOTH SP0TWOTH ; 
  10 SP0TWQTY SP0TWQTY ; 
  10 SP0TWDDL SP0TWDDL ; 
  10 SP0TWPCT SP0TWPCT ; 
  10 SP2DIND SP2DIND ; 
  10 XSMREPFL XSMREPFL ; 
  10 SP0TWKEY SP0TWKEY ; 
    15 SP0TWSPI SP0TWSPI ; 
    15 SP0TWXOT SP0TWXOT ; 
  10 SP0TWABV SP0TWABV ; 
end // end SP0TW01

// terms abreviation temp.hold
DataItem SP0TWABV char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dollar amount holdx
DataItem SP0TWDDL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for header data mdtx
DataItem SP0TWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass key for sp0k
DataItem SP0TWKEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & pathx
DataItem SP0TWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field-x
DataItem SP0TWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message fieldx
DataItem SP0TWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold codex
DataItem SP0TWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent holdx
DataItem SP0TWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table positionx
DataItem SP0TWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// discount quantity holdx
DataItem SP0TWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1x
DataItem SP0TWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2x
DataItem SP0TWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdtx
DataItem SP0TWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. idx
DataItem SP0TWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales program
DataItem SP0TWSPI char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type tablex
DataItem SP0TWTBL char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust company id tablex
DataItem SP0TWTL2 char(800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table sizex
DataItem SP0TWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for name & abbr entryx
DataItem SP0TWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type
DataItem SP0TWXOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

