package sp0u;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ko.common.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0U ****
// sales program add and change csp program
// 
// overview:
// 
// 
// date created:
// 
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// 02/28/87   s.job     change: allow a display only of product
//                      detail screen (sp0um300) when sales
//                      program is/has been active.
// 03/02/87   s.job     change: screen defalults on sp0um030
// 03/04/87   s.job     change: sp0u310 allowing added product
//                      to active sales programs.
// may 1987   s.job    divided sp0u by function into 5 app.
//                        sp0f: product
//                        sp0g: customer
//                        sp0h: in store promo
//                        sp0j: order
//                      all of the above are "force fastpathed"
//                      into from the new sp0u.
// may 1988   s.job    bumped the max # spgms from 200 to 300.
// 12-16-88   JWOOD    ADDED NONCSP OPTION TO CALLS
// 12-16-88   JWOOD    ADDED XSSEGTR LOGIC
// 02-09-89   S.JOB    E#0:modify screen display-only literals.
// 08-08-89   S.JOB    E#2:support seasonal sales programs.
// 03-13-90   S.JOB    E#11:increase browse capacity & options.
// 08-14-90   S.JOB    E#4:add a report flag for seasonal spgms
//                     e#8:allow selection of spgms by status.
// 10-03-90   S.JOB    E#1:SWITCH PROD CATEGORY FOR FAMILY CDS
// 04-22-91   S.JOB    E#1:add 'excluded products' to sp0f
// 06-13-91   S.JOB    limit specl customers to 10.
// 07-03-91   S.JOB    SUPPORT MULTIPLE LIFE CYCLES.
// 11-03-97   N.FIELD  Changed hardcoded century 19 to window
//                     in correct century. sp0us1r, sp0us1p,
//                     sp0u000,sp0us2a,sp0us1p,sp0us1r,sp0us2k
//                     sp0us2i,sp0us2l
// *********************
Program SP0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SP0UW01 SP0UW01; // record
  SP0UW02 SP0UW02; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLCTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use SP0UM.SP0UM010,  // forms
      SP0UM.SP0UM400
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0U000: SP0U000();



     /* **********************************************************/
        /* this flow will always transfer to sp0u010.*/
     /* **********************************************************/



    goto SP0U010;



    SP0U010: SP0U010();



    if (converseVar.eventKey is pf5) /* s.p. i.d. inquiry*/
      goto SP0U400;
    else
      goto SP0U010;
    end


    SP0U400: SP0U400();


    goto SP0U410;



    SP0U410: SP0U410();


    if (converseVar.eventKey is pa2
     || converseVar.eventKey is pf3
     || COMMAREA.CAITEM != " ") /* SELECTED A SPGM.*/
      converseLib.validationFailed(0);
      goto SP0U000;
    else
      goto SP0U410;
    end



  end // end main
end // end SP0U

// initialization and reset
Function SP0U000()



   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the sales program update program.*/
   /* ************************************************************/



  XSENTRY();


  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  set SP0UW01 empty;

  SP0UW01.SP0UWSID = "****";
  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/

  converseLib.clearScreen();
  set SP0UM010 initial;
  SP0UM010.SP0UMTDT = VGVar.currentShortGregorianDate;

  if (COMMAREA.CAITEM != " ")
    SP0UM010.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
    SP0US14(); /* set up....*/
  end


   /* ************************************************************/
end // end SP0U000

// s.p. header add/change
Function SP0U010()


  SP0UM010.SP0UMTDT = VGVar.currentShortGregorianDate;

  SP0UM010.SP0UMOP1 = " ";
  SP0UM010.SP0UMOP2 = " ";
  SP0UM010.SP0UMOP3 = " ";
  SP0UM010.SP0UMOP4 = " ";
  SP0UM010.SP0UMOP5 = " ";
  SP0UM010.SP0UMOP6 = " ";
  SP0UM010.SP0UMOP7 = " ";
  SP0UM010.SP0UMOP8 = " ";
  SP0UM010.SP0UMOP9 = " ";
  SP0UM010.SP0UMOPA = " ";


  converse SP0UM010 ;


  set SP0UM010.CATOAP normal;
  set SP0UM010.CAITEM normal;

  SP0UM010.SP0UMMSG = " ";

  SP0UW01.SP0UWUPF = " ";
  SP0UW01.SP0UWMDF = " ";
  SP0UW01.SP0UWHDM = " ";
  SP0UW01.SP0UWSDM = " ";
  SP0UW01.SP0UWOTH = " ";
  SP0UW01.SP4KEY = " ";
  SP0UW01.SP5KEY = " ";

  SP0UW01.SP0UWPOS = +1;

  SP0US11(); /* initial edit routine*/

  if (SP0UM010.SP1ID != SP0UW01.SP0UWSID)
    SP0US13(); /* process next sales program*/
  else
    SP0US15(); /* process current sales program*/
  end


   /* ************************************************************/
end // end SP0U010

// select set of sales programs
Function SP0U400()


  converseLib.validationFailed(0);
  set SP0UM400 empty;
  SP0UM400.SP0UMTDT = VGVar.currentShortGregorianDate; /* current date*/
  SP0UW01.SP0UWMST = " "; /* held selected s.p. status*/
  SP0UW01.SP0UWTL4 = " ";



end // end SP0U400

// scan sales programs
Function SP0U410()



  SP0UW01.SP0UWSB1 = 0;

  if (SP0UM400.SP0UMMST > " ")
    set SP0UM400.SP0UMMST initialAttributes; /* reset selection field*/
    if (SP0UM400.SP0UMMST != SP0UW01.SP0UWMST) /* change in select*/
      if (SP0UM400.SP0UMMST == "A" /* active sales programs*/
       || SP0UM400.SP0UMMST == "C" /* complete*/
       || SP0UM400.SP0UMMST == "P" /* partial*/
       || SP0UM400.SP0UMMST == "F") /* finished sales programs*/
        SP0USG4(); /* select set*/
        if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
          SP0USA4(); /* load working stor.*/
          SP0USI4(); /* is there a starting spgm?*/
          SP0USB4(); /* load 1st 14 to map*/
        else
          if (SQLCA.VAGen_SQLCODE == 911) /* database locked up*/
            converseLib.validationFailed(45);
          else
            SP0USH4(); /* log the abend*/
          end
        end
      else
        SP0UM400.SP0UMMSG = "VALID ENTRIES: \"A\", \"C\", \"P\", OR \"F\"";
        SP0UW01.SP0UWMST = " "; /* reset stat*/
        set SP0UM400.SP0UMMST modified, bold; /* requested status invalid*/
      end
    else
      if (SP0UM400.SP0UPROG > " ") /* adjust top of display*/
        SP0USI4(); /* starting spgm?*/
        SP0USB4(); /* load 1st 14 spgms*/
        SP0UM400.SP0UPROG = " "; /* reset display top*/
      else
        if (converseVar.eventKey is pf7) /* scroll back*/
          SP0USF4();
        else
          if (converseVar.eventKey is pf8) /* scroll forward*/
            SP0USE4();
          else
            SP0UM400.SP0UPROG = "   A"; /* reset top of array*/
            SP0USI4(); /* apply new top*/
            SP0USB4(); /* move first 14 to screen*/
            SP0UM400.SP0UPROG = "    "; /* reset top of array*/
          end
        end
      end
    end
  else
    SP0UM400.SP0UMMSG = "SELECT TYPE OF SALES PROGRAMS FOR VIEWING";
  end



  converse SP0UM400 ;



  set SP0UM400.SP0UMMST initialAttributes;
  SP0USC4();

  SP0USJ4(); /* SCAN SALES PROGRAMS FOR SELECTION*/



end // end SP0U410

// initial edit routine
Function SP0US11()


  SP0UM010.SP0UMMSG = " ";

  set SP0UM010.SP1ID cursor, normal;
  set SP0UM010.SP1LIFEF cursor, normal;
  set SP0UM010.SP0UMAC normal;
  set SP0UM010.SP1CALDT normal;
  set SP0UM010.SP6UOMI normal;
  set SP0UM010.SP1STAT normal;
  set SP0UM010.XLCCD[1] normal;
  set SP0UM010.XLCCD[2] normal;
  set SP0UM010.XLCCD[3] normal;
  set SP0UM010.CATOAP normal;
  set SP0UM010.CAITEM normal;


  SP0US1D(); /* check for modified data*/
  SP0US1E(); /* check for selected options*/
  SP0US1F(); /* validate attention keys*/

  if (SP0UW01.SP0UWHDM != "Y"
   && SP0UW01.SP0UWSDM != "Y")
    if (SP0UM010.SP1ID == " ")
      converseLib.clearScreen();
      set SP0UM010 initial;
      set SP0UM010.SP1ID cursor, bold;
      converseLib.validationFailed(2);
      SP0UW01.SP0UWSID = "****";
      exit stack;
    else
      SP0UM010.SP0UMMSG = "ENTER CHANGES OR SELECT AN OPTION";
      exit stack;
    end
  end


end // end SP0US11

// process next sales program
Function SP0US13()


  SP0UW01.SP0UWSID = SP0UM010.SP1ID;

  converseLib.clearScreen();
  set SP0UM010 initial;
  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0UW01.SP0UWSID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0UM010 withV60Compat;
    SP0UM010.SP0UMAC = "C";
    SP0UM010.SP0UMACD = "CHANGE";
    SP0UW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
    SP0UM010.SP0UMFL6 = "N";
    SP0UM010.SP0UMFLA = "N";
    SP0US1A(); /* set change screen attributes*/
    SP0US1G(); /* set option flags*/
    SP0US1H(); /* validate all product flag*/
    SP0US1I(); /* validate all company flag*/
    SP0US1J(); /* validate quality code*/
    SP0US1K(); /* validate life cycle code*/
    SP0US1L(); /* validate nike dept*/
    SP0US1M(); /* validate status*/
    SP0US1N(); /* validate name*/
    SP0UW01.SP1CALCF = SP0UM010.SP1CALCF; /* hold GEN. RPT FLAG*/
    SP0UW01.SP1LIFEF = SP0UM010.SP1LIFEF; /* hold seasonal y/n*/
    if (SP0UM010.SP1LIFEF == "Y") /* seasonal sales program*/
      SP0US2A(); /* get sp6rec - discount record*/
      SP0UW01.SP6UOMI = SP0UM010.SP6UOMI; /* hold unit of measure*/
    else
      SP0UM010.SP1LIFEF = "N"; /* seasonal*/
      SP0UM010.SP6UOMI = " "; /* unit of measure*/
      SP0UM010.SP1CALDT = 0; /* last calc date*/
      SP0UW01.SP1LIFEF = "N";
      SP0UW01.SP6UOMI = " "; /* unit of measure*/
    end
    if (SP0UM010.SP1CALCF != "Y")
      SP0UM010.SP1CALCF = "N";
    end
    exit stack;
  end

  SP0UM010.SP1ID = SP0UW01.SP0UWSID;
  if (SQLCA.VAGen_SQLCODE == +100)
    SP0UM010.SP0UMAC = "A";
    SP0UM010.SP0UMACD = "ADD";
    SP0US1B(); /* set add screen attributes*/
    exit stack;
  else
    SP0UW01.SP0UWSID = "****";
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U";
    TA1REC.TA1LOCAT[1] = "A      ";
    TA1REC.TA1LOCAT[2] = "SP0US13";
    TA1REC.TA1LOCAT[3] = "IO0070 ";
    TA1REC.TA1LOCAT[4] = "       ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    SP0US1O();
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    exit stack;
  end


end // end SP0US13

// process next sales program
Function SP0US14()


  SP0UW01.SP0UWSID = SP0UM010.SP1ID;

  converseLib.clearScreen();
  set SP0UM010 initial;
  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0UW01.SP0UWSID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0UM010 withV60Compat;
    SP0US1J(); /* quality code*/
    SP0US1K(); /* life cycle*/
    SP0US1L(); /* nike dept*/
    SP0US16(); /* status*/
    SP0US1N(); /* name*/
    SP0UW01.SP1LIFEF = SP0UM010.SP1LIFEF; /* hold seasonal y/n*/
    if (SP0UM010.SP1LIFEF == "Y") /* seasonal*/
      SP0US2A(); /* get seasonal tier unit of meas.*/
      SP0UW01.SP6UOMI = SP0UM010.SP6UOMI; /* hold unit of meas.*/
    end
    SP0UM010.SP0UMAC = "C";
    SP0UM010.SP0UMACD = "CHANGE";
    SP0UW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
    SP0UM010.SP0UMFL6 = "N";
    SP0UM010.SP0UMFLA = "N";
    SP0US1A(); /* set change screen attributes*/
    SP0US1G(); /* set option flags*/
    exit stack;
  end

  SP0UM010.SP1ID = SP0UW01.SP0UWSID;
  if (SQLCA.VAGen_SQLCODE == +100)
    SP0UM010.SP0UMAC = "A";
    SP0UM010.SP0UMACD = "ADD";
    SP0UM010.SP1LIFEF = "N"; /* seasonal life flag*/
    SP0UM010.SP1CALDT = 0; /* seasonal last calc.date*/
    SP0UM010.SP6UOMI = " "; /* seasonal tier unit of measure*/
    SP0US1B(); /* set add screen attributes*/
    exit stack;
  else
    SP0UW01.SP0UWSID = "****";
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U";
    TA1REC.TA1LOCAT[1] = "A      ";
    TA1REC.TA1LOCAT[2] = "SP0US14";
    TA1REC.TA1LOCAT[3] = "IO0070 ";
    TA1REC.TA1LOCAT[4] = "       ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    SP0US1O();
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    exit stack;
  end


end // end SP0US14

// process current sales program
Function SP0US15()


  SP0UW01.SP0UWUPF = "N"; /* reset valid update flag*/

  if (SP0UM010.SP1CALCF != "Y")
    SP0UM010.SP1CALCF = "N";
  end

  SP0US1H(); /* validate all product flag*/
  SP0US1I(); /* validate all company flag*/
  SP0US1J(); /* validate quality code*/
  SP0US1K(); /* validate life cycle code*/
  SP0US1L(); /* validate nike dept*/
  SP0US1Q(); /* check for status update*/
  SP0US1M(); /* validate status*/
  SP0US1N(); /* validate name*/
  SP0US2B(); /* validate seasonal data*/

  if (SP0UW01.SP0UWHDM != "Y")
    exit stack;
  end

  if (converseVar.validationMsgNum == +0
   && SP0UM010.SP0UMMSG == " ")
    SP0UW01.SP0UWUPF = "Y";
    if (SP0UM010.SP0UMACD == "ADD")
      SP0US1P(); /* add sp1rec*/
    else
      SP0US1R(); /* update sp1rec*/
      SP0US2C(); /* update seasonal information*/
    end
  end



end // end SP0US15

// status definition
Function SP0US16()


   /* *******************************************************/
         /* display sales program status definition*/
   /* *******************************************************/



  if (SP0UM010.SP1STAT == "P")
    SP0UM010.SP0UMSTD = "PARTIAL";
  end

  if (SP0UM010.SP1STAT == "C")
    SP0UM010.SP0UMSTD = "COMPLETE";
  end

  if (SP0UM010.SP1STAT == "A")
    SP0UM010.SP0UMSTD = "ACTIVE";
  end

  if (SP0UM010.SP1STAT == "I")
    SP0UM010.SP0UMSTD = "INACTIVE";
  end

  if (SP0UM010.SP1STAT == "F")
    SP0UM010.SP0UMSTD = "FINISHED";
  end



end // end SP0US16

// set change screen attributes
Function SP0US1A()


  set SP0UM010.SP1NM normal;
  set SP0UM010.SP1STAT normal;
  set SP0UM010.XNDCD normal;
  set SP0UM010.XLCCD[1] normal;
  set SP0UM010.XLCCD[2] normal;
  set SP0UM010.XLCCD[3] normal;
  set SP0UM010.XQACD normal;

  set SP0UM010.SP0UMOP1 cursor, normal;
  set SP0UM010.SP0UMOP2 normal;
  set SP0UM010.SP0UMOP3 normal;
  set SP0UM010.SP0UMOP4 normal;
  set SP0UM010.SP0UMOP5 normal;
  set SP0UM010.SP0UMOP6 normal;
  set SP0UM010.SP0UMFL6 normal;
  set SP0UM010.SP0UMOP7 normal;
  set SP0UM010.SP0UMOP8 normal;
  set SP0UM010.SP0UMOP9 normal;
  set SP0UM010.SP0UMOPA normal;
  set SP0UM010.SP0UMFLA normal;

  if (SP0UM010.SP1STAT == "P")
    return;
  end

  if (SP0UM010.SP1STAT == "C")
    set SP0UM010.SP1STAT normal;
    return;
  end

  if (SP0UM010.SP1STAT == "A"
   || SP0UM010.SP1STAT == "I")
    set SP0UM010.SP1STAT normal;
    set SP0UM010.XNDCD initialAttributes;
    set SP0UM010.XLCCD initialAttributes;
    set SP0UM010.XQACD initialAttributes;
    set SP0UM010.XLCCD[1] initialAttributes;
    set SP0UM010.XLCCD[2] initialAttributes;
    set SP0UM010.XLCCD[3] initialAttributes;
    return;
  end

  if (SP0UM010.SP1STAT == "F")
    set SP0UM010.XNDCD initialAttributes;
    set SP0UM010.XLCCD initialAttributes;
    set SP0UM010.XQACD initialAttributes;
    set SP0UM010.XLCCD[1] initialAttributes;
    set SP0UM010.XLCCD[2] initialAttributes;
    set SP0UM010.XLCCD[3] initialAttributes;
    set SP0UM010.SP0UMOP1 initialAttributes;
    set SP0UM010.SP0UMOP2 initialAttributes;
    set SP0UM010.SP0UMOP3 initialAttributes;
    set SP0UM010.SP0UMOP4 initialAttributes;
    set SP0UM010.SP0UMOP5 initialAttributes;
    set SP0UM010.SP0UMOP6 initialAttributes;
    set SP0UM010.SP0UMFL6 initialAttributes;
    set SP0UM010.SP0UMOP7 initialAttributes;
    set SP0UM010.SP0UMOP8 initialAttributes;
    set SP0UM010.SP0UMOP9 initialAttributes;
    set SP0UM010.SP0UMOPA initialAttributes;
    set SP0UM010.SP0UMFLA initialAttributes;
  end



end // end SP0US1A

// set add screen attributes
Function SP0US1B()


   /* *************************************************************/
      /* this statement group is used to set the screen*/
      /* up for a sales program that is to be added*/
   /* *************************************************************/


  set SP0UM010.SP1NM cursor, normal;
  set SP0UM010.SP1STAT initialAttributes;
  set SP0UM010.XNDCD normal;
  set SP0UM010.XLCCD[1] normal;
  set SP0UM010.XLCCD[2] normal;
  set SP0UM010.XLCCD[3] normal;
  set SP0UM010.XQACD normal;

  set SP0UM010.SP0UMOP1 initialAttributes;
  set SP0UM010.SP0UMOP2 initialAttributes;
  set SP0UM010.SP0UMOP3 initialAttributes;
  set SP0UM010.SP0UMOP4 initialAttributes;
  set SP0UM010.SP0UMOP5 initialAttributes;
  set SP0UM010.SP0UMOP6 initialAttributes;
  set SP0UM010.SP0UMOP7 initialAttributes;
  set SP0UM010.SP0UMOP8 initialAttributes;
  set SP0UM010.SP0UMOP9 initialAttributes;
  set SP0UM010.SP0UMOPA initialAttributes;


end // end SP0US1B

// check for modified data
Function SP0US1D()


   /* ************************************************************/
      /* this statement group is used to determine if any of*/
      /* the fields within the header screen have been*/
      /* modified.*/
   /* ************************************************************/


  SP0UW01.SP0UWHDM = "N";

  if (SP0UM010.SP1ID != SP0UW01.SP0UWSID)
    if (SP0UM010.SP1ID == " ")
      return;
    else
      SP0UW01.SP0UWHDM = "Y";
    end
  end

  if (SP0UM010.SP1NM is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.SP1STAT is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.XQACD is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.XLCCD[1] is modified) /* LIFE CYCLE 1*/
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.XLCCD[2] is modified) /* LIFE CYCLE 2*/
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.XLCCD[3] is modified) /* LIFE CYCLE 3*/
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.XNDCD is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.SP1CALCF is modified)
    SP0UW01.SP0UWHDM = "Y";
  else
    set SP0UM010.SP1CALCF initialAttributes;
  end

  if (SP0UM010.SP0UMFL6 is modified)
    SP0UW01.SP0UWHDM = "Y";
  else
    set SP0UM010.SP0UMFL6 initialAttributes;
  end

  if (SP0UM010.SP0UMFLA is modified)
    SP0UW01.SP0UWHDM = "Y";
  else
    set SP0UM010.SP0UMFLA initialAttributes;
  end

  if (SP0UM010.SP1LIFEF is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.SP1LIFEF == "Y"
   && SP0UM010.SP1CALDT is modified)
    SP0UW01.SP0UWHDM = "Y";
  end

  if (SP0UM010.SP1LIFEF == "Y"
   && SP0UM010.SP6UOMI is modified)
    SP0UW01.SP0UWHDM = "Y";
  end



end // end SP0US1D

// check for selected options
Function SP0US1E()


   /* ************************************************************/
      /* this statement group is used to determine if any of*/
      /* option fields on the sales program header screen*/
      /* have been selected*/
   /* ************************************************************/


  SP0UW01.SP0UWSDM = "N";

  if (SP0UM010.SP0UMOP1 != " "
   || SP0UM010.SP0UMOP2 != " "
   || SP0UM010.SP0UMOP3 != " "
   || SP0UM010.SP0UMOP4 != " "
   || SP0UM010.SP0UMOP5 != " "
   || SP0UM010.SP0UMOP6 != " "
   || SP0UM010.SP0UMOP7 != " "
   || SP0UM010.SP0UMOP8 != " "
   || SP0UM010.SP0UMOP9 != " "
   || SP0UM010.SP0UMOPA != " "
   || SP0UM010.SP0UMOPB != " ")
    SP0UW01.SP0UWSDM = "Y";
  end

  if (SP0UM010.SP0UMOPA != " ")
    set SP0UM010.SP0UMFLA cursor, normal;
  end

  if (SP0UM010.SP0UMOP6 != " ")
    set SP0UM010.SP0UMFL6 cursor, normal;
  end


end // end SP0US1E

// validate attention keys
Function SP0US1F()


   /* ************************************************************/
      /* this statement group is to edit for valid attention*/
      /* keys and valid fast path usage.  fast path cannot be*/
      /* used when data has been modified or options have been*/
      /* selected.*/
   /* ************************************************************/


  if (converseVar.eventKey is pf5) /* inquire on sales programs*/
    exit stack;
  end

  if (converseVar.eventKey is enter)
    if (SP0UM010.CATOAP != " ")
      if (SP0UW01.SP0UWMDF == "Y" /* data modified*/
       || SP0UW01.SP0UWSDM == "Y") /* option selected*/
        set SP0UM010.CATOAP normal;
        SP0UM010.SP0UMMSG = "CANNOT MIX UPDATES WITH FAST PATH";
        SP0UM010.CATOAP = " ";
        SP0UM010.CAITEM = " ";
        converseLib.validationFailed(5);
        return;
      end
    end
  end


  if (SP0UM010.SP0UMOP1 != " ") /* order type*/
    SP0UM010.CATOAP = "SP0J";
    SP0UM010.CAITEM = SP0UM010.SP1ID;
  end

  if (SP0UM010.SP0UMOP2 != " ") /* in store promo*/
    SP0UM010.CATOAP = "SP0H";
    SP0UM010.CAITEM = SP0UM010.SP1ID;
  end

  if (SP0UM010.SP0UMOP3 != " ") /* products*/
    SP0UM010.CATOAP = "SP0F";
    SP0UM010.CAITEM = SP0UM010.SP1ID;
  end

  if (SP0UM010.SP0UMOP4 != " ") /* product family codes*/
    SP0UM010.CATOAP = "SP0F";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "B"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end

  if (SP0UM010.SP0UMOP5 != " ") /* product sport activity codes*/
    SP0UM010.CATOAP = "SP0F";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "C"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end

  if (SP0UM010.SP0UMOPB != " ") /* product exclusions*/
    SP0UM010.CATOAP = "SP0F";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "D"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end

  if (SP0UM010.SP0UMOP7 != " ") /* customers*/
    SP0UM010.CATOAP = "SP0G";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "A"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end

  if (SP0UM010.SP0UMOP8 != " ") /* customer acct types*/
    SP0UM010.CATOAP = "SP0G";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "B"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end

  if (SP0UM010.SP0UMOP9 != " ") /* spec. cust. groups*/
    SP0UM010.CATOAP = "SP0G";
    SP0UW01.SP0UWID1 = SP0UM010.SP1ID; /* hold spid*/
    SP0UW01.SP0UWL1 = "C"; /* hold application part*/
    SP0UM010.CAITEM = SP0UW01.SP0UWLOC; /* move entire key*/
  end



  if (SP0UM010.CATOAP != " ")
    COMMAREA.CATOAP = SP0UM010.CATOAP;
    COMMAREA.CAITEM = SP0UM010.CAITEM;
    XSEXIT();
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    SP0UM010.CATOAP = " ";
    SP0UM010.CAITEM = " ";
    converseLib.validationFailed(99);
    exit stack;
  end


  if (converseVar.eventKey is enter)
    return;
  else
    if (converseVar.eventKey is pa2 /* cancel application*/
     || converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "SP0M";
      XSEXIT();
      SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
      converseLib.validationFailed(99);
      exit stack;
    end
  end

  if (converseVar.eventKey is pf1) /* transfer to help facility*/
    converseLib.clearScreen();
    set SP0UM010 initial;
    XSPF1();
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* transfer to master menu*/
    converseLib.clearScreen();
    set SP0UM010 initial;
    XSPF4();
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    exit stack;
  end

  converseLib.validationFailed(1);
  exit stack;


end // end SP0US1F

// FIND THE OPTIONS WITH DATA
Function SP0US1G()


   /* ************************************************************/
      /* this statement group is used to find out which*/
      /* options have associated data*/
   /* ************************************************************/


  if (SP1REC.SP1OTIND == "Y") /* any s.p. order type info?*/
    SP0UM010.SP0UMFL1 = "*";
  end


   /* ***********************************************************/
   /* *   ----  do sales program notes exist ?    ----------   **/
   /* ***********************************************************/

  if (SP1REC.SP1COM1 != " "
   || SP1REC.SP1COM2 != " "
   || SP1REC.SP1COM3 != " "
   || SP1REC.SP1COM4 != " "
   || SP1REC.SP1COM5 != " "
   || SP1REC.SP1COM6 != " "
   || SP1REC.SP1COM7 != " "
   || SP1REC.SP1COM8 != " "
   || SP1REC.SP1COM9 != " "
   || SP1REC.SP1COM10 != " "
   || SP1REC.SP1COM11 != " "
   || SP1REC.SP1COM12 != " "
   || SP1REC.SP1COM13 != " "
   || SP1REC.SP1COM14 != " ")
    SP0UM010.SP0UMFL2 = "*";
  end



   /* ***********************************************************/
   /* *   ----  get product  records.     ------------------   **/
   /* ***********************************************************/

  SP0UW01.SP0UWPRI = "N"; /* INCLUDED PRODUCTS*/
  SP0UW01.SP0UWPRE = "N"; /* EXCLUDED PRODUCTS*/

  SP5REC.SP1ID = SP0UM010.SP1ID;
  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* any s.p. product info?*/
    while (SQLCA.VAGen_SQLCODE == 0)
      SP0US1S();
    end
    if (SP0UW01.SP0UWPRI == "Y")
      SP0UM010.SP0UMFL3 = "*"; /* PRODUCTS TO INCLUDE*/
    end
    if (SP0UW01.SP0UWPRE == "Y") /* w/s hold field*/
      SP0UM010.SP0UMFLB = "*"; /* PRODUCTS TO EXCLUDE*/
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0US1G ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    SP0US1O(); /* db2 error routine*/
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    exit stack;
  end

  call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};


   /* ***********************************************************/
   /* *   ----  PRODUCT CATEGORIES.  -----------------------   **/
   /* ***********************************************************/

  SP0UW01.SP0UWSB1 = 1; /* any s.p. PRODUCT CATEGORIES?*/
  while (SP0UW01.SP0UWSB1 < 21)
    if (SP1REC.XPCCD[SP0UWSB1] != "  ")
      SP0UM010.SP0UMFL4 = "*";
    end
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
  end

   /* ***********************************************************/
   /* *   ----  sport activity codes / all products flag ---   **/
   /* ***********************************************************/

  SP0UW01.SP0UWSB1 = 1; /* are there any sport act codes*/
  while (SP0UW01.SP0UWSB1 < 21)
    if (SP1REC.XSPCD[SP0UWSB1] != "  ") /* changed 4/19/88 ssj*/
      if (SP1REC.XSPCD[SP0UWSB1] == "**") /* do all products qualify?*/
        SP0UM010.SP0UMFL6 = "Y";
      else
        SP0UM010.SP0UMFL5 = "*";
      end
    end
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
  end


  SP0UW01.SP0UWAPF = SP0UM010.SP0UMFL6;


   /* ***********************************************************/
   /* *   ----  get customer records.     ------------------   **/
   /* ***********************************************************/

  SP4REC.SP1ID = SP0UM010.SP1ID;
  SP4REC.KUCCOID = 0;
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good return*/
    call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SP0UM010.SP0UMFL7 = "*";
                                   /* customer exists*/
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0U   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0US1G ";
        TA1REC.TA1LOCAT[3] = "IO0100  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0UM010";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1TBLKE = SP4REC.SP4KEY;
        SP0US1O(); /* db2 error routine*/
        SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
        exit stack;
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0US1G ";
    TA1REC.TA1LOCAT[3] = "IO0100  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = SP4REC.SP4KEY;
    SP0US1O(); /* db2 error routine*/
    SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
    exit stack;
  end
  call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};


   /* ***********************************************************/
   /* *   ----  customer account classes ?     -------------   **/
   /* ***********************************************************/

  SP0UW01.SP0UWSB1 = 1; /* any s.p. cust acct classes?*/
  while (SP0UW01.SP0UWSB1 < 21)
    if (SP1REC.XAUCD[SP0UWSB1] != "  ")
      SP0UM010.SP0UMFL8 = "*";
    end
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
  end


   /* ***********************************************************/
   /* *   --special customer groups / 'all customers' qualify  **/
   /* ***********************************************************/

  SP0UW01.SP0UWSB1 = 1;
  while (SP0UW01.SP0UWSB1 < 11)
    if (SP1REC.XSGCD[SP0UWSB1] != "  ")
      if (SP1REC.XSGCD[SP0UWSB1] == "**") /* do all customers qualify?*/
        SP0UM010.SP0UMFLA = "Y";
      else
        SP0UM010.SP0UMFL9 = "*"; /* special customer group exists*/
      end
    end
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
  end

  SP0UW01.SP0UWACF = SP0UM010.SP0UMFLA;



end // end SP0US1G

// validate all product flag
Function SP0US1H()


   /* *******************************************************/
      /* this statement group is used to verify that a*/
      /* valid all product flag code has been entered.*/
      /* if a valid code has been entered sp1rec.xspcd*/
      /* is updated, else an error message is listed*/
   /* *******************************************************/


  if (SP0UM010.SP0UMFL6 is modified
   && SP0UM010.SP0UMFL6 == "N")
    if ("**" in SP1REC.XSPCD)
      SP1REC.XSPCD[sysVar.arrayIndex] = "  ";
    end
    SP0UW01.SP0UWAPF = SP0UM010.SP0UMFL6;
    set SP0UM010.SP0UMFL6 initialAttributes;
    return;
  end

  if (SP0UM010.SP0UMFL6 is modified
   && SP0UM010.SP0UMFL6 == "Y")
    if ("**" in SP1REC.XSPCD)
       /* next sentence*/
    else
      if ("  " in SP1REC.XSPCD)
        SP1REC.XSPCD[sysVar.arrayIndex] = "**";
      else
        SP0UW01.SP0UWSB1 = 20;
        SP1REC.XSPCD[SP0UWSB1] = "**";
      end
    end
    SP0UW01.SP0UWAPF = SP0UM010.SP0UMFL6;
    set SP0UM010.SP0UMFL6 initialAttributes;
    return;
  end

  if (SP0UM010.SP0UMFL6 is modified)
    set SP0UM010.SP0UMFL6 cursor, modified, bold;
    SP0UM010.SP0UMMSG = "enter 'y' or 'n'";
  end


end // end SP0US1H

// validate all company flag
Function SP0US1I()


   /* *******************************************************/
      /* this statement group is used to verify that a*/
      /* valid all customer flag code has been entered.*/
      /* if a valid code has been entered sp1rec.xsgcd*/
      /* is updated, else an error message is listed*/
   /* *******************************************************/


  if (SP0UM010.SP0UMFLA is modified
   && SP0UM010.SP0UMFLA == "N")
    if ("**" in SP1REC.XSGCD)
      SP1REC.XSGCD[sysVar.arrayIndex] = "  ";
    end
    SP0UW01.SP0UWACF = SP0UM010.SP0UMFLA;
    set SP0UM010.SP0UMFLA initialAttributes;
    return;
  end

  if (SP0UM010.SP0UMFLA is modified
   && SP0UM010.SP0UMFLA == "Y")
    if ("**" in SP1REC.XSGCD)
       /* next sentence*/
    else
      if ("  " in SP1REC.XSGCD)
        SP1REC.XSGCD[sysVar.arrayIndex] = "**";
      else
        SP0UW01.SP0UWSB1 = 20;
        SP1REC.XSGCD[SP0UWSB1] = "**";
      end
    end
    SP0UW01.SP0UWACF = SP0UM010.SP0UMFLA;
    set SP0UM010.SP0UMFLA initialAttributes;
    return;
  end

  if (SP0UM010.SP0UMFLA is modified)
    set SP0UM010.SP0UMFLA cursor, modified, bold;
    SP0UM010.SP0UMMSG = "enter 'y' or 'n'";
  end


end // end SP0US1I

// validate quality code
Function SP0US1J()


   /* *******************************************************/
      /* this statement group is used to verify that a*/
      /* valid quality code has been entered.  if the*/
      /* quality code is found, the quality description is moved*/
      /* to sp0um001.xqadesc, else an error message is listed.*/

      /* if found, the quality code must also have active status*/
   /* *******************************************************/


  if (SP0UM010.XQACD == " ")
    SP0UM010.XQADESC = "BLANK";
    return;
  end

  if (SP0UM010.XQACD in XQATBL.XQACD)
    SP0UM010.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0)
    set SP0UM010.XQACD cursor, modified, bold;
    SP0UM010.XQADESC = "INVALID QUALITY CODE";
    converseLib.validationFailed(7);
    return;
  end


      /* the quality code was found.  is it active?*/


  if (XQATBL.XXXSTAT[sysVar.arrayIndex] != "A")
    set SP0UM010.XQACD cursor, modified, bold;
    SP0UM010.XQADESC = "NOT AN ACTIVE QUALITY CODE";
    converseLib.validationFailed(7);
    return;
  end


end // end SP0US1J

// validate life cycle code
Function SP0US1K()


   /* *******************************************************/
             /* VERIFY VALID LIFE CYCLE CODES*/
      /* If the life cycle is found, the descriptionis moved*/
      /* to sp0um010 map, else an error message is displayed.*/
   /* note: if found, the life cycle code must be in active status*/
   /* *******************************************************/
                       /* FIRST LIFE CYCLE*/
  SP0UW01.SP0UWSB1 = 1;
  while (SP0UW01.SP0UWSB1 < 4)
    if (SP0UM010.XLCCD[SP0UWSB1] == " ")
      SP0UM010.SP0UMDS[SP0UWSB1] = "BLANK";
    else
      if (SP0UM010.XLCCD[SP0UWSB1] in XLCTBL.XLCCD)
        SP0UM010.SP0UMDS[SP0UWSB1] = XLCTBL.XLCDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        set SP0UM010.XLCCD[SP0UWSB1] cursor, modified, bold;
        SP0UM010.SP0UMDS[SP0UWSB1] = "INVALID ";
        converseLib.validationFailed(6);
      else
        if (XLCTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* ACTIVE life cycle ??*/
          set SP0UM010.XLCCD[SP0UWSB1] cursor, modified, bold;
          SP0UM010.SP0UMDS[SP0UWSB1] = "NOT ACTIVE ";
          converseLib.validationFailed(6);
        end
      end
    end
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
  end



end // end SP0US1K

// validate nike dept
Function SP0US1L()


   /* *******************************************************/
      /* this statement group is used to verify that a*/
      /* valid nike dept code has been entered.  if the*/
      /* dept code is found, the dept description is moved*/
      /* to sp0um001.xnddesc, else an error message is listed.*/

      /* if found, the status code must also be 'a' for active*/
   /* *******************************************************/


  if (SP0UM010.XNDCD == " ")
    SP0UM010.XNDDESC = "BLANK";
    return;
  end

  if (SP0UM010.XNDCD in XNDTBL.XNDCD)
    SP0UM010.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0)
    set SP0UM010.XNDCD cursor, modified, bold;
    SP0UM010.XNDDESC = "INVALID NIKE DEPT CODE";
    converseLib.validationFailed(8);
    return;
  end


      /* the nike dept code was found.  is it active?*/


  if (XNDTBL.XXXSTAT[sysVar.arrayIndex] != "A")
    set SP0UM010.XNDCD cursor, modified, bold;
    SP0UM010.XNDDESC = "NOT AN ACTIVE NIKE DEPT CODE";
    converseLib.validationFailed(8);
    return;
  end


end // end SP0US1L

// validate status
Function SP0US1M()


   /* *******************************************************/
      /* validation of the sales program status*/
         /* + a definition is displayed.*/
   /* *******************************************************/


  if (SP0UM010.SP1STAT is modified)
    if (SP0UM010.SP1STAT != " " /* none assigned yet*/
     && SP0UM010.SP1STAT != "P" /* partial*/
     && SP0UM010.SP1STAT != "C" /* complete*/
     && SP0UM010.SP1STAT != "A" /* active*/
     && SP0UM010.SP1STAT != "I" /* inactive*/
     && SP0UM010.SP1STAT != "F") /* finished*/
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMSTD = "INVALID";
      converseLib.validationFailed(9);
      return;
    end
  end


   /* ----- if screen blanked out by accident ----------**/

  if (SP0UM010.SP1STAT == "  " /* blanked out screen status*/
   && SP1REC.SP1STAT != " ")   /* status existed*/
    SP0UM010.SP1STAT = SP1REC.SP1STAT; /* restore*/
  end


   /* ----- only blank   status can change to partial --**/

  if (SP0UM010.SP1STAT == "P") /* map changed to partial*/
    if (SP1REC.SP1STAT == " "
     || SP1REC.SP1STAT == "P")
      SP0UM010.SP0UMSTD = "PARTIAL";
    else
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMMSG = "STATUS CODE IS  NOT VALID";
      SP0UM010.SP1STAT = SP1REC.SP1STAT;
      converseLib.validationFailed(9);
    end
  end


   /* ----- only partial or ' ' can change to complete--**/

  if (SP0UM010.SP1STAT == "C") /* map changed to complete*/
    if (SP1REC.SP1STAT == " " /* status was blank*/
     || SP1REC.SP1STAT == "P" /* status was partial*/
     || SP1REC.SP1STAT == "C") /* status was complete*/
      SP0UM010.SP0UMSTD = "COMPLETE";
    else
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMMSG = "YOUR CHANGE WAS NOT VALID";
      SP0UM010.SP1STAT = SP1REC.SP1STAT;
      converseLib.validationFailed(9);
    end
  end


   /* ----- only complete & inactive can change to active--**/

  if (SP0UM010.SP1STAT == "A") /* map changed to active*/
    if (SP1REC.SP1STAT == "C" /* complete*/
     || SP1REC.SP1STAT == "I" /* inactive*/
     || SP1REC.SP1STAT == "A") /* active*/
      SP0UM010.SP0UMSTD = "ACTIVE";
    else
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMMSG = "YOUR CHANGE WAS NOT VALID";
      SP0UM010.SP1STAT = SP1REC.SP1STAT;
      converseLib.validationFailed(9);
    end
  end


   /* ----- only status = active can change to inactive ---- **/

  if (SP0UM010.SP1STAT == "I") /* map changed to inactive*/
    if (SP1REC.SP1STAT == "A" /* status was active*/
     || SP1REC.SP1STAT == "I") /* status was inactive*/
      SP0UM010.SP0UMSTD = "INACTIVE";
    else
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMMSG = "THIS MUST BE ACTIVE 1ST TO CHANGE ";
      SP0UM010.SP1STAT = SP1REC.SP1STAT;
      converseLib.validationFailed(9);
    end
  end


   /* ----- only status = active can change to finished ---- **/

  if (SP0UM010.SP1STAT == "F") /* map changed to finished*/
    if (SP1REC.SP1STAT == "A" /* status was active*/
     || SP1REC.SP1STAT == "F") /* status was finished*/
      SP0UM010.SP0UMSTD = "FINISHED";
    else
      set SP0UM010.SP1STAT cursor, modified, bold;
      SP0UM010.SP0UMMSG = "THIS MUST BE ACTIVE 1ST TO CHANGE ";
      SP0UM010.SP1STAT = SP1REC.SP1STAT;
      converseLib.validationFailed(9);
    end
    return;
  end



end // end SP0US1M

// validate name, abbrev
Function SP0US1N()


   /* ************************************************************/
      /* this statement group is used to see if the user has*/
      /* entered a sales program name*/
   /* ************************************************************/


  if (SP0UM010.SP1NM == " ")
    set SP0UM010.SP1NM cursor, modified, bold;
    converseLib.validationFailed(10);
  end



end // end SP0US1N

// db2 error routine
Function SP0US1O()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0US1O

// add sp1rec
Function SP0US1P()


   /* ************************************************************/
      /* this statement group is used to add sales program*/
      /* header rows to the data base or to update existing*/
      /* sales programs.*/
   /* ************************************************************/


  set SQLCA empty;
  set SP1REC empty;

  move SP0UM010 to SP1REC withV60Compat;

  if (SP0UM010.SP1LIFEF == "Y") /* seasonal*/
    SP0UW01.SP0UWD = SP0UM010.SP1CALDT;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
    if (SP0UW01.SP0UWD2 > 600000)
      SP0UW01.SP0UWD1 = 019;
    else
      SP0UW01.SP0UWD1 = 020;
    end
   /* ************Y2K OUT*******************************/
    SP1REC.SP1CALDT = SP0UW01.SP0UWD; /* final calc.date*/

  else
    SP0UM010.SP1LIFEF = "N"; /* seasonal*/
    SP0UM010.SP6UOMI = " "; /* clear unit of measure disp*/
    SP1REC.SP1CALDT = 0; /* final calc.date*/
    SP0UM010.SP1CALDT = 0; /* final calc.date*/

  end

  if (SP0UM010.SP1CALCF == "Y")
    SP1REC.SP1CALCF = SP0UM010.SP1CALCF;
    SP0UW01.SP1CALCF = SP0UM010.SP1CALCF; /* to w/s*/
  else
    SP1REC.SP1CALCF = "N";
  end

  SP1REC.SP1ABRV = SP0UM010.SP1ID; /* spgm id = abreviation*/

  SP1REC.SP1OTIND = "N";
  SP1REC.SP1CIND = "N";
  SP1REC.SP1PIND = "N";
  SP1REC.SP1STAT = "P";

  SP0UW01.SP0UWT1 = VGVar.currentFormattedTime;
  SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
  SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
  SP1REC.ZZZCHGTM = SP0UW01.SP0UWT2;

  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/
  SP1REC.ZZZCHGDT = SP0UW01.SP0UWD;

  call "IO0070" ("A ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0UM010.SP0UMAC = "C";
    SP0UM010.SP0UMACD = "CHANGE";
    SP0UM010.SP1STAT = "P";
    SP0UM010.SP0UMSTD = "PARTIAL";
    SP0UM010.SP0UMFL6 = "N";
    SP0UM010.SP0UMFLA = "N";
    SP0US1A(); /* set change screen attributes*/
    SP0UM010.SP0UMMSG = "SALES PROGRAM HEADER ADDED TO FILE";
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SP0UM010.SP0UMMSG = "UNABLE TO ADD - S.P ALREADY EXISTS";
      SP0UW01.SP0UWSID = "****";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U   ";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0US1P";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0UM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0US1O(); /* db2 error routine*/
    end
  end


end // end SP0US1P

// check for status update
Function SP0US1Q()


  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    return;
  end

  if (SP0UM010.SP0UMFL1 == "*") /* order type info exists*/
    if (SP1REC.SP1OTIND != "Y")
      SP1REC.SP1OTIND = "Y";
      SP0UW01.SP0UWUPF = "Y";
    end
  else
    if (SP1REC.SP1OTIND == "Y")
      SP1REC.SP1OTIND = "N";
      SP0UW01.SP0UWUPF = "Y";
    end
  end

  if (SP0UM010.SP0UMFL3 == "*" /* product info exists*/
   || SP0UM010.SP0UMFL4 == "*" 
   || SP0UM010.SP0UMFL5 == "*" 
   || SP0UM010.SP0UMFL6 == "Y")
    if (SP1REC.SP1PIND != "Y")
      SP1REC.SP1PIND = "Y";
      SP0UW01.SP0UWUPF = "Y";
    end
  else
    if (SP1REC.SP1PIND == "Y")
      SP1REC.SP1PIND = "N";
      SP0UW01.SP0UWUPF = "Y";
    end
  end

  if (SP0UM010.SP0UMFL7 == "*" /* list of customers*/
   || SP0UM010.SP0UMFL8 == "*" /* cust. acct classes*/
   || SP0UM010.SP0UMFL9 == "*" /* spec.cust groups*/
   || SP0UM010.SP0UMFLA == "Y") /* all cust. qualify*/
    if (SP1REC.SP1CIND != "Y")
      SP1REC.SP1CIND = "Y";
      SP0UW01.SP0UWUPF = "Y";
    end
  else
    if (SP1REC.SP1CIND == "Y")
      SP1REC.SP1CIND = "N";
      SP0UW01.SP0UWUPF = "Y";
    end
  end

  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   && SP1REC.SP1PIND == "Y"  /* product info exists*/
   && SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == "P" /* status is partial*/
     || SP1REC.SP1STAT == " ")
      SP1REC.SP1STAT = "C";
      SP0UM010.SP1STAT = "C";
      SP0UM010.SP0UMSTD = "COMPLETE";
      SP0UW01.SP0UWUPF = "Y";
    end
  else
    if (SP1REC.SP1STAT == "C") /* status is complete*/
      SP1REC.SP1STAT = "P";
      SP0UM010.SP1STAT = "P";
      SP0UM010.SP0UMSTD = "PARTIAL";
      SP0UW01.SP0UWUPF = "Y";
    end
  end



end // end SP0US1Q

// update sp1rec
Function SP0US1R()


   /* ************************************************************/
      /* this statement group is used to update the sp1rec.*/
      /* it assumes that all the necessary information has*/
      /* moved into the record before this statement group*/
      /* was called.*/
   /* ************************************************************/

  if (SP0UW01.SP0UWUPF != "Y")
    return;
  end

  move SP0UM010 to SP1REC withV60Compat;

  SP1REC.SP1ABRV = SP0UM010.SP1ID;
                                   /* sales pgm id = abreviation*/

  if (SP0UM010.SP1LIFEF == "Y")
    SP0UW01.SP0UWD = SP0UM010.SP1CALDT;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
    if (SP0UW01.SP0UWD2 > 600000)
      SP0UW01.SP0UWD1 = 019;
    else
      SP0UW01.SP0UWD1 = 020;
    end
   /* ************Y2K OUT*******************************/
    SP1REC.SP1CALDT = SP0UW01.SP0UWD; /* last calc.date*/
  else
    SP1REC.SP1CALDT = 0; /* last calc.date*/
    SP0UM010.SP1CALDT = 0; /* last calc.date*/
    SP0UM010.SP6UOMI = " "; /* unit of measure*/
    SP0UM010.SP1LIFEF = "N"; /* seasonal*/
  end


  SP0UW01.SP0UWT1 = VGVar.currentFormattedTime;
  SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
  SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
  SP1REC.ZZZCHGTM = SP0UW01.SP0UWT2;

  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/
  SP1REC.ZZZCHGDT = SP0UW01.SP0UWD;

  SP1REC.ZZZCHGCT = SP0UW01.ZZZCHGCT;

  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update return*/
    SP0UM010.SP0UMMSG = "DATA BASE UPDATED - CONTINUE";
    SP0UW01.ZZZCHGCT = SP0UW01.ZZZCHGCT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0UM010.SP0UMMSG = "UNABLE TO UPDATE DATA. TRY AGAIN.";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0US1Q ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0UM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0US1O(); /* db2 error routine*/
    end
  end


end // end SP0US1R

// PRODUCT DATA
Function SP0US1S()


   /* ************************************************************/
      /* PRODUCT INCLUSIONS AND EXCEPTIONS*/
   /* ************************************************************/


  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP5REC.SP5PRODI == "I") /* INCLUDED PRODUCTS*/
      SP0UW01.SP0UWPRI = "Y";
    end
    if (SP5REC.SP5PRODI == "E")
      SP0UW01.SP0UWPRE = "Y"; /* EXCLUDED PRODUCTS*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0US1S ";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0UM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      SP0US1O(); /* db2 error routine*/
      SP0UM010.SP0UMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0US1S

// sp6rec uom from tiered disc
Function SP0US2A()


   /* ************************************************************/
      /* get sp6rec for unit of measure value.*/
   /* ************************************************************/

  set SP6REC empty;
  SP6REC.SP1ID = SP1REC.SP1ID; /* sales program id*/
  SP6REC.XOTCD = "**";


  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +100)
    SP6REC.SP6UOMI = "U";
    SP6REC.SP6TAACD[1] = "00";
    SP6REC.SP6TTDCD[1] = "00";
    SP6REC.SP6TCOCD[1] = "00";
    SP6REC.SP6TPTCD[1] = "  ";
    SP6REC.SP6COPCT = 100;
    SP6REC.SP6TDPCT = 0;
    SP6REC.SP6AAPCT = 0;
    SP6REC.SP6DOVRC = "S";
    SP0UW01.SP0UWT1 = VGVar.currentFormattedTime;
    SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
    SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
    SP6REC.ZZZCHGTM = SP0UW01.SP0UWT2;
    SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
    if (SP0UW01.SP0UWD2 > 600000)
      SP0UW01.SP0UWD1 = 019;
    else
      SP0UW01.SP0UWD1 = 020;
    end
   /* ************Y2K OUT*******************************/
    SP6REC.ZZZCHGDT = SP0UW01.SP0UWD;
    SP6REC.ZZZCHGCT = 0;
    call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0US2A ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0UM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SP0US2A ";
      TA1REC.TA1LOCAT[3] = "IO4220  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0UM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VTIERS01";
      TA1TBLKE = SP6REC.SP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


  SP0UM010.SP6UOMI = SP6REC.SP6UOMI; /* move unit of measure to map*/



end // end SP0US2A

// validate seasonal data
Function SP0US2B()


   /* ************************************************************/
      /* seasonal data edits......*/
   /* ************************************************************/

  if (SP0UM010.SP1LIFEF == "N" /* not seasonal*/
   || SP0UM010.SP1LIFEF == "Y") /* seasonal sales program*/
     /* next sentence*/
  else
     /* IF SP0UW01.SP1LIFEF ^= ' '    ; had a valid code*/
       /* MOVE SP0UW01.SP1LIFEF TO SP0UM010.SP1LIFEF; restore*/
     /* ELSE ;*/
    SP0UM010.SP1LIFEF = "N"; /* default to not seasonal*/
    SP0UM010.SP1CALDT = 0; /* default to 0 date*/
     /* END ;*/
  end


  if (SP0UM010.SP1LIFEF == "Y") /* seasonal*/
    if (SP0UM010.SP6UOMI == "D" /* dollars*/
     || SP0UM010.SP6UOMI == "U") /* units*/
       /* next sentence*/
    else
      if (SP0UW01.SP6UOMI != " ") /* had a valid code*/
        SP0UM010.SP6UOMI = SP0UW01.SP6UOMI; /* restore*/
      else
        SP0UM010.SP6UOMI = "U"; /* default to units*/
      end
    end
  end



end // end SP0US2B

// validate seasonal data
Function SP0US2C()


   /* ************************************************************/
      /* seasonal data edits......*/
   /* ************************************************************/

  if (SP0UM010.SP1LIFEF == "Y" /* change to seasonal sales pgm*/
   && SP0UW01.SP1LIFEF == "N"  /* was 'non seasonal'*/
   && SP0UM010.SP0UMFL1 == "*") /* order types exist.*/
    SP0US2D(); /* delete o.t. tiers add seasonal tiers*/
    if (SP0UM010.SP6UOMI != SP0UW01.SP6UOMI) /* change unit of measure?*/
      SP0US2F(); /* ; change(sp2rec & sp6rec)*/
    end
  else
    if (SP0UM010.SP1LIFEF == "N" /* change to non seasonal*/
     && SP0UW01.SP1LIFEF == "Y"  /* was 'seasonal'*/
     && SP0UM010.SP0UMFL1 == "*") /* order types exist.*/
      SP0US2E(); /* create a discount tier rec / order type*/
    else
      if (SP0UM010.SP1LIFEF == "Y" /* no change in seasonal/non seasonal*/
       && SP0UM010.SP0UMFL1 == "*") /* order types exist.*/
        if (SP0UM010.SP6UOMI != SP0UW01.SP6UOMI) /* change unit of measure?*/
          SP0US2F(); /* ; change(sp2rec & sp6rec)*/
        end
      end
    end
  end

  SP0UW01.SP1LIFEF = SP0UM010.SP1LIFEF; /* hold changed flag*/
  SP0UW01.SP6UOMI = SP0UM010.SP6UOMI; /* hold unit of measure*/



end // end SP0US2C

// del o.t.tiers & add 1 seasonal
Function SP0US2D()


   /* ************************************************************/
    /* when a non-seasonal sales program is changed to seasonal,*/
      /* the tiered terms originally associated with individual*/
      /* order types must be deleted and a single terms record*/
      /* (sp6rec) with an order type of '**' for 'all order*/
      /* types, must be created.*/
   /* ************************************************************/

  set SP2REC empty;
  set SP6REC empty;
  SP2REC.SP1ID = SP0UM010.SP1ID;
  SP6REC.SP1ID = SP0UM010.SP1ID;

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0US2G(); /* fetch first order type record*/
    if (SQLCA.VAGen_SQLCODE == +0)
      SP6REC.XOTCD = SP2REC.XOTCD; /* order type*/
      SP0US2H(); /* fetch associated sp6rec (discounts)*/
      if (SQLCA.VAGen_SQLCODE == +0)
        SP0US2J(); /* delete o.t. sp6rec*/
        if (SQLCA.VAGen_SQLCODE == +0)
          SP6REC.XOTCD = "**";
          SP0US2K();
                                   /* add  sp6recfor order type '**'*/
        end
      end
    end
    while (SQLCA.VAGen_SQLCODE == +0)
      SP0US2G(); /* fetch next order type record*/
      if (SQLCA.VAGen_SQLCODE == +0)
        SP6REC.XOTCD = SP2REC.XOTCD; /* order type*/
        SP0US2H(); /* fetch associated sp6rec*/
        if (SQLCA.VAGen_SQLCODE == +0)
          SP0US2J(); /* delete sp6rec*/
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)

    call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

       /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "SP0US2D ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2D

// create sp6rec for each o.type
Function SP0US2E()


   /* ************************************************************/
    /* when a seasonal sales program is changed to non-seasonal,*/
      /* the tiered terms originally associated with the entire*/
      /* sales program must be deleted and a tiered terms rec*/
      /* (sp6rec) created for each individual record.*/
   /* ************************************************************/

  set SP2REC empty;
  set SP6REC empty;
  SP6REC.SP1ID = SP0UM010.SP1ID; /* sales prog. id*/
  SP6REC.XOTCD = "**"; /* order type*/
  SP0US2H(); /* fetch associated sp6rec (discounts)*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SP2REC.SP1ID = SP0UM010.SP1ID;

    call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      while (SQLCA.VAGen_SQLCODE == +0)
        SP0US2G(); /* fetch next order type record*/
        if (SQLCA.VAGen_SQLCODE == +0)
          SP6REC.XOTCD = SP2REC.XOTCD; /* order type*/
          SP0US2K(); /* add sp6rec for this order type*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == +100 /* completed add of tier/o.t.*/
       || SQLCA.VAGen_SQLCODE == +0) 
        SP6REC.SP1ID = SP0UM010.SP1ID; /* sales prog. id*/
        SP6REC.XOTCD = "**";
        SP0US2H(); /* fetch seasonal tier record*/
        if (SQLCA.VAGen_SQLCODE == +0)
          SP0US2J(); /* delete seasonal tier rec*/
        end
      end
    end

    call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  end



  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
       /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "SP0US2E ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2E

// chg.seasonal unit of measure
Function SP0US2F()


   /* ************************************************************/
    /* when a seasonal sales program unit of measure is changed,*/
      /* each of the order type records must also be changed*/
      /* and also the terms record (sp6rec)*/
   /* ************************************************************/

  set SP2REC empty;
  set SP6REC empty;
  SP6REC.SP1ID = SP0UM010.SP1ID; /* sales prog. id*/
  SP6REC.XOTCD = "**"; /* order type*/
  SP0US2H(); /* fetch associated sp6rec (discounts)*/
  if (SQLCA.VAGen_SQLCODE == +0)
    SP6REC.SP6UOMI = SP0UM010.SP6UOMI; /* unit of measure (D&U)*/
    SP0US2I(); /* update unit of measure*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    SP2REC.SP1ID = SP0UM010.SP1ID;

    call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      while (SQLCA.VAGen_SQLCODE == +0)
        SP0US2G(); /* fetch next order type record*/
        if (SQLCA.VAGen_SQLCODE == +0)
          SP2REC.SP2DIND = SP0UM010.SP6UOMI; /* unit of measure (D&U)*/
          SP0US2L(); /* update sp2rec*/
        end
      end
    end

    call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  end



  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
       /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0US2F ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2F

// fetch next ord.typ(sp2rec)
Function SP0US2G()


   /* ************************************************************/
      /* this statement group is used to update order type rec.*/
      /* (sp2rec)*/
   /* ************************************************************/

  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "SN      ";
    TA1REC.TA1LOCAT[2] = "SP0US2G ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2G

// select sp6rec-
Function SP0US2H()


   /* ************************************************************/
      /* this statement group is used to select the sp6rec.*/
   /* ************************************************************/

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good fetch*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0US2H ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2H

// update sp6rec-
Function SP0US2I()


   /* ************************************************************/
      /* this statement group is used to update the sp6rec.*/
   /* ************************************************************/

  SP0UW01.SP0UWT1 = VGVar.currentFormattedTime; /* record time*/
  SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
  SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
  SP1REC.ZZZCHGTM = SP0UW01.SP0UWT2;

  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/
  SP1REC.ZZZCHGDT = SP0UW01.SP0UWD; /* change date*/



  call "IO4220" ("U ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update*/
    SP0UW01.SP0UWMSG = "DATA BASE UPDATED ---------- CONTINUE";
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = "SP0US2I ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2I

// delete sp6rec-
Function SP0US2J()


   /* ************************************************************/
      /* this statement group is used to select the sp6rec.*/
   /* ************************************************************/

  call "IO4220" ("D ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = "SP0US2J ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2J

// add    sp6rec-
Function SP0US2K()


   /* ************************************************************/
      /* this statement group is used to add    the sp6rec.*/
   /* ************************************************************/

  SP0UW01.SP0UWT1 = VGVar.currentFormattedTime;
  SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
  SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
  SP1REC.ZZZCHGTM = SP0UW01.SP0UWT2; /* change time*/

  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/
  SP1REC.ZZZCHGDT = SP0UW01.SP0UWD; /* change date*/



  call "IO4220" ("A ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update*/
    SP0UW01.SP0UWMSG = "DATA BASE UPDATED ---------- CONTINUE";
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0US2K ";
    TA1REC.TA1LOCAT[3] = "IO4220  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VTIERS01";
    TA1TBLKE = SP6REC.SP6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2K

// update order type (sp2rec)
Function SP0US2L()


   /* ************************************************************/
      /* this statement group is used to update order type rec.*/
      /* (sp2rec)*/
   /* ************************************************************/

  SP0UW01.SP0UWT1 = VGVar.currentFormattedTime;
  SP0UW01.SP0UWTH2 = SP0UW01.SP0UWTH1;
  SP0UW01.SP0UWTM2 = SP0UW01.SP0UWTM1;
  SP2REC.ZZZCHGTM = SP0UW01.SP0UWT2;

  SP0UW01.SP0UWD = VGVar.currentShortGregorianDate;
   /* ************Y2K IN********************************/
   /* OVE 019 TO SP0UW01.SP0UWD1;*/
  if (SP0UW01.SP0UWD2 > 600000)
    SP0UW01.SP0UWD1 = 019;
  else
    SP0UW01.SP0UWD1 = 020;
  end
   /* ************Y2K OUT*******************************/
  SP2REC.ZZZCHGDT = SP0UW01.SP0UWD;

  call "IO0080" ("U ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = "SP0US2L ";
    TA1REC.TA1LOCAT[3] = "IO0080  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM010";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1TBLKE = SP2REC.SP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0US2L

// sp1rec sp for sp browse routin
Function SP0USA4()



   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the sales programs from the selected*/
      /* set to the working storage array.  when no more*/
      /* records are in the set (sqlcode = 100) get out of the*/
      /* while loop.*/
   /* ************************************************************/



  SP0UW01.SP0UWSB1 = 0;

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0UW01.SP0UWSB1 = 0;
    while (SP0UW01.SP0UWSB1 < 500)
      call "IO0070" ("SN", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
        SP0UW01.SP1ID[SP0UWSB1] = SP1REC.SP1ID;
        SP0UW01.SP1NM[SP0UWSB1] = SP1REC.SP1NM;
        SP0UW01.SP1ABRV[SP0UWSB1] = SP1REC.SP1ABRV;
        SP0UW01.XNDCD[SP0UWSB1] = SP1REC.XNDCD;
        SP0UW01.SP1STAT[SP0UWSB1] = SP1REC.SP1STAT;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          SP0UW01.SP0UWTSZ = SP0UW01.SP0UWSB1;
          SP0UW01.SP0UWSB1 = 999;
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SP0U   ";
          TA1REC.TA1LOCAT[1] = "A       ";
          TA1REC.TA1LOCAT[2] = "SP0USA4 ";
          TA1REC.TA1LOCAT[3] = "IO0070  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SP0UM400";
          TA1REC.TA1DBASE = "DSPGM.";
          TA1REC.TA1TBLVU = "VSPGM001";
          TA1TBLKE = SP1REC.SP1KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0U   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0USA4 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0UM400";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  call "IO0070" ("CS", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};


  if (SP0UW01.SP0UWSB1 == 999)
     /* ...... less than 500 entries*/
  else
    if (SP0UW01.SP0UWSB1 >= 500)
      SP0UW01.SP0UWTSZ = 500; /* size exceeds 500 !*/
      SP0UW01.SP0UWSB1 = 999;
    end
  end



end // end SP0USA4

// to load 1st 14 sales programs
Function SP0USB4()


   /* ************************************************************/
      /* select the first 14 sales programs*/
      /* exit for a file i/o error in sp0usa4*/
   /* ************************************************************/

  if (converseVar.validationMsgNum != +0)
    return;
  end

  SP0UM400.SP0UMMSG = "USE PF7 & PF8 TO SCROLL --  OR EXIT ";

  SP0UW01.SP0UWSB1 = 0;

  while (SP0UW01.SP0UWSB1 < 14)
    SP0UW01.SP0UWPOS = SP0UW01.SP0UWPOS + 1;
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
    if (SP0UW01.SP0UWSB1 > SP0UW01.SP0UWTSZ)
      SP0UM400.SP0UMOP[SP0UWSB1] = " ";
      SP0UM400.SP1ID[SP0UWSB1] = " ";
      SP0UM400.SP1NM[SP0UWSB1] = " ";
      SP0UM400.SP1ABRV[SP0UWSB1] = " ";
      SP0UM400.XNDCD[SP0UWSB1] = " ";
      SP0UM400.SP1STAT[SP0UWSB1] = " ";
      SP0UW01.SP0UWSB1 = 99;
    else
      if (SP0UW01.SP1ID[SP0UWPOS] != " ")
        SP0UM400.SP0UMOP[SP0UWSB1] = " ";
        SP0UM400.SP1ID[SP0UWSB1] = SP0UW01.SP1ID[SP0UWPOS];
        SP0UM400.SP1NM[SP0UWSB1] = SP0UW01.SP1NM[SP0UWPOS];
        SP0UM400.SP1ABRV[SP0UWSB1] = SP0UW01.SP1ABRV[SP0UWPOS];
        SP0UM400.XNDCD[SP0UWSB1] = SP0UW01.XNDCD[SP0UWPOS];
        SP0UM400.SP1STAT[SP0UWSB1] = SP0UW01.SP1STAT[SP0UWPOS];
      end
    end
  end

  if (SP0UW01.SP0UWTSZ == 0)
    SP0UM400.SP0UMMSG = "NO SALES PROGRAMS CURRENTLY EXIST.";
  end


  if (SP0UW01.SP0UWTSZ == 500)
    SP0UM400.SP0UMMSG = "SALES PROGRAMS EXCEED 500 - PARTIAL DISPLAY";
  end



end // end SP0USB4

// main edit group for s.p. scan
Function SP0USC4()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/


  SP0USD4(); /* fast pathing?*/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
  end



end // end SP0USC4

// edit for fast path, data modif
Function SP0USD4()



   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0UM400.CATOAP != " ")
    COMMAREA.CATOAP = SP0UM400.CATOAP;
    COMMAREA.CAITEM = SP0UM400.CAITEM;
    XSEXIT();
    SP0UM400.SP0UMMSG = COMMAREA.CAMSG;
    SP0UM400.CATOAP = " ";
    SP0UM400.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0UM400.SP0UMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0UM400.SP0UMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0USD4

// forward scroll for sales progs
Function SP0USE4()



      /* sp0use4 user to scroll forward*/



  if (SP0UW01.SP0UWTSZ <= 14)
    SP0UM400.SP0UMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



  if (SP0UM400.SP0UMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0UW01.SP0UWTSZ > 14)
    while (SP0UW01.SP0UWSB1 < 14)
      SP0UW01.SP0UWPOS = SP0UW01.SP0UWPOS + 1;
      SP0UW01.SP0UWSB1 = 1 + SP0UW01.SP0UWSB1;
      if (SP0UW01.SP0UWPOS > SP0UW01.SP0UWTSZ)
        SP0UM400.SP0UMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0UM400.SP0UMOP[SP0UWSB1] = " ";
        SP0UM400.SP1ID[SP0UWSB1] = " ";
        SP0UM400.SP1NM[SP0UWSB1] = " ";
        SP0UM400.SP1ABRV[SP0UWSB1] = " ";
        SP0UM400.XNDCD[SP0UWSB1] = " ";
        SP0UM400.SP1STAT[SP0UWSB1] = " ";
      else
        SP0UM400.SP0UMMSG = " ";
        SP0UM400.SP0UMOP[SP0UWSB1] = " ";
        SP0UM400.SP1ID[SP0UWSB1] = SP0UW01.SP1ID[SP0UWPOS];
        SP0UM400.SP1NM[SP0UWSB1] = SP0UW01.SP1NM[SP0UWPOS];
        SP0UM400.SP1ABRV[SP0UWSB1] = SP0UW01.SP1ABRV[SP0UWPOS];
        SP0UM400.XNDCD[SP0UWSB1] = SP0UW01.XNDCD[SP0UWPOS];
        SP0UM400.SP1STAT[SP0UWSB1] = SP0UW01.SP1STAT[SP0UWPOS];
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0UW01.SP0UWPOS == SP0UW01.SP0UWTSZ)
    SP0UM400.SP0UMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0USE4

// backward scroll for sales prog
Function SP0USF4()



      /* sp0usf4 used to scroll backward*/



  if (converseVar.eventKey is pf7)
    SP0UW01.SP0UWPOS = SP0UW01.SP0UWPOS - 28;
    if (SP0UW01.SP0UWPOS < 0)
      SP0UW01.SP0UWPOS = 0;
    end
  end



  if (SP0UM400.SP0UMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    while (SP0UW01.SP0UWSB1 < 14)
      SP0UW01.SP0UWPOS = SP0UW01.SP0UWPOS + 1;
      SP0UW01.SP0UWSB1 = 1 + SP0UW01.SP0UWSB1;
      if (SP0UW01.SP0UWPOS > SP0UW01.SP0UWTSZ)
        SP0UM400.SP0UMOP[SP0UWSB1] = " ";
        SP0UM400.SP1ID[SP0UWSB1] = " ";
        SP0UM400.SP1NM[SP0UWSB1] = " ";
        SP0UM400.SP1ABRV[SP0UWSB1] = " ";
        SP0UM400.XNDCD[SP0UWSB1] = " ";
        SP0UM400.SP1STAT[SP0UWSB1] = " ";
        SP0UM400.SP0UMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
      else
        SP0UM400.SP0UMOP[SP0UWSB1] = " ";
        SP0UM400.SP1ID[SP0UWSB1] = SP0UW01.SP1ID[SP0UWPOS];
        SP0UM400.SP1NM[SP0UWSB1] = SP0UW01.SP1NM[SP0UWPOS];
        SP0UM400.SP1ABRV[SP0UWSB1] = SP0UW01.SP1ABRV[SP0UWPOS];
        SP0UM400.XNDCD[SP0UWSB1] = SP0UW01.XNDCD[SP0UWPOS];
        SP0UM400.SP1STAT[SP0UWSB1] = SP0UW01.SP1STAT[SP0UWPOS];
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0UW01.SP0UWPOS == 14)
    SP0UM400.SP0UMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0USF4

// find sales programs...
Function SP0USG4()


    /* ----------------------------------------------------*/
                    /* load key*/
    /* ----------------------------------------------------*/

  SP0UW01.SP0UWMST = SP0UM400.SP0UMMST; /* hold request*/
  SP0UW01.SP0UWPRG = SP0UM400.SP0UPROG; /* hold sp1id start*/
  set SP0UM400 empty; /* reset map*/
  SP0UM400.SP0UMTDT = VGVar.currentShortGregorianDate;
  SP0UM400.SP0UMMST = SP0UW01.SP0UWMST; /* move back*/
  SP0UM400.SP0UPROG = SP0UW01.SP0UWPRG; /* move backsp1id*/
  set SP0UW01 empty;
  SP0UW01.SP0UWMST = SP0UM400.SP0UMMST; /* hold request*/

  set SP0UW02 empty;
  set SP1REC empty;
  set SQLCA empty;
  set TA1REC empty;

  if (SP0UM400.SP0UMMST == "A")
    SP0UW02.SP0UWST1 = "A"; /* active  status*/
    SP0UW02.SP0UWST2 = "*";
    SP0UW02.SP0UWST3 = "*";
  else
    if (SP0UM400.SP0UMMST == "P")
      SP0UW02.SP0UWST1 = "P"; /* partial status*/
      SP0UW02.SP0UWST2 = "*";
      SP0UW02.SP0UWST3 = "*";
    else
      if (SP0UM400.SP0UMMST == "C")
        SP0UW02.SP0UWST1 = "C"; /* COMPLETE*/
        SP0UW02.SP0UWST2 = "*";
        SP0UW02.SP0UWST3 = "*";
      else
        SP0UW02.SP0UWST1 = "F"; /* finished*/
        SP0UW02.SP0UWST2 = "I"; /* inactive*/
        SP0UW02.SP0UWST3 = "*";
      end
    end
  end

  SP0UW02.SP0UWSOP = "SS"; /* select set*/


  call "IO0070" (SP0UW02, SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* obtain sales pgms.*/



end // end SP0USG4

// log abend routine ...
Function SP0USH4()


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SP0U";
  TA1REC.TA1LOCAT[1] = "SS";
  TA1REC.TA1LOCAT[2] = "SP0USH4";
  TA1REC.TA1LOCAT[3] = "IO0070 ";
  TA1REC.TA1LOCAT[4] = " ";
  TA1REC.TA1LOCAT[4] = "SP0UM400";
  TA1REC.TA1DBASE = "DSPGM. ";
  TA1REC.TA1TBLVU = "VSPGM001";
  TA1REC.TA1TBLKE = SP0UM400.SP0UMMST;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  XSPF4();
  SP0UM400.SP0UMMSG = COMMAREA.CAMSG;



end // end SP0USH4

// program id entered
Function SP0USI4()


   /* ************************************************************/
   /* check to see if the program id entered is on the table.  if*/
   /* not, start display at next sales program.*/
   /* ************************************************************/


  if (SP0UM400.SP0UPROG > " " /* special starting spgm*/
   && SP0UW01.SP0UWTSZ > 0)   /* work array exists*/
    SP0UW01.SP0UWPOS = 0;
    SP0UW01.SP0UWSB1 = 1;
    SP0UW01.SP0UWSW1 = "N";
    while (SP0UW01.SP0UWSB1 <= 500 /* tops out at 500*/
     && SP0UW01.SP0UWSW1 == "N")
      if (SP0UW01.SP0UWSB1 <= SP0UW01.SP0UWTSZ /* within the array*/
       && SP0UW01.SP1ID[SP0UWSB1] >= SP0UM400.SP0UPROG)
        SP0UW01.SP0UWPOS = SP0UW01.SP0UWSB1;
        SP0UW01.SP0UWSW1 = "Y";
      end
      SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
    end
  end

  if (SP0UW01.SP0UWPOS > 0)
    SP0UW01.SP0UWPOS = SP0UW01.SP0UWPOS - 1;
  end



end // end SP0USI4

// was an option selected ?
Function SP0USJ4()



   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was either an  ' ' or 's' select.*/
   /* ************************************************************/

  SP0UW01.SP0UWSB1 = 0;

  while (SP0UW01.SP0UWSB1 < 14)
    SP0UW01.SP0UWSB1 = SP0UW01.SP0UWSB1 + 1;
    if (SP0UM400.SP1ID[SP0UWSB1] == " ") /* end of table*/
      SP0UM400.SP0UMOP[SP0UWSB1] = " ";
      SP0UM400.SP1ID[SP0UWSB1] = " ";
    end
  end

  if ("S" in SP0UM400.SP0UMOP)
    SP0UW01.SP0UWSB2 = sysVar.arrayIndex;
    SP0UW01.SP0UWPOS = sysVar.arrayIndex;
    SP0UM400.SP0UMMSG = " ";
    SP0UM400.SP0UMOP[SP0UWSB2] = " ";
    COMMAREA.CAITEM = SP0UM400.SP1ID[sysVar.arrayIndex];

  else
    COMMAREA.CAITEM = " ";
    SP0UW01.SP0UWSB2 = 1;
    while (SP0UW01.SP0UWSB2 <= 14)
      if (SP0UM400.SP0UMOP[SP0UWSB2] != " ")
         /* invalid character*/
        SP0UW01.SP0UWVF = "N";
        set SP0UM400.SP0UMOP[SP0UWSB2] cursor, modified, bold;
        set SP0UM400.SP1ID[SP0UWSB2] skip, modified, bold;
        converseLib.validationFailed(3);
      end
      SP0UW01.SP0UWSB2 = SP0UW01.SP0UWSB2 + 1;
    end
  end



end // end SP0USJ4

Record SP0UW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0UWUPF SP0UWUPF ; 
  10 SP0UWPRI SP0UWPRI ; 
  10 SP0UWPRE SP0UWPRE ; 
  10 SP0UWMSG SP0UWMSG ; 
  10 SP0UWMOP SP0UWMOP [20] ; 
  10 SP0UWD SP0UWD ; 
    20 SP0UWD1 SP0UWD1 ; 
    20 SP0UWD2 SP0UWD2 ; 
  10 SP0UWT1 SP0UWT1 ; 
    20 SP0UWTH1 SP0UWTH1 ; 
    20 SP0UWTC1 SP0UWTC1 ; 
    20 SP0UWTM1 SP0UWTM1 ; 
    20 SP0UWTC2 SP0UWTC2 ; 
    20 SP0UWTS1 SP0UWTS1 ; 
  10 SP0UWT2 SP0UWT2 ; 
    20 SP0UWTH2 SP0UWTH2 ; 
    20 SP0UWTM2 SP0UWTM2 ; 
  10 SP0UWVF SP0UWVF ; 
  10 SP0UWVF1 SP0UWVF1 ; 
  10 SP0UWMDF SP0UWMDF ; 
  10 SP0UWHDM SP0UWHDM ; 
  10 SP0UWSDM SP0UWSDM ; 
  10 SP0UWSID SP0UWSID ; 
  10 SP0UWACF SP0UWACF ; 
  10 SP0UWAPF SP0UWAPF ; 
  10 SP0UWSB1 SP0UWSB1 ; 
  10 SP0UWSB2 SP0UWSB2 ; 
  10 SP0UWSB3 SP0UWSB3 ; 
  10 SP0UWSB4 SP0UWSB4 ; 
  10 SP0UWTSZ SP0UWTSZ ; 
  10 SP0UWPOS SP0UWPOS ; 
  10 SP5KEY SP5KEY ; 
  10 SP0UWTL4 SP0UWTL4 ; 
    15 SP1ID SP1ID [500] ; 
    15 SP1STAT SP1STAT [500] ; 
    15 SP1NM SP1NM [500] ; 
    15 SP1ABRV SP1ABRV [500] ; 
    15 XNDCD XNDCD [500] ; 
  10 XFMCD XFMCD ; 
  10 XFMDESC XFMDESC ; 
  10 XAUCD XAUCD ; 
  10 XAUDESC XAUDESC ; 
  10 XSGCD XSGCD ; 
  10 XSGDESC XSGDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP0UWOTH SP0UWOTH ; 
  10 SP0UWQTY SP0UWQTY ; 
  10 SP0UWDDL SP0UWDDL ; 
  10 SP0UWPCT SP0UWPCT ; 
  10 SP4KEY SP4KEY ; 
    15 SP0UWID SP0UWID ; 
    15 SP0UWKC SP0UWKC ; 
    15 SP0UWKM SP0UWKM ; 
    15 SP0UWXN SP0UWXN ; 
    15 SP0UWXG SP0UWXG ; 
  10 SP2DIND SP2DIND ; 
  10 SP0UWF3 SP0UWF3 ; 
  10 SP0UWLOC SP0UWLOC ; 
    15 SP0UWID1 SP0UWID1 ; 
    15 SP0UWL1 SP0UWL1 ; 
    15 * char(15) ; 
  10 SP0UWMST SP0UWMST ; 
  10 SP1LIFEF SP1LIFEF ; 
  10 SP6UOMI SP6UOMI ; 
  10 SP0UWPRG SP0UWPRG ; 
  10 SP0UWSW1 SP0UWSW1 ; 
  10 SP1CALCF SP1CALCF ; 
end // end SP0UW01

// w.s. all company flag
DataItem SP0UWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag
DataItem SP0UWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem SP0UWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century
DataItem SP0UWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem SP0UWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollar amount hold
DataItem SP0UWDDL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view only flag....no update
DataItem SP0UWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt
DataItem SP0UWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold
DataItem SP0UWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id to pass to next app
DataItem SP0UWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec kuccoid hold
DataItem SP0UWKC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp4rec kumstrid hold
DataItem SP0UWKM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part of next app.
DataItem SP0UWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to next app.
DataItem SP0UWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path
DataItem SP0UWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field
DataItem SP0UWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field
DataItem SP0UWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales prog. status to browse
DataItem SP0UWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold code
DataItem SP0UWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold
DataItem SP0UWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table position
DataItem SP0UWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws EXCLUDED PRODUCTS
DataItem SP0UWPRE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales program display top
DataItem SP0UWPRG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws INLUCDED PRODUCTS
DataItem SP0UWPRI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount quantity hold
DataItem SP0UWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem SP0UWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2
DataItem SP0UWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript3
DataItem SP0UWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript4
DataItem SP0UWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt
DataItem SP0UWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0UWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yes the top of array is found
DataItem SP0UWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem SP0UWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0UWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1
DataItem SP0UWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0UWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0UWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0UWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// s.p. browse table
DataItem SP0UWTL4 char(22500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time minute #1
DataItem SP0UWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0UWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem SP0UWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table size
DataItem SP0UWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag
DataItem SP0UWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0UWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0UWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xgpcd hold
DataItem SP0UWXG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xnxcd hold
DataItem SP0UWXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

