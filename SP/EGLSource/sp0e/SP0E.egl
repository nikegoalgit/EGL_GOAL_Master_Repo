package sp0e;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import sp.common.*;
import ta.common.*;
//*** PROGRAM=SP0E ****
//               completes a sales program
//                 sets the status to 'c'
// ;
// 12-06-88   jwood   added noncsp option to calls
// 12-06-88   jwood   added xssegtr logic
// ------------------------------------------------------------
// 12-05-97   ngango  y2k modifications. Changed process
//                    SP0E001 and Stmt. group SP0ES1D.
// ------------------------------------------------------------
// *********************
Program SP0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SP0EW1 SP0EW1; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLCTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use SP0EM.SP0EM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0E001: SP0E001();



     /* **********************************************************/
        /* this flow will always transfer to spoe010.*/
     /* **********************************************************/



    goto SP0E010;



    SP0E010: SP0E010();



    goto SP0E010;


  end // end main
end // end SP0E

// initialization and reset
Function SP0E001()



   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the sales program update program.*/
   /* ************************************************************/



  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set SP0EW1 empty;

  SP0EW1.SP0EWSID = "****";
  /*  */
  /* -------------- y2k out begin ---------------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0EW1.SP0EWD;*/
  /* MOVE 19 TO SP0EW1.SP0EWD1;*/
  /*  */
  /* -------------- y2k out end -----------------------------*/
  /*  */
  /*  */
  /* -------------- y2k in  begin ---------------------------*/
  /*  */
  SP0EW1.SP0EWD = VGVar.currentGregorianDate;
  /*  */
  /* -------------- y2k in  end -----------------------------*/
  /*  */

  converseLib.clearScreen();
  set SP0EM010 initial;
  SP0EM010.SP0EMTDT = VGVar.currentShortGregorianDate;

  if (COMMAREA.CAITEM != " ")
    SP0EM010.SP1ID = COMMAREA.CATOAP;
    COMMAREA.CAITEM = " ";
  end


   /* ************************************************************/
end // end SP0E001

// complete spgm
Function SP0E010()


  SP0EM010.SP0EMTDT = VGVar.currentShortGregorianDate;



  converse SP0EM010 ;



  SP0EM010.SP0EMMSG = " ";
  SP0EM010.VAGen_EZEMSG = " ";


  SP0ES1A(); /* check pf key routine*/

  if (SP0EM010.SP1ID != SP0EW1.SP0EWSID)
    SP0EW1.SP0EWSID = SP0EM010.SP1ID;
    SP0ES1B(); /* get sales program record*/
  else
    if (converseVar.eventKey is enter
     && SP0EM010.SP0EMMSG == " ")
      SP0ES1D(); /* set sales program status to 'c'*/
    end
  end


   /* ************************************************************/
end // end SP0E010

// check pf keys
Function SP0ES1A()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * **/

                    /* check pf keys*/

   /* ************************************************************/
      /* this statement group is to edit for valid attention*/
      /* keys and valid fast path usage.  fast path cannot be*/
      /* used when data has been modified or options have been*/
      /* selected.*/
   /* ************************************************************/



  if (converseVar.eventKey is enter)
    if (SP0EM010.CATOAP != " ")
      COMMAREA.CATOAP = SP0EM010.CATOAP;
      COMMAREA.CAITEM = SP0EM010.CAITEM;
      XSEXIT();
      SP0EM010.SP0EMMSG = COMMAREA.CAMSG;
      SP0EM010.CATOAP = " ";
      SP0EM010.CAITEM = " ";
      converseLib.validationFailed(99);
    end
  else
    if (converseVar.eventKey is pa2 /* cancel application*/
     || converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "SP0M";
      XSEXIT();
      SP0EM010.SP0EMMSG = COMMAREA.CAMSG;
      converseLib.validationFailed(99);
    else
      if (converseVar.eventKey is pf1) /* transfer to help facility*/
        XSPF1();
        SP0EM010.SP0EMMSG = COMMAREA.CAMSG;
        converseLib.validationFailed(99);
      else
        if (converseVar.eventKey is pf4) /* transfer to master menu*/
          XSPF4();
          SP0EM010.SP0EMMSG = COMMAREA.CAMSG;
          converseLib.validationFailed(99);
        else
          converseLib.validationFailed(1);
        end
      end
    end
  end


end // end SP0ES1A

// get sales program record
Function SP0ES1B()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * **/

       /* get sales program record and move to map*/

   /* * * * * * * * * * * * * * * * * * * * * * * * * * **/



  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0EM010.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SP1REC to SP0EM010 withV60Compat;
    SP0ES1C(); /* get code descriptions*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SP0EM010.SP0EMMSG = "SALES PROGRAM DOES NOT EXIST";
    else
      SP0EW1.SP0EWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0U";
      TA1REC.TA1LOCAT[2] = "SP0ES1B";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0EM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0EM010.SP0EMMSG = COMMAREA.CAMSG;
    end
  end




end // end SP0ES1B

// gets code descriptions
Function SP0ES1C()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * **/

     /* gets the code descriptions*/

   /* * * * * * * * * * * * * * * * * * * * * * * * * * **/


  if (SP0EM010.XQACD == " ")
    SP0EM010.XQADESC = "BLANK";
  else
    if (SP0EM010.XQACD in XQATBL.XQACD)
      SP0EM010.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex == 0)
      SP0EM010.XQADESC = "INVALID QUALITY CODE";
    end
  end



  if (SP0EM010.XLCCD == " ")
    SP0EM010.XLCDESC = "BLANK";
  else
    if (SP0EM010.XLCCD in XLCTBL.XLCCD)
      SP0EM010.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex == 0)
      set SP0EM010.XLCCD cursor, modified, bold;
      SP0EM010.XLCDESC = "INVALID LIFE CYCLE CODE";
    end
  end





  if (SP0EM010.XNDCD == " ")
    SP0EM010.XNDDESC = "BLANK";
  else
    if (SP0EM010.XNDCD in XNDTBL.XNDCD)
      SP0EM010.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex == 0)
      set SP0EM010.XNDCD cursor, modified, bold;
      SP0EM010.XNDDESC = "INVALID NIKE DEPT CODE";
    end
  end



  if (SP0EM010.SP1STAT == "P")
    SP0EM010.SP0EMSTD = "PARTIAL";
  end

  if (SP0EM010.SP1STAT == "C")
    SP0EM010.SP0EMSTD = "COMPLETE";
  end

  if (SP0EM010.SP1STAT == "A")
    SP0EM010.SP0EMSTD = "ACTIVE";
  end

  if (SP0EM010.SP1STAT == "I")
    SP0EM010.SP0EMSTD = "INACTIVE";
  end

  if (SP0EM010.SP1STAT == "F")
    SP0EM010.SP0EMSTD = "FINISHED";
  end



end // end SP0ES1C

// update sp1rec
Function SP0ES1D()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

            /* change sales program status to 'c' complete*/

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



  SP1REC.SP1STAT = "C";

  SP0EW1.SP0EWT1 = VGVar.currentFormattedTime;
  SP0EW1.SP0EWTH2 = SP0EW1.SP0EWTH1;
  SP0EW1.SP0EWTM2 = SP0EW1.SP0EWTM1;
  SP1REC.ZZZCHGTM = SP0EW1.SP0EWT2;

  /*  */
  /* ----------------- y2k out begin --------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0EW1.SP0EWD;*/
  /* MOVE 019 TO SP0EW1.SP0EWD1;*/
  /*  */
  /* ----------------- y2k out end ----------------------*/
  /*  */
  /*  */
  /* ----------------- y2k in  begin --------------------*/
  /*  */
  SP0EW1.SP0EWD = VGVar.currentGregorianDate;
  /*  */
  /* ----------------- y2k in  end ----------------------*/
  /*  */
  SP1REC.ZZZCHGDT = SP0EW1.SP0EWD;


  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* good update return*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SP0EM010.SP0EMMSG = "SALES PROGRAM COMPLETED - CONTINUE";
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0EM010.SP0EMMSG = "UNABLE TO UPDATE DATA. TRY AGAIN.";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0E   ";
      TA1REC.TA1LOCAT[2] = "SP0ES1D ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0EM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


end // end SP0ES1D

Record SP0EW1 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0EWUPF SP0EWUPF ; 
  10 SP0EWMSG SP0EWMSG ; 
  10 SP0EMOP SP0EMOP [20] ; 
  10 SP0EWD SP0EWD ; 
    15 SP0EWD1 SP0EWD1 ; 
    15 SP0EWD2 SP0EWD2 ; 
  10 SP0EWT1 SP0EWT1 ; 
    15 SP0EWTH1 SP0EWTH1 ; 
    15 SP0EWTC1 SP0EWTC1 ; 
    15 SP0EWTM1 SP0EWTM1 ; 
    15 SP0EWTC2 SP0EWTC2 ; 
    15 SP0EWTS1 SP0EWTS1 ; 
  10 SP0EWT2 SP0EWT2 ; 
    15 SP0EWTH2 SP0EWTH2 ; 
    15 SP0EWTM2 SP0EWTM2 ; 
  10 SP0EWVF SP0EWVF ; 
  10 SP0EWVF1 SP0EWVF1 ; 
  10 SP0EWMDF SP0EWMDF ; 
  10 SP0EWHDM SP0EWHDM ; 
  10 SP0EWSDM SP0EWSDM ; 
  10 SP0EWSID SP0EWSID ; 
  10 SP0EWACF SP0EWACF ; 
  10 SP0EWAPF SP0EWAPF ; 
  10 SP0EWID SP0EWID ; 
end // end SP0EW1

// ws map option field
DataItem SP0EMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all company flag
DataItem SP0EWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag
DataItem SP0EWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem SP0EWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century
DataItem SP0EWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem SP0EWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for header data mdt
DataItem SP0EWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold
DataItem SP0EWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path
DataItem SP0EWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field
DataItem SP0EWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select data mdt
DataItem SP0EWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0EWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem SP0EWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0EWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1
DataItem SP0EWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0EWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0EWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0EWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #1
DataItem SP0EWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0EWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem SP0EWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag
DataItem SP0EWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0EWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0EWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

