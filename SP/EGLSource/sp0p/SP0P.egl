package sp0p;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ko.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SP0P ****
// sales program inquiry        - product portion
// 
// overview:
// 
// 
// date created: sp0p (product inquiry) is a modification of
//               sp0f (product update).  sp0f originally was
//               separated from sp0u in       may 1987 -
// 
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// April '88   S.JOB    separated SP0P from SP0F....
// 07/19/88    S.JOB    B#9 - modify to show more than 28 prod.
// 07/25/88    S.JOB    B#10 - set maximum products at 500 for
//                             Susan Sanford.
// 12/16/88    JWOOD    ADDED NONCSP OPTION TO CALLS
// 12/16/88    JWOOD    ADDED XSSEGTR LOGIC
// 02/09/89    S.JOB    E#6: add 'all colors' capability.
// 09/07/89    S.JOB    b15: stop key error abends in map90.
// 10/03/90    S.JOB    *SUBSTITUTE PROD CATEGORY FOR FAMILY CD
//                      *ADD 'INCLUDE'/'EXCLUDE' PRODUCT FLAG
//                      *ADD MINIMUM PRODUCT REQ TO QUALIFY
// 02/13/91    S.JOB    e0: db name changes sy5prcfl to xqacd.
// 03/12/91    S.JOB    e0: INCREASE PRODUCT LIST TO HOLD 1000.
// 03/13/92    scantr   db changes & clean up records list
// 10/23.95    DLIDDL   Modified to determine if the salespgm
//                      is Canadian or US, so that when calling
//                      DPROD.VPRICE01, the correct country &
//                      currency code can be passed. Also added
//                      calls to SY2000 to get product/region
//                      data.
// 12/07/96    csawki   Added Product Category for Equipment
// y2kfix  11/01/97  pharwo  fix sp0p100 for year 2000.
// 03/24/98  vsanka     removed use of xvotbl and added code to
//                      access dcorp.vxvo0001 using the iomod
//                      vxvo0001.
//                      The statement group changed is: SA6
// 04/01/98  sgopal     Removed code that accesses XVOTBL in
//                      SP0PSA6.
// *********************
Program SP0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KOFREC KOFREC; // record
  SP0PW01 SP0PW01; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP9REC SP9REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VXVO0001 VXVO0001; // record
  WSY2000 WSY2000; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPCTBL; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use SP0PM.SP0PM030,  // forms
      SP0PM.SP0PM050, 
      SP0PM.SP0PM090, 
      SP0PM.SP0PM110
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0P010: SP0P010();



    if (SP0PM090.SP1ID <= " ") /* there still is no s.p. !!!!*/
      SP0PM090.SP0PMMSG = " PLEASE ENTER A SALES PROGRAM ID";
      goto SP0P010;
    else
      if (SP0PM090.SP1NM == "NEW SPID")
        SP0PM090.SP1NM = " ";
        COMMAREA.CAITEM = SP0PM090.SP1ID;
        goto SP0P010;
      end
    end


    if (COMMAREA.CAINQFL == "B")
      goto SP0P020; /* product family codes*/
    else
      if (COMMAREA.CAINQFL == "C")
        goto SP0P040; /* sport activity codes*/
      else
        goto SP0P080; /* product screen......default location*/
      end
    end



    SP0P020: SP0P020();



    goto SP0P030; /* always !!*/



    SP0P030: SP0P030();


    if (SP0PM030.SP1ID != SP0PW01.SP1ID) /* change in key*/
      goto SP0P010; /* transfer to new key process*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0P080; /* transfer to product screen*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0P020; /* transfer to product family codes*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0P040; /* transfer to sport activity screen*/
          else
            goto SP0P030; /* under all other situations -*/
          end
        end
      end
    end



    SP0P040: SP0P040();



    goto SP0P050; /* always!!*/



    SP0P050: SP0P050();


    if (SP0PM050.SP1ID != SP0PW01.SP1ID) /* change in key*/
      goto SP0P010; /* verify new sp id*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0P080; /* transfer to product*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0P020; /* transfer to product family codes*/
        else
          goto SP0P040; /* sport activity for all else*/
        end
      end
    end



    SP0P080: SP0P080();


    goto SP0P090; /* always*/



    SP0P090: SP0P090();


    if (SP0PM090.SP1ID != SP0PW01.SP1ID) /* change in key*/
      goto SP0P010; /* verify sp.id*/
    else
      if (converseVar.eventKey is pf15)
        goto SP0P020; /* transfer to family codes*/
      else
        if (converseVar.eventKey is pf16)
          goto SP0P040; /* transfer to sport activity codes*/
        else
          if (converseVar.eventKey is pf7
           || converseVar.eventKey is pf8)
            goto SP0P090; /* transfer to sport activity codes*/
          else
            if (converseVar.eventKey is enter
             && SP0PM090.SP0PWMOP[SP0PWSB2] == "S")
              set SP0PM110 initial;
              SP0PM110.SP0PMMSG = "PRESS PF3 TO EXIT ";
              SP0PM090.SP0PWMOP[SP0PWSB2] = "V";
              goto SP0P100; /* product detail....*/
            else
              goto SP0P080;
            end
          end
        end
      end
    end



    SP0P100: SP0P100();



    if (converseVar.validationMsgNum == 88)
                                     /* AN ERROR WAS DETECTED DURING A CALL*/
      goto SP0P090;
    else
      goto SP0P110;
    end



    SP0P110: SP0P110();



    if (converseVar.eventKey is pf14)
      goto SP0P080; /* transfer to product screen*/
    else
      if (converseVar.eventKey is pf15)
        goto SP0P020; /* transfer to family codes*/
      else
        if (converseVar.eventKey is pf16)
          goto SP0P040; /* transfer to sport activity*/
        else
          goto SP0P090; /* return to original module*/
        end
      end
    end



  end // end main
end // end SP0P

// SP0P - CALL SY2000
Function SP0P-CALL-SY2000()

     /* Get the Product/Region record*/

  set SQLCA empty;
  set WSY2000 empty;

  WSY2000.XGP-GPC-CD = SY2REC.XGPCD;
  WSY2000.SY-STY-NBR = SY2REC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SY2REC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05";
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";
  WSY2000.WSY2000-RETURN-CODE = 90;

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

   /* Product/Region record is found*/
   /* Overlay those fields common to both records*/

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    SY2REC.XGPCD = WSY2000.XGP-GPC-CD;
    SY2REC.SY1STNBR = WSY2000.SY-STY-NBR;
    SY2REC.SY2CLRID = WSY2000.SY-COLR-CD-ID;
    SY2REC.XDMCD = WSY2000.XDM-DIM-CD;
    SY2REC.XDR-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
    SY2REC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SY2REC.XSECD = WSY2000.XSE-SESN-CD;
    SY2REC.XSNYR = WSY2000.XSN-SESN-YR-RNG;
    SY2REC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SY2REC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SY2REC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SY2REC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;
    SY2REC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SY2REC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SY2REC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SY2REC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    SY2REC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SY2REC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SY2REC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SY2REC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
    SY2REC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SY2REC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SY2REC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
    SY2REC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SY2REC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SY2REC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SY2REC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    SY2REC.XWHCD[1] = WSY2000.XWH-WHSE-CD[1];
    SY2REC.XWHCD[2] = WSY2000.XWH-WHSE-CD[2];
    SY2REC.XWHCD[3] = WSY2000.XWH-WHSE-CD[3];
    SY2REC.XWHCD[4] = WSY2000.XWH-WHSE-CD[4];
    SY2REC.XWHCD[5] = WSY2000.XWH-WHSE-CD[5];
    SY2REC.XWHCD[6] = WSY2000.XWH-WHSE-CD[6];
    SY2REC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SY2REC.SY2BOSWI = WSY2000.SY-BO-SW;
    SY2REC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;
    SY2REC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;
  else

    /* Database DPROD.VSYREG02 is busy*/

    if (WSY2000.WSY2000-RETURN-CODE == 98)
      /* next sentence*/
    else

      /* Record is not found*/

      if (WSY2000.WSY2000-RETURN-CODE == 02)
        /* next sentence*/
      else

        /* Bad return code*/

        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        SP0PW01.SP0PW-WSY2000-GPC-CD = SY2REC.XGPCD;
        SP0PW01.SP0PW-WSY2000-STY-NBR = SY2REC.SY1STNBR;
        SP0PW01.SP0PW-WSY2000-COLR-CD = SY2REC.SY2CLRID;
        SP0PW01.SP0PW-WSY2000-DIM-CD = SY2REC.XDMCD;
        SP0PW01.SP0PW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        SP0PW01.SP0PW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = SP0PW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
      end
    end
  end
end // end SP0P-CALL-SY2000

// product trafic director
Function SP0P010()



   /* SENTRY;*/


   /* SSEGTR                         ;  SET SEGMENTED TRANSACTION*/

  converseLib.validationFailed(0);
  set SP0PW01 empty;

  if (COMMAREA.CAITEM != " ")
    SP0PW01.SP0PWLOC = COMMAREA.CAITEM;
    if (SP0PW01.SP0PWL1 != " ")
      COMMAREA.CAINQFL = SP0PW01.SP0PWL1; /* strip off the app. id*/
      SP0PW01.SP0PWL1 = " ";
      COMMAREA.CAITEM = SP0PW01.SP0PWLOC;
    end
  end


  if (COMMAREA.CAITEM == " ")
    set SP0PM090 initial;
    SP0PS10(); /* set up receive screen*/
  else
    SP0PM090.SP1ID = COMMAREA.CAITEM;
    SP0PW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAINQFL = COMMAREA.CAINQFL;
    COMMAREA.CAITEM = " ";
    SP0PS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0PM090.SP1ID > " ")
    exit stack;
  end

  SP0PM090.SP1NM = "NEW SPID";
  SP0PM090.SP0PMMSG = "ENTER A SALES PROGRAM ID";


  converse SP0PM090 ;


  SP0PS13(); /* reset map attributes*/
  SP0PS14(); /* check fast pathing....*/



end // end SP0P010

// initialization and reset
Function SP0P020()


   /* ************************************************************/
      /* order type family codes on map sp0p030*/
   /* ************************************************************/

  set SP0PM030 empty;

  SP0PS21();



end // end SP0P020

// family codes
Function SP0P030()



  converse SP0PM030 ;



  SP0PS31(); /* edit for family cd. screen*/



end // end SP0P030

// initialization and reset
Function SP0P040()



   /* ************************************************************/
      /* process initializes sports activity code screen*/
                  /* map sp0pm050.*/
   /* ************************************************************/

  set SP0PM050 empty;
  converseLib.validationFailed(0);

  SP0PS41();



end // end SP0P040

// sports act codes
Function SP0P050()




  converse SP0PM050 ;




  SP0PS51();



end // end SP0P050

// select set of sp product types
Function SP0P080()



   /* ************************************************************/
      /* purpose: set up a W.S. array of product id's for a*/
      /* sales program.  array has a limit of 1000.*/
   /* ************************************************************/

  set SP0PM090 empty;
  SP0PW01.SP0PWMSG = " "; /* clear out w.s. error mess.*/
  SP0PW01.SP0PWTL3 = " ";
  SP0PW01.SP1ID = SP1REC.SP1ID;
  SP0PW01.SP0PWSB1 = 1;
  SP0PW01.SP0PWSB2 = 1;
  SP0PW01.SP0PWPOS = 1;
  converseLib.validationFailed(0);

  set SP5REC empty;
  set SQLCA empty;

  SP5REC.SP1ID = SP1REC.SP1ID;

  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PW01.SP0PWTSZ = +0;
    SP0PW01.SP0PWSB1 = +1;
    while (SP0PW01.SP0PWSB1 <= +1000 /* max. # products !*/
     && SQLCA.VAGen_SQLCODE == +0)
      SP0PS81(); /* select next sp4rec*/
    end
    call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0PW01.SP0PWTSZ = SP0PW01.SP0PWSB1 - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0P080 ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0PM090";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    exit stack;
  end


  SP0PS82(); /* move records to map*/

  if (SP0PW01.SP0PWMSG == " ")
     /* no errors*/
  else
    SP0PM090.SP0PMMSG = SP0PW01.SP0PWMSG; /* move in error msg*/
  end





end // end SP0P080

// product id listing for s.p.
Function SP0P090()




      /* ********************************************************/
      /* ** this process is used to control access to product  **/
      /* *  recs that are valid for a sales program.  this     **/
      /* *  allows the user to add, delete, or select a product**/
      /* *  type based upon the selected set of products  for  **/
      /* *  the sales program.  the user can also scroll       **/
      /* *  forward and backwards through the product set.     **/
      /* ********************************************************/


  SP0PM090.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0PM090.SP1ID = SP0PW01.SP1ID;
  SP0PM090.SP1NM = SP1REC.SP1NM;
  SP0PM090.SP1STAT = SP1REC.SP1STAT;
  SP0PW01.SP0PWSB1 = 0;


   /* *********************************************8*/
      /* sp0fs91 used to scroll forward*/
      /* sp0fs92 used to scroll backward*/
   /* *********************************************8*/

  if (converseVar.eventKey is pf8)
    SP0PS91();
  else
    if (converseVar.eventKey is pf7)
      SP0PS92();
    end
  end




  converse SP0PM090 ;



  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    exit stack;
  end

   /* ************************************************************/
      /* sp0fs93  main edit routine ............*/
   /* *************************************************************/

  SP0PS93();


   /* *************************************************************/
      /* were pf keys   entered to transfer control ?*/
   /* *************************************************************/


  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end


   /* *************************************************************/
      /* sp0p100  used to show  s.p. product types.*/
   /* *************************************************************/

  SP5REC.SP1ID = SP0PM090.SP1ID;
  SP5REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SP5REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
  SP5REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
  SP5REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];
  SP0PW01.SP5KEY = SP5REC.SP5KEY;



end // end SP0P090

// initialization and reset
Function SP0P100()


  SP0PM110.XXXCURDT = VGVar.currentShortGregorianDate;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE '19' TO SP0PW01.SP0PWD1;    /* work century*/
   /* MOVE EZEDTE TO SP0PW01.SP0PWD2;  /* work date*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  SP0PW01.SP0PWD = VGVar.currentGregorianDate; /* work date*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/


  SP0PS98(); /* get dimension description*/
  SP0PS99(); /* get gpc description*/

   /* ***********************************************************/
      /* sp0psa6  determine the country of the sales program*/
   /* ***********************************************************/

  SP0PSA6();
   /* ***********************************************************/
      /* sp0psa1  get the price defaults for color or style*/
   /* ***********************************************************/

  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

  SP0PSA1();

   /* ***********************************************************/
      /* sp0psa2  get the sizes available*/
   /* ***********************************************************/
  SP0PSA2();


   /* ***********************************************************/
       /* load the sp5rec to sp0pm100*/
   /* ***********************************************************/

  SP5REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SP5REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
  SP0PM110.SY1STYNM = SP0PM090.SY1STYNM[SP0PWSB2];
  SP5REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
  SP0PM110.SY2CLRDS = SP0PM090.SY2CLRDS[SP0PWSB2];
  SP5REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];
  SP0PSA3();



end // end SP0P100

// product id del / change for sp
Function SP0P110()




   /* ************************************************************/
   /* *   this process is used to converse the header screen.*/
      /* the screen can be used to del and / or change products*/
       /* for sales programs.*/
   /* ************************************************************/



  converse SP0PM110 ;



  COMMAREA.CAITEM = SP0PM110.CAITEM;


  SP0PSB1(); /* main edit process*/



end // end SP0P110

// vortyp01 close set
Function SP0PCSP()

      /* *********************************************************/
      /* * this statement group performs a close set for        **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue close set request*/

  call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for close set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0PCSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SPOPM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end
   /* * *************************************************************/
end // end SP0PCSP

// vortyp01 select next
Function SP0PNSP()

      /* *********************************************************/
      /* * this statement group performs a select next for      **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue select next to get request*/

  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0PNSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SP0PM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end

   /* *************************************************************/
end // end SP0PNSP

// set up sp1id receive screen
Function SP0PS10()




  set SP0PM090.SP1ID cursor, bold;
  set SP0PM090.SP1NM protect, invisible;
  set SP0PM090.SP1STAT protect, invisible;

  SP0PW01.SP0PWSB1 = 1;
  while (SP0PW01.SP0PWSB1 <= 14)
    set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
    set SP0PM090.XGPCD[SP0PWSB1] protect, invisible;
    set SP0PM090.XDMCD[SP0PWSB1] protect, invisible;
    set SP0PM090.SY1STNBR[SP0PWSB1] protect, invisible;
    set SP0PM090.SY1STYNM[SP0PWSB1] protect, invisible;
    set SP0PM090.SY2CLRID[SP0PWSB1] protect, invisible;
    set SP0PM090.SY2CLRDS[SP0PWSB1] protect, invisible;
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end




end // end SP0PS10

// validate sales program id
Function SP0PS12()



   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0PW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0PM090 withV60Compat;
    SP0PW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0I";
      COMMAREA.CAITEM = SP0PM090.SP1ID;
      XSEXIT();
    else
      SP0PW01.SP0PWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0P";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0PS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0PM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0PS12

// reset  sp1id receive screen
Function SP0PS13()




  set SP0PM090.SP1ID initialAttributes;
  set SP0PM090.SP1NM initialAttributes;
  set SP0PM090.SP1STAT initialAttributes;

  SP0PW01.SP0PWSB1 = 1;
  while (SP0PW01.SP0PWSB1 <= 14)
    set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
    set SP0PM090.XGPCD[SP0PWSB1] initialAttributes;
    set SP0PM090.XDMCD[SP0PWSB1] initialAttributes;
    set SP0PM090.SY1STNBR[SP0PWSB1] initialAttributes;
    set SP0PM090.SY1STYNM[SP0PWSB1] initialAttributes;
    set SP0PM090.SY2CLRID[SP0PWSB1] initialAttributes;
    set SP0PM090.SY2CLRDS[SP0PWSB1] initialAttributes;
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end

  SP0PM090.SP0PMMSG = " ";



end // end SP0PS13

// edit for fast path, data modif
Function SP0PS14()


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
   /* *********************************************************/

  if (SP0PM090.CATOAP != " ")
    COMMAREA.CATOAP = SP0PM090.CATOAP;
    COMMAREA.CAITEM = SP0PM090.CAITEM;
    XSEXIT();
  end



   /* **********************************************************/
   /* ***** pf keys...................                    ******/
   /* **********************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0PM090.SP1ID;
    XSEXIT();
  end



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end



end // end SP0PS14

// sp1rec sp for family codes
Function SP0PS21()


   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the PRODUCT CATEGORIES to sp0pm030.*/
   /* ************************************************************/

  set SP0PM030 empty;
  converseLib.validationFailed(0);
  SP0PM030.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0PM030.SP1ID = SP0PW01.SP1ID;

  SP0PW01.SP0PWSB1 = 1;

  while (SP0PW01.SP0PWSB1 < 21)
    set SP0PM030.XPCCD[SP0PWSB1] initialAttributes;
    set SP0PM030.XPCDESC[SP0PWSB1] initialAttributes;
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end



   /* ************************************************************/
      /* select the any PRODUCT CATEGORIES for this s.p. and*/
      /* show on map sp0fm030.*/
   /* ************************************************************/



  SP0PW01.SP0PWSB1 = 1;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SP1REC to SP0PM030 withV60Compat;
  end


  while (SP0PW01.SP0PWSB1 < 21
   && SP1REC.XPCCD[SP0PWSB1] != " ")
    if (SQLCA.VAGen_SQLCODE == 0)
      SP0PM030.XPCCD[SP0PWSB1] = SP1REC.XPCCD[SP0PWSB1];
      if (SP1REC.XPCCD[SP0PWSB1] in XPCTBL.XPCCD)
        SP0PM030.XPCDESC[SP0PWSB1] = XPCTBL.XPCDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0PM030.XPCDESC[SP0PWSB1] = "INVALID CODE";
      end
      SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0P   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0PS21 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0PM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (SP0PW01.SP0PWSB1 == 1)
    SP0PW01.SP0PWSB1 = 999;
    SP0PW01.SP0PWMSG = "NO PRODUCT CATEGORIES NOW EXIST";
  end



      /* sp0fs22 sort method for PRODUCT CATEGORIES*/



  SP0PS22();



end // end SP0PS21

// sort method -family codes
Function SP0PS22()


   /* ************************************************************/
   /* *   sort method for map array.*/
   /* ************************************************************/



  if (SP0PW01.SP0PWSB1 != 999)
    SP0PW01.SP0PWTSZ = SP0PW01.SP0PWSB1 - 1;
  else
    SP0PW01.SP0PWTSZ = 0;
  end

  SP0PW01.SP0PWSB1 = 1;
  SP0PW01.SP0PWSB2 = 2;

  while (SP0PW01.SP0PWSB1 < 21
   && SP0PW01.SP0PWTSZ >= SP0PW01.SP0PWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0PW01.SP0PWSB2 < 21
     && SP0PW01.SP0PWTSZ >= SP0PW01.SP0PWSB2)
      if (SP0PM030.XPCCD[SP0PWSB1] > SP0PM030.XPCCD[SP0PWSB2])
        SP0PW01.XPCCD = SP0PM030.XPCCD[SP0PWSB2];
        SP0PW01.XPCDESC = SP0PM030.XPCDESC[SP0PWSB2];
        SP0PM030.XPCCD[SP0PWSB2] = SP0PM030.XPCCD[SP0PWSB1];
        SP0PM030.XPCDESC[SP0PWSB2] = SP0PM030.XPCDESC[SP0PWSB1];
        SP0PM030.XPCCD[SP0PWSB1] = SP0PW01.XPCCD;
        SP0PM030.XPCDESC[SP0PWSB1] = SP0PW01.XPCDESC;
        SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB2 + 1;
      else
        SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB2 + 1;
      end
    end
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB1 + 1;
  end



end // end SP0PS22

// main edit group for family cd
Function SP0PS31()




   /* *********************************************************/
      /* this statement group checks valid pf/enter key...*/
   /* *********************************************************/



  SP0PW01.SP0PWMSG = " ";



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0PW01.SP0PWVF = "N";
    return;
  end


  SP0PS33(); /* check fast pathing*/


  if (SP0PM030.SP1ID != SP0PW01.SP1ID) /* change in key*/
    COMMAREA.CAITEM = SP0PM030.SP1ID;
    if (converseVar.eventKey is pf14)
      COMMAREA.CAINQFL = "A";
      exit stack;
    else
      if (converseVar.eventKey is pf16)
        COMMAREA.CAINQFL = "C";
        exit stack;
      else
        COMMAREA.CAINQFL = "B";
        exit stack;
      end
    end
  end



end // end SP0PS31

// edit for fast path, data modif
Function SP0PS33()




   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
                        /* pf1, and pf4.*/
   /* *********************************************************/


  if (SP0PM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0PM030.CATOAP;
    COMMAREA.CAITEM = SP0PM030.CAITEM;
    XSEXIT();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    SP0PM030.CATOAP = " ";
    SP0PM030.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAFROMAP = "SP0P";
    COMMAREA.CAITEM = SP0PM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAFROMAP = "SP0P";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end



end // end SP0PS33

// sp1rec sp for sports act cd
Function SP0PS41()




   /* ************************************************************/
   /* *   if the return code from the select set was good then*/
      /* go through and move the sports act codes to sp0pm050.*/
      /* this process is used to initialize the necessary*/
      /* fields for the sports act s.p. codes.*/
   /* ************************************************************/



  set SP0PM050 empty;
  SP0PM050.XXXCURDT = VGVar.currentShortGregorianDate;
  SP0PM050.SP1ID = SP0PW01.SP1ID;

  SP0PW01.SP0PWSB1 = 1;

  while (SP0PW01.SP0PWSB1 < 21)
    set SP0PM050.XSPCD[SP0PWSB1] initialAttributes;
    set SP0PM050.XSPDESC[SP0PWSB1] initialAttributes;
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end



   /* ************************************************************/
      /* select the any sports act codes for this s.p. and*/
      /* show on map sp0fm050.*/
   /* ************************************************************/



  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0PS41 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0PM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  else
    SP0PM050.SP1NM = SP1REC.SP1NM;
    SP0PM050.SP1STAT = SP1REC.SP1STAT;
  end

  SP0PW01.SP0PWSB1 = 1;
  SP0PW01.SP0PWSB2 = 1;

  while (SP0PW01.SP0PWSB1 < 21
   && SP1REC.XSPCD[SP0PWSB1] != " ")
    SP0PW01.SP0PWUPF = "N";
    if (SP1REC.XSPCD[SP0PWSB1] != "**")

      SP0PM050.XSPCD[SP0PWSB2] = SP1REC.XSPCD[SP0PWSB1];
      if (SP1REC.XSPCD[SP0PWSB1] in XSPTBL.XSPCD)
        SP0PM050.XSPDESC[SP0PWSB2] = XSPTBL.XSPDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0PM050.XSPDESC[SP0PWSB2] = "INVALID CODE";
      end
      SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB2 + 1;
    end
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end

  if (SP0PW01.SP0PWSB2 == 1)
    SP0PW01.SP0PWSB2 = 999;
    SP0PW01.SP0PWMSG = "NO SPORTS ACTIVITY CODES CURRENTLY EXIST";
    SP0PW01.SP0PWFL5 = " ";
  else
    SP0PW01.SP0PWFL5 = "*";
  end



      /* sp0fs42 sort method for sports activity codes*/



  SP0PS42();



end // end SP0PS41

// sort methold for sports act
Function SP0PS42()




   /* ************************************************************/
   /* *   sort method for map array.*/
   /* ************************************************************/



  if (SP0PW01.SP0PWSB2 != 999)
    SP0PW01.SP0PWTSZ = SP0PW01.SP0PWSB2 - 1;
  else
    SP0PW01.SP0PWTSZ = 0;
  end

  SP0PW01.SP0PWSB1 = 1;
  SP0PW01.SP0PWSB2 = 2;

  while (SP0PW01.SP0PWSB1 < 21
   && SP0PW01.SP0PWTSZ >= SP0PW01.SP0PWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0PW01.SP0PWSB2 < 21
     && SP0PW01.SP0PWTSZ >= SP0PW01.SP0PWSB2)
      if (SP0PM050.XSPCD[SP0PWSB1] > SP0PM050.XSPCD[SP0PWSB2])
        SP0PW01.XSPCD = SP0PM050.XSPCD[SP0PWSB2];
        SP0PW01.XSPDESC = SP0PM050.XSPDESC[SP0PWSB2];
        SP0PM050.XSPCD[SP0PWSB2] = SP0PM050.XSPCD[SP0PWSB1];
        SP0PM050.XSPDESC[SP0PWSB2] = SP0PM050.XSPDESC[SP0PWSB1];
        SP0PM050.XSPCD[SP0PWSB1] = SP0PW01.XSPCD;
        SP0PM050.XSPDESC[SP0PWSB1] = SP0PW01.XSPDESC;
        SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB2 + 1;
      else
        SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB2 + 1;
      end
    end
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    SP0PW01.SP0PWSB2 = SP0PW01.SP0PWSB1 + 1;
  end



end // end SP0PS42

// main edit group for sports cds
Function SP0PS51()



  SP0PW01.SP0PWMSG = " ";

      /* check for valid attention keys*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    return;
  end


  SP0PS53(); /* check attention keys*/

  if (SP0PM050.SP1ID != SP0PW01.SP1ID) /* new s.p.id*/
    COMMAREA.CAITEM = SP0PM050.SP1ID;
    if (converseVar.eventKey is pf14)
      COMMAREA.CAINQFL = "A";
      exit stack;
    else
      if (converseVar.eventKey is pf15)
        COMMAREA.CAINQFL = "B";
        exit stack;
      else
        COMMAREA.CAINQFL = "C";
        exit stack;
      end
    end
  end



end // end SP0PS51

// edit for fast path, data modif
Function SP0PS53()


   /* *********************************************************/
      /* edits for fast path, pf1,pf4.*/
   /* *********************************************************/


  if (SP0PM050.CATOAP != " ")
    COMMAREA.CATOAP = SP0PM050.CATOAP;
    COMMAREA.CAITEM = SP0PM050.CAITEM;
    XSEXIT();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    SP0PM050.CATOAP = " ";
    SP0PM050.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAFROMAP = "SP0P";
    COMMAREA.CAITEM = SP0PM050.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAFROMAP = "SP0P";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end




end // end SP0PS53

// sp5rec sp for product records
Function SP0PS81()
   /* **/


  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP5REC.SP5PRODI == "I") /* INCLUDED PRODUCT*/
      SP0PW01.XGPCD[SP0PWSB1] = SP5REC.XGPCD;
      SP0PW01.SY1STNBR[SP0PWSB1] = SP5REC.SY1STNBR;
      SP0PW01.SY2CLRID[SP0PWSB1] = SP5REC.SY2CLRID;
      SP0PW01.XDMCD[SP0PWSB1] = SP5REC.XDMCD;
      SP0PW01.SP2MNQTY[SP0PWSB1] = SP5REC.SP2MNQTY;
      if (SP5REC.SP5KEY == SP0PW01.SP5KEY)
        SP0PW01.SP0PWPOS = SP0PW01.SP0PWSB1;
      end
      SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FS81 ";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0PW01.SP0PWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end


end // end SP0PS81

// to load 1st 14 product id's
Function SP0PS82()




   /* ************************************************************/
   /* *   select the first 14 product recs for this s.p. and*/
      /* show on map sp0fm090.*/
   /* ************************************************************/

      /* exit for a file i/o error in sp0fs82*/


  if (converseVar.validationMsgNum != +0)
    return;
  end

  SP0PW01.SP0PWPOS = SP0PW01.SP0PWPOS - 1; /* determines cursor position*/

  if (SP0PW01.SP0PWPOS > SP0PW01.SP0PWTSZ)
    SP0PW01.SP0PWPOS = SP0PW01.SP0PWTSZ - 2;
  end

  if (SP0PW01.SP0PWPOS < 0)
    SP0PW01.SP0PWPOS = 0;
  end

  SP0PW01.SP0PWSB1 = 0;

  while (SP0PW01.SP0PWSB1 < 14)
    SP0PW01.SP0PWPOS = SP0PW01.SP0PWPOS + 1;
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    if (SP0PW01.SP0PWSB1 > SP0PW01.SP0PWTSZ)
      SP0PM090.XGPCD[SP0PWSB1] = " ";
      SP0PM090.SY1STNBR[SP0PWSB1] = " ";
      SP0PM090.SY2CLRID[SP0PWSB1] = " ";
      SP0PM090.XDMCD[SP0PWSB1] = " ";
      SP0PM090.SP2MNQTY[SP0PWSB1] = " ";
      SP0PM090.SY1STYNM[SP0PWSB1] = " ";
      SP0PM090.SY2CLRDS[SP0PWSB1] = " ";
      set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
         /* MOVE 99 TO SP0PW01.SP0PWSB1;*/
    else
      if (SP0PW01.SY1STNBR[SP0PWPOS] != " ")
        SP0PM090.XGPCD[SP0PWSB1] = SP0PW01.XGPCD[SP0PWPOS];
        SP0PM090.SY1STNBR[SP0PWSB1] = SP0PW01.SY1STNBR[SP0PWPOS];
        SY1REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY1REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SP0PM090.SY2CLRID[SP0PWSB1] = SP0PW01.SY2CLRID[SP0PWPOS];
        SY2REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY2REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SY2REC.SY2CLRID = SP0PW01.SY2CLRID[SP0PWPOS];
        SY2REC.XDMCD = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.XDMCD[SP0PWSB1] = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.SP2MNQTY[SP0PWSB1] = SP0PW01.SP2MNQTY[SP0PWPOS];
        set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
        SP0PS83(); /* get descriptions*/
      else
        set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
      end
    end
  end

  if (SP0PW01.SP0PWTSZ == 0)
    SP0PM090.SP0PMMSG = "NO PRODUCT TYPES EXIST FOR THIS S.P.";
    SP0PM090.VAGen_EZEMSG = "use pf3 to exit this screen.              ";
    SP0PW01.SP0PWFL3 = " ";
  end



end // end SP0PS82

// get style , color & dim descru
Function SP0PS83()


   /* ************************************************************/
   /* *   this statement group will get the product style, gpc, &*/
      /* color descriptions from the db2 table.*/
   /* ************************************************************/

  set SQLCA empty;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PM090.SY1STYNM[SP0PWSB1] = SY1REC.SY1STYNM;
  else
    SP0PM090.SY1STYNM[SP0PWSB1] = "INVALID STYLE TYPE";
  end

    /* ------------  color / dimension -----------*/

  set SQLCA empty;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PM090.SY2CLRDS[SP0PWSB1] = SY2REC.SY2CLRDS;
  else
    if (SY2REC.SY2CLRID == "***" /* all colors*/
     && SY2REC.XDMCD == "**")   
      SP0PM090.SY2CLRDS[SP0PWSB1] = "ALL COLORS        ";
    else
      SP0PM090.SY2CLRDS[SP0PWSB1] = "INVALID COLOR TYPE";
    end
  end



end // end SP0PS83

// forward scroll for product id
Function SP0PS91()


   /* *  sp0ps91 used to scroll forward*/


  if (SP0PW01.SP0PWTSZ <= 14)
    SP0PM090.SP0PMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



  if (SP0PM090.SP0PMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0PW01.SP0PWTSZ > 14)
    set SP0PM090 empty;
    SP0PM090.XXXCURDT = VGVar.currentShortGregorianDate;
    SP0PM090.SP1ID = SP1REC.SP1ID;
    SP0PM090.SP1NM = SP1REC.SP1NM;
    SP0PM090.SP1STAT = SP1REC.SP1STAT;
    while (SP0PW01.SP0PWSB1 < 14)
      SP0PW01.SP0PWPOS = SP0PW01.SP0PWPOS + 1;
      SP0PW01.SP0PWSB1 = 1 + SP0PW01.SP0PWSB1;
      set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
      set SP0PM090.XGPCD[SP0PWSB1] initialAttributes;
      set SP0PM090.SY1STNBR[SP0PWSB1] initialAttributes;
      set SP0PM090.SY2CLRID[SP0PWSB1] initialAttributes;
      set SP0PM090.XDMCD[SP0PWSB1] initialAttributes;
      set SP0PM090.SY1STYNM[SP0PWSB1] initialAttributes;
      set SP0PM090.SY2CLRDS[SP0PWSB1] initialAttributes;
      set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
      if (SP0PW01.SP0PWPOS > SP0PW01.SP0PWTSZ)
        SP0PM090.SP0PMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0PM090.SP0PWMOP[SP0PWSB1] = " ";
        set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
        SP0PM090.XGPCD[SP0PWSB1] = " ";
        SP0PM090.SY1STNBR[SP0PWSB1] = " ";
        SP0PM090.SY2CLRID[SP0PWSB1] = " ";
        SP0PM090.XDMCD[SP0PWSB1] = " ";
        SP0PM090.SP2MNQTY[SP0PWSB1] = " ";
        SP0PM090.SY1STYNM[SP0PWSB1] = " ";
        SP0PM090.SY2CLRDS[SP0PWSB1] = " ";
      else
        set SY1REC empty;
        set SY2REC empty;
        SP0PM090.SP0PMMSG = " ";
        SP0PM090.XGPCD[SP0PWSB1] = SP0PW01.XGPCD[SP0PWPOS];
        SP0PM090.SY1STNBR[SP0PWSB1] = SP0PW01.SY1STNBR[SP0PWPOS];
        SP0PM090.SY2CLRID[SP0PWSB1] = SP0PW01.SY2CLRID[SP0PWPOS];
        SY1REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY1REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SY2REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY2REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SY2REC.SY2CLRID = SP0PW01.SY2CLRID[SP0PWPOS];
        SY2REC.XDMCD = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.XDMCD[SP0PWSB1] = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.SP2MNQTY[SP0PWSB1] = SP0PW01.SP2MNQTY[SP0PWPOS];
        SP0PS83(); /* get description*/
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0PW01.SP0PWPOS == SP0PW01.SP0PWTSZ)
    SP0PM090.SP0PMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0PS91

// backward scroll for products
Function SP0PS92()




   /* *  sp0ps92 used to scroll backward*/



  if (converseVar.eventKey is pf7)
    SP0PW01.SP0PWPOS = SP0PW01.SP0PWPOS - 28;
    if (SP0PW01.SP0PWPOS < 0)
      SP0PW01.SP0PWPOS = 0;
    end
  end



  if (SP0PM090.SP0PMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    set SP0PM090 empty;
    SP0PM090.XXXCURDT = VGVar.currentShortGregorianDate;
    SP0PM090.SP1ID = SP1REC.SP1ID;
    SP0PM090.SP1NM = SP1REC.SP1NM;
    SP0PM090.SP1STAT = SP1REC.SP1STAT;
    while (SP0PW01.SP0PWSB1 < 14)
      SP0PW01.SP0PWPOS = SP0PW01.SP0PWPOS + 1;
      SP0PW01.SP0PWSB1 = 1 + SP0PW01.SP0PWSB1;
      set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
      set SP0PM090.XGPCD[SP0PWSB1] initialAttributes;
      set SP0PM090.SY1STNBR[SP0PWSB1] initialAttributes;
      set SP0PM090.SY2CLRID[SP0PWSB1] initialAttributes;
      set SP0PM090.XDMCD[SP0PWSB1] initialAttributes;
      set SP0PM090.SY1STYNM[SP0PWSB1] initialAttributes;
      set SP0PM090.SY2CLRDS[SP0PWSB1] initialAttributes;
      if (SP0PW01.SP0PWPOS > SP0PW01.SP0PWTSZ)
        SP0PM090.SP0PMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
        SP0PM090.XGPCD[SP0PWSB1] = " ";
        SP0PM090.SY1STNBR[SP0PWSB1] = " ";
        SP0PM090.SY2CLRID[SP0PWSB1] = " ";
        SP0PM090.XDMCD[SP0PWSB1] = " ";
        SP0PM090.SP2MNQTY[SP0PWSB1] = " ";
        SP0PM090.SY1STYNM[SP0PWSB1] = " ";
        SP0PM090.SY2CLRDS[SP0PWSB1] = " ";
        set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
      else
        set SY1REC empty;
        set SY2REC empty;
        SP0PM090.SP0PMMSG = " ";
        SP0PM090.XGPCD[SP0PWSB1] = SP0PW01.XGPCD[SP0PWPOS];
        SP0PM090.SY1STNBR[SP0PWSB1] = SP0PW01.SY1STNBR[SP0PWPOS];
        SY1REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY1REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SP0PM090.SY2CLRID[SP0PWSB1] = SP0PW01.SY2CLRID[SP0PWPOS];
        SY2REC.XGPCD = SP0PW01.XGPCD[SP0PWPOS];
        SY2REC.SY1STNBR = SP0PW01.SY1STNBR[SP0PWPOS];
        SY2REC.SY2CLRID = SP0PW01.SY2CLRID[SP0PWPOS];
        SY2REC.XDMCD = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.XDMCD[SP0PWSB1] = SP0PW01.XDMCD[SP0PWPOS];
        SP0PM090.SP2MNQTY[SP0PWSB1] = SP0PW01.SP2MNQTY[SP0PWPOS];
        set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
        SP0PS83(); /* get description*/
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0PW01.SP0PWPOS == 14)
    SP0PM090.SP0PMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0PS92

// main edit group for product id
Function SP0PS93()


   /* *********************************************************/
      /* validate pf/enter key selection.*/
   /* *********************************************************/

  SP0PW01.SP0PWVF1 = " ";

  if (SP0PM090.SP1ID != SP0PW01.SP1ID) /* change in key*/
    COMMAREA.CAITEM = SP0PM090.SP1ID;
    if (converseVar.eventKey is pf15)
      COMMAREA.CAINQFL = "B";
      exit stack;
    else
      if (converseVar.eventKey is pf16)
        COMMAREA.CAINQFL = "C";
        exit stack;
      else
        COMMAREA.CAINQFL = "A";
        exit stack;
      end
    end
  end


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    return;
  end


  SP0PS95(); /* pf activity*/

   /* ************************************************************/
      /* sp0fs94  used to set fields to normal, and*/
               /* to check fields for entry.  if a bad selection*/
               /* code is used sp0pw1.sp0pwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
   /* ************************************************************/

  SP0PS94();

  if (converseVar.validationMsgNum > 0
   || SP0PW01.SP0PWVF == "N")
    SP0PW01.SP0PWVF = "N";
    return;
  end


   /* ************************************************************/
    /* was option selected select ?  if not,send message*/
   /* ************************************************************/

  if (SP0PW01.SP0PWVF == " ")
    SP0PW01.SP0PWVF = "N";
    converseLib.validationFailed(4);
    SP0PM090.SP0PMMSG = "PLEASE SELECT A PRODUCT OR EXIT";
    return;
  end



   /* ************************************************************/
      /* sp0fs96  checking for valid style codes & descriptions*/
      /* sp0fs97  checking for valid color codes & descriptions*/
      /* sp0fs98  checking for valid dim codes*/
      /* sp0fs99  checking for gpc code descriptions*/
   /* ************************************************************/

  if (SP0PM090.SP0PWMOP[SP0PWPOS] == "S"
   || SP0PM090.SP0PWMOP[SP0PWPOS] == "A")
    SP0PS96();
    SP0PS97();
    SP0PS98();
    SP0PS99();
  end

  if (SP0PW01.SP0PWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end


   /* ************************************************************/
      /* sp0fs9a  does the s.p. product id already exist ?*/
               /* will check when a,s, or d is entered.*/
   /* ************************************************************/

  if (SP0PM090.SP0PWMOP[SP0PWSB2] != " ")
    SP0PS9A();
  end

  if (SP0PW01.SP0PWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end



end // end SP0PS93

// validate select code.
Function SP0PS94()


   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was an  's' select.*/
   /* ************************************************************/

  SP0PM090.SP0PMMSG = " ";
  SP0PW01.SP0PWVF = " ";
  SP0PW01.SP0PWSB1 = 0;

  while (SP0PW01.SP0PWSB1 < 14)
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    set SP0PM090.XGPCD[SP0PWSB1] initialAttributes;
    set SP0PM090.SY1STNBR[SP0PWSB1] initialAttributes;
    set SP0PM090.SY2CLRID[SP0PWSB1] initialAttributes;
    set SP0PM090.XDMCD[SP0PWSB1] initialAttributes;
    set SP0PM090.SY1STYNM[SP0PWSB1] initialAttributes;
    set SP0PM090.SY2CLRDS[SP0PWSB1] initialAttributes;
    if (SP0PM090.SY1STNBR[SP0PWSB1] != " ") /* line has a style number*/
      set SP0PM090.SP0PWMOP[SP0PWSB1] initialAttributes;
    else
      set SP0PM090.SP0PWMOP[SP0PWSB1] protect, invisible;
    end

    if (SP0PM090.SY1STNBR[SP0PWSB1] == "0") /* end of table*/
      SP0PM090.SP0PWMOP[SP0PWSB1] = " ";
      SP0PM090.XGPCD[SP0PWSB1] = " ";
      SP0PM090.SY1STNBR[SP0PWSB1] = " ";
      SP0PM090.SY2CLRID[SP0PWSB1] = " ";
      SP0PM090.XDMCD[SP0PWSB1] = " ";
      SP0PM090.SY1STYNM[SP0PWSB1] = " ";
      SP0PM090.SY2CLRDS[SP0PWSB1] = " ";
    end
    if (SP0PM090.SP0PWMOP[SP0PWSB1] == " " /* not selected*/
     || SP0PM090.SP0PWMOP[SP0PWSB1] == "S" /* selected*/
     || SP0PM090.SP0PWMOP[SP0PWSB1] == "V") /* viewed*/
       /* next sentence*/
    else /* error in keying*/
      SP0PM090.SP0PWMOP[SP0PWSB1] = "S";
                                   /* force to be a selection*/
    end
  end


  if ("S" in SP0PM090.SP0PWMOP)
    SP0PW01.SP0PWSB2 = sysVar.arrayIndex;
    SP0PW01.SP0PWPOS = sysVar.arrayIndex;
    SP0PW01.SP0PWVF = "Y";
    SP0PM090.SP0PMMSG = " ";
  end



end // end SP0PS94

// edit for fast path, data modif
Function SP0PS95()


  if (SP0PM090.CATOAP != " ")
    COMMAREA.CATOAP = SP0PM090.CATOAP;
    COMMAREA.CAITEM = SP0PM090.CAITEM;
    XSEXIT();
    SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
    SP0PM090.CATOAP = " ";
    SP0PM090.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0PM090.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0PM090.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0PS95

// validate product style id
Function SP0PS96()


   /* ************************************************************/
    /* validate product style id's against style db2 table*/
   /* ************************************************************/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SY1REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PM090.SP0PMMSG = " ";
    SP0PM090.SY1STYNM[SP0PWSB2] = SY1REC.SY1STYNM;
  else
    SP0PW01.SP0PWMSG = "THIS PRODUCT STYLE TYPE DOES NOT EXIST";
    SP0PM090.SY1STYNM[SP0PWSB2] = "INVALID";
    converseLib.validationFailed(28);
    SP0PW01.SP0PWVF = "N";
    set SP0PM090 alarm;
    set SP0PM090.SY1STNBR[SP0PWSB2] cursor, modified, bold;
    set SP0PM090.SY1STYNM[SP0PWSB2] skip, modified, bold;
    set SP0PM090.SP0PWMOP[SP0PWSB2] modified, bold;
    return;
  end

  set SP0PM090.SY1STNBR[SP0PWSB2] normal;
  set SP0PM090.SY1STYNM[SP0PWSB2] initialAttributes;
  set SP0PM090.SP0PWMOP[SP0PWSB2] normal;



end // end SP0PS96

// validate color id
Function SP0PS97()




   /* ************************************************************/
   /* *   this statement group is validate product color types*/
      /* against the color db2 table.*/
   /* ************************************************************/

  if (SP0PM090.SY2CLRID[SP0PWSB2] == "***")
    SP0PM090.SY2CLRDS[SP0PWSB2] = "ALL COLORS";
  else
    set SY2REC empty;
    set SQLCA empty;

    SY2REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
    SY2REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
    SY2REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
    SY2REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];

    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      SP0PM090.SP0PMMSG = " ";
      SP0PM090.SY2CLRDS[SP0PWSB2] = SY2REC.SY2CLRDS;
    else
      SP0PW01.SP0PWMSG = "THIS COLOR TYPE DOES NOT EXIST";
      SP0PM090.SY2CLRDS[SP0PWSB2] = "INVALID";
      converseLib.validationFailed(28);
      SP0PW01.SP0PWVF = "N";
      set SP0PM090 alarm;
      set SP0PM090.SY2CLRID[SP0PWSB2] cursor, modified, bold;
      set SP0PM090.SY2CLRDS[SP0PWSB2] skip, modified, bold;
      set SP0PM090.SP0PWMOP[SP0PWSB2] modified, bold;
      return;
    end
  end

  set SP0PM090.SY2CLRID[SP0PWSB2] normal;
  set SP0PM090.SY2CLRDS[SP0PWSB2] normal;
  set SP0PM090.SP0PWMOP[SP0PWSB2] normal;



end // end SP0PS97

// validate dimension
Function SP0PS98()


   /* ************************************************************/
   /* *   this statement group is validate dimension codes*/
      /* have been entered against the dimension code table.*/

      /* the dim type must also be active.*/
   /* ************************************************************/

  if (SP0PM090.XDMCD[SP0PWSB2] == "**")
     /* for all dimensions*/
  else
    if (SP0PM090.XDMCD[SP0PWSB2] == " ")
      SP0PM110.XDMDESC = "BLANK";
      return;
    else

      if (SP0PM090.XDMCD[SP0PWSB2] in XDMTBL.XDMCD)
        SP0PM110.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      end

      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(28);
        set SP0PM090 alarm;
        set SP0PM090.XDMCD[SP0PWSB2] cursor, modified, bold;
        SP0PM090.SP0PMMSG = "THIS IS NOT A VALID DIMENSION   ";
        return;
      end

       /* ------ dimension code was found.  is it active?-------*/

      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(28);
        set SP0PM090 alarm;
        set SP0PM090.XDMCD cursor, modified, bold;
        SP0PM090.SP0PMMSG = "THIS IS NOT AN ACTIVE DIMENSION";
        return;
      end
    end
  end



end // end SP0PS98

// validate gpc
Function SP0PS99()




   /* ************************************************************/
   /* *   this statement group is validate general product code*/
      /* against the gpc table.*/

      /* the gpc type must also be active.*/
   /* ************************************************************/




  if (SP0PM090.XGPCD[SP0PWSB2] == " ")
    SP0PM110.XGPDESC = "BLANK";
    return;
  end

  if (SP0PM090.XGPCD[SP0PWSB2] in XGPTBL.XGPCD)
    SP0PM110.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end



  if (sysVar.arrayIndex == 0)
    SP0PM110.XGPDESC = "INVALID GPC";
  end



      /* the gpc type was found.  is it active?*/



  if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
    SP0PM110.XGPDESC = "INACTIVE GPC";
  end

  set SP0PM090.XGPCD[SP0PWSB2] normal;



end // end SP0PS99

// does s.p. product now exist?
Function SP0PS9A()




   /* ************************************************************/
   /* *   this statement group is used to determine if an s.p.*/
      /* product record already exists.*/
   /* ************************************************************/



  SP5REC.SP1ID = SP0PM090.SP1ID;
  SP5REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SP5REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
  SP5REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
  SP5REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];
  SP0PW01.SP0PWVF = "Y";

  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   && SP0PM090.SP0PWMOP[SP0PWSB2] == "A")
    set SP0PM090.SP0PWMOP[SP0PWSB2] cursor, modified, bold;
    set SP0PM090.XGPCD[SP0PWSB2] modified, bold;
    set SP0PM090.SY1STNBR[SP0PWSB2] modified, bold;
    set SP0PM090.SY2CLRID[SP0PWSB2] modified, bold;
    set SP0PM090.XDMCD[SP0PWSB2] modified, bold;
    converseLib.validationFailed(20);
    SP0PM090.SP0PMMSG = "A PRODUCT REC ALREADY EXITS FOR THIS S. P.";
    set SP0PM090 alarm;
    SP0PW01.SP0PWVF = "N";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0PW01.SP0PWVF = "Y";
      SP0PM090.SP0PMMSG = " ";
      return;
    else
      if (SP0PM090.SP0PWMOP[SP0PWSB2] != "A")
        SP0PM090.SP0PMMSG = "PRODUCT REC WAS NOT FOUND";
        set SP0PM090 alarm;
        set SP0PM090.SP0PWMOP[SP0PWSB2] cursor, modified, bold;
        set SP0PM090.XGPCD[SP0PWSB2] modified, bold;
        set SP0PM090.SY1STNBR[SP0PWSB2] modified, bold;
        set SP0PM090.SY2CLRID[SP0PWSB2] modified, bold;
        set SP0PM090.XDMCD[SP0PWSB2] modified, bold;
        SP0PW01.SP0PWVF = "N";
        return;
      end
    end
  end



end // end SP0PS9A

// get prices for products
Function SP0PSA1()



   /* ************************************************************/
   /* **  this statement group will get the default price.*/
   /* ************************************************************/

   /* -- get the default for color if available--------*/

  set SY5REC empty;
  set SQLCA empty;

  SY5REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SY5REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
  SY5REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
  SY5REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = "01";
  SY5REC.XQACD = "01";

  if (SP0PW01.SP0PSPCC == "CANA")
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  else
    SY5REC.XCT-CTRY-CD = "USA ";
    SY5REC.ZFC-CRCY-CD = "USD";
  end

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PM110.SP0PMPRT = "COLORS";
    SP0PW01.SP0PWSB1 = 1;
    while (SP0PW01.SP0PWSB1 < 7)
      if (SY5REC.SY5PCEDT[SP0PWSB1] <= SP0PW01.SP0PWD
       && SY5REC.SY5PCEDT[SP0PWSB1] != 0)
        SP0PM110.SY5PRCUN = SY5REC.SY5PRCUN[SP0PWSB1];
        SP0PW01.SP0PWSB1 = 99;
      else
        SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE > +100)
      SP0PM090.SP0PMMSG = "ERROR IN READING THE SY5REC";
      converseLib.validationFailed(88);
      SP0PW01.SP0PWVF = "N";
      set SP0PM090 alarm;
      return;
    end
  end

     /* ---------- using '***' fpr style & '**' for dim will*/
             /* give product level pricing.*/

  if (SP0PM110.SY5PRCUN > 0
   && SP0PM110.SP0PMPRT == "COLORS")
    return;
  else
    set SY5REC empty;
    set SQLCA empty;
    SY5REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
    SY5REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
    SY5REC.SY5SZID = 0;
    SY5REC.XPYCD = "01";
    SY5REC.XQACD = "01";
  end

  if (SP0PW01.SP0PSPCC == "CANA")
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  else
    SY5REC.XCT-CTRY-CD = "USA ";
    SY5REC.ZFC-CRCY-CD = "USD";
  end

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0PM110.SP0PMPRT = "STYLES";
    SP0PW01.SP0PWSB1 = 1;
    while (SP0PW01.SP0PWSB1 < 7)
      if (SY5REC.SY5PCEDT[SP0PWSB1] <= SP0PW01.SP0PWD
       && SY5REC.SY5PCEDT[SP0PWSB1] != 0)
        SP0PM110.SY5PRCUN = SY5REC.SY5PRCUN[SP0PWSB1];
        SP0PW01.SP0PWSB1 = 99;
      else
        SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
      end
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      SP0PM090.SP0PMMSG = "ERROR IN READING THE SY5REC";
      converseLib.validationFailed(88);
      SP0PW01.SP0PWVF = "N";
      set SP0PM090 alarm;
      return;
    end
  end

end // end SP0PSA1

// load sizes from product db
Function SP0PSA2()


   /* ************************************************************/
   /* *   this builds an array of sizes with the default prices*/
   /* ************************************************************/

  if (SP0PM090.SY2CLRID[SP0PWSB2] == "***") /* all colors....*/
    SP0PSA4();
    SY3REC.SY2CLRID = SY2REC.SY2CLRID;
    SY3REC.XDMCD = SY2REC.XDMCD;
  else
    SY3REC.SY2CLRID = SP0PM090.SY2CLRID[SP0PWSB2];
    SY3REC.XDMCD = SP0PM090.XDMCD[SP0PWSB2];
  end

  SY3REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SY3REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
      /* record found*/
  else
    SP0PM090.SP0PMMSG = "ERROR IN READING THE SY3REC";
    converseLib.validationFailed(88);
    SP0PW01.SP0PWVF = "N";
    return;
  end



  SP0PW01.SP0PWSB1 = 1;

  while (SP0PW01.SP0PWSB1 < 41)
    if (SY3REC.SY3FRGUT[SP0PWSB1] == "F"
     || SY3REC.SY3FRGUT[SP0PWSB1] == "G")
      SP0PM110.SY4IDDSC[SP0PWSB1] = SY3REC.SY3FRGUT[SP0PWSB1];
      SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    else
      SP0PM110.SY4IDDSC[SP0PWSB1] = " ";
      SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
    end
  end


  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
      /* the read was ok*/
  else
    SP0PM090.SP0PMMSG = "ERROR IN READING THE SY4REC";
    converseLib.validationFailed(88);
    SP0PW01.SP0PWVF = "N";
    return;
  end

  set SP0PM110.SY5PRCUN skip;

  SP0PW01.SP0PWSB1 = 1;

  while (SP0PW01.SP0PWSB1 < 41)
    if (SP0PM110.SY4IDDSC[SP0PWSB1] == "F"
     || SP0PM110.SY4IDDSC[SP0PWSB1] == "G")
      SP0PM110.SY4IDDSC[SP0PWSB1] = SY4REC.SY4IDDSC[SP0PWSB1];
      SP0PM110.SP5SZPR[SP0PWSB1] = SP0PM110.SY5PRCUN;
      SP0PM110.SP5PRCOF[SP0PWSB1] = "P"; /* default is product price*/
      set SP0PM110.SP5SZPR[SP0PWSB1] initialAttributes;
      set SP0PM110.SP5PRCOF[SP0PWSB1] initialAttributes;
    else
      SP0PM110.SY4IDDSC[SP0PWSB1] = " ";
      SP0PM110.SP5SZPR[SP0PWSB1] = SP0PM110.SY5PRCUN;
      SP0PM110.SP5PRCOF[SP0PWSB1] = "P"; /* default is product price*/
      set SP0PM110.SP5SZPR[SP0PWSB1] skip, invisible;
      set SP0PM110.SY4IDDSC[SP0PWSB1] skip, invisible;
      set SP0PM110.SP5PRCOF[SP0PWSB1] skip, invisible;
    end
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end



end // end SP0PSA2

// load the sp5rec to sp0fm110
Function SP0PSA3()


   /* ************************************************************/
   /* *   this process is used to load the sp5rec to sp0pm110*/
   /* ************************************************************/

  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP5REC to SP0PM110 withV60Compat; /* load prices from sales program*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0PSA3 ";
    TA1REC.TA1LOCAT[3] = "IO01100 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0PM110";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  set SP0PM110.CATOAP cursor;

  SP0PW01.SP0PWSB1 = 1;

  while (SP0PW01.SP0PWSB1 < 41)
    if (SP0PM110.SY4IDDSC[SP0PWSB1] != " ")
      set SP0PM110.SP5SZPR[SP0PWSB1] initialAttributes;
      set SP0PM110.SP5PRCOF[SP0PWSB1] initialAttributes;
      if (SP0PM110.SP5PRCOF[SP0PWSB1] == "P") /* defaults to product*/
        SP0PM110.SP5SZPR[SP0PWSB1] = SP0PM110.SY5PRCUN;
      end
    else
      set SP0PM110.SP5PRCOF[SP0PWSB1] skip, invisible;
      set SP0PM110.SP5SZPR[SP0PWSB1] skip, invisible;
      set SP0PM110.SY4IDDSC[SP0PWSB1] skip, invisible;
    end
    SP0PW01.SP0PWSB1 = SP0PW01.SP0PWSB1 + 1;
  end



end // end SP0PSA3

// set of sy2recs for act. color
Function SP0PSA4()



   /* ************************************************************/
   /* *   when all colors '***' are used, the first product/color*/
   /* *   with a life style = '10'(active) is found to supply*/
   /* *   the default values.*/
   /* ************************************************************/

  set SY2REC empty;
  set SQLCA empty;
  SP0PW01.SP0PWSW1 = "N"; /* found rec?*/

  SY2REC.XGPCD = SP0PM090.XGPCD[SP0PWSB2];
  SY2REC.SY1STNBR = SP0PM090.SY1STNBR[SP0PWSB2];

  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    while (SQLCA.VAGen_SQLCODE == +0
     && SP0PW01.SP0PWSW1 == "N")
      SP0PSA5();
    end
  end

   /* this code will only be executed for a Canadian sales program*/
   /* that returned a 'row not found' when attempting to find the*/
   /* product on dprod.vsyreg02*/

   /* it will force the same error to appear as if 'row not found'*/
   /* had been found on dprod.vcolor01*/

  if (SP0PW01.SP0PSPCC == "CANA"
   && WSY2000.WSY2000-RETURN-CODE == "02")
    set SY2REC empty;
  end

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
       /* ok*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "FETCH   ";
    TA1REC.TA1LOCAT[2] = "SP0FSA4 ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0PM110";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end





end // end SP0PSA4

// next sy2rec for active color
Function SP0PSA5()



   /* ************************************************************/
   /* *   when all colors '***' are used, the first product/color*/
   /* *   with a life style = '10'(active) is found to supply*/
   /* *   the default values.*/
   /* ************************************************************/

  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SP0PW01.SP0PSPCC == "CANA") /* CANA canadian sales program*/
      TA1REC.TA1PGMNM = "SP0P"; /* CANA program name*/
      TA1REC.TA1MAP = "SP0PM110"; /* CANA*/

      SP0P-CALL-SY2000(); /* CANA call SY2000 to get*/
                                   /* product/region data*/

      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        if (SY2REC.XLCCD1 == 10
         && SY2REC.SY2CEDT1 < SP0PW01.SP0PWD) /* effective date*/
          SP0PW01.SP0PWSW1 = "Y"; /* record found*/
        end
        if (SY2REC.XLCCD2 == 10
         && SY2REC.SY2CEDT2 < SP0PW01.SP0PWD) /* effective date*/
          SP0PW01.SP0PWSW1 = "Y"; /* record found*/
        end
        if (SY2REC.XLCCD3 == 10
         && SY2REC.SY2CEDT3 < SP0PW01.SP0PWD) /* effective date*/
          SP0PW01.SP0PWSW1 = "Y"; /* record found*/
        end
      end

      if (WSY2000.WSY2000-RETURN-CODE == 0 /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        /* ok*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0P   ";
        TA1REC.TA1LOC = "SP0PSA5  - BAD RTN CODE FROM SY2000";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0PM110";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSYREG02";
        TA1TBLKE = SP0PW01.SP0PW-WSY2000-POST-1;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end

    else

      if (SY2REC.XLCCD1 == 10
       && SY2REC.SY2CEDT1 < SP0PW01.SP0PWD) /* effective date*/
        SP0PW01.SP0PWSW1 = "Y"; /* record found*/
      end
      if (SY2REC.XLCCD2 == 10
       && SY2REC.SY2CEDT2 < SP0PW01.SP0PWD) /* effective date*/
        SP0PW01.SP0PWSW1 = "Y"; /* record found*/
      end
      if (SY2REC.XLCCD3 == 10
       && SY2REC.SY2CEDT3 < SP0PW01.SP0PWD) /* effective date*/
        SP0PW01.SP0PWSW1 = "Y"; /* record found*/
      end
    end

  else
    if (SQLCA.VAGen_SQLCODE == +0
     || SQLCA.VAGen_SQLCODE == 100)
       /* ok*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0P   ";
      TA1REC.TA1LOCAT[1] = "FETCH   ";
      TA1REC.TA1LOCAT[2] = "SP0PSA5 ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0PM110";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

end // end SP0PSA5

// determine if spgm is US or CAN
Function SP0PSA6()
      /* ***********************************************************/
      /* * this statement group determines if the spgm is US or CANA*/
      /* * this is achieved as follows:*/
      /* **/
      /* * 1. retrieve an order type for the spgm from DSPGM.VORTYP01*/
      /* * 2. determine the sales office for the order type from XVOTBL*/
      /* * 3. determine the country for the order type from XSOTBL*/
      /* **/
      /* * IMPORTANT !!!*/
      /* * this logic requires that the sales program in question already*/
      /* * has order types defined against it*/
      /* ************************************************************/

  SP2REC.SP1ID = SP0PW01.SP1ID;
  SP0PSSP(); /* CANA select set*/

  SP0PNSP(); /* CANA select next*/

  if (SQLCA.VAGen_SQLCODE != 0) /* CANA row not found*/
    converseLib.validationFailed(199); /* CANA spgm has no order types defined*/
    SP0PM110.SP0PMMSG = " ";
    return;
  end


   /* **********TCS INCLUDE BEGIN ************/

  set VXVO0001 empty;
  set SQLCA empty;
  set SP9REC empty;
  VXVO0001.XOTCD = SP2REC.XOTCD; /* valid system order type*/
  SP9REC.SP9COUFL = "N";

  call "VXVO0001" ("S7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0PSA6 ";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  else

    while (SP9REC.SP9COUFL == "N"
     && SQLCA.VAGen_SQLCODE != 100)
      call "VXVO0001" ("N7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        if (VXVO0001.XSOCD in XSOTBL.XSOCD
         && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* CANA sales office active*/
          SP9REC.SP9COUFL = "Y";
          if (XSOTBL.XCTCD[sysVar.arrayIndex] == "CANA")
            SP0PW01.SP0PSPCC = "CANA";
          else
            SP0PW01.SP0PSPCC = "USA";
          end
        else
          converseLib.validationFailed(198); /* sales office is not valid*/
          SP0PM110.SP0PMMSG = " ";
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(011); /* order type is not valid*/
          SP0PM110.SP0PMMSG = " ";
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SP0P   ";
          TA1REC.TA1LOCAT[1] = "A       ";
          TA1REC.TA1LOCAT[2] = "SP0PSA6 ";
          TA1REC.TA1LOCAT[3] = "VXVO0001";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VXVO0001";
          TA1REC.TA1TBLKE = VXVO0001-KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    end
  end

  call "VXVO0001" ("C7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0PSA6 ";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
  /* **********TCS INCLUDE END ************/

  SP0PCSP(); /* CANA close set*/
end // end SP0PSA6

// 2nd edit group for products
Function SP0PSB1()


   /* *********************************************************/
   /* *   this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/

  SP0PM110.SP0PMMSG = " ";

      /* check for valid attention keys*/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    return;
  end


   /* ***********************************************************/
      /* sp0fsb2 check for fast path, modified data, pf1, pf4*/
   /* ***********************************************************/

  SP0PSB2();


  if (converseVar.validationMsgNum > 0)
    SP0PM110.SP1ID = SP0PW01.SP1ID;
    SP0PW01.SP0PWVF = "N";
    return;
  end


  if (SP0PM110.SP1ID != SP0PW01.SP1ID) /* change in key*/
    COMMAREA.CAITEM = SP0PM110.SP1ID;
    if (converseVar.eventKey is pf15)
      COMMAREA.CAINQFL = "B";
      exit stack;
    else
      if (converseVar.eventKey is pf16)
        COMMAREA.CAINQFL = "C";
        exit stack;
      else
        COMMAREA.CAINQFL = "A";
        exit stack;
      end
    end
  else
    if (converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16)
      COMMAREA.CAITEM = SP0PM110.SP1ID;
      exit stack;
    end
  end



end // end SP0PSB1

// edit for fast path,option,mdt
Function SP0PSB2()



  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pa2)
    SP0PM110.CATOAP = "SP0M";
    SP0PM110.CAITEM = " ";
  end

   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
      /* and option selected or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0PM110.CATOAP != " ")
    COMMAREA.CATOAP = SP0PM110.CATOAP;
    COMMAREA.CAITEM = SP0PM110.CAITEM;
    XSEXIT();
    SP0PM110.SP0PMMSG = COMMAREA.CAMSG;
    SP0PM110.CATOAP = " ";
    SP0PM110.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0PM110.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0PM110.SP0PMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0PSB2

// vortyp01 select set
Function SP0PSSP()

      /* *********************************************************/
      /* * this statement group performs a select set for       **/
      /* * the dspgm.vortyp01 table.                           **/
      /* *********************************************************/

      /* issue select set request*/

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select set*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0P";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0PSSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SPOPM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end

   /* *************************************************************/
end // end SP0PSSP

//*** RECORD=SP0PW01 ****
// **
// ***********************
Record SP0PW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0PWUPF SP0PWUPF ; 
  10 SP0PWMSG SP0PWMSG ; 
  10 SP0PWMOP SP0PWMOP [20] ; 
  10 SP0PWD SP0PWD ; 
    20 SP0PWD1 SP0PWD1 ; 
    20 SP0PWD2 SP0PWD2 ; 
  10 SP0PWVF SP0PWVF ; 
  10 SP0PWVF1 SP0PWVF1 ; 
  10 SP0PWSID SP0PWSID ; 
  10 SP0PWSB1 SP0PWSB1 ; 
  10 SP0PWSB2 SP0PWSB2 ; 
  10 SP0PWTSZ SP0PWTSZ ; 
  10 SP0PWPOS SP0PWPOS ; 
  10 SP5KEY SP5KEY ; 
  10 SP0PWTL3 SP0PWTL3 ; 
    15 SP1ID SP1ID [1000] ; 
    15 XGPCD XGPCD [1000] ; 
    15 SY1STNBR SY1STNBR [1000] ; 
    15 SY2CLRID SY2CLRID [1000] ; 
    15 XDMCD XDMCD [1000] ; 
    15 SP2MNQTY SP2MNQTY [1000] ; 
  10 XPCCD XPCCD ; 
  10 XPCDESC XPCDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP2DIND SP2DIND ; 
  10 SP0PWFL3 SP0PWFL3 ; 
  10 SP0PWFL5 SP0PWFL5 ; 
  10 SP0PWSW1 SP0PWSW1 ; 
  10 SP0PWLOC SP0PWLOC ; 
    15 SP0PWID1 SP0PWID1 ; 
    15 SP0PWL1 SP0PWL1 ; 
    15 * char(15) ; 
  10 SP0PSPCC SP0PSPCC ; 
  10 SP0PW-WSY2000-POST-1 SP0PW-WSY2000-POST-1 ; 
    15 SP0PW-WSY2000-GPC-CD SP0PW-WSY2000-GPC-CD ; 
    15 SP0PW-WSY2000-DASH-1 SP0PW-WSY2000-DASH-1 ; 
    15 SP0PW-WSY2000-STY-NBR SP0PW-WSY2000-STY-NBR ; 
    15 SP0PW-WSY2000-DASH-2 SP0PW-WSY2000-DASH-2 ; 
    15 SP0PW-WSY2000-COLR-CD SP0PW-WSY2000-COLR-CD ; 
    15 SP0PW-WSY2000-DASH-3 SP0PW-WSY2000-DASH-3 ; 
    15 SP0PW-WSY2000-DIM-CD SP0PW-WSY2000-DIM-CD ; 
    15 SP0PW-WSY2000-DASH-4 SP0PW-WSY2000-DASH-4 ; 
    15 SP0PW-WSY2000-PROD-REG-CD SP0PW-WSY2000-PROD-REG-CD ; 
    15 SP0PW-WSY2000-DASH-5 SP0PW-WSY2000-DASH-5 ; 
    15 SP0PW-WSY2000-RETURN-CD SP0PW-WSY2000-RETURN-CD ; 
end // end SP0PW01

DataItem SP0PSPCC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0PW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date--
DataItem SP0PWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century--
DataItem SP0PWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd--
DataItem SP0PWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage flag-
DataItem SP0PWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag-
DataItem SP0PWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// incomming sp1id-
DataItem SP0PWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// incomming request location-
DataItem SP0PWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// break up application loc-
DataItem SP0PWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field--
DataItem SP0PWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field--
DataItem SP0PWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table position-
DataItem SP0PWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript 1-
DataItem SP0PWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2-
DataItem SP0PWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. saved s.p. id-
DataItem SP0PWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// substitute color found.
DataItem SP0PWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product record table-
DataItem SP0PWTL3 char(21000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table size-
DataItem SP0PWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag--
DataItem SP0PWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry-
DataItem SP0PWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del-
DataItem SP0PWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

