package sp0s;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import sp.common.*;
import ta.common.*;
//*** PROGRAM=SP0S ****
// sales program instore promo inquiry
// 
// overview:   module called from sp0i thru forced fastpath or
//      directly thru regular fast pathing.
//      copied from sp0h and chopped.
// 
// date created:
//      6-03-88
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// june 1988  ssjob     this function was separated from
//                      original sp0h.
// 12-16-88   JWOOD     ADDED NONCSP OPTION TO CALLS
// 12-16-88   JWOOD     ADDED XSSEGTR LOGIC
// 
// 
// *********************
Program SP0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SP0SW01 SP0SW01; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SP0SM.SP0SM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0S020: SP0S020();



    goto SP0S030;



    SP0S030: SP0S030();



    goto SP0S030;


  end // end main
end // end SP0S

// initialization and reset
Function SP0S020()



   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the in-store promo comments for this s.p.*/
      /* select any in-store promo comments and show on map*/
      /* sp0sm030.*/
   /* ************************************************************/
  XSENTRY();

  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  set SP0SM030 initial; /* clear map*/
  set SP1REC empty; /* clear record area*/

  if (COMMAREA.CAITEM == " ") /* no initial sales prog.id*/
    SP0SS21(); /* set up receive screen*/
  else
    if (COMMAREA.CAITEM != " ")
      SP0SW01.SP1ID = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " ";
      SP0SS22(); /* verify sales program exists*/
    end
  end



end // end SP0S020

// in-store promo comments
Function SP0S030()



   /* ************************************************************/
      /* this process is used to converse the in-store promo*/
      /* comments screen for sales programs.*/
   /* ************************************************************/
  SP0SM030.SP0SMTDT = VGVar.currentShortGregorianDate;

  converse SP0SM030 ;

  SP0SS35(); /* reset screen*/

  if (SP0SM030.SP1ID == " ")
    SP0SS32(); /* validate attention keys*/
    SP0SS21(); /* set up receive screen*/
  else
    if (SP0SW01.SP1ID != SP0SM030.SP1ID) /* change in s.p.*/
      SP0SW01.SP1ID = SP0SM030.SP1ID;
      SP0SS22(); /* verify sales prog.exists*/
    else
      SP0SS32(); /* validate attention keys*/
    end
  end



end // end SP0S030

// set up receive screen
Function SP0SS21()


  set SP0SM030.SP1ID cursor, bold;
  set SP0SM030.SP1NM protect, invisible;
  set SP0SM030.SP1STATX protect, invisible;
  set SP0SM030.SP1STAT protect, invisible;
  set SP0SM030.SP1COM1 protect, invisible;
  set SP0SM030.SP1COM2 protect, invisible;
  set SP0SM030.SP1COM3 protect, invisible;
  set SP0SM030.SP1COM4 protect, invisible;
  set SP0SM030.SP1COM5 protect, invisible;
  set SP0SM030.SP1COM6 protect, invisible;
  set SP0SM030.SP1COM7 protect, invisible;
  set SP0SM030.SP1COM8 protect, invisible;
  set SP0SM030.SP1COM9 protect, invisible;
  set SP0SM030.SP1COM10 protect, invisible;
  set SP0SM030.SP1COM11 protect, invisible;
  set SP0SM030.SP1COM12 protect, invisible;
  set SP0SM030.SP1COM13 protect, invisible;
  set SP0SM030.SP1COM14 protect, invisible;

  SP0SM030.SP0SMMSG = "ENTER SALES PROGRAM";



end // end SP0SS21

// validate sales program id*
Function SP0SS22()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0i ...**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0SW01.SP1ID;
  SP0SM030.SP1ID = SP0SW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0SM030 withV60Compat;
    SP0SW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if invalid sales program, transfer to sp0i       **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0I";
      COMMAREA.CAITEM = "    ";
      XSEXIT();
    else
      SP0SW01.SP0SWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0S";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0SS20";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0SM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0SS34();
      SP0SM030.SP0SMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end


end // end SP0SS22

// validate attention keys*
Function SP0SS32()



   /* *********************************************************/
      /* this statement group is used to validate fast path/*/
      /* pf key usage.*/
   /* *********************************************************/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
     /* valid pf key*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
  end


  if (converseVar.eventKey is pf1) /* transfer to help facility*/
    XSPF1();
  end

  if (converseVar.eventKey is pf3) /* transfer to sp0i....*/
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0SM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pf4) /* transfer to sales pgm menu*/
    XSPF4();
  end

  if (converseVar.eventKey is pa2) /* transfer to master menu*/
    COMMAREA.CATOAP = "SM0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is enter
   && SP0SM030.CATOAP != " ") /* check for fast path*/
    COMMAREA.CATOAP = SP0SM030.CATOAP;
    COMMAREA.CAITEM = SP0SM030.CAITEM;
    XSEXIT();
    SP0SM030.SP0SMMSG = COMMAREA.CAMSG; /* xsexit problem*/
    SP0SM030.CATOAP = " ";
    SP0SM030.CAITEM = " ";
    converseLib.validationFailed(99);
  end



end // end SP0SS32

// db2 error routine*
Function SP0SS34()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0SS34

// reset map fields
Function SP0SS35()


  set SP0SM030.SP1ID cursor, normal;
  set SP0SM030.SP1NM initialAttributes;
  set SP0SM030.SP1STATX initialAttributes;
  set SP0SM030.SP1STAT initialAttributes;
  set SP0SM030.SP1COM1 initialAttributes;
  set SP0SM030.SP1COM2 initialAttributes;
  set SP0SM030.SP1COM3 initialAttributes;
  set SP0SM030.SP1COM4 initialAttributes;
  set SP0SM030.SP1COM5 initialAttributes;
  set SP0SM030.SP1COM6 initialAttributes;
  set SP0SM030.SP1COM7 initialAttributes;
  set SP0SM030.SP1COM8 initialAttributes;
  set SP0SM030.SP1COM9 initialAttributes;
  set SP0SM030.SP1COM10 initialAttributes;
  set SP0SM030.SP1COM11 initialAttributes;
  set SP0SM030.SP1COM12 initialAttributes;
  set SP0SM030.SP1COM13 initialAttributes;
  set SP0SM030.SP1COM14 initialAttributes;
  SP0SM030.VAGen_EZEMSG = " ";
  SP0SM030.SP0SMMSG = " ";



end // end SP0SS35

//*** RECORD=SP0SW01 ****
// this is the major work record for sp0h -in store promo notes
// ***********************
Record SP0SW01 type basicRecord
  10 SP1ID SP1ID ; 
  10 SP0SWUPF SP0SWUPF ; 
  10 SP0SWMSG SP0SWMSG ; 
  10 SP0SWMOP SP0SWMOP [20] ; 
  10 SP0SWD SP0SWD ; 
    20 SP0SWD1 SP0SWD1 ; 
    20 SP0SWD2 SP0SWD2 ; 
  10 SP0SWT1 SP0SWT1 ; 
    20 SP0SWTH1 SP0SWTH1 ; 
    20 SP0SWTC1 SP0SWTC1 ; 
    20 SP0SWTM1 SP0SWTM1 ; 
    20 SP0SWTC2 SP0SWTC2 ; 
    20 SP0SWTS1 SP0SWTS1 ; 
  10 SP0SWT2 SP0SWT2 ; 
    20 SP0SWTH2 SP0SWTH2 ; 
    20 SP0SWTM2 SP0SWTM2 ; 
  10 SP0SWVF SP0SWVF ; 
  10 SP0SWVF1 SP0SWVF1 ; 
  10 SP0SWMDF SP0SWMDF ; 
  10 SP0SWHDM SP0SWHDM ; 
  10 SP0SWSDM SP0SWSDM ; 
  10 SP0SWSID SP0SWSID ; 
  10 SP0SWACF SP0SWACF ; 
  10 SP0SWAPF SP0SWAPF ; 
  10 SP5KEY SP5KEY ; 
  10 SP0SWOTH SP0SWOTH ; 
  10 SP0SWDDL SP0SWDDL ; 
  10 SP0SWPCT SP0SWPCT ; 
  10 SP2DIND SP2DIND ; 
  10 SP0SWF3 SP0SWF3 ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end SP0SW01

// xx
DataItem SP0SWACF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xx
DataItem SP0SWAPF char(2800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws datex
DataItem SP0SWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws centry x
DataItem SP0SWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd*
DataItem SP0SWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// x
DataItem SP0SWDDL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// x
DataItem SP0SWF3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test header datax
DataItem SP0SWHDM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws. test for select & pathx
DataItem SP0SWMDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option fieldx
DataItem SP0SWMOP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message fieldx
DataItem SP0SWMSG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s
DataItem SP0SWOTH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent holdx
DataItem SP0SWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// test for select data mdtx
DataItem SP0SWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. idx
DataItem SP0SWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1x
DataItem SP0SWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2x
DataItem SP0SWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1x
DataItem SP0SWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2x
DataItem SP0SWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1x
DataItem SP0SWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2x
DataItem SP0SWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #1x
DataItem SP0SWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2x
DataItem SP0SWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1x
DataItem SP0SWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flags
DataItem SP0SWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entryx
DataItem SP0SWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or delx
DataItem SP0SWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

