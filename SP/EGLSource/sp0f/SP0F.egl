package sp0f;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ko.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SP0F ****
// SALES PROGRAM PRODUCTS - UPDATE
// 
// overview:
// 
// 
// date created: separated from original sp0u may 1987.
// 
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// may 1987    sjob     separated sp0f from sp0u....
// july '88    sjob     modified sp0fs99 to correct drop thru
//                      logic when invalid gpc is entered.
// 12-06-88    jwood    added noncsp option on calls
// 12-06-88    jwood    added xssegtr logic
// 02-09-89    SJOB     e#6: add 'all colors' capability
// 07-27-89    rcoron   Modified maps sp0fm090 and sp0fm110
//                      to standards and allowed a copy spgm/
//                      prod (sp5rec) feature for sp0fm090.
//                      Also removed sp3rec from the applica-
//                      tion because it is no longer in use.
// 11-14-89    SJOB     e#7: allow sales program price of $0.00
// 10-02-90    SJOB     e#4&5: ADD MIN.QTY OF A PROD REQUIRED
//                        TO QUALIFY FOR SPGM
//                      * ADD PRODUCT RESTRICTION(I=INCLUDE)
//                      * SUBSTITUTE PROD CAT.FOR PROD FAMILY
// 10-16-90    SJOB     e5: add products never permitted under
//                      the sales program.
// 06-13-91    SJOB     e0: SUPPORT DB CHANGES.
// 10-22-91    dmeier   696: up program array limit to 3000
//                      (moved xgpcd, sy1stnbr, sy2clrid,
//                      xdmcd, sp2mnqty from sp0fw01 to sp0fw03
//                      changed stmt groups: s81, s82, s91, s92
//                      changed procs: 080, 210, 216, 218)
// 03/13/92    scantr   db changes & clean up records list
// 10/19/95    dliddl   Modified to determine if sales pgm is
//                      Canadian or US so that when calling
//                      DPROD.VPRICE01, the correct country &
//                      currency code can be passed. Also added
//                      calls to SY2000 to get product/region
//                      data.
// 12/07/96    csawki   Added Product Category for Equipment
// 12/07/97    ngango   y2k modifications. Changed Process
//                      SP0F100, SP0F262 and Statement Groups
//                      SP0FS3A, SP0FS9F and SP0FSB4.
// 03/24/98   sgopal    removed use of xvotbl and added code to
//                      to access dcorp.vxvo0001 using the
//                      iomod vxvo0001.
//                      The statement group changed is: SA6
// 04/01/98   sgopal    Removed code that accesses XVOTBL in
//                      SP0FSA6.
// *********************
Program SP0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KOFREC KOFREC; // record
  SP0FW01 SP0FW01; // record
  SP0FW02 SP0FW02; // record
  SP0FW03 SP0FW03; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP9REC SP9REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VXVO0001 VXVO0001; // record
  WSY2000 WSY2000; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSOTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use SP0FM.SP0FM030,  // forms
      SP0FM.SP0FM050, 
      SP0FM.SP0FM090, 
      SP0FM.SP0FM110, 
      SP0FM.SP0FM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0F010: SP0F010();



    if (SP0FM090.SP1ID <= " ") /* there still is no s.p. !!!!*/
      SP0FM090.SP0FMMSG = " PLEASE ENTER A SALES PROGRAM ID";
      goto SP0F010;
    else
      if (SP0FM090.SP1NM == "NEW SPID")
        SP0FM090.SP1NM = " ";
        COMMAREA.CAITEM = SP0FM090.SP1ID;
        goto SP0F010;
      end
    end


    if (COMMAREA.CAINQFL == "B")
      goto SP0F020; /* product family codes*/
    else
      if (COMMAREA.CAINQFL == "C")
        goto SP0F040; /* sport activity codes*/
      else
        if (COMMAREA.CAINQFL == "D")
          goto SP0F200; /* excluded products*/
        else
          goto SP0F080; /* included products...default location*/
        end
      end
    end



    SP0F020: SP0F020();



    goto SP0F030; /* always !!*/



    SP0F030: SP0F030();


    if (SP0FM030.SP1ID != SP0FW01.SP1ID) /* change in key*/
      goto SP0F010; /* transfer to new key process*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0F080; /* transfer to product screen*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0F020; /* transfer to product family codes*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0F040; /* transfer to sport activity screen*/
          else
            if (converseVar.eventKey is pf17)
              goto SP0F200; /* transfer to excluded products*/
            end
          end
        end
      end
    end


    goto SP0F030; /* under all other situations -*/



    SP0F040: SP0F040();



    goto SP0F050; /* always!!*/



    SP0F050: SP0F050();


    if (SP0FM050.SP1ID != SP0FW01.SP1ID) /* change in key*/
      goto SP0F010; /* verify new sp id*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0F080; /* transfer to product*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0F020; /* product categories*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0F040; /* sport activity*/
          else
            if (converseVar.eventKey is pf17)
              goto SP0F200; /* excluded products*/
            end
          end
        end
      end
    end



    goto SP0F050; /* default- stay here*/



    SP0F080: SP0F080();



    if (SP0FW01.SP0FWMSG == " ")
      goto SP0F090;
    else
      SP0FM090.SP0FMMSG = SP0FW01.SP0FWMSG;
      SP0FW01.SP0FWFLF = "Y";
      goto SP0F090;
    end



    SP0F090: SP0F090();



    if (SP0FM090.SP1ID != SP0FW01.SP1ID /* change in key*/
     || converseVar.validationMsgNum == 80) /* or sp5recs were copied*/
      goto SP0F010; /* verify sp.id*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0F080; /* transfer to product.*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0F020; /* transfer to product categories*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0F040; /* transfer to sport activity codes*/
          else
            if (converseVar.eventKey is pf17)
              goto SP0F200; /* transfer to excluded products.*/
            end
          end
        end
      end
    end


    if (converseVar.eventKey is pf7 /* scroll back*/
     || converseVar.eventKey is pf8 /* scroll forward*/
     || SP0FW01.SP0FWVF == "N"      /* problem encountered*/
     || converseVar.validationMsgNum > 0)
      goto SP0F090; /* repeat present loop*/
    end


    if (converseVar.eventKey is enter
     && SP0FW01.SP0FWVF == "Y")
      set SP0FM110 initial;

      if (SP0FM090.SP0FWMOP[SP0FWSB2] == "S")
        SP0FM110.SP0FMMSG = "MAKE ANY CHANGES-PRESS ENTER (USE PF3 TO ABORT)";
        goto SP0F100; /* to add a record*/
      else
        if (SP0FM090.SP0FWMOP[SP0FWSB2] == "D")
          SP0FM110.SP0FMMSG = "PRESS ENTER TO DELETE  (USE PF3 TO ABORT)";
          goto SP0F100; /* to add a record*/
        else
          if (SP0FM090.SP0FWMOP[SP0FWSB2] == "A")
            SP0FM110.SP0FMMSG = "MAKE ANY CHANGES-USE ENTER TO ADD(PF3 TO ABORT)";
            goto SP0F100; /* to add a record*/
          else
            goto SP0F090;
          end
        end
      end
    end



    SP0F100: SP0F100();



    if (converseVar.validationMsgNum == 88
     /* AN ERROR WAS DETECTED DURING A CALL*/
     && SP0FM090.SP0FWMOP[SP0FWSB2] != "D")
      goto SP0F090;
    else
      goto SP0F110;
    end



    SP0F110: SP0F110();



    if (converseVar.eventKey is pf3)
      goto SP0F090; /* return to original module*/
    end

    if (SP0FM110.SP1ID != SP0FW01.SP1ID) /* change in keys*/
      goto SP0F010; /* verify sp id*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0F080; /* transfer to product screen*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0F020; /* transfer to product categories*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0F040; /* transfer to sport activity*/
          else
            if (converseVar.eventKey is pf17)
              goto SP0F200; /* excluded products*/
            end
          end
        end
      end
    end



    if (SP0FW01.SP0FWVF == "N"
     || converseVar.validationMsgNum > 0)
      goto SP0F110;
    end

    if (converseVar.eventKey is enter
     && SP0FW01.SP0FWVF != "N")
      goto SP0F080;
    else
      goto SP0F110;
    end



    SP0F200: SP0F200();


    if (SP0FW01.SP0FWMSG == " ")
      goto SP0F205;
    else
      SP0FM200.SP0FMMSG = SP0FW01.SP0FWMSG;
      goto SP0F205;
    end



    SP0F205: SP0F205();


    if (SP0FM200.SP1ID != SP0FW01.SP1ID) /* CHANGE IN KEY*/
      goto SP0F010; /* VERIFY SP. ID*/
    else
      if (converseVar.eventKey is pf14)
        goto SP0F080; /* TRANSFER TO PRODUCT*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0F020; /* TRANSFER TO product categories*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0F040; /* TRANSFER TO SPORT ACTIVITY CODES*/
          else
            if (converseVar.eventKey is pf17)
              goto SP0F200; /* transfer to exceptions*/
            end
          end
        end
      end
    end

    goto SP0F205; /* continue process loop*/



  end // end main
end // end SP0F

// SP0F - CALL SY2000
Function SP0F-CALL-SY2000()

     /* Get the Product/Region record*/

  set SQLCA empty;
  set WSY2000 empty;

  WSY2000.XGP-GPC-CD = SY2REC.XGPCD;
  WSY2000.SY-STY-NBR = SY2REC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SY2REC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05";
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";
  WSY2000.WSY2000-RETURN-CODE = 90;

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

   /* Product/Region record is found*/
   /* Overlay those fields common to both records*/

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    SY2REC.XGPCD = WSY2000.XGP-GPC-CD;
    SY2REC.SY1STNBR = WSY2000.SY-STY-NBR;
    SY2REC.SY2CLRID = WSY2000.SY-COLR-CD-ID;
    SY2REC.XDMCD = WSY2000.XDM-DIM-CD;
    SY2REC.XDR-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
    SY2REC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SY2REC.XSECD = WSY2000.XSE-SESN-CD;
    SY2REC.XSNYR = WSY2000.XSN-SESN-YR-RNG;
    SY2REC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SY2REC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SY2REC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SY2REC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;
    SY2REC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SY2REC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SY2REC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SY2REC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    SY2REC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SY2REC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SY2REC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SY2REC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
    SY2REC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SY2REC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SY2REC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
    SY2REC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SY2REC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SY2REC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SY2REC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    SY2REC.XWHCD[1] = WSY2000.XWH-WHSE-CD[1];
    SY2REC.XWHCD[2] = WSY2000.XWH-WHSE-CD[2];
    SY2REC.XWHCD[3] = WSY2000.XWH-WHSE-CD[3];
    SY2REC.XWHCD[4] = WSY2000.XWH-WHSE-CD[4];
    SY2REC.XWHCD[5] = WSY2000.XWH-WHSE-CD[5];
    SY2REC.XWHCD[6] = WSY2000.XWH-WHSE-CD[6];
    SY2REC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SY2REC.SY2BOSWI = WSY2000.SY-BO-SW;
    SY2REC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;
    SY2REC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;
  else

    /* Database DPROD.VSYREG02 is busy*/

    if (WSY2000.WSY2000-RETURN-CODE == 98)
      /* next sentence*/
    else

      /* Record is not found*/

      if (WSY2000.WSY2000-RETURN-CODE == 02)
        /* next sentence*/
      else

        /* Bad return code*/

        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        SP0FW01.SP0FW-WSY2000-GPC-CD = SY2REC.XGPCD;
        SP0FW01.SP0FW-WSY2000-STY-NBR = SY2REC.SY1STNBR;
        SP0FW01.SP0FW-WSY2000-COLR-CD = SY2REC.SY2CLRID;
        SP0FW01.SP0FW-WSY2000-DIM-CD = SY2REC.XDMCD;
        SP0FW01.SP0FW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        SP0FW01.SP0FW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = SP0FW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
      end
    end
  end
end // end SP0F-CALL-SY2000

// product trafic director
Function SP0F010()


  XSENTRY();

  XSSEGTR(); /* set segmented trans*/

  set SP0FW01 empty;
  if (converseVar.validationMsgNum == 80)
    SP0FW01.SP0FWCPD = "Y";
  else
    SP0FW01.SP0FWCPD = "N";
  end
  converseLib.validationFailed(0);

  if (COMMAREA.CAITEM != " ")
    SP0FW01.SP0FWLOC = COMMAREA.CAITEM;
    if (SP0FW01.SP0FWL1 != " ")
      COMMAREA.CAINQFL = SP0FW01.SP0FWL1; /* strip off the app. id*/
      SP0FW01.SP0FWL1 = " ";
      COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
    end
  end


  if (COMMAREA.CAITEM == " ")
    set SP0FM090 initial;
    SP0FS10(); /* set up receive screen*/
  else
    SP0FM090.SP1ID = COMMAREA.CAITEM;
    SP0FW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAINQFL = COMMAREA.CAINQFL;
    COMMAREA.CAITEM = " ";
    SP0FS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0FM090.SP1ID > " ")
    exit stack;
  end

  SP0FM090.XXXERRID = "SP0F010";
  SP0FM090.XXXRVNBR = "02";
  SP0FM090.SP0FMTDT = VGVar.currentShortGregorianDate;
  SP0FM090.SP1NM = "NEW SPID";
  SP0FM090.SP0FMMSG = "ENTER A SALES PROGRAM ID";


  converse SP0FM090 ;


  SP0FS13(); /* reset map attributes*/
  SP0FS14(); /* check fast pathing....*/



end // end SP0F010

// initialization and reset
Function SP0F020()


   /* ************************************************************/
   /* *   this process is used to initialize the necessary*/
      /* fields for the order type s.p. family codes.*/
      /* select the any family code for this s.p. and*/
      /* show on map sp0fm030.*/
   /* ************************************************************/

  set SP0FM030 empty;

  SP0FS21();



end // end SP0F020

// family codes
Function SP0F030()


   /* ************************************************************/
   /* *   this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* family codes for sales programs.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0fm030*/


  if (SP0FW01.SP0FWUPF == "Y")
    SP0FS21();
    SP0FW01.SP0FWUPF = "N";
  end

  SP0FM030.SP0FMMSG = SP0FW01.SP0FWMSG;
  SP0FW01.SP0FWSB2 = 0;
  SP0FW01.SP0FWSB1 = 0;
  SP0FW01.SP0FWVF = "Y";



  converse SP0FM030 ;


  if (SP0FM030.CAITEM > " ")
    COMMAREA.CAITEM = SP0FM030.CAITEM;
  end

   /* ************************************************************/
      /* sp0fs31  main edit routine....*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0fw1.sp0fwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/



  SP0FW01.SP0FWUPF = "N";



  SP0FS31();

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end



      /* were pf keys   entered to transfer control ?*/



  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end



      /* update the sp1rec if the update flag = 'y'*/



  if (SP0FM030.SP0FWMOP[SP0FWSB2] == " ")
     /* do nothing*/
  else
    if (SP0FM030.SP0FWMOP[SP0FWSB2] == "A"
     && SP0FW01.SP0FWUPF == "Y")
       /* add a family code*/
      SP0FW01.SP0FWVF = "A";
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB2;
      SP0FW01.SP0FWMSG = " ";
      SP1REC.SP1ID = SP0FM030.SP1ID;
      call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      SP0FS36();
                                   /* verify record can be added*/
      SP0FS37(); /* check status*/
      SP0FS3A(); /* update sp1rec*/
    else
      if (SP0FM030.SP0FWMOP[SP0FWSB2] == "D"
       && SP0FW01.SP0FWUPF == "Y")
        SP0FM030.SP0FWMOP[SP0FWSB2] = " ";
        SP0FW01.SP0FWVF = "D";
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB2;
        SP0FW01.SP0FWMSG = " ";
        SP0FW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
        SP1REC.SP1ID = SP0FM030.SP1ID;
        call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
        SP0FS3C();
                                   /* verify record can be deleted*/
        SP0FS37(); /* check status*/
        SP0FS3A(); /* update sp1rec*/
      end
    end
  end


end // end SP0F030

// initialization and reset
Function SP0F040()


   /* ************************************************************/
   /* *   this process is used to initialize the necessary*/
      /* fields for the sports activity codes.*/
      /* select the any sports activity codes for this s.p.*/
      /* and show on map sp0um080.*/
   /* ************************************************************/

  set SP0FM050 empty;

  SP0FS41();



end // end SP0F040

// sports act codes
Function SP0F050()


   /* ************************************************************/
   /* *   this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* sports activity codes for this s.p.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0fm050*/


  if (SP0FW01.SP0FWUPF == "Y")
    SP0FS41();
    SP0FW01.SP0FWUPF = "N";
  end

  SP0FM050.SP0FMMSG = SP0FW01.SP0FWMSG;
  SP0FW01.SP0FWSB2 = 0;
  SP0FW01.SP0FWSB1 = 0;
  SP0FW01.SP0FWVF = "Y";

   /* .......<<<  MOVE SP1REC TO SP0FM050;*/



  converse SP0FM050 ;


  COMMAREA.CAITEM = SP0FM050.CAITEM;


   /* ************************************************************/
      /* sp0fs51  main edit routine .....*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0fw1.sp0fwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/



  SP0FW01.SP0FWUPF = "N";



  SP0FS51();

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end



      /* were pf keys   entered to transfer control ?*/



  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end



      /* update the sp1rec if the update flag = 'y'*/



  if (SP0FM050.SP0FWMOP[SP0FWSB2] == " ")
     /* do nothing*/
  else
    if (SP0FM050.SP0FWMOP[SP0FWSB2] == "A"
     && SP0FW01.SP0FWUPF == "Y")
       /* add a sports activity code*/
      SP0FW01.SP0FWVF = "A";
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB2;
      SP0FW01.SP0FWMSG = " ";
      SP1REC.SP1ID = SP0FM050.SP1ID;
      call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      SP0FS56(); /* verify record can be added*/
      SP0FS37(); /* check status*/
      SP0FS3A(); /* update sp1rec*/
    else
      if (SP0FM050.SP0FWMOP[SP0FWSB2] == "D"
       && SP0FW01.SP0FWUPF == "Y")
        SP0FM050.SP0FWMOP[SP0FWSB2] = " ";
        SP0FW01.SP0FWVF = "D";
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB2;
        SP0FW01.SP0FWMSG = " ";
        SP1REC.SP1ID = SP0FM050.SP1ID;
        call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
        SP0FS57();
                                   /* verify record can be deleted*/
        SP0FS37(); /* check status*/
        SP0FS3A(); /* update sp1rec*/
      end
    end
  end


end // end SP0F050

// select set of sp product types
Function SP0F080()


   /* ************************************************************/
   /* *   the purpose of this process is to set up a working*/
      /* storage array of product id's that have been set up for*/
      /* the sales program selected.  this array of product id's*/
      /* will be used for subsequent processing by the user.*/
      /* the array has a limit of 3000.*/
   /* ************************************************************/

  set SP0FM090 empty; /* reset map*/
  set SP0FW03 empty; /* reset prod id array*/

  SP0FW01.SP0FWMSG = " "; /* clear out w.s. error mess.*/
  SP0FW01.SP1ID = SP1REC.SP1ID;
  SP0FW01.SP0FWSB1 = 1;
  SP0FW01.SP0FWSB2 = 1;
  SP0FW01.SP0FWPOS = 1;

  converseLib.validationFailed(0);

  set SP5REC empty;
  set SQLCA empty;

  SP5REC.SP1ID = SP1REC.SP1ID;

  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FW01.SP0FWTSZ = +0;
    SP0FW01.SP0FWSB1 = +1;
    while (SP0FW01.SP0FWSB1 <= +3000
     && SQLCA.VAGen_SQLCODE == +0)
      SP0FS81(); /* select next sp5rec*/
    end
    call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0FW01.SP0FWTSZ = SP0FW01.SP0FWSB1 - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0F080 ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM090";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    exit stack;
  end

  if (SP0FW01.SP0FWVF == "A")
    set SP0FM090 initial;
    SP0FM090.SP0FMMSG = "PRODUCT ID ADDED TO SALES PROGRAM";
    set SP0FM090 alarm;
    set SP0FM090.SP0FWMOP[1] cursor, modified, bold;
    set SP0FM090.XGPCD[1] modified, bold;
    set SP0FM090.SY1STNBR[1] modified, bold;
    set SP0FM090.SY2CLRID[1] modified, bold;
    set SP0FM090.XDMCD[1] modified, bold;
    set SP0FM090.SP2MNQTY[1] modified, bold;
    set SP0FM090.SY1STYNM[1] skip, bold;
    set SP0FM090.SY2CLRDS[1] skip, bold;
  else
    if (SP0FW01.SP0FWVF1 == "D")
      set SP0FM090 initial;
      SP0FM090.SP0FMMSG = "PRODUCT RECORD DELETED - CONTINUE ";
    else
      if (SP0FW01.SP0FWVF1 == "X")
        set SP0FM090 initial, alarm;
        set SP0FM090.XGPCD[1] modified, bold;
        set SP0FM090.SP0FWMOP[1] cursor, modified, bold;
        set SP0FM090.SY1STNBR[1] modified, bold;
        converseLib.validationFailed(88);
        SP0FM090.SP0FMMSG = "ERROR IN DELETING PRODUCT - TRY AGAIN";
      else
        if (SP0FW01.SP0FWVF1 == "S")
          set SP0FM090 initial;
          set SP0FM090 alarm;
          set SP0FM090.SP0FWMOP[1] cursor, modified, bold;
          set SP0FM090.XGPCD[1] modified, bold;
          set SP0FM090.SY1STNBR[1] modified, bold;
          set SP0FM090.SY2CLRID[1] modified, bold;
          set SP0FM090.XDMCD[1] modified, bold;
          set SP0FM090.SP2MNQTY[1] modified, bold;
          set SP0FM090.SY1STYNM[1] skip, bold;
          set SP0FM090.SY2CLRDS[1] skip, bold;
          SP0FM090.SP0FMMSG = "PRODUCT RECORD UPDATED - CONTINUE ";
        else
          SP0FW01.SP0FWVF = "Y";
          set SP0FM090 initial;
          SP0FM090.SP0FMMSG = "VALID SELECTION CODES ===> A, D OR S";
        end
      end
    end
  end

  SP0FS82(); /* move records to map*/



end // end SP0F080

// product id listing for s.p.
Function SP0F090()



      /* ********************************************************/
      /* ** this process is used to control access to product  **/
      /* *  recs that are valid for a sales program.  this     **/
      /* *  allows the user to add, delete, or select a product**/
      /* *  type based upon the selected set of products  for  **/
      /* *  the sales program.  the user can also scroll       **/
      /* *  forward and backwards through the product set.     **/
      /* ********************************************************/


  SP0FM090.SP0FMTDT = VGVar.currentShortGregorianDate;
  SP0FM090.XXXERRID = "SP0F090";
  SP0FM090.XXXRVNBR = "02";
  SP0FM090.SP1ID = SP0FW01.SP1ID;
  SP0FM090.SP1NM = SP1REC.SP1NM;
  SP0FM090.SP1STAT = SP1REC.SP1STAT;
  SP0FW01.SP0FWSB1 = 0;


   /* *********************************************8*/
      /* sp0fs91 used to scroll forward*/
      /* sp0fs92 used to scroll backward*/
   /* *********************************************8*/

  if (converseVar.eventKey is pf8)
    SP0FS91();
  else
    if (converseVar.eventKey is pf7)
      SP0FS92();
    end
  end


  if (SP0FW01.SP0FWTSZ > 0)
    set SP0FM090.SP0FMOP1 protect, invisible;
  else
    set SP0FM090.SP0FMOP1 initialAttributes;
  end


  if (SP0FW01.SP0FWCPD == "Y"
   && converseVar.validationMsgNum == +0)
    converseLib.validationFailed(80);
  end


  converse SP0FM090 ;


  if (converseVar.validationMsgNum == 80)
    converseLib.validationFailed(+0);
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    exit stack;
  end

   /* ************************************************************/
      /* sp0fs93  main edit routine ............*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0fw1.sp0fwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/

  SP0FS93();

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end


   /* *************************************************************/
      /* were pf keys   entered to transfer control ?*/
   /* *************************************************************/


  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end


   /* *************************************************************/
      /* SP0F100  used to add new s.p. product types.  adds,*/
               /* changes and deletes are thru the SP0F100 series*/
   /* *************************************************************/

  SP5REC.SP1ID = SP0FM090.SP1ID;
  SP5REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
  SP5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
  SP5REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
  SP5REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];
  SP5REC.SP2MNQTY = SP0FM090.SP2MNQTY[SP0FWSB2];
  SP0FW01.SP5KEY = SP5REC.SP5KEY;



end // end SP0F090

// initialization and reset
Function SP0F100()



   /* ************************************************************/
   /* *   this process is used to initialize the necessary*/
      /* fields for the product s.p. del / add / change.*/
   /* ************************************************************/



  SP0FM110.SP0FMTDT = VGVar.currentShortGregorianDate;
  SP0FM110.XXXRVNBR = "01";
  SP0FM110.XXXRVNBR = "SP0F110";
  /*  */
  /* ------------ Y2K OUT BEGIN -----------------*/
  /*  */
  /* MOVE '19' TO SP0FW01.SP0FWD1;     /* work centry*/
  /* MOVE EZEDTE TO SP0FW01.SP0FWD2;   /* work date*/
  /*  */
  /* ------------ Y2K OUT END -------------------*/
  /*  */
  /*  */
  /* ------------ Y2K IN BEGIN -----------------*/
  /*  */
  SP0FW01.SP0FWD = VGVar.currentGregorianDate; /* work date*/
  /*  */
  /* ------------ Y2K IN END -- -----------------*/
  /*  */

  SP0FS98(); /* get dimension description*/
  SP0FS99(); /* get gpc description*/

  if (SP0FM090.SP0FWMOP[SP0FWSB2] == "D")
    set SP0FM110.SY5PRCUN skip;
  else
    set SP0FM110.SY5PRCUN initialAttributes;
  end

   /* determine the country of the sales program*/

  SP0FSA6();

   /* sp0fsa1  get the price defaults for color or style*/

  if (converseVar.validationMsgNum > 0
   && SP0FM090.SP0FWMOP[SP0FWSB2] != "D")
    exit stack;
  end

  SP0FSA1();

  if (converseVar.validationMsgNum > 0
   && SP0FM090.SP0FWMOP[SP0FWSB2] != "D")
    exit stack;
  end

      /* sp0fsa2  get the sizes available*/

  SP0FSA2();

  if (converseVar.validationMsgNum > 0
   && SP0FM090.SP0FWMOP[SP0FWSB2] != "D")
    exit stack;
  end



       /* SP0FSA3  to load the sp5rec to SP0FM110*/



  if (SP0FM090.SP0FWMOP[SP0FWSB2] == "S"
   || SP0FM090.SP0FWMOP[SP0FWSB2] == "D")
    SP5REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
    SP5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
    SP0FM110.SY1STYNM = SP0FM090.SY1STYNM[SP0FWSB2];
    SP5REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
    SP0FM110.SY2CLRDS = SP0FM090.SY2CLRDS[SP0FWSB2];
    SP5REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];
    SP5REC.SP2MNQTY = SP0FM090.SP2MNQTY[SP0FWSB2];
    SP0FSA3();
  end

  if (SP0FM090.SP0FWMOP[SP0FWSB2] == "A")
    SP0FM110.SP1ID = SP0FM090.SP1ID;
    SP0FM110.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
    SP0FM110.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
    SP0FM110.SY1STYNM = SP0FM090.SY1STYNM[SP0FWSB2];
    SP0FM110.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
    SP0FM110.SY2CLRDS = SP0FM090.SY2CLRDS[SP0FWSB2];
    SP0FM110.XDMCD = SP0FM090.XDMCD[SP0FWSB2];
  end



end // end SP0F100

// product id del / change for sp
Function SP0F110()



   /* ************************************************************/
   /* *   this process is used to converse the header screen.*/
      /* the screen can be used to del and / or change products*/
       /* for sales programs.*/
   /* ************************************************************/



  converse SP0FM110 ;



  COMMAREA.CAITEM = SP0FM110.CAITEM;



      /* sp0fsb1  this is the main edit process*/


  SP0FSB1();

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end


  if (converseVar.eventKey is enter
   && SP0FW01.SP0FWVF == "Y")
    SP0FSB4(); /* update s.p. product record*/
  end



end // end SP0F110

// PRODUCT DESCRIPTIONS- map200
Function SP0F117()


   /* ************************************************************/
   /* *   style descriptions...............*/
   /* ************************************************************/

  set SQLCA empty;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM200.SY1STYNM[SP0FWSB1] = SY1REC.SY1STYNM;
  else
    SP0FM200.SY1STYNM[SP0FWSB1] = "INVALID STYLE TYPE";
  end

   /* ************************************************************/
   /* *   color descriptions...............*/
   /* ************************************************************/

  set SQLCA empty;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM200.SY2CLRDS[SP0FWSB1] = SY2REC.SY2CLRDS;
  else
    if (SY2REC.SY2CLRID == "***"
     && SY2REC.XDMCD == "**")
      SP0FM200.SY2CLRDS[SP0FWSB1] = "ALL COLORS ";
    else
      SP0FM200.SY2CLRDS[SP0FWSB1] = "INVALID COLOR TYPE";
    end
  end



end // end SP0F117

// init. and reset ex.product
Function SP0F200()


   /* ************************************************************/
   /* *   clear w/s  and prepare for new sales program*/
   /* ************************************************************/

  converseLib.validationFailed(0);

  SP0FM200.SP1ID = SP0FW01.SP1ID; /* FORCE A NEW KEY*/
  SP0FW01.SP1ID = "0000";


end // end SP0F200

// select set of EXCLUDED PRODUCT
Function SP0F205()


   /* ************************************************************/
   /* *   excluded product loop...........*/
   /* ************************************************************/

  if (SP0FW01.SP1ID != SP0FM200.SP1ID)
    SP0FW01.SP0FWSB1 = 1;
    SP0FW01.SP0FWSB2 = 1;
    SP0FW01.SP0FWPOS = 1;
    converseLib.validationFailed(0);
    SP0FM200.VAGen_EZEMSG = " ";
    SP0F210(); /* new key*/
  end

  if (SP0FW01.SP0FWERR == "N" /* no errors*/
   && SP0FM200.VAGen_EZEMSG > " ") /* changed product list*/
    SP0FW01.SP0FWSB1 = 1;
    SP0FW01.SP0FWSB2 = 1;
    SP0F210(); /* new key*/
  end


  SP0F220(); /* converse*/


  converseLib.validationFailed(0);
  SP0FM200.VAGen_EZEMSG = " ";
  SP0FM200.SP0FMMSG = " "; /* message field*/
  SP0FW01.SP0FWPFK = "N"; /* att.key used?*/
  SP0FW01.SP0FWUPD = "N"; /* update requested*/
  SP0FW01.SP0FWERR = "N"; /* errors ?*/

  SP0F230(); /* valid.att.keys*/

  SP0F240(); /* reset mdt's*/

  SP0F250(); /* edit entry fields*/

  if (SP0FW01.SP0FWPFK == "N" /* att.key used ?*/
   && SP0FW01.SP0FWUPD == "Y" /* update requested ?*/
   && SP0FW01.SP0FWERR == "N") /* no errors?*/
    SP0F260(); /* update data base*/
  end

  if (converseVar.eventKey is pf7)
    SP0F270(); /* scroll backward*/
  end

  if (converseVar.eventKey is pf8)
    SP0F280(); /* scroll forward*/
  end



end // end SP0F205

// EXCLUDED PRODUCT
Function SP0F210()


   /* ************************************************************/
   /* *   ........ NEW KEY.........*/
   /* ************************************************************/

  SP0FW01.SP1ID = SP0FM200.SP1ID; /* HOLD NEW SPGM*/

  set SP0FM200 empty; /* reset map*/
  set SP0FW03 empty; /* reset prod id array*/

  SP0FM200.SP1ID = SP0FW01.SP1ID; /* RESTORE SPGM ID ON MAP*/
  SP0FM200.SP1NM = SP1REC.SP1NM; /* SPGM NAME*/
  SP0FM200.SP1STAT = SP1REC.SP1STAT; /* STATUS*/
  SP0FM200.XXXRVNBR = "01"; /* REVISION NUMBER*/
  SP0FM200.XXXERRID = "SP0F220"; /* error location*/
  SP0FM200.SP0FMTDT = VGVar.currentShortGregorianDate; /* date*/


  SP0F214(); /* SS OF EXCEPTIONS*/
  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FW01.SP0FWTSZ = +0;
    SP0FW01.SP0FWSB1 = +0; /* bump when used!*/
    SP0F216(); /* GET FIRST EXCEPTION*/
    if (SQLCA.VAGen_SQLCODE == +0) /* FOUND FIRST EXCEPTION*/
      while (SP0FW01.SP0FWSB1 <= +3000 /* max array at 3000*/
       && SQLCA.VAGen_SQLCODE == +0)
        SP0F216(); /* GET NEXT EXCEPTION*/
      end
    else
      SP0FM200.VAGen_EZEMSG = "NO EXCLUDED PRODUCTS FOR SPGM";
    end
    call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* CLOSE SS*/
    SP0FW01.SP0FWTSZ = SP0FW01.SP0FWSB1 + 0; /* SIZE OF SELECTED ARRAY*/
  end

      /* * sp0fwtsz = size of exception array in w/s*/
      /* * sp0fwpos = current position in w/s array*/
      /* * sp0fwsb1 = map position*/

  SP0FW01.SP0FWPOS = 0; /* start at top -initial load*/
  SP0F218(); /* LOAD MAP*/


  SP0FW01.SP1ID = SP0FM200.SP1ID; /* HOLD NEW SPGM*/

end // end SP0F210

// select set of EXCLUDED PRODUCT
Function SP0F214()


   /* ************************************************************/
   /* *   select set of EXCLUDED PRODUCTS.*/
   /* ************************************************************/

  set SP5REC empty;
  set SQLCA empty;

  SP5REC.SP1ID = SP0FM200.SP1ID;

  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* ALL O.K.*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0F214 ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM200";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
  end



end // end SP0F214

// select NEXT EXCLUDED PRODUCT
Function SP0F216()


  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP5REC.SP5PRODI == "E") /* EXCLUDED PROD*/
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      SP0FW03.XGPCD[SP0FWSB1] = SP5REC.XGPCD; /* GPC*/
      SP0FW03.SY1STNBR[SP0FWSB1] = SP5REC.SY1STNBR; /* STYLE*/
      SP0FW03.SY2CLRID[SP0FWSB1] = SP5REC.SY2CLRID; /* COLOR*/
      SP0FW03.XDMCD[SP0FWSB1] = SP5REC.XDMCD; /* DIM*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* NEXT SENTENCE*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F";
      TA1REC.TA1LOCAT[1] = "SN";
      TA1REC.TA1LOCAT[2] = "SP0F216";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM200";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    end
  end



end // end SP0F216

// LOAD EXCLUSIONS TO MAP 200
Function SP0F218()


   /* ************************************************************/
      /* LOAD W/S TO MAP SP0FM200*/
   /* ************************************************************/

      /* ** SP0FWTSZ = SIZE OF EXCEPTION ARRAY IN W/S*/
      /* ** SP0FWPOS = CURRENT POSITION IN W/S ARRAY*/
      /* ** SP0FWSB1 = MAP POSITION*/

  SP0FW01.SP0FWSB1 = 0;

  if (SP0FW01.SP0FWTSZ > 0) /* exceptions exist*/
    if (SP0FW01.SP0FWPOS < 0)
      SP0FW01.SP0FWPOS = 0;
    else
      if (SP0FW01.SP0FWPOS > SP0FW01.SP0FWTSZ)
        SP0FW01.SP0FWPOS = SP0FW01.SP0FWTSZ - 2;
      end
    end
  end

  if (SP0FW01.SP0FWTSZ > 0) /* exceptions exist*/
    while (SP0FW01.SP0FWSB1 < 14)
      SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS + 1; /* LOC.IN W/S*/
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1; /* LOC.ON MAP*/
      if (SP0FW01.SP0FWPOS > SP0FW01.SP0FWTSZ)
        SP0FM200.XGPCD[SP0FWSB1] = " ";
        SP0FM200.SY1STNBR[SP0FWSB1] = " ";
        SP0FM200.SY2CLRID[SP0FWSB1] = " ";
        SP0FM200.XDMCD[SP0FWSB1] = " ";
        SP0FM200.SY1STYNM[SP0FWSB1] = " ";
        SP0FM200.SY2CLRDS[SP0FWSB1] = " ";
      else
        if (SP0FW03.SY1STNBR[SP0FWPOS] != " ")
          SP0FM200.XGPCD[SP0FWSB1] = SP0FW03.XGPCD[SP0FWPOS];
          SP0FM200.SY1STNBR[SP0FWSB1] = SP0FW03.SY1STNBR[SP0FWPOS];
          SP0FM200.SY2CLRID[SP0FWSB1] = SP0FW03.SY2CLRID[SP0FWPOS];
          SP0FM200.XDMCD[SP0FWSB1] = SP0FW03.XDMCD[SP0FWPOS];

          SY1REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
          SY1REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];

          SY2REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
          SY2REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
          SY2REC.SY2CLRID = SP0FW03.SY2CLRID[SP0FWPOS];
          SY2REC.XDMCD = SP0FW03.XDMCD[SP0FWPOS];
          SP0F117(); /* GET DESCRIPTIONS*/
        end
      end
    end
  end

  if (SP0FW01.SP0FWTSZ == 0)
    SP0FM200.VAGen_EZEMSG = "NO EXCLUDED PRODUCTS - USE \"A\" TO ADD";
  end



end // end SP0F218

// CONVERSE SP0FM200
Function SP0F220()

      /* ********************************************************/
      /* ** CONVERSE ONLY                                      **/
      /* ********************************************************/

  converse SP0FM200 ;



end // end SP0F220

// validate attn keys.
Function SP0F230()


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1  /* HELP*/
   || converseVar.eventKey is pf3  /* RETURN*/
   || converseVar.eventKey is pf4  /* MASTER MENU*/
   || converseVar.eventKey is pa2  /* CANCEL*/
   || converseVar.eventKey is pf7  /* BACK*/
   || converseVar.eventKey is pf8  /* FORWARD*/
   || converseVar.eventKey is pf14 /* included products*/
   || converseVar.eventKey is pf15 /* product categories*/
   || converseVar.eventKey is pf16 /* sport activities*/
   || converseVar.eventKey is pf17) /* excluded products*/
     /* ALL O.K.*/
  else
    converseLib.validationFailed(1);
    SP0FW01.SP0FWVF = "N"; /* an invalid pf key*/
    return;
  end


  if (converseVar.eventKey is pf7  /* BACK*/
   || converseVar.eventKey is pf8  /* FORWARD*/
   || converseVar.eventKey is pf14 /* included products*/
   || converseVar.eventKey is pf15 /* product categories*/
   || converseVar.eventKey is pf16) /* sport activities*/
    SP0FW01.SP0FWPFK = "Y"; /* valid pf key was used*/
  end


   /* **********************************************************/
   /* **    PF3, PA2,PF1 & PF4 ALLOWED with modified data    ***/
   /* **     NOTE:   no updating will be accomplished        ***/
   /* **********************************************************/

  if (converseVar.eventKey is pf3) /* RETURN*/
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0FM200.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2) /* CANCEL- returns to menu*/
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end

  if (converseVar.eventKey is pf1) /* HELP*/
    XSPF1();
    SP0FM200.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end

  if (converseVar.eventKey is pf4) /* MASTER MENU*/
    XSPF4();
    SP0FM200.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


    /* * EDIT FOR FAST PATH, & UPDATES        ****************/

  if (SP0FM200.CATOAP != " ")
    if ("A" in SP0FM200.SP0FWMOP
     || "D" in SP0FM200.SP0FWMOP)
      SP0FM200.SP0FMMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0FM200.CATOAP = " ";
      SP0FM200.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0FM200.CATOAP normal;
      SP0FW01.SP0FWERR = "Y"; /* an error occured*/
    else
      COMMAREA.CATOAP = SP0FM200.CATOAP;
      COMMAREA.CAITEM = SP0FM200.CAITEM;
      XSEXIT();
      SP0FM200.SP0FMMSG = COMMAREA.CAMSG;
      SP0FM200.CATOAP = " ";
      SP0FM200.CAITEM = " ";
      converseLib.validationFailed(99);
      SP0FW01.SP0FWERR = "Y"; /* an error occured*/
    end
  end


  if (converseVar.eventKey is pf14) /* included products*/
    SP0FW01.SP0FWL1 = "A"; /* location*/
    SP0FW01.SP0FWID1 = SP0FM200.SP1ID;
    COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
  else
    if (converseVar.eventKey is pf15) /* product categories*/
      SP0FW01.SP0FWL1 = "B"; /* location*/
      SP0FW01.SP0FWID1 = SP0FM200.SP1ID;
      COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
    else
      if (converseVar.eventKey is pf16) /* sport activities*/
        SP0FW01.SP0FWL1 = "C"; /* location*/
        SP0FW01.SP0FWID1 = SP0FM200.SP1ID;
        COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
      else
        if (converseVar.eventKey is pf17) /* excluded products*/
          SP0FW01.SP0FWL1 = "D"; /* location*/
          SP0FW01.SP0FWID1 = SP0FM200.SP1ID;
          COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
        else
          SP0FW01.SP0FWL1 = "D"; /* location*/
          SP0FW01.SP0FWID1 = SP0FM200.SP1ID;
          COMMAREA.CAITEM = SP0FW01.SP0FWLOC;
        end
      end
    end
  end



end // end SP0F230

// RESET MDT'S
Function SP0F240()

   /* --------------------------------------------------*/
        /* RESET entire SCREEN..............*/
   /* --------------------------------------------------*/

  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 15)
    set SP0FM200.XGPCD[SP0FWSB1] normal;
    set SP0FM200.SY1STNBR[SP0FWSB1] normal;
    set SP0FM200.SY2CLRID[SP0FWSB1] normal;
    set SP0FM200.XDMCD[SP0FWSB1] normal;
    set SP0FM200.SY1STYNM[SP0FWSB1] initialAttributes;
    set SP0FM200.SY2CLRDS[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end



end // end SP0F240

// EDIT SCREEN ENTRY.
Function SP0F250()


   /* -----------------------------------------------------------*/
                          /* SCREEN  EDITS*/
        /* CAN NOT DELETE PRODUCTS ON ACTIVE OR FINISHED SPGMS..*/
   /* -----------------------------------------------------------*/
  SP0FW01.SP0FWSB1 = 14;
  while (SP0FW01.SP0FWSB1 > 0)
    if (SP0FM200.SP0FWMOP[SP0FWSB1] == "D")
      if (SP1REC.SP1STAT == "A" /* ACTIVE*/
       || SP1REC.SP1STAT == "F" /* FINISHED*/
       || SP1REC.SP1STAT == "I") /* INACTIVE*/
        set SP0FM200.SY1STNBR[SP0FWSB1] cursor, modified, bold;
        set SP0FM200.SY2CLRID[SP0FWSB1] modified, bold;
        set SP0FM200.XDMCD[SP0FWSB1] modified, bold;
        SP0FM200.SP0FMMSG = "CANNOT DELETE A PRODUCT ON THIS SALES PGM";
        SP0FW01.SP0FWERR = "Y"; /* ERROR*/
      end
    end
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
  end

   /* -----------------------------------------------------------*/
        /* PRODUCT CAN ONLY BE ADDED ONCE..on the screen*/
   /* -----------------------------------------------------------*/
  if (SP0FW01.SP0FWERR == "N") /* no  ERROR so far....*/
    SP0FW01.SP0FWSB1 = 14; /* current position on screen*/
    while (SP0FW01.SP0FWSB1 > 0)
      SP0FW01.SP0FWSB2 = 13; /* compare location.*/
      while (SP0FW01.SP0FWSB2 > 0)
        if (SP0FM200.SY1STNBR[SP0FWSB1] == SP0FM200.SY1STNBR[SP0FWSB2]
         && SP0FM200.XGPCD[SP0FWSB1] == SP0FM200.XGPCD[SP0FWSB2]
         && SP0FM200.SY2CLRID[SP0FWSB1] == SP0FM200.SY2CLRID[SP0FWSB2]
         && SP0FM200.XDMCD[SP0FWSB1] == SP0FM200.XDMCD[SP0FWSB2]
         && SP0FW01.SP0FWSB1 != SP0FW01.SP0FWSB2
         && SP0FM200.SY1STNBR[SP0FWSB1] > "     ") /* ENTERED PROD.*/
          set SP0FM200.SY1STNBR[SP0FWSB1] cursor, modified, bold;
          set SP0FM200.SY2CLRID[SP0FWSB1] modified, bold;
          set SP0FM200.XDMCD[SP0FWSB1] modified, bold;
          SP0FM200.SP0FMMSG = "DUPLICATE PRODUCT ON SCREEN...    ";
          SP0FW01.SP0FWERR = "Y"; /* ERROR occured.*/
        end
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 - 1;
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
    end
  end
   /* -----------------------------------------------------------*/
        /* ADDED PRODUCT MUST BE UNIQUE TO SALES PROGRAM*/
   /* -----------------------------------------------------------*/
  if (SP0FW01.SP0FWERR == "N") /* no  ERROR so far....*/
    SP0FW01.SP0FWSB1 = 14;
    while (SP0FW01.SP0FWSB1 > 0)
      if (SP0FM200.SP0FWMOP[SP0FWSB1] == "A")
        SP0F251(); /* IS PROD.ON SPGM?*/
        if (SQLCA.VAGen_SQLCODE == +0) /* PROD IS ON SPGM*/
          set SP0FM200.SY1STNBR[SP0FWSB1] cursor, modified, bold;
          set SP0FM200.SY2CLRID[SP0FWSB1] modified, bold;
          set SP0FM200.XDMCD[SP0FWSB1] modified, bold;
          SP0FM200.SP0FMMSG = "PRODUCT ALREADY ASSOCIATED WITH SALES PGM";
          SP0FW01.SP0FWERR = "Y"; /* ERROR occured.*/
        else
          if (SQLCA.VAGen_SQLCODE != 100)
            set SP0FM200.SY1STNBR[SP0FWSB1] cursor, modified, bold;
            set SP0FM200.SY2CLRID[SP0FWSB1] modified, bold;
            set SP0FM200.XDMCD[SP0FWSB1] modified, bold;
            SP0FM200.SP0FMMSG = "PROBLEM IN ADDING THIS PRODUCT.";
            SP0FW01.SP0FWERR = "Y"; /* ERROR*/
          end
        end
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
    end
  end
   /* -----------------------------------------------------------*/
        /* ADDED PRODUCT MUST BE VALID.......*/
   /* -----------------------------------------------------------*/
  if (SP0FW01.SP0FWERR == "N") /* no  ERROR so far....*/
    SP0FW01.SP0FWSB1 = 14;
    while (SP0FW01.SP0FWSB1 > 0)
      if (SP0FM200.SP0FWMOP[SP0FWSB1] == "A")
        SP0F252(); /* IS PROD.VALID?*/
        SP0F254(); /* IS COLOR VALID?*/
        SP0F256(); /* IS DIM. VALID?*/
        if (SQLCA.VAGen_SQLCODE != +0) /* PROD IS ON SPGM*/
          set SP0FM200.SY1STNBR[SP0FWSB1] cursor, modified, bold;
          set SP0FM200.SY2CLRID[SP0FWSB1] modified, bold;
          set SP0FM200.XDMCD[SP0FWSB1] modified, bold;
          SP0FM200.SP0FMMSG = "INVALID STYLE, COLOR, DIMENSION          ";
          SP0FW01.SP0FWERR = "Y"; /* ERROR occured.*/
        end
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
    end
  end

   /* -----------------------------------------------------------*/
        /* SET THE UPDATE FLAG IF ALL EDITS ARE SATISFIED.*/
   /* -----------------------------------------------------------*/
  if (SP0FW01.SP0FWERR == "N") /* no  ERROR so far....*/
    SP0FW01.SP0FWSB1 = 14;
    while (SP0FW01.SP0FWSB1 > 0)
      if (SP0FM200.SP0FWMOP[SP0FWSB1] == "A"
       || SP0FM200.SP0FWMOP[SP0FWSB1] == "D")
        SP0FW01.SP0FWUPD = "Y"; /* ok to update.*/
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
    end
  end



end // end SP0F250

// IS PROD ON SALES PGM ?
Function SP0F251()


   /* ************************************************************/
   /* *  IS THIS PRODUCT ALREADY PART OF THIS SALES PROGRAM ?*/
   /* ************************************************************/

  set SP5REC empty;
  set SQLCA empty;

  SP5REC.SP1ID = SP0FM200.SP1ID; /* SPGM*/
  SP5REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1]; /* gpc*/
  SP5REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1]; /* STYLE*/
  SP5REC.SY2CLRID = SP0FM200.SY2CLRID[SP0FWSB1]; /* color*/
  SP5REC.XDMCD = SP0FM200.XDMCD[SP0FWSB1]; /* dim.*/

  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FW01.SP0FWERR = "Y"; /* ERROR OCCURED*/
  else
    SP5REC.SP1ID = SP0FM200.SP1ID; /* SPGM*/
    SP5REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1]; /* gpc*/
    SP5REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1]; /* STYLE*/
    SP5REC.SY2CLRID = "** "; /* all colors*/
    SP5REC.XDMCD = "**"; /* all dim*/
    call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FW01.SP0FWERR = "Y"; /* ERROR OCCURED*/
    end
  end



end // end SP0F251

// VALIDATE STYLE
Function SP0F252()


   /* ************************************************************/
   /* *  validate new product style id against style db2 table.*/
   /* ************************************************************/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1];
  SY1REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1];

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM200.SY1STYNM[SP0FWSB1] = SY1REC.SY1STYNM;
  else
    SP0FW01.SP0FWMSG = "THIS PRODUCT STYLE TYPE DOES NOT EXIST";
    converseLib.validationFailed(28);
    SP0FW01.SP0FWERR = "Y"; /* error*/
    set SP0FM090.SY1STNBR[SP0FWSB1] cursor, modified, bold;
    set SP0FM090.SP0FWMOP[SP0FWSB1] modified, bold;
    return;
  end



end // end SP0F252

// VALIDATE COLOR
Function SP0F254()


   /* ************************************************************/
   /* *  validate new product COLOR*/
   /* ************************************************************/
  if (SP0FM200.SY2CLRID[SP0FWSB1] == "***")
    SP0FM200.SY2CLRDS[SP0FWSB1] = "ALL COLORS";
  else
    set SY2REC empty;
    set SQLCA empty;
    SY2REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1];
    SY2REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1];
    SY2REC.SY2CLRID = SP0FM200.SY2CLRID[SP0FWSB1];
    SY2REC.XDMCD = SP0FM200.XDMCD[SP0FWSB1];

    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FM200.SY2CLRDS[SP0FWSB1] = SY2REC.SY2CLRDS;
    else
      SP0FM200.SY2CLRDS[SP0FWSB1] = "INVALID";
      SP0FW01.SP0FWERR = "Y"; /* ERROR OCCURED*/
    end
  end



end // end SP0F254

// VALIDATE DIMENSION
Function SP0F256()


   /* ************************************************************/
   /* *   VALIDATE DIMENSION CODE (MUST BE ACTIVE)*/
   /* ************************************************************/

  if (SP0FM200.XDMCD[SP0FWSB1] == "**")
      /* for all dimemsions*/
  else
    if (SP0FM200.XDMCD[SP0FWSB1] == "  ")
       /* NO DIMENSION........*/
    else
      if (SP0FM200.XDMCD[SP0FWSB1] in XDMTBL.XDMCD)
        SP0FW01.SP0FWDMD = XDMTBL.XDMDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0FW01.SP0FWERR = "Y"; /* ERROR*/
        set SP0FM200.XDMCD[SP0FWSB1] cursor, modified, bold;
        SP0FM200.VAGen_EZEMSG = "THIS IS NOT A VALID DIMENSION   ";
      else
        if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* INACTIVE DIM CODE*/
          SP0FW01.SP0FWERR = "Y"; /* ERROR OCCURED*/
          set SP0FM200.XDMCD cursor, modified, bold;
          SP0FM200.VAGen_EZEMSG = "THIS IS NOT AN ACTIVE DIMENSION";
        end
      end
    end
  end



end // end SP0F256

// update database
Function SP0F260()



  SP0FW01.SP0FWSB1 = 14;

  while (SP0FW01.SP0FWSB1 > 0)
    if (SP0FM200.SP0FWMOP[SP0FWSB1] == "A")
      SP0F262(); /* delete product*/
    end
    if (SP0FM200.SP0FWMOP[SP0FWSB1] == "D")
      SP0F264(); /* add    product*/
    end
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 - 1;
  end



end // end SP0F260

// ADD EXCEPTIONS
Function SP0F262()


   /* ************************************************************/
   /* *   ADD EXCEPTIONS*/
   /* ************************************************************/

  set SP5REC empty;
  set SQLCA empty;
  SP5REC.SP1ID = SP0FM200.SP1ID;
  SP5REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1];
  SP5REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1];
  SP5REC.SY2CLRID = SP0FM200.SY2CLRID[SP0FWSB1];
  SP5REC.XDMCD = SP0FM200.XDMCD[SP0FWSB1];

  SP5REC.SP2MNQTY = 0; /* MIN.QTY*/

  SP0FW01.SP5KEY = SP5REC.SP5KEY;
  SP5REC.SP5PRODI = "E"; /* EXCLUDE PRODUCT*/
  SP5REC.ZZZCHGCT = 0;
  SP0FW01.SP0FWT1 = VGVar.currentFormattedTime;
  SP0FW01.SP0FWTH2 = SP0FW01.SP0FWTH1;
  SP0FW01.SP0FWTM2 = SP0FW01.SP0FWTM1;
  SP5REC.ZZZCHGTM = SP0FW01.SP0FWT2;
  /*  */
  /* ---------- Y2K OUT BEGIN --------------*/
  /*  */
  /* MOVE EZEDTE TO SP0FW01.SP0FWD;*/
  /* MOVE 019 TO SP0FW01.SP0FWD1;*/
  /*  */
  /* ---------- Y2K OUT END ----------------*/
  /*  */
  /*  */
  /* ---------- Y2K IN  BEGIN --------------*/
  /*  */
  SP0FW01.SP0FWD = VGVar.currentGregorianDate;
  /*  */
  /* ---------- Y2K IN  END ----------------*/
  /*  */
  SP5REC.ZZZCHGDT = SP0FW01.SP0FWD;
  call "IO0110" ("A ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM200.VAGen_EZEMSG = "SALES PROGRAM WAS UPDATED ";
    SP0FM200.SP0FWMOP[SP0FWSB1] = " ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0F262 ";
    TA1REC.TA1LOCAT[3] = "IO0110  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM200";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0F262

// DELETE EXCEPTIONS
Function SP0F264()


   /* ************************************************************/
   /* *   DELETE EXCEPTION*/
   /* ************************************************************/

  set SP5REC empty;
  set SQLCA empty;
  SP5REC.SP1ID = SP0FM200.SP1ID;
  SP5REC.XGPCD = SP0FM200.XGPCD[SP0FWSB1];
  SP5REC.SY1STNBR = SP0FM200.SY1STNBR[SP0FWSB1];
  SP5REC.SY2CLRID = SP0FM200.SY2CLRID[SP0FWSB1];
  SP5REC.XDMCD = SP0FM200.XDMCD[SP0FWSB1];

  SP5REC.SP2MNQTY = 0; /* MIN.QTY*/

  SP0FW01.SP5KEY = SP5REC.SP5KEY;
  call "IO0110" ("D ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM200.SP0FWMOP[SP0FWSB1] = " ";
    SP0FM200.VAGen_EZEMSG = "SALES PROGRAM WAS UPDATED ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = "SP0F264 ";
    TA1REC.TA1LOCAT[3] = "IO0110  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM200";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end SP0F264

// scroll exceptions backward
Function SP0F270()


     /* **********************************************************/
     /* *            backward   scroll for product exceptions   **/
     /* **********************************************************/
   /* ** where would we be if we backed up one screen?*/

  SP0FW01.SP0FWPO2 = SP0FW01.SP0FWPOS;
  SP0FW01.SP0FWPO2 = SP0FW01.SP0FWPO2 - 28; /* TEST LOCATION*/
  if (SP0FW01.SP0FWPO2 <= 0)
    SP0FW01.SP0FWPOS = 1;
    SP0FM200.SP0FMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
    SP0F240(); /* reset mdt's*/
    SP0F218(); /* load map*/
  else
    SP0FW01.SP0FWPOS = SP0FW01.SP0FWPO2; /* BACK UP 14*/
    set SP0FM200 empty;
    SP0FM200.SP0FMTDT = VGVar.currentShortGregorianDate;
    SP0FM200.XXXRVNBR = "01";
    SP0FM200.XXXERRID = "SP0F270";
    move SP1REC to SP0FM200 withV60Compat;
    SP0F240(); /* reset mdt's*/
    SP0F218(); /* load map*/
  end



end // end SP0F270

// scroll exceptions forward
Function SP0F280()


     /* **********************************************************/
     /* *               forward scroll for product exceptions   **/
     /* **********************************************************/


  if (SP0FW01.SP0FWPOS <= SP0FW01.SP0FWTSZ) /* HAVE NOT LIMITED OUT*/
    set SP0FM200 empty;
    SP0FM200.SP0FMTDT = VGVar.currentShortGregorianDate;
    SP0FM200.XXXRVNBR = "01";
    SP0FM200.XXXERRID = "SP0F270";
    move SP1REC to SP0FM200 withV60Compat;
    SP0F240();
                                   /* reset mdt's*/
    SP0F218(); /* load map*/
  else
    SP0FM200.SP0FMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0F280

// vortyp01 close set
Function SP0FCSP()

      /* *********************************************************/
      /* * this statement group performs a close set for        **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue close set request*/

  call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for close set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0FCSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SPOFM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end
   /* * *************************************************************/
end // end SP0FCSP

// vortyp01 select next
Function SP0FNSP()

      /* *********************************************************/
      /* * this statement group performs a select next for      **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue select next to get request*/

  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0FNSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SPOFM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end

   /* *************************************************************/
end // end SP0FNSP

// set up sp1id receive screen
Function SP0FS10()



  set SP0FM090.SP1ID cursor, bold;
  set SP0FM090.SP1NM protect, invisible;
  set SP0FM090.SP1STAT protect, invisible;
  set SP0FM090.SP0FMOP1 protect, invisible;

  SP0FW01.SP0FWSB1 = 1;
  while (SP0FW01.SP0FWSB1 <= 14)
    set SP0FM090.SP0FWMOP[SP0FWSB1] protect, invisible;
    set SP0FM090.XGPCD[SP0FWSB1] protect, invisible;
    set SP0FM090.XDMCD[SP0FWSB1] protect, invisible;
    set SP0FM090.SP2MNQTY[SP0FWSB1] protect, invisible;
    set SP0FM090.SY1STNBR[SP0FWSB1] protect, invisible;
    set SP0FM090.SY1STYNM[SP0FWSB1] protect, invisible;
    set SP0FM090.SY2CLRID[SP0FWSB1] protect, invisible;
    set SP0FM090.SY2CLRDS[SP0FWSB1] protect, invisible;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end




end // end SP0FS10

// validate sales program id
Function SP0FS12()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0FW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0FM090 withV60Compat;
    SP0FW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0U";
      COMMAREA.CAITEM = SP0FM090.SP1ID;
      XSEXIT();
    else
      SP0FW01.SP0FWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0FS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0FS12

// reset  sp1id receive screen
Function SP0FS13()



  set SP0FM090.SP1ID initialAttributes;
  set SP0FM090.SP1NM initialAttributes;
  set SP0FM090.SP1STAT initialAttributes;
  set SP0FM090.SP0FMOP1 initialAttributes;

  SP0FW01.SP0FWSB1 = 1;
  while (SP0FW01.SP0FWSB1 <= 14)
    set SP0FM090.SP0FWMOP[SP0FWSB1] initialAttributes;
    set SP0FM090.XGPCD[SP0FWSB1] initialAttributes;
    set SP0FM090.XDMCD[SP0FWSB1] initialAttributes;
    set SP0FM090.SY1STNBR[SP0FWSB1] initialAttributes;
    set SP0FM090.SY1STYNM[SP0FWSB1] initialAttributes;
    set SP0FM090.SY2CLRID[SP0FWSB1] initialAttributes;
    set SP0FM090.SY2CLRDS[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end

  SP0FM090.SP0FMMSG = " ";



end // end SP0FS13

// edit for fast path, data modif
Function SP0FS14()

   /* **********************************************************/
   /* ***** check fast pathing........                    ******/
   /* **********************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0FM090.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
   /* *                     pf1, and pf4.*/
   /* *********************************************************/

  if (SP0FM090.CATOAP != " ")
    COMMAREA.CATOAP = SP0FM090.CATOAP;
    COMMAREA.CAITEM = SP0FM090.CAITEM;
    XSEXIT();
  end


   /* *********************************************************/
      /* transfer to help program*/
   /* *********************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end

      /* transfer to main menu program mn0m*/


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0FS14

// sp1rec sp for family codes
Function SP0FS21()



   /* ************************************************************/
   /* *   IF RETURN CODE FROM SELECT SET IS GOOD, MOVE PRODUCT*/
      /* CATEGORIES TO MAP.  INITIALIZE NECESSARY FIELDS.*/
   /* ************************************************************/



  set SP0FM030 empty;
  SP0FM030.SP0FMTDT = VGVar.currentShortGregorianDate;
  SP0FM030.SP1ID = SP0FW01.SP1ID;

  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 21)
    set SP0FM030.SP0FWMOP[SP0FWSB1] initialAttributes;
    set SP0FM030.XPCCD[SP0FWSB1] initialAttributes;
    set SP0FM030.XPCDESC[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end



   /* ************************************************************/
      /* select the any PRODUCT CATEGORIES FOR THIS SALES PGM.*/
      /* show on map sp0fm030.*/
   /* ************************************************************/



  SP0FW01.SP0FWSB1 = 1;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SP1REC to SP0FM030 withV60Compat;
  end


  while (SP0FW01.SP0FWSB1 < 21
   && SP1REC.XPCCD[SP0FWSB1] != " ")
    SP0FW01.SP0FWUPF = "N";
    if (SQLCA.VAGen_SQLCODE == 0)
      SP0FW01.SP0FWUPF = "N";
      SP0FM030.XPCCD[SP0FWSB1] = SP1REC.XPCCD[SP0FWSB1];
      if (SP1REC.XPCCD[SP0FWSB1] in XPCTBL.XPCCD)
        SP0FM030.XPCDESC[SP0FWSB1] = XPCTBL.XPCDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0FM030.XPCDESC[SP0FWSB1] = "INVALID CODE";
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FS21 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (SP0FW01.SP0FWSB1 == 1)
    SP0FW01.SP0FWSB1 = 999;
    SP0FW01.SP0FWMSG = "NO PRODUCT CATEGORIES NOW EXIST";
    SP0FW01.SP0FWFL4 = " ";
  else
    SP0FW01.SP0FWFL4 = "*";
  end



      /* sp0fs22 sort method for PRODUCT CATEGORIES*/



  SP0FS22();



end // end SP0FS21

// sort method -family codes
Function SP0FS22()



   /* ************************************************************/
   /* *   sort method for map array.*/
   /* ************************************************************/



  if (SP0FW01.SP0FWSB1 != 999)
    SP0FW01.SP0FWTSZ = SP0FW01.SP0FWSB1 - 1;
  else
    SP0FW01.SP0FWTSZ = 0;
  end

  SP0FW01.SP0FWSB1 = 1;
  SP0FW01.SP0FWSB2 = 2;

  while (SP0FW01.SP0FWSB1 < 21
   && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0FW01.SP0FWSB2 < 21
     && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB2)
      if (SP0FM030.XPCCD[SP0FWSB1] > SP0FM030.XPCCD[SP0FWSB2])
        SP0FW01.XPCCD = SP0FM030.XPCCD[SP0FWSB2];
        SP0FW01.XPCDESC = SP0FM030.XPCDESC[SP0FWSB2];
        SP0FM030.XPCCD[SP0FWSB2] = SP0FM030.XPCCD[SP0FWSB1];
        SP0FM030.XPCDESC[SP0FWSB2] = SP0FM030.XPCDESC[SP0FWSB1];
        SP0FM030.XPCCD[SP0FWSB1] = SP0FW01.XPCCD;
        SP0FM030.XPCDESC[SP0FWSB1] = SP0FW01.XPCDESC;
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
      else
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
      end
    end
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB1 + 1;
  end



      /* procedure to allow fields to be entered*/



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 21
   && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    set SP0FM030.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM030.XPCCD[SP0FWSB1] initialAttributes;
    set SP0FM030.XPCDESC[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end

  if (SP0FW01.SP0FWSB1 < 21)
    set SP0FM030.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM030.XPCCD[SP0FWSB1] normal;
    set SP0FM030.XPCCD[SP0FWSB1] modified, bold;
  end



end // end SP0FS22

// main edit group for family cd
Function SP0FS31()



   /* *********************************************************/
   /* *   this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0FW01.SP0FWMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0FW01.SP0FWVF = "N";
    return;
  end



    /* *********************************************************/
      /* sp0fs32  to check fields for entry.  if a bad selection*/
               /* code is used sp0fw1.sp0fwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
    /* *********************************************************/

  SP0FS32();


    /* *********************************************************/
      /* sp0fs33 check for fast path, pa2, pf3*/
    /* *********************************************************/


  SP0FS33();
    /* *********************************************************/


  if (SP0FW01.SP0FWVF == " ") /* no screen update*/
    if (SP0FM030.SP1ID != SP0FW01.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0FM030.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf16)
          COMMAREA.CAINQFL = "C";
          exit stack;
        else
          COMMAREA.CAINQFL = "B";
          exit stack;
        end
      end
    end
  else
    if (SP0FM030.SP1ID != SP0FW01.SP1ID) /* change in key*/
      SP0FM030.SP0FMMSG = "DO NOT UPDATE AND CHANGE SALES PROGRAM ID";
      SP0FM030.SP1ID = SP0FW01.SP1ID; /* move old sp id back*/
      SP0FW01.SP0FWVF = "N";
    end
  end



  if (converseVar.validationMsgNum > 0
   || SP0FW01.SP0FWVF == "N")
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* *****************************************************/
     /* was option selected (a or d)...if not,send message*/
   /* *****************************************************/


  if (SP0FW01.SP0FWVF == " ")
    SP0FW01.SP0FWVF = "N";
    converseLib.validationFailed(4);
    SP0FW01.SP0FWMSG = "PLEASE SELECT AN OPTION OR SELECT A RECORD";
    return;
  end


   /* *****************************************************/
      /* sp0fs34 is the account type valid ?*/
   /* *****************************************************/

  SP0FS34();

  if (converseVar.validationMsgNum > 0
   || SP0FW01.SP0FWVF == "N")
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* *****************************************************/
      /* sp0fs35 does the family code already exist ?*/
   /* *****************************************************/

  SP0FS35();



end // end SP0FS31

// validate add/delete/select cd
Function SP0FS32()



   /* ************************************************************/
   /* *   this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
      /* and will check that both fields are entered for a add*/
      /* and will not allow a delete on a new record*/
      /* or an add on an existing one.*/
      /* resets all fields to normal.*/
   /* ************************************************************/



  SP0FW01.SP0FWVF = " ";
  SP0FW01.SP0FWSB2 = 1;
  SP0FW01.SP0FWSB1 = 0;



  while (SP0FW01.SP0FWSB1 < SP0FW01.SP0FWTSZ)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    set SP0FM030.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM030.XPCCD[SP0FWSB1] initialAttributes;
    set SP0FM030.XPCDESC[SP0FWSB1] initialAttributes;
  end

  if (SP0FW01.SP0FWTSZ < 20)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWTSZ + 1;
    set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, bold;
    set SP0FM030.XPCCD[SP0FWSB1] normal;
    set SP0FM030.XPCCD[SP0FWSB1] bold;
  end

  SP0FW01.SP0FWSB1 = 0;



      /* IN A BLANK POSITION ONLY AN ADD IS ALLOWED*/



  if (SP0FW01.SP0FWTSZ < 20)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWTSZ + 1;
    if (SP0FM030.SP0FWMOP[SP0FWSB1] == "D")
      SP0FW01.SP0FWMSG = "ONLY AN ADD IS VALID IN THIS POSITION";
      set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
      set SP0FM030.XPCCD[SP0FWSB1] bold;
      set SP0FM030.XPCDESC[SP0FWSB1] bold;
      converseLib.validationFailed(3);
      SP0FW01.SP0FWVF = "N";
      return;
    else
    end
  end



  if ("A" in SP0FM030.SP0FWMOP
   || "D" in SP0FM030.SP0FWMOP)
    SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
    SP0FW01.SP0FWVF = "Y";
    SP0FW01.SP0FWMSG = " ";
  else
    while (SP0FW01.SP0FWSB2 < 20)
      if (SP0FM030.SP0FWMOP[SP0FWSB2] == " ")
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
            /* valid entry*/
      else
            /* invalid character*/
        SP0FW01.SP0FWVF = "N";
        converseLib.validationFailed(3);
        set SP0FM030.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM030.XPCCD[SP0FWSB2] bold;
        set SP0FM030.XPCDESC[SP0FWSB2] bold;
        SP0FW01.SP0FWMSG = "ERROR  -  VALID ENTRIES ==> A, D,  ' ' OR EXIT";
        return;
      end
    end
  end



      /* only a delete is valid in any slot but the last free one*/



  if (SP0FW01.SP0FWTSZ != 0 /* acct cd records exist*/
   && SP0FW01.SP0FWSB2 < SP0FW01.SP0FWSB1)
    if (SP0FM030.SP0FWMOP[SP0FWSB2] == "D")
        /* valid entry*/
    else
      if (SP0FM030.SP0FWMOP[SP0FWSB2] == " ")
        return; /* valid entry*/
      else
        SP0FW01.SP0FWMSG = "ONLY A DELETE IS VALID IN THIS POSITION";
        set SP0FM030.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM030.XPCCD[SP0FWSB2] bold;
        set SP0FM030.XPCDESC[SP0FWSB2] bold;
        SP0FW01.SP0FWVF = "N";
        converseLib.validationFailed(3);
        return;
      end
    end
  end



  if (sysVar.arrayIndex > 0)
    if (SP0FM030.SP0FWMOP[sysVar.arrayIndex] == "D")
      if (SP1REC.SP1STAT == "A"
       || SP1REC.SP1STAT == "F"
       || SP1REC.SP1STAT == "I")
            /* cannot delete*/
        SP0FW01.SP0FWVF = "N";
        set SP0FM030.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM030.XPCCD[SP0FWSB2] bold;
        set SP0FM030.XPCDESC[SP0FWSB2] bold;
        SP0FW01.SP0FWMSG = "CANNOT DELETE - THIS S.P. WAS/IS ACTIVE --- ";
        converseLib.validationFailed(12);
        return;
      end
    end
  end



end // end SP0FS32

// edit for fast path, data modif
Function SP0FS33()



   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/


  if (converseVar.eventKey is pf3)
    SP0FM030.CATOAP = "SP0U";
    SP0FM030.CAITEM = SP0FM030.SP1ID;
  end

  if (converseVar.eventKey is pa2)
    SP0FM030.CATOAP = "SP0M";
    SP0FM030.CAITEM = " ";
  end


  if (SP0FM030.CATOAP != " ")
    if (SP0FW01.SP0FWVF != " ") /* if header modified*/
      SP0FW01.SP0FWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0FM030.CATOAP = " ";
      SP0FM030.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0FM030.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0FM030.CATOAP;
      COMMAREA.CAITEM = SP0FM030.CAITEM;
      XSEXIT();
      SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
      SP0FM030.CATOAP = " ";
      SP0FM030.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0FS33

// validate family codes
Function SP0FS34()



   /* ************************************************************/
   /* *   this statement group is validate PRODUCT CATEGORIES*/

   /* ************************************************************/


  SP0FW01.SP0FWUPF = "Y";

  if (SP0FM030.XPCCD[SP0FWSB2] == " ")
    set SP0FM030.XPCCD[SP0FWSB2] initialAttributes;
    set SP0FM030.XPCDESC[SP0FWSB2] skip;
    set SP0FM030.SP0FWMOP[SP0FWSB2] initialAttributes;
    SP0FM030.XPCDESC[SP0FWSB2] = "BLANK";
    return;
  end

  if (SP0FM030.XPCCD[SP0FWSB2] in XPCTBL.XPCCD)
    SP0FM030.XPCDESC[SP0FWSB2] = XPCTBL.XPCDESC[sysVar.arrayIndex];
  end

  if (SP0FM030.SP0FWMOP[SP0FWSB2] == "A")
    if (sysVar.arrayIndex == 0)
      converseLib.validationFailed(24);
      SP0FW01.SP0FWUPF = "N";
      set SP0FM030 alarm;
      set SP0FM030.XPCCD[SP0FWSB2] cursor, modified, bold;
      set SP0FM030.XPCDESC[SP0FWSB2] skip, bold;
      set SP0FM030.SP0FWMOP[SP0FWSB2] modified, bold;
      SP0FM030.XPCDESC[SP0FWSB2] = "INVALID PROD CATEGORY";
      SP0FW01.SP0FWMSG = "THIS IS NOT A VALID PRODUCT CATEGORY";
      return;
    end
  end



          /* PRODUCT CATEGORY FOUND.      ACTIVE ?*/



  if (SP0FM030.SP0FWMOP[SP0FWSB2] == "A")
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      converseLib.validationFailed(24);
      SP0FW01.SP0FWUPF = "N";
      set SP0FM030.XPCCD[SP0FWSB2] cursor, modified, bold;
      set SP0FM030.XPCDESC[SP0FWSB2] skip, bold;
      set SP0FM030.SP0FWMOP[SP0FWSB2] modified, bold;
      SP0FW01.SP0FWMSG = "INACTIVE PRODUCT CATEGORY.       ";
    end
  end



end // end SP0FS34

// validate family code exists
Function SP0FS35()



   /* ************************************************************/
   /* *   this statement group is used to verify that the*/
   /* PRODUCT CATEGORY BEING ADDED IS VALID.*/
   /* ************************************************************/



  if (SP0FM030.SP0FWMOP[SP0FWSB2] == "A")
    if (SP0FM030.XPCCD[SP0FWSB2] in SP1REC.XPCCD)
       /* rec already exists*/
      converseLib.validationFailed(20);
      SP0FW01.SP0FWUPF = "N";
      SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD ALREADY EXISTS";
      set SP0FM030.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
      set SP0FM030.XPCCD[SP0FWSB2] normal;
      set SP0FM030.XPCCD[SP0FWSB2] modified, bold;
      set SP0FM030.XPCDESC[SP0FWSB2] skip, bold;
      if (SP0FM030.XPCCD[SP0FWSB2] in SP0FM030.XPCCD)
        SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
        set SP0FM030.XPCCD[SP0FWSB2] normal;
        set SP0FM030.XPCCD[SP0FWSB2] skip, bold;
        set SP0FM030.XPCDESC[SP0FWSB2] skip, bold;
        return;
      else
        return;
      end
    else
       /* rec not found*/
      SP0FW01.SP0FWUPF = "Y";
      return;
    end
  end

  if (SP0FM030.SP0FWMOP[SP0FWSB2] == "D")
    if (SP0FM030.XPCCD[SP0FWSB2] in SP1REC.XPCCD)
       /* rec does exists*/
      SP0FW01.SP0FWUPF = "Y";
      return;
    else
       /* rec not found*/
      converseLib.validationFailed(21);
      SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD DOES NOT EXIST";
      SP0FW01.SP0FWUPF = "N";
      set SP0FM030.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
      set SP0FM030.XPCCD[SP0FWSB2] modified, bold;
      set SP0FM030.XPCDESC[SP0FWSB2] skip, bold;
    end
  end



end // end SP0FS35

// add family cd sp1rec
Function SP0FS36()



   /* ************************************************************/
   /* VERIFY PRODUCT CATEGORY CAN BE ADDED. - STOP ANY DUPLICATES*/
   /* ************************************************************/



  if (SP0FM030.XPCCD[SP0FWSB1] in SP1REC.XPCCD)
     /* rec already exists*/
    converseLib.validationFailed(20);
    SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD ALREADY EXISTS";
    set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM030.XPCCD[SP0FWSB1] modified, bold;
    set SP0FM030.XPCDESC[SP0FWSB1] skip, bold;
    SP0FW01.SP0FWUPF = "N";
    return;
  else
     /* rec not found*/
  end

  if ("  " in SP1REC.XPCCD)
     /* first empty slot to add record*/
    SP1REC.XPCCD[sysVar.arrayIndex] = SP0FM030.XPCCD[SP0FWSB1];
    SP0FW01.SP0FWFL4 = "*";
    SP0FW01.SP0FWUPF = "Y";
  else
     /* no room to add rec*/
    converseLib.validationFailed(22);
    SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD CANNOT BE ADDED";
    set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM030.XPCCD[SP0FWSB1] modified, bold;
    set SP0FM030.XPCDESC[SP0FWSB1] skip, bold;
    SP0FW01.SP0FWUPF = "N";
  end



end // end SP0FS36

// check for status update
Function SP0FS37()


  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    return;
  end


  if ("**" in SP1REC.XSPCD)
    SP0FW01.SP0FWFL6 = "Y";
  else
    SP0FW01.SP0FWFL6 = " ";
  end


  if (SP0FW01.SP0FWFL3 == "*" /* product info exists*/
   || SP0FW01.SP0FWFL4 == "*" 
   || SP0FW01.SP0FWFL5 == "*" 
   || SP0FW01.SP0FWFL6 == "Y")
    if (SP1REC.SP1PIND != "Y")
      SP1REC.SP1PIND = "Y";
      SP0FW01.SP0FWUPF = "Y";
    end
  else
    if (SP1REC.SP1PIND == "Y")
      SP1REC.SP1PIND = "N";
      SP0FW01.SP0FWUPF = "Y";
    end
  end

  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   || SP1REC.SP1PIND == "Y"  /* product info exists*/
   || SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == " ") /* no status........*/
      SP1REC.SP1STAT = "P";
      SP0FM030.SP1STAT = "P";
      SP0FW01.SP0FWUPF = "Y";
    end
  end

  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   && SP1REC.SP1PIND == "Y"  /* product info exists*/
   && SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == "P" /* status is partial*/
     || SP1REC.SP1STAT == " ")
      SP1REC.SP1STAT = "C";
      SP0FM030.SP1STAT = "C";
      SP0FW01.SP0FWUPF = "Y";
    end
  else
    if (SP1REC.SP1STAT == "C") /* status is complete*/
      SP1REC.SP1STAT = "P";
      SP0FM030.SP1STAT = "P";
      SP0FW01.SP0FWUPF = "Y";
    end
  end



end // end SP0FS37

// update sp1rec
Function SP0FS3A()


   /* ************************************************************/
   /* *   this statement group is used to update the sp1rec.*/
      /* it assumes that all the necessary information has*/
      /* moved into the record before this statement group*/
      /* was called.*/
   /* ************************************************************/

  if (SP0FW01.SP0FWUPF != "Y")
    return;
  end


  SP0FW01.SP0FWT1 = VGVar.currentFormattedTime;
  SP0FW01.SP0FWTH2 = SP0FW01.SP0FWTH1;
  SP0FW01.SP0FWTM2 = SP0FW01.SP0FWTM1;
  SP1REC.ZZZCHGTM = SP0FW01.SP0FWT2;

  /*  */
  /* ---------------- Y2K OUT BEGIN -------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0FW01.SP0FWD;*/
  /* MOVE 019 TO SP0FW01.SP0FWD1;*/
  /*  */
  /* ---------------- Y2K OUT END ---------------------*/
  /*  */
  /*  */
  /* ---------------- Y2K IN BEGIN -------------------*/
  /*  */
  SP0FW01.SP0FWD = VGVar.currentGregorianDate;
  /*  */
  /* ---------------- Y2K IN END ---------------------*/
  /*  */
  SP1REC.ZZZCHGDT = SP0FW01.SP0FWD;

  SP1REC.ZZZCHGCT = SP0FW01.ZZZCHGCT;

  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update return*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SP0FM030.SP0FMMSG = "DATA BASE UPDATED - CONTINUE";
    SP0FW01.ZZZCHGCT = SP0FW01.ZZZCHGCT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0FM030.SP0FMMSG = "UNABLE TO UPDATE DATA. TRY AGAIN.";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FS3A ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0FS3B(); /* db2 error routine*/
    end
  end


end // end SP0FS3A

// db2 error routine
Function SP0FS3B()
   /* **/

  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0FS3B

// delete family cd
Function SP0FS3C()



   /* ************************************************************/
   /* *   VERIFY THE PRODUCT CATEGORY CAN BE DELETED.*/
      /* we go through and make sure that the code is on the*/
      /* sp1rec.  if it is on the record then we delete it by*/
      /* moving all the entries that are below it up by one and*/
      /* by adding a blank code at the end of the 20 fields.*/
   /* ************************************************************/



  SP0FW01.SP0FWSB3 = SP0FW01.SP0FWSB1;

  if (SP0FM030.XPCCD[SP0FWSB1] in SP1REC.XPCCD)
    SP0FW01.SP0FWSB1 = sysVar.arrayIndex;
    SP0FW01.SP0FWUPF = "Y";
    while (SP0FW01.SP0FWSB1 < 20
     && SP1REC.XPCCD[SP0FWSB3] != " ")
      SP0FW01.SP0FWSB3 = SP0FW01.SP0FWSB1 + 1;
      SP1REC.XPCCD[SP0FWSB1] = SP1REC.XPCCD[SP0FWSB3];
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
    converseLib.validationFailed(0);
    SP1REC.XPCCD[20] = " ";
    SP0FW01.SP0FWSB1 = 99;
  else
    converseLib.validationFailed(21);
    SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD DOES NOT EXIST";
    set SP0FM030.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM030.XPCCD[SP0FWSB1] modified, bold;
    set SP0FM030.XPCDESC[SP0FWSB1] skip, bold;
    SP0FW01.SP0FWUPF = "N";
  end

  if (SP0FW01.SP0FWUPF == "Y"
   && " " in SP1REC.XPCCD)
    if (sysVar.arrayIndex == +1)
      SP0FW01.SP0FWFL4 = " ";
    end
  end



end // end SP0FS3C

// sp1rec sp for sports act cd
Function SP0FS41()



   /* ************************************************************/
   /* *   if the return code from the select set was good then*/
      /* go through and move the sports act codes to sp0fm050.*/
      /* this process is used to initialize the necessary*/
      /* fields for the sports act s.p. codes.*/
   /* ************************************************************/



  set SP0FM050 empty;
  SP0FM050.SP0FMTDT = VGVar.currentShortGregorianDate;
  SP0FM050.SP1ID = SP0FW01.SP1ID;

  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 21)
    set SP0FM050.SP0FWMOP[SP0FWSB1] initialAttributes;
    set SP0FM050.XSPCD[SP0FWSB1] initialAttributes;
    set SP0FM050.XSPDESC[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end



   /* ************************************************************/
      /* select the any sports act codes for this s.p. and*/
      /* show on map sp0fm050.*/
   /* ************************************************************/



  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FS41 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  SP0FW01.SP0FWSB1 = 1;
  SP0FW01.SP0FWSB2 = 1;

  while (SP0FW01.SP0FWSB1 < 21
   && SP1REC.XSPCD[SP0FWSB1] != " ")
    SP0FW01.SP0FWUPF = "N";
    if (SP1REC.XSPCD[SP0FWSB1] != "**")
      SP0FM050.XSPCD[SP0FWSB2] = SP1REC.XSPCD[SP0FWSB1];
      if (SP1REC.XSPCD[SP0FWSB1] in XSPTBL.XSPCD)
        SP0FM050.XSPDESC[SP0FWSB2] = XSPTBL.XSPDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0FM050.XSPDESC[SP0FWSB2] = "INVALID CODE";
      end
      SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
    end
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end

  if (SP0FW01.SP0FWSB2 == 1)
    SP0FW01.SP0FWSB2 = 999;
    SP0FW01.SP0FWMSG = "NO SPORTS ACTIVITY CODES CURRENTLY EXIST";
    SP0FW01.SP0FWFL5 = " ";
  else
    SP0FW01.SP0FWFL5 = "*";
  end



      /* sp0fs42 sort method for sports activity codes*/



  SP0FS42();



end // end SP0FS41

// sort methold for sports act
Function SP0FS42()



   /* ************************************************************/
   /* *   sort method for map array.*/
   /* ************************************************************/



  if (SP0FW01.SP0FWSB2 != 999)
    SP0FW01.SP0FWTSZ = SP0FW01.SP0FWSB2 - 1;
  else
    SP0FW01.SP0FWTSZ = 0;
  end

  SP0FW01.SP0FWSB1 = 1;
  SP0FW01.SP0FWSB2 = 2;

  while (SP0FW01.SP0FWSB1 < 21
   && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0FW01.SP0FWSB2 < 21
     && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB2)
      if (SP0FM050.XSPCD[SP0FWSB1] > SP0FM050.XSPCD[SP0FWSB2])
        SP0FW01.XSPCD = SP0FM050.XSPCD[SP0FWSB2];
        SP0FW01.XSPDESC = SP0FM050.XSPDESC[SP0FWSB2];
        SP0FM050.XSPCD[SP0FWSB2] = SP0FM050.XSPCD[SP0FWSB1];
        SP0FM050.XSPDESC[SP0FWSB2] = SP0FM050.XSPDESC[SP0FWSB1];
        SP0FM050.XSPCD[SP0FWSB1] = SP0FW01.XSPCD;
        SP0FM050.XSPDESC[SP0FWSB1] = SP0FW01.XSPDESC;
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
      else
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
      end
    end
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB1 + 1;
  end



      /* procedure to allow fields to be entered*/



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 21
   && SP0FW01.SP0FWTSZ >= SP0FW01.SP0FWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    set SP0FM050.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM050.XSPCD[SP0FWSB1] initialAttributes;
    set SP0FM050.XSPDESC[SP0FWSB1] initialAttributes;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
  end

  if (SP0FW01.SP0FWSB1 < 21)
    set SP0FM050.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM050.XSPCD[SP0FWSB1] normal;
    set SP0FM050.XSPCD[SP0FWSB1] modified, bold;
  end



end // end SP0FS42

// main edit group for sports cds
Function SP0FS51()



   /* *********************************************************/
   /* *   this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0FW01.SP0FWMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* ***********************************************************/
      /* sp0fs52  to check fields for entry.  if a bad selection*/
               /* code is used sp0fw1.sp0fwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
   /* ***********************************************************/

  SP0FS52();

   /* ***********************************************************/
      /* sp0fs53 check for fast path, pa2, pf3*/
   /* ***********************************************************/

  SP0FS53();

   /* ***********************************************************/
  if (SP0FW01.SP0FWVF == " ")
    if (SP0FM050.SP1ID != SP0FW01.SP1ID) /* new s.p.id*/
      COMMAREA.CAITEM = SP0FM050.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          COMMAREA.CAINQFL = "C";
          exit stack;
        end
      end
    end
  else
    if (SP0FM050.SP1ID != SP0FW01.SP1ID) /* new s.p.id*/
      SP0FM050.SP0FMMSG = "DO NOT UPDATE AND CHANGE SALES PROGRAM ID";
      SP0FM050.SP1ID = SP0FW01.SP1ID;
      SP0FW01.SP0FWVF = "N";
    end
  end


  if (converseVar.validationMsgNum > 0
   || SP0FW01.SP0FWVF == "N")
    SP0FW01.SP0FWVF = "N";
    return;
  end

   /* ***************************************************/
    /* was option selected(a or d)? if not,send message.*/
   /* ***************************************************/

  if (SP0FW01.SP0FWVF == " ")
    SP0FW01.SP0FWVF = "N";
    converseLib.validationFailed(4);
    SP0FW01.SP0FWMSG = "PLEASE SELECT AN OPTION OR SELECT A RECORD";
    return;
  end


      /* sp0fs54 is the sports activity code valid ?*/


  SP0FS54();

  if (converseVar.validationMsgNum > 0
   || SP0FW01.SP0FWVF == "N")
    SP0FW01.SP0FWVF = "N";
    return;
  end


      /* sp0fs55 does the sports activity code already exist ?*/


  SP0FS55();



end // end SP0FS51

// validate add/delete/select cd
Function SP0FS52()



   /* ************************************************************/
   /* *   this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
      /* and will check that both fields are entered for a add*/
      /* and will not allow a delete on a new record*/
      /* or an add on an existing one.*/
      /* resets all fields to normal.*/
   /* ************************************************************/



  SP0FW01.SP0FWVF = " ";
  SP0FW01.SP0FWSB2 = 1;
  SP0FW01.SP0FWSB1 = 0;



  while (SP0FW01.SP0FWSB1 < SP0FW01.SP0FWTSZ)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    set SP0FM050.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM050.XSPCD[SP0FWSB1] initialAttributes;
    set SP0FM050.XSPDESC[SP0FWSB1] initialAttributes;
  end

  if (SP0FW01.SP0FWTSZ < 20)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWTSZ + 1;
    set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, bold;
    set SP0FM050.XSPCD[SP0FWSB1] normal;
    set SP0FM050.XSPCD[SP0FWSB1] bold;
  end

  SP0FW01.SP0FWSB1 = 0;



      /* IN A BLANK POSITION ONLY AN ADD IS ALLOWED*/



  if (SP0FW01.SP0FWTSZ < 20)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWTSZ + 1;
    if (SP0FM050.SP0FWMOP[SP0FWSB1] == "D")
      converseLib.validationFailed(32);
                                   /* ONLY AN ADD IS VALID IN THIS POSITION*/
      set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
      set SP0FM050.XSPCD[SP0FWSB1] bold;
      set SP0FM050.XSPDESC[SP0FWSB1] bold;
      SP0FW01.SP0FWVF = "N";
      return;
    else
         /* IF SP0UM080.SP0UMOP(SP0UWSB1) EQ 'A';*/
           /* IF SP0UM080.XSPCD(SP0UWSB1) EQ ' ';*/
             /* MOVE 33 TO EZEMNO;  you must enter a sports act code*/
             /* MOVE 'N' TO SP0UW1.SP0UWVF;*/
             /* EZERTN;*/
           /* END ;*/
         /* END ;*/
    end
  end



  if ("A" in SP0FM050.SP0FWMOP
   || "D" in SP0FM050.SP0FWMOP)
    SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
    SP0FW01.SP0FWVF = "Y";
    SP0FW01.SP0FWMSG = " ";
  else
    while (SP0FW01.SP0FWSB2 < 20)
      if (SP0FM050.SP0FWMOP[SP0FWSB2] == " ")
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
            /* valid entry*/
      else
            /* invalid character*/
        SP0FW01.SP0FWVF = "N";
        set SP0FM050.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM050.XSPCD[SP0FWSB2] bold;
        set SP0FM050.XSPDESC[SP0FWSB2] bold;
        converseLib.validationFailed(34); /* error  -  valid entries ==> A, D,  '*/
                                   /* ' OR EXIT"*/
        return;
      end
    end
  end



      /* only a delete is valid in any slot but the last free one*/



  if (SP0FW01.SP0FWTSZ != 0 /* acct cd records exist*/
   && SP0FW01.SP0FWSB2 < SP0FW01.SP0FWSB1)
    if (SP0FM050.SP0FWMOP[SP0FWSB2] == "D")
        /* valid entry*/
    else
      if (SP0FM050.SP0FWMOP[SP0FWSB2] == " ")
         /* valid entry*/
      else
        converseLib.validationFailed(35); /* ONLY A DELETE IS VALID IN THIS POSITION*/
        set SP0FM050.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM050.XSPCD[SP0FWSB2] bold;
        set SP0FM050.XSPDESC[SP0FWSB2] bold;
        SP0FW01.SP0FWVF = "N";
        return;
      end
    end
  end



  if (sysVar.arrayIndex > 0)
    if (SP0FM050.SP0FWMOP[sysVar.arrayIndex] == "D")
      if (SP1REC.SP1STAT == "A"
       || SP1REC.SP1STAT == "F"
       || SP1REC.SP1STAT == "I")
            /* cannot delete*/
        SP0FW01.SP0FWVF = "N";
        set SP0FM050.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM050.XSPCD[SP0FWSB2] bold;
        set SP0FM050.XSPDESC[SP0FWSB2] bold;
        SP0FW01.SP0FWMSG = "CANNOT DELETE - THIS S.P. WAS/IS ACTIVE --- ";
        converseLib.validationFailed(12);
        return;
      end
    end
  end



end // end SP0FS52

// edit for fast path, data modif
Function SP0FS53()


  if (converseVar.eventKey is pf3)
    SP0FM050.CATOAP = "SP0U";
    SP0FM050.CAITEM = SP0FM050.SP1ID;
  end

  if (converseVar.eventKey is pa2)
    SP0FM050.CATOAP = "SP0M";
    SP0FM050.CAITEM = " ";
  end



   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0FM050.CATOAP != " ")
    if (SP0FW01.SP0FWVF != " ") /* if header modified*/
      SP0FW01.SP0FWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0FM050.CATOAP = " ";
      SP0FM050.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0FM050.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0FM050.CATOAP;
      COMMAREA.CAITEM = SP0FM050.CAITEM;
      XSEXIT();
      SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
      SP0FM050.CATOAP = " ";
      SP0FM050.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0FS53

// validate sports act codes
Function SP0FS54()



   /* ************************************************************/
   /* *   this statement group is validate sports act codes*/
      /* have been entered against the sports act table.*/

      /* the sports activity code must also be active.*/
   /* ************************************************************/



  SP0FW01.SP0FWUPF = "Y";

  if (SP0FM050.XSPCD[SP0FWSB2] == " ")
    set SP0FM050.XSPCD[SP0FWSB2] initialAttributes;
    set SP0FM050.XSPDESC[SP0FWSB2] skip;
    set SP0FM050.SP0FWMOP[SP0FWSB2] initialAttributes;
    SP0FM050.XSPDESC[SP0FWSB2] = "BLANK ";
    return;
  end

  if (SP0FM050.XSPCD[SP0FWSB2] in XSPTBL.XSPCD)
    SP0FM050.XSPDESC[SP0FWSB2] = XSPTBL.XSPDESC[sysVar.arrayIndex];
  end

  if (SP0FM050.SP0FWMOP[SP0FWSB2] == "A")
    if (sysVar.arrayIndex == 0)
      converseLib.validationFailed(25);
      SP0FW01.SP0FWUPF = "N";
      set SP0FM050 alarm;
      set SP0FM050.XSPCD[SP0FWSB2] cursor, modified, bold;
      set SP0FM050.XSPDESC[SP0FWSB2] skip, bold;
      set SP0FM050.SP0FWMOP[SP0FWSB2] modified, bold;
      SP0FM050.XSPDESC[SP0FWSB2] = "INVALID SPORTS ACT CODE";
      SP0FW01.SP0FWMSG = "ERROR - THIS IS NOT A VALID SPORTS ACT CODE";
      return;
    end
  end



      /* the sports act code was found.  is it active?*/



  if (SP0FM050.SP0FWMOP[SP0FWSB2] == "A")
    if (XSPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      converseLib.validationFailed(25);
      SP0FW01.SP0FWUPF = "N";
      set SP0FM050 alarm;
      set SP0FM050.XSPCD[SP0FWSB2] cursor, modified, bold;
      set SP0FM050.XSPDESC[SP0FWSB2] skip, bold;
      set SP0FM050.SP0FWMOP[SP0FWSB2] modified, bold;
      SP0FW01.SP0FWMSG = "ERROR - THIS IS NOT AN ACTIVE SPORTS ACT CODE";
      return;
    end
  end



end // end SP0FS54

// validate the sports ace cd ok
Function SP0FS55()



   /* ************************************************************/
   /* *   this statement group is used to verify that the*/
      /* sports act cd the user wants to add or delete is valid.*/
   /* ************************************************************/



  if (SP0FM050.SP0FWMOP[SP0FWSB2] == "A")
    if (SP0FM050.XSPCD[SP0FWSB2] in SP1REC.XSPCD)
       /* rec already exists*/
      converseLib.validationFailed(21);
      SP0FW01.SP0FWUPF = "N";
      SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD ALREADY EXISTS";
      set SP0FM050.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
      set SP0FM050.XSPCD[SP0FWSB2] normal;
      set SP0FM050.XSPCD[SP0FWSB2] modified, bold;
      set SP0FM050.XSPDESC[SP0FWSB2] skip, bold;
      if (SP0FM050.XSPCD[SP0FWSB2] in SP0FM050.XSPCD)
        SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
        set SP0FM050.XSPCD[SP0FWSB2] normal;
        set SP0FM050.XSPCD[SP0FWSB2] skip, bold;
        set SP0FM050.XSPDESC[SP0FWSB2] skip, bold;
        return;
      else
        return;
      end
    else
       /* rec not found*/
      SP0FW01.SP0FWUPF = "Y";
      return;
    end
  end

  if (SP0FM050.SP0FWMOP[SP0FWSB2] == "D")
    if (SP0FM050.XSPCD[SP0FWSB2] in SP1REC.XSPCD)
       /* rec does exists*/
      SP0FW01.SP0FWUPF = "Y";
      return;
    else
       /* rec not found*/
      converseLib.validationFailed(21);
      SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD DOES NOT EXIST";
      SP0FW01.SP0FWUPF = "N";
      set SP0FM050.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
      set SP0FM050.XSPCD[SP0FWSB2] modified, bold;
      set SP0FM050.XSPDESC[SP0FWSB2] skip, bold;
    end
  end



end // end SP0FS55

// add sports act code
Function SP0FS56()



   /* ************************************************************/
   /* *   this statement group is used to verify that the*/
      /* sports act code the user wants to add can be added.*/
      /* we now need to make sure that*/
      /* the code does not already exist on the sp1rec*/
   /* ************************************************************/



  if (SP0FM050.XSPCD[SP0FWSB1] in SP1REC.XSPCD)
     /* rec already exists*/
    converseLib.validationFailed(20);
    SP0FW01.SP0FWUPF = "N";
    SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD ALREADY EXISTS";
    set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM050.XSPCD[SP0FWSB1] modified, bold;
    set SP0FM050.XSPDESC[SP0FWSB1] skip, bold;
    return;
  else
     /* rec not found*/
  end

  if ("  " in SP1REC.XSPCD) /* first empty slot to add record*/
    SP0FW01.SP0FWUPF = "Y";
    SP0FW01.SP0FWFL5 = "*";
    SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
    if ("**" in SP1REC.XSPCD)
      SP1REC.XSPCD[sysVar.arrayIndex] = SP0FM050.XSPCD[SP0FWSB1];
      SP1REC.XSPCD[SP0FWSB2] = "**";
    else
      SP1REC.XSPCD[SP0FWSB2] = SP0FM050.XSPCD[SP0FWSB1];
    end
  else /* no room to add rec*/
    converseLib.validationFailed(22);
    SP0FW01.SP0FWMSG = "ERROR  --  THIS RECORD CANNOT BE ADDED";
    set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM050.XSPCD[SP0FWSB1] modified, bold;
    set SP0FM050.XSPDESC[SP0FWSB1] skip, bold;
    SP0FW01.SP0FWUPF = "N";
  end



end // end SP0FS56

// delete sports act cd
Function SP0FS57()



   /* ************************************************************/
   /* *   this statement group is used to verify that the sports*/
      /* act cd that the user wants to delete can be deleted.*/
      /* we go through and make sure that the code is on the*/
      /* sp1rec.  if it is on the record then we delete it by*/
      /* moving all the entries that are below it up by one and*/
      /* by adding a blank code at the end of the 20 fields.*/
   /* ************************************************************/



  SP0FW01.SP0FWSB3 = SP0FW01.SP0FWSB1;

  if (SP0FM050.XSPCD[SP0FWSB1] in SP1REC.XSPCD)
    SP0FW01.SP0FWSB1 = sysVar.arrayIndex;
    SP0FW01.SP0FWUPF = "Y";
    while (SP0FW01.SP0FWSB1 < 20
     && SP1REC.XSPCD[SP0FWSB3] != " ")
      SP0FW01.SP0FWSB3 = SP0FW01.SP0FWSB1 + 1;
      SP1REC.XSPCD[SP0FWSB1] = SP1REC.XSPCD[SP0FWSB3];
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
    converseLib.validationFailed(0);
    SP1REC.XSPCD[20] = " ";
    SP0FW01.SP0FWSB1 = 99;
  else
    converseLib.validationFailed(36);
                                   /* ERROR  --  THIS RECORD DOES NOT EXIST*/
    set SP0FM050.SP0FWMOP[SP0FWSB1] cursor, modified, bold;
    set SP0FM050.XSPCD[SP0FWSB1] modified, bold;
    set SP0FM050.XSPDESC[SP0FWSB1] skip, bold;
    SP0FW01.SP0FWUPF = "N";
  end

  if (SP0FW01.SP0FWUPF == "Y"
   && " " in SP1REC.XSPCD)
    if (sysVar.arrayIndex == +1)
      SP0FW01.SP0FWFL5 = " ";
    end
  end

  if (SP0FW01.SP0FWUPF == "Y"
   && "**" in SP1REC.XSPCD)
    if (sysVar.arrayIndex == +1)
      SP0FW01.SP0FWFL5 = " ";
    end
  end




end // end SP0FS57

// sp5rec sp for product records
Function SP0FS81()
   /* **/

  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP5REC.SP5PRODI == "I") /* INCLUDE PRODUCT*/
      SP0FW03.XGPCD[SP0FWSB1] = SP5REC.XGPCD;
      SP0FW03.SY1STNBR[SP0FWSB1] = SP5REC.SY1STNBR;
      SP0FW03.SY2CLRID[SP0FWSB1] = SP5REC.SY2CLRID;
      SP0FW03.XDMCD[SP0FWSB1] = SP5REC.XDMCD;
      SP0FW03.SP2MNQTY[SP0FWSB1] = SP5REC.SP2MNQTY;
      if (SP5REC.SP5KEY == SP0FW01.SP5KEY)
        SP0FW01.SP0FWPOS = SP0FW01.SP0FWSB1;
      end
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FS81 ";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0FS81

// to load 1st 14 product id's
Function SP0FS82()



   /* ************************************************************/
   /* *   select the first 14 product recs for this s.p. and*/
      /* show on map sp0fm090.*/
   /* ************************************************************/



      /* exit for a file i/o error in sp0fs82*/



  if (converseVar.validationMsgNum != +0)
    return;
  end

  SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS - 1; /* determines cursor position*/

  if (SP0FW01.SP0FWPOS > SP0FW01.SP0FWTSZ)
    SP0FW01.SP0FWPOS = SP0FW01.SP0FWTSZ - 2;
  end

  if (SP0FW01.SP0FWPOS < 0)
    SP0FW01.SP0FWPOS = 0;
  end

  SP0FW01.SP0FWSB1 = 0;

  while (SP0FW01.SP0FWSB1 < 14)
    SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS + 1;
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    if (SP0FW01.SP0FWSB1 > SP0FW01.SP0FWTSZ)
      SP0FM090.XGPCD[SP0FWSB1] = " ";
      SP0FM090.SY1STNBR[SP0FWSB1] = " ";
      SP0FM090.SY2CLRID[SP0FWSB1] = " ";
      SP0FM090.XDMCD[SP0FWSB1] = " ";
      SP0FM090.SP2MNQTY[SP0FWSB1] = " ";
      SP0FM090.SY1STYNM[SP0FWSB1] = " ";
      SP0FM090.SY2CLRDS[SP0FWSB1] = " ";
      SP0FW01.SP0FWSB1 = 99;
    else
      if (SP0FW03.SY1STNBR[SP0FWPOS] != " ")
        SP0FM090.XGPCD[SP0FWSB1] = SP0FW03.XGPCD[SP0FWPOS];
        SP0FM090.SY1STNBR[SP0FWSB1] = SP0FW03.SY1STNBR[SP0FWPOS];
        SY1REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY1REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SP0FM090.SY2CLRID[SP0FWSB1] = SP0FW03.SY2CLRID[SP0FWPOS];
        SY2REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY2REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SY2REC.SY2CLRID = SP0FW03.SY2CLRID[SP0FWPOS];
        SY2REC.XDMCD = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.XDMCD[SP0FWSB1] = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.SP2MNQTY[SP0FWSB1] = SP0FW03.SP2MNQTY[SP0FWPOS];
        SP0FS83(); /* get descriptions*/
      end
    end
  end

  if (SP0FW01.SP0FWTSZ == 0)
    SP0FM090.SP0FMMSG = "NO PRODUCT TYPES EXIST FOR THIS S.P.";
    SP0FM090.VAGen_EZEMSG = "VALID SELECTIONS ==> 'a' to add -- or exit";
    SP0FW01.SP0FWFL3 = " ";
    SP0FW01.SP0FWUPF = "N";
    SP0FS37(); /* check for s.p. status change*/
    SP0FS3A(); /* update sp1rec*/
  else
    if (SP0FW01.SP0FWTSZ == 1)
      SP0FW01.SP0FWFL3 = "*";
      SP0FW01.SP0FWUPF = "N";
      SP0FS37(); /* check for s.p. status change*/
      SP0FS3A(); /* update sp1rec*/
    end
  end



end // end SP0FS82

// get style , color & dim descru
Function SP0FS83()


   /* ************************************************************/
   /* *   this statement group will get the product style, gpc, &*/
      /* color descriptions from the db2 table.*/
   /* ************************************************************/

  set SQLCA empty;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM090.SY1STYNM[SP0FWSB1] = SY1REC.SY1STYNM;
  else
    SP0FM090.SY1STYNM[SP0FWSB1] = "INVALID STYLE TYPE";
  end

   /* ------------------  color / dimension   ----------*/


  set SQLCA empty;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM090.SY2CLRDS[SP0FWSB1] = SY2REC.SY2CLRDS;
  else
    if (SY2REC.SY2CLRID == "***"
     && SY2REC.XDMCD == "**") /* all colors designation*/
      SP0FM090.SY2CLRDS[SP0FWSB1] = "ALL COLORS        ";
    else
      SP0FM090.SY2CLRDS[SP0FWSB1] = "INVALID COLOR TYPE";
    end
  end



end // end SP0FS83

// forward scroll for product id
Function SP0FS91()



   /* *  sp0fsk2 user to scroll forward*/



  if (SP0FW01.SP0FWTSZ <= 14)
    SP0FM090.SP0FMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



  if (SP0FM090.SP0FMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0FW01.SP0FWTSZ > 14)
    set SP0FM090 empty;
    SP0FM090.SP0FMTDT = VGVar.currentShortGregorianDate;
    SP0FM090.XXXRVNBR = "02";
    SP0FM090.XXXERRID = "SP0F090";
    SP0FM090.SP1ID = SP1REC.SP1ID;
    SP0FM090.SP1NM = SP1REC.SP1NM;
    SP0FM090.SP1STAT = SP1REC.SP1STAT;
    while (SP0FW01.SP0FWSB1 < 14)
      SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS + 1;
      SP0FW01.SP0FWSB1 = 1 + SP0FW01.SP0FWSB1;
      set SP0FM090.SP0FWMOP[SP0FWSB1] initialAttributes;
      set SP0FM090.XGPCD[SP0FWSB1] initialAttributes;
      set SP0FM090.SY1STNBR[SP0FWSB1] initialAttributes;
      set SP0FM090.SY2CLRID[SP0FWSB1] initialAttributes;
      set SP0FM090.XDMCD[SP0FWSB1] initialAttributes;
      set SP0FM090.SY1STYNM[SP0FWSB1] initialAttributes;
      set SP0FM090.SY2CLRDS[SP0FWSB1] initialAttributes;
      if (SP0FW01.SP0FWPOS > SP0FW01.SP0FWTSZ)
        SP0FM090.SP0FMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0FM090.SP0FWMOP[SP0FWSB1] = " ";
        SP0FM090.XGPCD[SP0FWSB1] = " ";
        SP0FM090.SY1STNBR[SP0FWSB1] = " ";
        SP0FM090.SY2CLRID[SP0FWSB1] = " ";
        SP0FM090.XDMCD[SP0FWSB1] = " ";
        SP0FM090.SP2MNQTY[SP0FWSB1] = " ";
        SP0FM090.SY1STYNM[SP0FWSB1] = " ";
        SP0FM090.SY2CLRDS[SP0FWSB1] = " ";
      else
        set SY1REC empty;
        set SY2REC empty;
        SP0FM090.SP0FMMSG = " ";
        SP0FM090.XGPCD[SP0FWSB1] = SP0FW03.XGPCD[SP0FWPOS];
        SP0FM090.SY1STNBR[SP0FWSB1] = SP0FW03.SY1STNBR[SP0FWPOS];
        SP0FM090.SY2CLRID[SP0FWSB1] = SP0FW03.SY2CLRID[SP0FWPOS];
        SY1REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY1REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SY2REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY2REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SY2REC.SY2CLRID = SP0FW03.SY2CLRID[SP0FWPOS];
        SY2REC.XDMCD = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.XDMCD[SP0FWSB1] = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.SP2MNQTY[SP0FWSB1] = SP0FW03.SP2MNQTY[SP0FWPOS];
        SP0FS83(); /* get description*/
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0FW01.SP0FWPOS == SP0FW01.SP0FWTSZ)
    SP0FM090.SP0FMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0FS91

// backward scroll for products
Function SP0FS92()



   /* *  sp0fsl2 used to scroll backward*/



  if (converseVar.eventKey is pf7)
    SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS - 28;
    if (SP0FW01.SP0FWPOS < 0)
      SP0FW01.SP0FWPOS = 0;
    end
  end



  if (SP0FM090.SP0FMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    set SP0FM090 empty;
    SP0FM090.SP0FMTDT = VGVar.currentShortGregorianDate;
    SP0FM090.XXXRVNBR = "02";
    SP0FM090.XXXERRID = "SP0F090";
    SP0FM090.SP1ID = SP1REC.SP1ID;
    SP0FM090.SP1NM = SP1REC.SP1NM;
    SP0FM090.SP1STAT = SP1REC.SP1STAT;
    while (SP0FW01.SP0FWSB1 < 14)
      SP0FW01.SP0FWPOS = SP0FW01.SP0FWPOS + 1;
      SP0FW01.SP0FWSB1 = 1 + SP0FW01.SP0FWSB1;
      set SP0FM090.SP0FWMOP[SP0FWSB1] initialAttributes;
      set SP0FM090.XGPCD[SP0FWSB1] initialAttributes;
      set SP0FM090.SY1STNBR[SP0FWSB1] initialAttributes;
      set SP0FM090.SY2CLRID[SP0FWSB1] initialAttributes;
      set SP0FM090.XDMCD[SP0FWSB1] initialAttributes;
      set SP0FM090.SY1STYNM[SP0FWSB1] initialAttributes;
      set SP0FM090.SY2CLRDS[SP0FWSB1] initialAttributes;
      if (SP0FW01.SP0FWPOS > SP0FW01.SP0FWTSZ)
        SP0FM090.SP0FMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
        SP0FM090.XGPCD[SP0FWSB1] = " ";
        SP0FM090.SY1STNBR[SP0FWSB1] = " ";
        SP0FM090.SY2CLRID[SP0FWSB1] = " ";
        SP0FM090.XDMCD[SP0FWSB1] = " ";
        SP0FM090.SP2MNQTY[SP0FWSB1] = " ";
        SP0FM090.SY1STYNM[SP0FWSB1] = " ";
        SP0FM090.SY2CLRDS[SP0FWSB1] = " ";
      else
        set SY1REC empty;
        set SY2REC empty;
        SP0FM090.SP0FMMSG = " ";
        SP0FM090.XGPCD[SP0FWSB1] = SP0FW03.XGPCD[SP0FWPOS];
        SP0FM090.SY1STNBR[SP0FWSB1] = SP0FW03.SY1STNBR[SP0FWPOS];
        SY1REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY1REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SP0FM090.SY2CLRID[SP0FWSB1] = SP0FW03.SY2CLRID[SP0FWPOS];
        SY2REC.XGPCD = SP0FW03.XGPCD[SP0FWPOS];
        SY2REC.SY1STNBR = SP0FW03.SY1STNBR[SP0FWPOS];
        SY2REC.SY2CLRID = SP0FW03.SY2CLRID[SP0FWPOS];
        SY2REC.XDMCD = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.XDMCD[SP0FWSB1] = SP0FW03.XDMCD[SP0FWPOS];
        SP0FM090.SP2MNQTY[SP0FWSB1] = SP0FW03.SP2MNQTY[SP0FWPOS];
        SP0FS83(); /* get description*/
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0FW01.SP0FWPOS == 14)
    SP0FM090.SP0FMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0FS92

// main edit group for product id
Function SP0FS93()



   /* *********************************************************/
   /* *   this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0FW01.SP0FWVF1 = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* ************************************************************/
      /* sp0fs95 check for fast path, modified data, pf1, pf4*/
   /* ************************************************************/

  SP0FS95();

   /* ************************************************************/
      /* sp0fs94  used to set fields to normal, and*/
               /* to check fields for entry.  if a bad selection*/
               /* code is used sp0fwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
   /* ************************************************************/

  SP0FS94();

  if (SP0FW01.SP0FWVF == " ") /* no screen update*/
    if (SP0FM090.SP1ID != SP0FW01.SP1ID) /* change in key*/
      if (SP0FM090.SP0FMOP1 > "  ") /* something to copy*/
        SP0FM090.SP0FMMSG = "DO NOT COPY AND CHANGE SALES PROGRAM ID";
        SP0FW01.SP0FWVF = "N";
      else /* no copy spgm request*/
        COMMAREA.CAITEM = SP0FM090.SP1ID;
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "A";
            exit stack;
          end
        end
      end
    else /* no change in key*/
      if (SP0FM090.SP0FMOP1 > "  ") /* something to copy*/
        SP0FS9B(); /* validate spgm to copy*/
      end
    end
  else /* product update requested*/
    if (SP0FM090.SP0FMOP1 > "  ") /* something to copy*/
      SP0FM090.SP0FMMSG = "DO NOT UPDATE AND COPY SALES PROGRAM ID";
      SP0FW01.SP0FWVF = "N";
    end
    if (SP0FM090.SP1ID != SP0FW01.SP1ID) /* change in key*/
      SP0FM090.SP0FMMSG = "DO NOT UPDATE AND CHANGE SALES PROGRAM ID";
      SP0FM090.SP1ID = SP0FW01.SP1ID;
      SP0FW01.SP0FWVF = "N";
    end
  end


  if (converseVar.validationMsgNum > 0
   || SP0FW01.SP0FWVF == "N")
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* ************************************************************/
    /* was a copy spgm requested?*/
   /* ************************************************************/

  if (SP0FM090.SP0FMOP1 > "  ")
    SP0FS9D(); /* copy sp5recs from nominated spgm id*/
    converseLib.validationFailed(80); /* product id's copied*/
    COMMAREA.CAITEM = SP1REC.SP1ID;
    SP0FW01.SP1ID = " ";
    COMMAREA.CAINQFL = "A";
    exit stack;
  end



   /* ************************************************************/
    /* was option selected (a,s,or d)?  if not,send message*/
   /* ************************************************************/

  if (SP0FW01.SP0FWVF == " ")
    SP0FW01.SP0FWVF = "N";
    converseLib.validationFailed(4);
    SP0FM090.SP0FMMSG = "PLEASE SELECT AN OPTION OR SELECT A RECORD";
    return;
  end



   /* ************************************************************/
      /* sp0fs96  checking for valid style codes & descriptions*/
      /* sp0fs97  checking for valid color codes & descriptions*/
      /* sp0fs98  checking for valid dim codes*/
      /* sp0fs99  checking for gpc code descriptions*/
   /* ************************************************************/

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "S"
   || SP0FM090.SP0FWMOP[SP0FWPOS] == "A")
    SP0FS96();
    SP0FS97();
    SP0FS98();
    SP0FS99();
  end

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end


   /* ************************************************************/
      /* sp0fs9a  does the s.p. product id already exist ?*/
               /* will check when a,s, or d is entered.*/
   /* ************************************************************/

  if (SP0FM090.SP0FWMOP[SP0FWSB2] != " ")
    SP0FS9A();
  end

  if (SP0FW01.SP0FWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end



end // end SP0FS93

// validate add/delete/select cd
Function SP0FS94()



   /* ************************************************************/
   /* *   this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
      /* or 's' select.*/
   /* ************************************************************/



  SP0FM090.SP0FMMSG = " ";
  SP0FW01.SP0FWVF = " ";
  SP0FW01.SP0FWSB1 = 0;
  set SP0FM090.SP0FMOP1 initialAttributes;

  while (SP0FW01.SP0FWSB1 < 14)
    SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    set SP0FM090.SP0FWMOP[SP0FWSB1] normal;
    set SP0FM090.XGPCD[SP0FWSB1] normal;
    set SP0FM090.SY1STNBR[SP0FWSB1] normal;
    set SP0FM090.SY2CLRID[SP0FWSB1] normal;
    set SP0FM090.XDMCD[SP0FWSB1] normal;
    set SP0FM090.SY1STYNM[SP0FWSB1] initialAttributes;
    set SP0FM090.SY2CLRDS[SP0FWSB1] initialAttributes;
    if (SP0FM090.SY1STNBR[SP0FWSB1] == "0") /* end of table*/
      SP0FM090.SP0FWMOP[SP0FWSB1] = " ";
      SP0FM090.XGPCD[SP0FWSB1] = " ";
      SP0FM090.SY1STNBR[SP0FWSB1] = " ";
      SP0FM090.SY2CLRID[SP0FWSB1] = " ";
      SP0FM090.XDMCD[SP0FWSB1] = " ";
      SP0FM090.SY1STYNM[SP0FWSB1] = " ";
      SP0FM090.SY2CLRDS[SP0FWSB1] = " ";
    end
  end

  SP0FW01.SP0FWSB2 = 1;

  if ("A" in SP0FM090.SP0FWMOP
   || "D" in SP0FM090.SP0FWMOP
   || "S" in SP0FM090.SP0FWMOP)
    SP0FW01.SP0FWSB2 = sysVar.arrayIndex;
    SP0FW01.SP0FWPOS = sysVar.arrayIndex;
    SP0FW01.SP0FWVF = "Y";
    SP0FM090.SP0FMMSG = " ";
  else
    while (SP0FW01.SP0FWSB2 < 14)
      if (SP0FM090.SP0FWMOP[SP0FWSB2] == " ")
        SP0FW01.SP0FWSB2 = SP0FW01.SP0FWSB2 + 1;
            /* valid entry*/
      else
            /* invalid character*/
        SP0FW01.SP0FWVF = "N";
        set SP0FM090.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM090.XGPCD[SP0FWSB2] modified, bold;
        set SP0FM090.SY1STNBR[SP0FWSB2] modified, bold;
        converseLib.validationFailed(31); /* valid entries =a,d,s,' ',exit only*/
        SP0FM090.SP0FMMSG = " ";
        return;
      end
    end
  end



  if (sysVar.arrayIndex > 0)
    if (SP0FM090.SP0FWMOP[sysVar.arrayIndex] == "D")
      if (SP1REC.SP1STAT == "A"
       || SP1REC.SP1STAT == "F"
       || SP1REC.SP1STAT == "I")
            /* cannot delete*/
        SP0FW01.SP0FWVF = "N";
        set SP0FM090.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM090.XGPCD[SP0FWSB2] modified, bold;
        set SP0FM090.SY1STNBR[SP0FWSB2] modified, bold;
        SP0FM090.SP0FMMSG = "CANNOT UPDATE - THIS S.P. WAS/IS ACTIVE --- ";
        SP0FM090.VAGen_EZEMSG = " ";
        converseLib.validationFailed(12);
        return;
      end
    end
  end



end // end SP0FS94

// edit for fast path, data modif
Function SP0FS95()

   /* **********************************************************/
   /* ***** pf3 & pa2 are allowed even with modified data ******/
   /* ************   no updating will be accomplished   ********/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0FM090.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
                        /* pf1, and pf4.*/
   /* *********************************************************/



  if (SP0FM090.CATOAP != " ")
    if (SP0FW01.SP0FWVF1 != " ")
      SP0FM090.SP0FMMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0FM090.CATOAP = " ";
      SP0FM090.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0FM090.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0FM090.CATOAP;
      COMMAREA.CAITEM = SP0FM090.CAITEM;
      XSEXIT();
      SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
      SP0FM090.CATOAP = " ";
      SP0FM090.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0FS95

// validate product style id
Function SP0FS96()



   /* ************************************************************/
   /* *   this statement group is validate product style id's*/
      /* against the style db2 table.*/
   /* ************************************************************/


  set SY1REC empty;
  set SQLCA empty;

  SY1REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
  SY1REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM090.SP0FMMSG = " ";
    SP0FM090.SY1STYNM[SP0FWSB2] = SY1REC.SY1STYNM;
  else
    SP0FW01.SP0FWMSG = "THIS PRODUCT STYLE TYPE DOES NOT EXIST";
    SP0FM090.SY1STYNM[SP0FWSB2] = "INVALID";
    converseLib.validationFailed(28);
    SP0FW01.SP0FWVF = "N";
    set SP0FM090 alarm;
    set SP0FM090.SY1STNBR[SP0FWSB2] cursor, modified, bold;
    set SP0FM090.SY1STYNM[SP0FWSB2] skip, modified, bold;
    set SP0FM090.SP0FWMOP[SP0FWSB2] modified, bold;
    return;
  end

  set SP0FM090.SY1STNBR[SP0FWSB2] normal;
  set SP0FM090.SY1STYNM[SP0FWSB2] initialAttributes;
  set SP0FM090.SP0FWMOP[SP0FWSB2] normal;



end // end SP0FS96

// validate color id
Function SP0FS97()



   /* ************************************************************/
   /* *   this statement group is validate product color types*/
      /* against the color db2 table.*/
   /* ************************************************************/

  if (SP0FM090.SY2CLRID[SP0FWSB2] == "***")
    SP0FM090.SY2CLRDS[SP0FWSB2] = "ALL COLORS";
  else

    set SY2REC empty;
    set SQLCA empty;

    SY2REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
    SY2REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
    SY2REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
    SY2REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];

    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FM090.SP0FMMSG = " ";
      SP0FM090.SY2CLRDS[SP0FWSB2] = SY2REC.SY2CLRDS;
    else
      SP0FW01.SP0FWMSG = "THIS COLOR TYPE DOES NOT EXIST";
      SP0FM090.SY2CLRDS[SP0FWSB2] = "INVALID";
      converseLib.validationFailed(28);
      SP0FW01.SP0FWVF = "N";
      set SP0FM090 alarm;
      set SP0FM090.SY2CLRID[SP0FWSB2] cursor, modified, bold;
      set SP0FM090.SY2CLRDS[SP0FWSB2] skip, modified, bold;
      set SP0FM090.SP0FWMOP[SP0FWSB2] modified, bold;
      return;
    end
  end

  set SP0FM090.SY2CLRID[SP0FWSB2] normal;
  set SP0FM090.SY2CLRDS[SP0FWSB2] normal;
  set SP0FM090.SP0FWMOP[SP0FWSB2] normal;



end // end SP0FS97

// validate dimension
Function SP0FS98()



   /* ************************************************************/
   /* *   this statement group is validate dimension codes*/
      /* have been entered against the dimension code table.*/

      /* the dim type must also be active.*/
   /* ************************************************************/

  SP0FW01.SP0FWVF = "Y";

  if (SP0FM090.XDMCD[SP0FWSB2] == "**")
      /* for all dimemsions*/
  else
    if (SP0FM090.XDMCD[SP0FWSB2] == "  ")
      SP0FM110.XDMDESC = "BLANK";
    else

      if (SP0FM090.XDMCD[SP0FWSB2] in XDMTBL.XDMCD)
        SP0FM110.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      end


      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(28);
        SP0FW01.SP0FWVF = "N";
        set SP0FM090 alarm;
        set SP0FM090.XDMCD[SP0FWSB2] cursor, modified, bold;
        SP0FM090.SP0FMMSG = "THIS IS NOT A VALID DIMENSION   ";
        return;
      end



          /* the dimension code was found.  is it active?*/



      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(28);
        SP0FW01.SP0FWVF = "N";
        set SP0FM090 alarm;
        set SP0FM090.XDMCD cursor, modified, bold;
        SP0FM090.SP0FMMSG = "THIS IS NOT AN ACTIVE DIMENSION";
        return;
      end
    end
  end

  set SP0FM090.XDMCD[SP0FWSB2] normal;



end // end SP0FS98

// validate gpc
Function SP0FS99()


   /* ************************************************************/
     /* validate general product code against gpc table.*/
          /* gpc type must also be active.*/
   /* ************************************************************/


  SP0FW01.SP0FWVF = "Y";

  if (SP0FM090.XGPCD[SP0FWSB2] == " ")
    SP0FM110.XGPDESC = "BLANK";
    return;
  end

  if (SP0FM090.XGPCD[SP0FWSB2] in XGPTBL.XGPCD)
    SP0FM110.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end


  if (sysVar.arrayIndex == 0)
    SP0FM110.XGPDESC = "INVALID GPC";
  else
     /* *******************************************/
     /* ** the gpc type was found.  is it active?*/
     /* *******************************************/

    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SP0FM110.XGPDESC = "INACTIVE GPC";
    end
  end

  set SP0FM090.XGPCD[SP0FWSB2] normal;



end // end SP0FS99

// does s.p. product now exist?
Function SP0FS9A()



   /* ************************************************************/
   /* *   this statement group is used to determine if an s.p.*/
      /* product record already exists.*/
   /* ************************************************************/



  SP5REC.SP1ID = SP0FM090.SP1ID;
  SP5REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
  SP5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
  SP5REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
  SP5REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];
  SP0FW01.SP0FWVF = "Y";

  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   && SP0FM090.SP0FWMOP[SP0FWSB2] == "A")
    set SP0FM090.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
    set SP0FM090.XGPCD[SP0FWSB2] modified, bold;
    set SP0FM090.SY1STNBR[SP0FWSB2] modified, bold;
    set SP0FM090.SY2CLRID[SP0FWSB2] modified, bold;
    set SP0FM090.XDMCD[SP0FWSB2] modified, bold;
    converseLib.validationFailed(20);
    SP0FM090.SP0FMMSG = "A PRODUCT REC ALREADY EXITS FOR THIS S. P.";
    set SP0FM090 alarm;
    SP0FW01.SP0FWVF = "N";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FW01.SP0FWVF = "Y";
      SP0FM090.SP0FMMSG = " ";
      return;
    else
      if (SP0FM090.SP0FWMOP[SP0FWSB2] != "A")
        SP0FM090.SP0FMMSG = "PRODUCT REC WAS NOT FOUND";
        set SP0FM090 alarm;
        set SP0FM090.SP0FWMOP[SP0FWSB2] cursor, modified, bold;
        set SP0FM090.XGPCD[SP0FWSB2] modified, bold;
        set SP0FM090.SY1STNBR[SP0FWSB2] modified, bold;
        set SP0FM090.SY2CLRID[SP0FWSB2] modified, bold;
        set SP0FM090.XDMCD[SP0FWSB2] modified, bold;
        SP0FW01.SP0FWVF = "N";
        return;
      end
    end
  end



end // end SP0FS9A

// validate spgm id to copy
Function SP0FS9B()
   /* ************************************************************/
   /* *    sp0fs9b  validate copy from spgm id                  **/
   /* ************************************************************/

  if (SP0FM090.SP0FMOP1 == SP1REC.SP1ID)
    SP0FW01.SP0FWVF = "N";
    set SP0FM090.SP0FMOP1 cursor, modified, bold;
    converseLib.validationFailed(81); /* copy spgmid must not equal to itself*/
    SP0FM090.SP0FMMSG = " ";
    return;
  end

  move SP1REC to SP0FW02 withV60Compat; /* save sp1rec*/
  set SP1REC empty;
  set SQLCA empty;

      /* check if spgm id to copy is a valid spgm code*/

  SP1REC.SP1ID = SP0FM090.SP0FMOP1;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +100) /* spgm id not found*/
    move SP0FW02 to SP1REC withV60Compat; /* reset sp1rec*/
    SP0FW01.SP0FWVF = "N";
    set SP0FM090.SP0FMOP1 cursor, modified, bold;
    converseLib.validationFailed(82); /* spgm id does not exist*/
    SP0FM090.SP0FMMSG = " ";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      SP0FW01.SP0FWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F";
      TA1REC.TA1LOCAT[1] = "S      ";
      TA1REC.TA1LOCAT[2] = "SP0FS9B";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
      exit stack;

    else /* valid spgm id*/
      move SP0FW02 to SP1REC withV60Compat; /* reset sp1rec to original*/

      SP0FS9C(); /* validate sp5rec to be copied*/
    end
  end



end // end SP0FS9B

// validate sp5rec to copy
Function SP0FS9C()
   /* ************************************************************/
   /* *    sp0fs9c  validate sp5rec to copy                     **/
   /* *      this routine determines if there is at least one   **/
   /* *      sp5rec to copy given the sales program id.         **/
   /* ************************************************************/

   /* there is no need to save sp5rec because it is volatile at*/
   /* this point.*/

  set SP5REC empty;
  set SQLCA empty;

      /* check if spgm-id/prod-id to copy from sp5rec exists*/

  SP5REC.SP1ID = SP0FM090.SP0FMOP1;
  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* define cursor*/

  if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F";
    TA1REC.TA1LOCAT[1] = "SS     ";
    TA1REC.TA1LOCAT[2] = "SP0FS9C";
    TA1REC.TA1LOCAT[3] = "IO0110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM090";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();

    SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
    exit stack;
  end

  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* fetch cursor*/

  if (SQLCA.VAGen_SQLCODE == +100) /* no sp5recs were found*/
    SP0FW01.SP0FWVF = "N";
    set SP0FM090.SP0FMOP1 cursor, modified, bold;
    converseLib.validationFailed(83); /* no products to copy*/
    SP0FM090.SP0FMMSG = " ";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F";
      TA1REC.TA1LOCAT[1] = "SN     ";
      TA1REC.TA1LOCAT[2] = "SP0FS9C";
      TA1REC.TA1LOCAT[3] = "IO0110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0FM090.SP0FMMSG = COMMAREA.CAMSG;
      exit stack;

    end
  end

  call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/


end // end SP0FS9C

// copy sp5rec into current spgm
Function SP0FS9D()
   /* ************************************************************/
   /* *    sp0fs9d  copy sp5rec into current spgm id            **/
   /* *      this routine copies all sp5recs of the spgm id     **/
   /* *      entered on sp0fmop1 and creates all of the copied  **/
   /* *      sp5recs using the current spgm id.                 **/
   /* ************************************************************/



   /* ************************************************************/
   /* *   create the new sp5recs with the key the current spgm id*/
   /* ************************************************************/


  set SP5REC empty;
  set SQLCA empty;

  SP5REC.SP1ID = SP0FM090.SP0FMOP1; /* set up spgm to copy*/

  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* declare cursor*/

  if (SQLCA.VAGen_SQLCODE != +0) /* db2 error on open cursor*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FS9D ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM090";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
    exit stack;
  end

    /* fetch each sp5rec and create a new one with the new key*/

  SP0FS9E(); /* select next sp5rec*/

  SP0FW01.SP0FWSB1 = 0; /* until end of table*/
  while (SP0FW01.SP0FWSB1 < +999 /* sb1 is used as a switch eot-flag*/
   && SQLCA.VAGen_SQLCODE == +0)
    SP0FS9F(); /* change spgm and add sp5rec*/
    SP0FS9E(); /* select next sp5rec*/
  end
  call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/



end // end SP0FS9D

// fetch next sp5rec to copy
Function SP0FS9E()
   /* **********************************************************/
   /* *   SP0FS9E  fetch next SP5REC to copy*/
   /* **********************************************************/

  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +100)
    SP0FW01.SP0FWSB1 = +999; /* set end-of-table switch*/
  else
    if (SQLCA.VAGen_SQLCODE != +0) /* db2 error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "SN      ";
      TA1REC.TA1LOCAT[2] = "SP0FS9E ";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0FW01.SP0FWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end


end // end SP0FS9E

// add sp5rec from copied spgm
Function SP0FS9F()
   /* ************************************************************/
   /* *   sp0fs9f  this statement group is used to add sp5recs*/
         /* copied from another spgm id.*/
   /* ************************************************************/

   /* change spgm id from 'copy from' to the current selected*/
   /* spgm id.  add the sp5rec after changing the spgm part of*/
   /* the key.*/

  if (SP5REC.SP5PRODI == "I") /* INCLUDED PRODUCT*/
    SP5REC.SP1ID = SP1REC.SP1ID;

    SP5REC.ZZZCHGCT = 0;
    SP0FW01.SP0FWT1 = VGVar.currentFormattedTime;
    SP0FW01.SP0FWTH2 = SP0FW01.SP0FWTH1;
    SP0FW01.SP0FWTM2 = SP0FW01.SP0FWTM1;
    SP5REC.ZZZCHGTM = SP0FW01.SP0FWT2;

  /*  */
  /* ---------------- Y2K OUT BEGIN --------------*/
  /*  */
  /* MOVE EZEDTE TO SP0FW01.SP0FWD;*/
  /* MOVE 019 TO SP0FW01.SP0FWD1;*/
  /*  */
  /* ---------------- Y2K OUT END ----------------*/
  /*  */
  /*  */
  /* ---------------- Y2K IN  BEGIN --------------*/
  /*  */
    SP0FW01.SP0FWD = VGVar.currentGregorianDate;
  /*  */
  /* ---------------- Y2K IN  END ----------------*/
  /*  */
    SP5REC.ZZZCHGDT = SP0FW01.SP0FWD;

    call "IO0110" ("A ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE != +0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FS9F ";
      TA1REC.TA1LOCAT[3] = "IO0110  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM090";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end SP0FS9F

// get prices for products
Function SP0FSA1()



   /* ************************************************************/
   /* *   this statement group will get the default price.*/
   /* ************************************************************/



      /* get the default for color if available*/


  set SY5REC empty;
  set SQLCA empty;

  SY5REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
  SY5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
  SY5REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
  SY5REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = "01";
  SY5REC.XQACD = "01";

  if (SP0FW01.SP0FSPCC == "CANA")
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  else
    SY5REC.XCT-CTRY-CD = "USA ";
    SY5REC.ZFC-CRCY-CD = "USD";
  end

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM110.SP0UMPRT = "COLORS";
    SP0FW01.SP0FWSB1 = 1;
    while (SP0FW01.SP0FWSB1 < 7)
      if (SY5REC.SY5PCEDT[SP0FWSB1] <= SP0FW01.SP0FWD
       && SY5REC.SY5PCEDT[SP0FWSB1] != 0)
        SP0FM110.SY5PRCUN = SY5REC.SY5PRCUN[SP0FWSB1];
        SP0FW01.SP0FWSB1 = 99;
      else
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE > +100)
      SP0FM090.SP0FMMSG = "ERROR IN READING THE SY5REC";
      converseLib.validationFailed(88);
      SP0FW01.SP0FWVF = "N";
      set SP0FM090 alarm;
      return;
    end
  end

    /* using '***' for style & '**' for dim will give*/
         /* product level pricing*/

  if (SP0FM110.SY5PRCUN > 0 /* price per unit.*/
   && SP0FM110.SP0UMPRT == "COLORS")
    return;
  else
    set SY5REC empty;
    set SQLCA empty;
    SY5REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
    SY5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
    SY5REC.SY5SZID = 0;
    SY5REC.XPYCD = "01";
    SY5REC.XQACD = "01";
  end

  if (SP0FW01.SP0FSPCC == "CANA")
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  else
    SY5REC.XCT-CTRY-CD = "USA ";
    SY5REC.ZFC-CRCY-CD = "USD";
  end

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0FM110.SP0UMPRT = "STYLES";
    SP0FW01.SP0FWSB1 = 1;
    while (SP0FW01.SP0FWSB1 < 7)
      if (SY5REC.SY5PCEDT[SP0FWSB1] <= SP0FW01.SP0FWD
       && SY5REC.SY5PCEDT[SP0FWSB1] != 0)
        SP0FM110.SY5PRCUN = SY5REC.SY5PRCUN[SP0FWSB1];
        SP0FW01.SP0FWSB1 = 99;
      else
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      SP0FM090.SP0FMMSG = "ERROR IN READING THE SY5REC";
      converseLib.validationFailed(88);
      SP0FW01.SP0FWVF = "N";
      set SP0FM090 alarm;
      return;
    end
  end

end // end SP0FSA1

// load sizes from product db
Function SP0FSA2()



   /* ************************************************************/
   /* *   this statement group will build an array of sizes*/
   /* *   available, and place the default price*/
   /* ************************************************************/

  if (SP0FM090.SY2CLRID[SP0FWSB2] == "***")
    SP0FSA4(); /* get product/color with life style =*/
                                   /* 10(active)*/
    SY3REC.SY2CLRID = SY2REC.SY2CLRID;
    SY3REC.XDMCD = SY2REC.XDMCD;
  else
    SY3REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWSB2];
    SY3REC.XDMCD = SP0FM090.XDMCD[SP0FWSB2];

  end

  SY3REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2]; /* gpc*/
  SY3REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2]; /* style #*/

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
      /* record found*/
  else
    SP0FM090.SP0FMMSG = "ERROR IN READING THE SY3REC";
    converseLib.validationFailed(88);
    SP0FW01.SP0FWVF = "N";
    set SP0FM090 alarm;
    return;
  end



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 41)
    if (SY3REC.SY3FRGUT[SP0FWSB1] == "F"
     || SY3REC.SY3FRGUT[SP0FWSB1] == "G")
      SP0FM110.SY4IDDSC[SP0FWSB1] = SY3REC.SY3FRGUT[SP0FWSB1];
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    else
      SP0FM110.SY4IDDSC[SP0FWSB1] = " ";
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
  end


  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
      /* the read was ok*/
  else
    SP0FM090.SP0FMMSG = "ERROR IN READING THE SY4REC";
    converseLib.validationFailed(88);
    SP0FW01.SP0FWVF = "N";
    set SP0FM090 alarm;
    return;
  end


  if (SP1REC.SP1STAT == "A" /* ...      protect if sp is/was active*/
   || SP1REC.SP1STAT == "I" 
   || SP1REC.SP1STAT == "F")
    SP0FM110.SP0FORF = " "; /* ......<-- override flag for screen*/
    set SP0FM110.SP0FORF skip;
    set SP0FM110.SY5PRCUN skip;
  else
    SP0FM110.SP0FORF = " "; /* ......<-- override flag for screen*/
    set SP0FM110.SP0FORF normal;
    set SP0FM110.SY5PRCUN normal;
  end



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 41)
    if (SP0FM110.SY4IDDSC[SP0FWSB1] == "F"
     || SP0FM110.SY4IDDSC[SP0FWSB1] == "G")
      SP0FM110.SY4IDDSC[SP0FWSB1] = SY4REC.SY4IDDSC[SP0FWSB1];
      SP0FM110.SP5SZPR[SP0FWSB1] = SP0FM110.SY5PRCUN;
      SP0FM110.SP5PRCOF[SP0FWSB1] = "P"; /* default is product price*/
      set SP0FM110.SP5SZPR[SP0FWSB1] normal;
      set SP0FM110.SP5PRCOF[SP0FWSB1] normal;
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    else
      SP0FM110.SY4IDDSC[SP0FWSB1] = " ";
      SP0FM110.SP5SZPR[SP0FWSB1] = SP0FM110.SY5PRCUN;
      SP0FM110.SP5PRCOF[SP0FWSB1] = "P"; /* default is product price*/
      set SP0FM110.SP5SZPR[SP0FWSB1] skip, invisible;
      set SP0FM110.SY4IDDSC[SP0FWSB1] skip, invisible;
      set SP0FM110.SP5PRCOF[SP0FWSB1] skip, invisible;
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
  end



end // end SP0FSA2

// load the sp5rec to sp0fm110
Function SP0FSA3()



   /* ************************************************************/
   /* *   this process is used to load the sp5rec to sp0fm110*/
   /* ************************************************************/



  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SP5REC.SP5PRODI == "I") /* INCLUDE PRODUCT*/
      move SP5REC to SP0FM110 withV60Compat;
    else
      return;
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FSA3 ";
    TA1REC.TA1LOCAT[3] = "IO01100 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM110";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



      /* this section will free certain price fields for changes*/

   /* ----sp0fwf3 flag is set if sales pgm was/is active - ssj*/

  SP0FW01.SP0FWF3 = "N";
  if (SP0FM090.SP0FWMOP[SP0FWSB2] == "S")
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "I"
     || SP1REC.SP1STAT == "F")
      SP0FW01.SP0FWF3 = "Y";
      set SP0FM110.SP5PRCOF skip;
      set SP0FM110.SY5PRCUN skip;
      set SP0FM110.CATOAP cursor;
      SP0FM110.SP0FMMSG = "VIEW ONLY - SALES PROGRAM WAS/IS ACTIVE";
    else
      set SP0FM110.SY5PRCUN cursor, normal;
    end
  end


  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 41)
    if (SP0FM110.SY4IDDSC[SP0FWSB1] != " ")
      if (SP0FW01.SP0FWF3 == "N")
        set SP0FM110.SP5SZPR[SP0FWSB1] normal;
        set SP0FM110.SP5PRCOF[SP0FWSB1] normal;
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      else
        set SP0FM110.SP5SZPR[SP0FWSB1] skip;
        set SP0FM110.SP5PRCOF[SP0FWSB1] skip;
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    else
      set SP0FM110.SP5PRCOF[SP0FWSB1] skip, invisible;
      set SP0FM110.SP5SZPR[SP0FWSB1] skip, invisible;
      set SP0FM110.SY4IDDSC[SP0FWSB1] skip, invisible;
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
  end



end // end SP0FSA3

// set of sy2recs for act. color
Function SP0FSA4()



   /* ************************************************************/
   /* *   when all colors '***' are used, the first product/color*/
   /* *   with a life style = '10'(active) is found to supply*/
   /* *   the default values.*/
   /* ************************************************************/

  set SY2REC empty;
  set SQLCA empty;
  SP0FW01.SP0FWSW1 = "N"; /* found rec?*/

  SY2REC.XGPCD = SP0FM090.XGPCD[SP0FWSB2];
  SY2REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWSB2];

  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    while (SQLCA.VAGen_SQLCODE == +0
     && SP0FW01.SP0FWSW1 == "N")
      SP0FSA5();
    end
  end

   /* this code will only be executed for a Canadian sales program*/
   /* that returned a 'row not found' when attempting to find the*/
   /* product on dprod.vsyreg02*/

   /* it will force the same error to appear as if 'row not found'*/
   /* had been found on dprod.vcolor01*/

  if (SP0FW01.SP0FSPCC == "CANA"
   && WSY2000.WSY2000-RETURN-CODE == "02")
    set SY2REC empty;
  end

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
       /* ok*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "FETCH   ";
    TA1REC.TA1LOCAT[2] = "SP0FSA4 ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM110";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end




end // end SP0FSA4

// next sy2rec for active color
Function SP0FSA5()



   /* ************************************************************/
   /* *   when all colors '***' are used, the first product/color*/
   /* *   with a life style = '10'(active) is found to supply*/
   /* *   the default values.*/
   /* ************************************************************/

  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SP0FW01.SP0FSPCC == "CANA") /* CANA canadian sales program*/
      TA1REC.TA1PGMNM = "SP0F"; /* CANA program name*/
      TA1REC.TA1MAP = "SP0FM110";

      SP0F-CALL-SY2000(); /* CANA call sy2000 to get*/
                                   /* product/region data*/

      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/

        if (SY2REC.XLCCD1 == 10
         && SY2REC.SY2CEDT1 < SP0FW01.SP0FWD) /* effective date*/
          SP0FW01.SP0FWSW1 = "Y"; /* record found*/
        end
        if (SY2REC.XLCCD2 == 10
         && SY2REC.SY2CEDT2 < SP0FW01.SP0FWD) /* effective date*/
          SP0FW01.SP0FWSW1 = "Y"; /* record found*/
        end
        if (SY2REC.XLCCD3 == 10
         && SY2REC.SY2CEDT3 < SP0FW01.SP0FWD) /* effective date*/
          SP0FW01.SP0FWSW1 = "Y"; /* record found*/
        end
      end

      if (WSY2000.WSY2000-RETURN-CODE == 0 /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02) /* / * CANA row not found*/
        /* ok*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0F   ";
        TA1REC.TA1LOC = "SP0FSA5 - BAD RTN CODE FROM SY2000";
        TA1REC.TA1MAP = "SP0FM110";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSYREG02";
        TA1TBLKE = SP0FW01.SP0FW-WSY2000-POST-1;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end


    else


      if (SY2REC.XLCCD1 == 10
       && SY2REC.SY2CEDT1 < SP0FW01.SP0FWD) /* effective date*/
        SP0FW01.SP0FWSW1 = "Y"; /* record found*/
      end
      if (SY2REC.XLCCD2 == 10
       && SY2REC.SY2CEDT2 < SP0FW01.SP0FWD) /* effective date*/
        SP0FW01.SP0FWSW1 = "Y"; /* record found*/
      end
      if (SY2REC.XLCCD3 == 10
       && SY2REC.SY2CEDT3 < SP0FW01.SP0FWD) /* effective date*/
        SP0FW01.SP0FWSW1 = "Y"; /* record found*/
      end
    end
  else

    if (SQLCA.VAGen_SQLCODE == +0
     || SQLCA.VAGen_SQLCODE == 100)
       /* ok*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "FETCH   ";
      TA1REC.TA1LOCAT[2] = "SP0FSA5 ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM110";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VPRICE01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end




end // end SP0FSA5

// determine if spgm is US or CAN
Function SP0FSA6()
      /* ************************************************************/
      /* this statement group determines if the spgm is US or CANA*/
      /* * this is achieved as follows:*/
      /* *0*/
      /* * 1. retrieve an order type for the spgm from DSPGM.VORTYP01*/
      /* * 2. determine the sales office for the order type from XVOTBL*/
      /* * 3. determine the country for the order type from XSOTBL*/
      /* **/
      /* * IMPORTANT !!!*/
      /* * this logic requires that the sales program in question already*/
      /* * has order types defined against it*/
      /* ************************************************************/

  SP2REC.SP1ID = SP0FW01.SP1ID;
  SP0FSSP(); /* CANA select set*/

  SP0FNSP(); /* CANA select next*/

  if (SQLCA.VAGen_SQLCODE != 0) /* CANA row not found*/
    SP0FW01.SP0FWERR = "Y"; /* CANA*/
    converseLib.validationFailed(199); /* CANA spgm has no order types defined*/
    SP0FM110.SP0FMMSG = " ";
    return;
  end


  /* ******TCS INCLUDE BEGIN *********/

  set VXVO0001 empty;
  set SQLCA empty;
  set SP9REC empty;
  VXVO0001.XOTCD = SP2REC.XOTCD;
  SP9REC.SP9COUFL = "N";

  call "VXVO0001" ("S7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FSA6 ";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  else
    while (SP9REC.SP9COUFL == "N"
     && SQLCA.VAGen_SQLCODE != 100)
      call "VXVO0001" ("N7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VXVO0001.XSOCD in XSOTBL.XSOCD
         && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          SP9REC.SP9COUFL = "Y";
          if (XSOTBL.XCTCD[sysVar.arrayIndex] == "CANA")
            SP0FW01.SP0FSPCC = "CANA";
          else
            SP0FW01.SP0FSPCC = "USA";
          end
        else
          SP0FW01.SP0FWERR = "Y"; /* CANA*/
          converseLib.validationFailed(198); /* sales office is not valid*/
          SP0FM110.SP0FMMSG = " ";
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          SP0FW01.SP0FWERR = "Y"; /* CANA*/
          converseLib.validationFailed(011); /* order type is not valid*/
          SP0FM110.SP0FMMSG = " ";
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SP0F   ";
          TA1REC.TA1LOCAT[1] = "A       ";
          TA1REC.TA1LOCAT[2] = "SP0FSA6 ";
          TA1REC.TA1LOCAT[3] = "VXVO0001";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VXVO0001";
          TA1REC.TA1TBLKE = VXVO0001-KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    end
  end
  call "VXVO0001" ("C7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FSA6 ";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
  SP0FCSP(); /* CANA close set*/
  /* ******TCS INCLUDE END *********/
end // end SP0FSA6

// 2nd edit group for products
Function SP0FSB1()



   /* *********************************************************/
   /* *   this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0FW01.SP0FWVF = "Y";
  SP0FM110.SP0FMMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0FW01.SP0FWVF = "N";
    return;
  end


   /* ***********************************************************/
      /* sp0fsb2 check for fast path, modified data, pf1, pf4*/
   /* ***********************************************************/

  SP0FSB2();




  if (converseVar.validationMsgNum > 0)
    SP0FM110.SP1ID = SP0FW01.SP1ID;
    SP0FW01.SP0FWVF = "N";
    return;
  end



  if (SP0FM110.SP1ID != SP0FW01.SP1ID) /* change in key*/
    COMMAREA.CAITEM = SP0FM110.SP1ID;
    if (converseVar.eventKey is pf15)
      COMMAREA.CAINQFL = "B";
      exit stack;
    else
      if (converseVar.eventKey is pf16)
        COMMAREA.CAINQFL = "C";
        exit stack;
      else
        COMMAREA.CAINQFL = "A";
        exit stack;
      end
    end
  else
    if (converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16)
      COMMAREA.CAITEM = SP0FM110.SP1ID;
      exit stack;
    end
  end

      /* all edits ok and this is a delete.*/



  if (converseVar.eventKey is enter
   && SP0FM090.SP0FWMOP[SP0FWPOS] == "D")
    return;
  end



      /* sp0fsb3  to verify price over-rides - must be non zero*/



  SP0FSB3();



end // end SP0FSB1

// edit for fast path,option,mdt
Function SP0FSB2()


  if (converseVar.eventKey is pf3)
    exit stack;
  end

  if (converseVar.eventKey is pa2)
    SP0FM110.CATOAP = "SP0M";
    SP0FM110.CAITEM = " ";
  end

   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
      /* and option selected or modified data, pf1, and pf4.*/
   /* *********************************************************/



  if (SP0FM110.CATOAP != " ")
    COMMAREA.CATOAP = SP0FM110.CATOAP;
    COMMAREA.CAITEM = SP0FM110.CAITEM;
    XSEXIT();
    SP0FM110.SP0FMMSG = COMMAREA.CAMSG;
    SP0FM110.CATOAP = " ";
    SP0FM110.CAITEM = " ";
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0FM110.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0FM110.SP0FMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0FSB2

// to verify price over-rides
Function SP0FSB3()



   /* ************************************************************/
      /* this statement group will verify any price over-rides.*/
   /* ----> they must be greater than 0 - (changed 11/14/89  ssj)*/
      /* if the default price is changed, all prices for sizes*/
      /* are changed to the default price.*/
   /* ************************************************************/



  if (SP0FM110.SY5PRCUN is modified) /* change all prices to the default*/
    SP0FW01.SP0FWSB1 = 1;
    while (SP0FW01.SP0FWSB1 < 41)
      SP0FM110.SP5SZPR[SP0FWSB1] = SP0FM110.SY5PRCUN;
      if (SP0FM110.SY4IDDSC[SP0FWSB1] != " ")
        set SP0FM110.SP5SZPR[SP0FWSB1] normal;
        SP0FW01.SP0FWMSG = "  ";
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      else
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    end
  end



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 41)
    if (SP0FM110.SY4IDDSC[SP0FWSB1] != " "
     && SP0FM110.SP5SZPR[SP0FWSB1] >= 0)
      set SP0FM110.SP5SZPR[SP0FWSB1] normal;
      SP0FW01.SP0FWMSG = "  ";
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    else
      if (SP0FM110.SY4IDDSC[SP0FWSB1] != " "
       && SP0FM110.SP5SZPR[SP0FWSB1] < 0)
        set SP0FM110.SP5SZPR[SP0FWSB1] cursor, modified, bold;
        SP0FW01.SP0FWVF = "N";
        converseLib.validationFailed(29);
        SP0FM110.SP0FMMSG = "THE PRICES MUST BE GREATER THAN ZERO";
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      else
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    end
  end




   /* ************************************************************/
      /* if the s.pgm overide flag is changed, all overide flags*/
      /* are changed to the default value.*/
   /* note: this flag field specifies where the price will be  **/
      /* taken from for invoicing. 's' = from sales program    **/
                                /* 'p' = from product file     **/
                                /* 'l' = the lowest of these two*/
   /* **********************************************************/


  if (SP0FM110.SP0FORF is modified)
    if (SP0FM110.SP0FORF == "S" /* sales pgm price*/
     || SP0FM110.SP0FORF == "P" /* product   price*/
     || SP0FM110.SP0FORF == "L") /* lowest of two prices*/

      SP0FW01.SP0FWSB1 = 1;
      while (SP0FW01.SP0FWSB1 < 41)
        SP0FM110.SP5PRCOF[SP0FWSB1] = SP0FM110.SP0FORF;
        if (SP0FM110.SY4IDDSC[SP0FWSB1] != " ")
          set SP0FM110.SP5PRCOF[SP0FWSB1] normal;
          SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
        else
          SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
        end
      end
    else
      set SP0FM110.SP0FORF cursor, modified, bold; /* bad code*/
      SP0FW01.SP0FWVF = "N";
      SP0FM110.SP0FMMSG = "THESE FLAG CODES MUST BE S, P OR L ";
    end
  end



  SP0FW01.SP0FWSB1 = 1;

  while (SP0FW01.SP0FWSB1 < 41)
    if (SP0FM110.SY4IDDSC[SP0FWSB1] != " ")
      if (SP0FM110.SP5PRCOF[SP0FWSB1] == "S" /* sales pgm price*/
       || SP0FM110.SP5PRCOF[SP0FWSB1] == "P" /* use product price*/
       || SP0FM110.SP5PRCOF[SP0FWSB1] == "L") /* use lowest price*/
         /* ....good return...*/
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      else
        set SP0FM110.SP5PRCOF[SP0FWSB1] cursor, modified, bold;
        SP0FW01.SP0FWVF = "N";
        SP0FM110.SP0FMMSG = "THE FLAG CODES MUST BE S,P OR L     ";
        SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
      end
    else
      SP0FW01.SP0FWSB1 = SP0FW01.SP0FWSB1 + 1;
    end
  end



end // end SP0FSB3

// product id header add, chg,del
Function SP0FSB4()



   /* ************************************************************/
   /* *   this statement group is used to add , change, or delete*/
       /* A product id for a sales program.*/
   /* ************************************************************/



  SP5REC.SP1ID = SP0FM090.SP1ID;
  SP5REC.XGPCD = SP0FM090.XGPCD[SP0FWPOS];
  SP5REC.SY1STNBR = SP0FM090.SY1STNBR[SP0FWPOS];
  SP5REC.SY2CLRID = SP0FM090.SY2CLRID[SP0FWPOS];
  SP5REC.XDMCD = SP0FM090.XDMCD[SP0FWPOS];

  if (SP0FM090.SP2MNQTY[SP0FWPOS] < 0)
    SP0FM090.SP2MNQTY[SP0FWPOS] = 0;
    SP5REC.SP2MNQTY = 0;
  else
    SP5REC.SP2MNQTY = SP0FM090.SP2MNQTY[SP0FWPOS];
  end

  SP0FW01.SP5KEY = SP5REC.SP5KEY;

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "A"
   && converseVar.validationMsgNum != 9)
    set SP5REC empty;
    set SQLCA empty;
    move SP0FM110 to SP5REC withV60Compat;
    SP5REC.SP5PRODI = "I"; /* INCLUDE PRODUCT*/

    if (SP0FM090.SP2MNQTY[SP0FWPOS] < 0)
      SP0FM090.SP2MNQTY[SP0FWPOS] = 0;
      SP5REC.SP2MNQTY = 0;
    else
      SP5REC.SP2MNQTY = SP0FM090.SP2MNQTY[SP0FWPOS];
    end

    SP5REC.ZZZCHGCT = 0;
    SP0FW01.SP0FWT1 = VGVar.currentFormattedTime;
    SP0FW01.SP0FWTH2 = SP0FW01.SP0FWTH1;
    SP0FW01.SP0FWTM2 = SP0FW01.SP0FWTM1;
    SP5REC.ZZZCHGTM = SP0FW01.SP0FWT2;
  /*  */
  /* -------------- Y2K OUT BEGIN ---------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0FW01.SP0FWD;*/
  /* MOVE 019 TO SP0FW01.SP0FWD1;*/
  /*  */
  /* -------------- Y2K OUT END -----------------------*/
  /*  */
  /*  */
  /* -------------- Y2K in BEGIN ---------------------*/
  /*  */
    SP0FW01.SP0FWD = VGVar.currentGregorianDate;
  /*  */
  /* -------------- Y2K in END -----------------------*/
  /*  */
    SP5REC.ZZZCHGDT = SP0FW01.SP0FWD;
    call "IO0110" ("A ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FW01.SP0FWVF = "A";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
      TA1REC.TA1LOCAT[3] = "IO0110  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM110";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "A"
   && SQLCA.VAGen_SQLCODE == +0
   && SP0FW01.SP0FWTSZ > 0)
    return;
  else
    if (SP0FM090.SP0FWMOP[SP0FWPOS] == "A"
     && SQLCA.VAGen_SQLCODE == +0
     && SP0FW01.SP0FWTSZ == 0 /* 1st order type record*/
     && SP1REC.SP1PIND != "Y")
      call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +0)
        SP0FW01.SP0FWUPF = "Y";
        SP0FW01.SP0FWFL3 = "*";
        SP0FS37(); /* check for status change*/
        SP0FS3A(); /* update sp1rec*/
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0F   ";
        TA1REC.TA1LOCAT[1] = "A - 1ST ";
        TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
        TA1REC.TA1LOCAT[3] = "IO0070  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0FM110";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VSPGM001";
        TA1TBLKE = SP1REC.SP1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != +0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
    TA1REC.TA1LOCAT[3] = "IO0110  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0FM110";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "S") /* to change a rec*/
    move SP0FM110 to SP5REC withV60Compat;
    SP0FW01.SP0FWT1 = VGVar.currentFormattedTime;
    SP0FW01.SP0FWTH2 = SP0FW01.SP0FWTH1;
    SP0FW01.SP0FWTM2 = SP0FW01.SP0FWTM1;
    SP5REC.ZZZCHGTM = SP0FW01.SP0FWT2;
  /*  */
  /* ------------------- y2k out begin ------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0FW01.SP0FWD;*/
  /* MOVE 019 TO SP0FW01.SP0FWD1;*/
  /*  */
  /* ------------------- y2k out end --------------------*/
  /*  */
  /*  */
  /* ------------------- y2k in begin ------------------*/
  /*  */
    SP0FW01.SP0FWD = VGVar.currentGregorianDate;
  /*  */
  /* ------------------- y2k in  end --------------------*/
  /*  */
    SP5REC.ZZZCHGDT = SP0FW01.SP0FWD;
    call "IO0110" ("U ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FM090.SP0FMMSG = "PRODUCT ID UPDATED ------ CONTINUE";
      SP0FW01.SP0FWVF1 = "S";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SP0FW01.SP0FWVF = "N";
        set SP0FM110 alarm;
        converseLib.validationFailed(77);
        SP0FM110.SP0FMMSG = "SORRY, DATA HAS BEEN UPDATED - TRY AGAIN";
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0F   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
        TA1REC.TA1LOCAT[3] = "IO0110  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0FM110";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VPROD001";
        TA1TBLKE = SP5REC.SP5KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "D") /* to delete a rec*/
    move SP0FM110 to SP5REC withV60Compat;
    call "IO0110" ("D ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0FW01.SP0FWVF1 = "D";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0F   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
      TA1REC.TA1LOCAT[3] = "IO0110  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0FM110";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (SP0FM090.SP0FWMOP[SP0FWPOS] == "D" /* to delete a rec*/
   && SQLCA.VAGen_SQLCODE == +0          
   && SP0FW01.SP0FWTSZ == 1)             /* this was the last product rec*/
    if (SP1REC.XSPCD[1] == " " /* no sports codes*/
     || SP1REC.XPCCD[1] == " ") /* NO PRODUCT CATEGORIES*/
      call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +0)
        SP0FW01.SP0FWUPF = "Y";
        SP0FW01.SP0FWFL3 = " ";
        SP0FS37(); /* check for status change*/
        SP0FS3A(); /* update sp1rec*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0F   ";
        TA1REC.TA1LOCAT[1] = "A - 2ND ";
        TA1REC.TA1LOCAT[2] = "SP0FSB4 ";
        TA1REC.TA1LOCAT[3] = "IO0070  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0FM110";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VSPGM001";
        TA1TBLKE = SP1REC.SP1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

  SP0FW01.SP0FWPOS = 1; /* to rebuild m090 screen*/




end // end SP0FSB4

// vortyp01 select set
Function SP0FSSP()

      /* *********************************************************/
      /* * this statement group performs a select set for       **/
      /* * the dspgm.vortyp01 table.                           **/
      /* *********************************************************/

      /* issue select set request*/

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select set*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0F";
    TA1REC.TA1LOCAT[1] = " ";
    TA1REC.TA1LOCAT[2] = " ";
    TA1REC.TA1LOCAT[3] = "SP0FSSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    TA1REC.TA1MAP = "SPOFM110"; /* map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4(); /* abort*/
  end

   /* *************************************************************/
end // end SP0FSSP

//*** RECORD=SP0FW01 ****
// ** working storage for sp0f (sales program product update)
// ***********************
Record SP0FW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0FWUPF SP0FWUPF ; 
  10 SP0FWMSG SP0FWMSG ; 
  10 SP0FWMOP SP0FWMOP [20] ; 
  10 SP0FWD SP0FWD ; 
    20 SP0FWD1 SP0FWD1 ; 
    20 SP0FWD2 SP0FWD2 ; 
  10 SP0FWT1 SP0FWT1 ; 
    20 SP0FWTH1 SP0FWTH1 ; 
    20 SP0FWTC1 SP0FWTC1 ; 
    20 SP0FWTM1 SP0FWTM1 ; 
    20 SP0FWTC2 SP0FWTC2 ; 
    20 SP0FWTS1 SP0FWTS1 ; 
  10 SP0FWT2 SP0FWT2 ; 
    20 SP0FWTH2 SP0FWTH2 ; 
    20 SP0FWTM2 SP0FWTM2 ; 
  10 SP0FWVF SP0FWVF ; 
  10 SP0FWVF1 SP0FWVF1 ; 
  10 SP0FWMDF SP0FWMDF ; 
  10 SP0FWHDM SP0FWHDM ; 
  10 SP0FWSDM SP0FWSDM ; 
  10 SP0FWSID SP0FWSID ; 
  10 SP0FWACF SP0FWACF ; 
  10 SP0FWAPF SP0FWAPF ; 
  10 SP0FWSB1 SP0FWSB1 ; 
  10 SP0FWSB2 SP0FWSB2 ; 
  10 SP0FWSB3 SP0FWSB3 ; 
  10 SP0FWTSZ SP0FWTSZ ; 
  10 SP0FWPOS SP0FWPOS ; 
  10 SP0FWPO2 SP0FWPO2 ; 
  10 SP5KEY SP5KEY ; 
  10 SP1ID SP1ID ; 
  10 XPCCD XPCCD ; 
  10 XPCDESC XPCDESC ; 
  10 XAUCD XAUCD ; 
  10 XAUDESC XAUDESC ; 
  10 XSGCD XSGCD ; 
  10 XSGDESC XSGDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP0FWOTH SP0FWOTH ; 
  10 SP0FWQTY SP0FWQTY ; 
  10 SP0FWDDL SP0FWDDL ; 
  10 SP0FWPCT SP0FWPCT ; 
  10 SP4KEY SP4KEY ; 
    15 SP0FWID SP0FWID ; 
    15 SP0FWKC SP0FWKC ; 
    15 SP0FWKM SP0FWKM ; 
    15 SP0FWXN SP0FWXN ; 
    15 SP0FWXG SP0FWXG ; 
  10 SP2DIND SP2DIND ; 
  10 SP0FWF3 SP0FWF3 ; 
  10 SP0FWFL1 SP0FWFL1 ; 
  10 SP0FWFL2 SP0FWFL2 ; 
  10 SP0FWFL3 SP0FWFL3 ; 
  10 SP0FWFL4 SP0FWFL4 ; 
  10 SP0FWFL5 SP0FWFL5 ; 
  10 SP0FWFL6 SP0FWFL6 ; 
  10 SP0FWFL7 SP0FWFL7 ; 
  10 SP0FWFL8 SP0FWFL8 ; 
  10 SP0FWFL9 SP0FWFL9 ; 
  10 SP0FWFLA SP0FWFLA ; 
  10 XSMREPFL XSMREPFL ; 
  10 SP0FWFLF SP0FWFLF ; 
  10 SP0FWSW1 SP0FWSW1 ; 
  10 SP0FWLOC SP0FWLOC ; 
    15 SP0FWID1 SP0FWID1 ; 
    15 SP0FWL1 SP0FWL1 ; 
    15 * char(15) ; 
  10 SP0FWCPD SP0FWCPD ; 
  10 SP0FWERR SP0FWERR ; 
  10 SP0FWPFK SP0FWPFK ; 
  10 SP0FWUPD SP0FWUPD ; 
  10 SP0FWGPC SP0FWGPC ; 
  10 SP0FWDMD SP0FWDMD ; 
  10 SP0FSPCC SP0FSPCC ; 
  10 SP0FW-WSY2000-POST-1 SP0FW-WSY2000-POST-1 ; 
    15 SP0FW-WSY2000-GPC-CD SP0FW-WSY2000-GPC-CD ; 
    15 SP0FW-WSY2000-DASH-1 SP0FW-WSY2000-DASH-1 ; 
    15 SP0FW-WSY2000-STY-NBR SP0FW-WSY2000-STY-NBR ; 
    15 SP0FW-WSY2000-DASH-2 SP0FW-WSY2000-DASH-2 ; 
    15 SP0FW-WSY2000-COLR-CD SP0FW-WSY2000-COLR-CD ; 
    15 SP0FW-WSY2000-DASH-3 SP0FW-WSY2000-DASH-3 ; 
    15 SP0FW-WSY2000-DIM-CD SP0FW-WSY2000-DIM-CD ; 
    15 SP0FW-WSY2000-DASH-4 SP0FW-WSY2000-DASH-4 ; 
    15 SP0FW-WSY2000-PROD-REG-CD SP0FW-WSY2000-PROD-REG-CD ; 
    15 SP0FW-WSY2000-DASH-5 SP0FW-WSY2000-DASH-5 ; 
    15 SP0FW-WSY2000-RETURN-CD SP0FW-WSY2000-RETURN-CD ; 
end // end SP0FW01

//*** RECORD=SP0FW02 ****
// *********  save area for sp1rec used by sp0f  **************
// 
// date created:     july 26, 1989
// 
// note:             this work area must always be exactly
//                   the same as sp1rec.
// 
// maintenance log:
// 
// date       init   comments
// --------   ----   ------------------------------------------
// 7-26-89    rcoron created workarea
// 8-08-89    rcoron added sp_life_calc_xdt to conform to
//                   sp1rec changes
// 6-13-91    sjob   special customers are limited to 10 by db.
// ************************************************************
// ***********************
Record SP0FW02 type basicRecord
  10 SP1KEY SP1KEY ; 
    15 SP1ID SP1ID ; 
  10 SP1NM SP1NM ; 
  10 SP1ABRV SP1ABRV ; 
  10 SP1LIFEF SP1LIFEF ; 
  10 SP1CALCF SP1CALCF ; 
  10 SP1CALDT SP1CALDT ; 
  10 XNDCD XNDCD ; 
  10 XLCCD XLCCD ; 
  10 XQACD XQACD ; 
  10 SP1OTIND SP1OTIND ; 
  10 SP1CIND SP1CIND ; 
  10 SP1PIND SP1PIND ; 
  10 SP1STAT SP1STAT ; 
  10 XAUCD XAUCD [20] ; 
  10 XSGCD XSGCD [10] ; 
  10 XFMCD XFMCD [20] ; 
  10 XSPCD XSPCD [20] ; 
  10 SP1COM1 SP1COM1 ; 
  10 SP1COM2 SP1COM2 ; 
  10 SP1COM3 SP1COM3 ; 
  10 SP1COM4 SP1COM4 ; 
  10 SP1COM5 SP1COM5 ; 
  10 SP1COM6 SP1COM6 ; 
  10 SP1COM7 SP1COM7 ; 
  10 SP1COM8 SP1COM8 ; 
  10 SP1COM9 SP1COM9 ; 
  10 SP1COM10 SP1COM10 ; 
  10 SP1COM11 SP1COM11 ; 
  10 SP1COM12 SP1COM12 ; 
  10 SP1COM13 SP1COM13 ; 
  10 SP1COM14 SP1COM14 ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end SP0FW02

Record SP0FW03 type basicRecord
  10 XGPCD XGPCD [3000] ; 
  10 SY1STNBR SY1STNBR [3000] ; 
  10 SY2CLRID SY2CLRID [3000] ; 
  10 XDMCD XDMCD [3000] ; 
  10 SP2MNQTY SP2MNQTY [3000] ; 
end // end SP0FW03

DataItem SP0FSPCC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0FW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all company flag
DataItem SP0FWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *.s. all product flag
DataItem SP0FWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp5rec copied switch
DataItem SP0FWCPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem SP0FWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century
DataItem SP0FWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem SP0FWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollar amount hold
DataItem SP0FWDDL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEST DIMINSION
DataItem SP0FWDMD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag.- used on m200.
DataItem SP0FWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// view only flag....no update
DataItem SP0FWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage flag
DataItem SP0FWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit flag...
DataItem SP0FWFLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TEST GPC......
DataItem SP0FWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt
DataItem SP0FWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold
DataItem SP0FWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// incomming sp1id
DataItem SP0FWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec kuccoid hold
DataItem SP0FWKC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp4rec kumstrid hold
DataItem SP0FWKM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// incomming request location
DataItem SP0FWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// break up application loc
DataItem SP0FWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path
DataItem SP0FWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field
DataItem SP0FWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field
DataItem SP0FWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold code
DataItem SP0FWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold
DataItem SP0FWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pf key entered.
DataItem SP0FWPFK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W.S. TEST POSITION
DataItem SP0FWPO2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table position
DataItem SP0FWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// discount quantity hold
DataItem SP0FWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem SP0FWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2
DataItem SP0FWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript3
DataItem SP0FWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt
DataItem SP0FWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0FWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found an active color rec
DataItem SP0FWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem SP0FWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0FWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1
DataItem SP0FWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0FWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0FWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0FWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #1
DataItem SP0FWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0FWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem SP0FWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table size
DataItem SP0FWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen update requested
DataItem SP0FWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws update flag
DataItem SP0FWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0FWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0FWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xgpcd hold
DataItem SP0FWXG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xnxcd hold
DataItem SP0FWXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

