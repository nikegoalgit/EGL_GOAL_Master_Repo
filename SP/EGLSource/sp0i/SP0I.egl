package sp0i;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0I ****
// SALES PROGRAM INQUIRY
// 
// overview:
//     MASTER SCREEN FOR SALES PGM  INQUIRY.  SHOWS STATUS,
//     SEASONAL SPGM INFORMATION, DEPARTMENT, LIFECYCLE, AND
//     PRODUCT QUALITY INFORMATION AS WELL AS ALLOWING
//     THE USER TO SELECT ADDITIONAL INFORMATION FOR VIEWING
// 
// date created:
//     CREATED BY RON LESOWSKI INITIALLY.
// 
// maintenance history:
//   when       who        what
// --------  ---------  --------------------------------------
// 06/28/88   s.job     adapt sp0u for inquiry
// 12/16/88   JWOOD     ADDED NONCSP OPTION TO CALLS
// 12/16/88   JWOOD     ADDED XSSEGTR LOGIC
// 08/08/89   sjob      e2: added seasonal information to map
// 03/08/90   SJOB      e10:increase display size & expand
//                      selections.
// 08/14/90   SJOB      b1:correct '*' for product sport activ.
// 10/03/90   SJOB      E1:SUB PROD CATEGORY FOR FAMILY CDS.
// 06/13/91   SJOB      limit specl customers to 10.
// 07/03/91   SJOB      E0: support multiple life cycles.
// *********************
Program SP0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SP0IW01 SP0IW01; // record
  SP0IW02 SP0IW02; // record
  SP1REC SP1REC; // record
  SP4REC SP4REC; // record
  SP5REC SP5REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLCTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use SP0IM.SP0IM100,  // forms
      SP0IM.SP0IM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0I200: SP0I200();


    goto SP0I300;



    SP0I300: SP0I300();


    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      goto SP0I200;
    else
      if (converseVar.eventKey is pf5)
        goto SP0I500; /* sales program listing*/
      else
        goto SP0I300;
      end
    end



    SP0I500: SP0I500();


    goto SP0I600; /* sales program listing*/



    SP0I600: SP0I600();



    if (converseVar.eventKey is pf5 /* s.p. i.d. inquiry*/
     || COMMAREA.CAITEM != " ")    
      goto SP0I200;
    else
      goto SP0I600;
    end


  end // end main
end // end SP0I

// init.and reset
Function SP0I200()


   /* ************************************************************/
     /* initialize for sales program inquiry.*/
   /* ************************************************************/

  XSENTRY();
  XSSEGTR();


  set SP0IW01 empty;

  SP0IW01.SP0IWDIS = "****";

  converseLib.clearScreen();
  set SP0IM200 initial;
  SP0IM200.SP0IMTDT = VGVar.currentShortGregorianDate;

  if (COMMAREA.CAITEM != " ")
    SP0IM200.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
    SP0IS40(); /* set up....*/
  end


end // end SP0I200

// s.p. header add/changes....
Function SP0I300()


  SP0IM200.SP0IMTDT = VGVar.currentShortGregorianDate;

  SP0IM200.SP0IMOP1 = " ";
  SP0IM200.SP0IMOP2 = " ";
  SP0IM200.SP0IMOP3 = " ";
  SP0IM200.SP0IMOP4 = " ";
  SP0IM200.SP0IMOP5 = " ";
  SP0IM200.SP0IMOP7 = " ";
  SP0IM200.SP0IMOP8 = " ";
  SP0IM200.SP0IMOP9 = " ";


  converse SP0IM200 ;


  set SP0IM200.CATOAP normal;
  set SP0IM200.CAITEM normal;


  SP0IW01.SP0IWSDM = " "; /* option selected flag*/
  SP0IW01.SP4KEY = " ";
  SP0IW01.SP5KEY = " ";

  SP0IW01.SP0IWPOS = +1;

  SP0IS31(); /* initial edit routine*/

  if (SP0IM200.SP1ID != SP0IW01.SP0IWDIS
   && SP0IM200.SP1ID > "  ")
    SP0IS40(); /* process next sales program*/
  end


   /* ************************************************************/
end // end SP0I300

// sel set of sales programs
Function SP0I500()


  converseLib.validationFailed(0);
  set SP0IM100 empty;
  SP0IM100.SP0IMTDT = VGVar.currentShortGregorianDate; /* current date*/
  SP0IW01.SP0IWMST = " "; /* w.s. hold of selected s.p. status's*/
  SP0IW01.SP0IWTL4 = " ";



end // end SP0I500

// scan sales programs....
Function SP0I600()


  SP0IW01.SP0IWSB1 = 0;

  if (SP0IM100.SP0IMMST > " ") /* sel spgm status to display*/
    set SP0IM100.SP0IMMST initialAttributes;
    if (SP0IM100.SP0IMMST != SP0IW01.SP0IWMST) /* change in select*/
      if (SP0IM100.SP0IMMST == "A" /* active status*/
       || SP0IM100.SP0IMMST == "C" /* complete*/
       || SP0IM100.SP0IMMST == "P" /* partial*/
       || SP0IM100.SP0IMMST == "F") /* finished & inactive*/
        SP0IS60(); /* select set*/
        if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
          SP0IS61(); /* load working stor.*/
          SP0IS69(); /* is there a starting spid?*/
          SP0IS62(); /* load 1st 14 to map*/
        else
          if (SQLCA.VAGen_SQLCODE == 911) /* database locked up*/
            converseLib.validationFailed(45);
          else
            SP0IS63(); /* log the abend*/
          end
        end
      else
        SP0IM100.SP0IMMSG = "VALID ENTRIES: \"A\",\"C\",\"P\" OR \"F\" ";
        SP0IW01.SP0IWMST = " "; /* reset stat*/
        set SP0IM100.SP0IMMST modified, bold; /* requested status invalid*/
      end
    else
      if (SP0IM100.SP0IPROG > " ") /* adjust top of screen*/
        SP0IS69(); /* is there a starting spid?*/
        SP0IS62(); /* load 1st 14 to map*/
        SP0IM100.SP0IPROG = " ";
      else
        if (converseVar.eventKey is pf7) /* scroll back*/
          SP0IS65();
        else
          if (converseVar.eventKey is pf8) /* scroll forward*/
            SP0IS64();
          else
            SP0IM100.SP0IPROG = "  A";
            SP0IS69(); /* force to top*/
            SP0IS62(); /* load 1st 14 to map*/
            SP0IM100.SP0IPROG = " ";
          end
        end
      end
    end
  else
    SP0IM100.SP0IMMSG = "SELECT TYPE OF SALES PROGRAMS FOR VIEWING";
  end


  converse SP0IM100 ;



  set SP0IM100.SP0IMMST initialAttributes;
  SP0IS67(); /* fast path?*/

  SP0IS68(); /* selection made?*/



end // end SP0I600

// PRODUCT DATA
Function SP0IS1S()


   /* ************************************************************/
      /* PRODUCT INCLUSIONS AND EXCEPTIONS*/
   /* ************************************************************/


  call "IO0110" ("SN", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP5REC.SP5PRODI == "I") /* INCLUDED PRODUCTS*/
      SP0IW01.SP0IWPRI = "Y";
    end
    if (SP5REC.SP5PRODI == "E")
      SP0IW01.SP0IWPRE = "Y"; /* EXCLUDED PRODUCTS*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0I   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0IS1S ";
      TA1REC.TA1LOCAT[3] = "IO00110 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0IM010";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VPROD001";
      TA1TBLKE = SP5REC.SP5KEY;
      SP0IS24(); /* db2 error routine*/
      SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0IS1S

// db2 error routine ..
Function SP0IS24()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0IS24

// initial edit routine..
Function SP0IS31()


  SP0IM200.SP0IMMSG = " ";

  set SP0IM200.SP1ID cursor, normal;

  SP0IS35(); /* check for fastpathing*/
  SP0IS38(); /* check for pfkey*/


  if (SP0IM200.SP1ID != SP0IW01.SP0IWDIS) /* sales program change?*/
    if (SP0IM200.SP1ID == " ")
      converseLib.clearScreen();
      set SP0IM200 initial;
      set SP0IM200.SP1ID cursor, bold;
      converseLib.validationFailed(2);
      SP0IW01.SP0IWDIS = "****";
      return;
    end
  end


  SP0IS37(); /* transfer if screen selection*/


  SP0IM200.SP0IMMSG = "SELECT DETAIL FOR THIS SALES PROGRAM";



end // end SP0IS31

// fast pathing?
Function SP0IS35()


   /* ************************************************************/
      /* valid attention keys/ fast pathing*/
   /* ************************************************************/

  if (SP0IM200.CATOAP != " ")
    COMMAREA.CATOAP = SP0IM200.CATOAP;
    COMMAREA.CAITEM = SP0IM200.CAITEM;
    XSEXIT();
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    SP0IM200.CATOAP = " ";
    SP0IM200.CAITEM = " ";
    converseLib.validationFailed(99);
    exit stack;
  end


end // end SP0IS35

// validate selections
Function SP0IS37()


   /* ************************************************************/
      /* transfer if an option was selected*/
   /* ************************************************************/

  COMMAREA.CAFROMAP = "SP0I";

  if (SP0IM200.SP0IMOP1 != " ") /* order type*/
    COMMAREA.CATOAP = "SP0T";
    COMMAREA.CAITEM = SP0IM200.SP1ID;
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP2 != " ") /* in store promo*/
    COMMAREA.CATOAP = "SP0S";
    COMMAREA.CAITEM = SP0IM200.SP1ID;
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP3 != " ") /* products*/
    COMMAREA.CATOAP = "SP0P";
    COMMAREA.CAITEM = SP0IM200.SP1ID;
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP4 != " ") /* product family codes*/
    COMMAREA.CATOAP = "SP0P";
    SP0IW01.SP0IWID1 = SP0IM200.SP1ID; /* hold spid*/
    SP0IW01.SP0IWL1 = "B"; /* hold application part*/
    COMMAREA.CAITEM = SP0IW01.SP0IWLOC; /* move entire key*/
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP5 != " ") /* product sport activity codes*/
    COMMAREA.CATOAP = "SP0P";
    SP0IW01.SP0IWID1 = SP0IM200.SP1ID; /* hold spid*/
    SP0IW01.SP0IWL1 = "C"; /* hold application part*/
    COMMAREA.CAITEM = SP0IW01.SP0IWLOC; /* move entire key*/
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP7 != " ") /* customers*/
    COMMAREA.CATOAP = "SP0R";
    SP0IW01.SP0IWID1 = SP0IM200.SP1ID; /* hold spid*/
    SP0IW01.SP0IWL1 = "A"; /* hold application part*/
    COMMAREA.CAITEM = SP0IW01.SP0IWLOC; /* move entire key*/
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP8 != " ") /* customer acct types*/
    COMMAREA.CATOAP = "SP0R";
    SP0IW01.SP0IWID1 = SP0IM200.SP1ID; /* hold spid*/
    SP0IW01.SP0IWL1 = "B"; /* hold application part*/
    COMMAREA.CAITEM = SP0IW01.SP0IWLOC; /* move entire key*/
    XSEXIT();
  end

  if (SP0IM200.SP0IMOP9 != " ") /* spec. cust. groups*/
    COMMAREA.CATOAP = "SP0R";
    SP0IW01.SP0IWID1 = SP0IM200.SP1ID; /* hold spid*/
    SP0IW01.SP0IWL1 = "C"; /* hold application part*/
    COMMAREA.CAITEM = SP0IW01.SP0IWLOC; /* move entire key*/
    XSEXIT();
  end



end // end SP0IS37

// validate attention keys..
Function SP0IS38()


   /* ************************************************************/
      /* valid attention keys*/
   /* ************************************************************/


  if (converseVar.eventKey is pa2 /* cancel application*/
   || converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0M";
    XSEXIT();
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    exit stack;
  end

  if (converseVar.eventKey is pf1) /* transfer to help facility*/
    converseLib.clearScreen();
    set SP0IM200 initial;
    XSPF1();
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    exit stack;
  end

  if (converseVar.eventKey is pf4) /* transfer to master menu*/
    converseLib.clearScreen();
    set SP0IM200 initial;
    XSPF4();
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    exit stack;
  end


  if (converseVar.eventKey is pf5) /* inquire on sales programs*/
    exit stack;
  end



end // end SP0IS38

// process next sales prog.
Function SP0IS40()


  SP0IW01.SP0IWDIS = SP0IM200.SP1ID;

  converseLib.clearScreen();
  set SP0IM200 initial;
  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0IW01.SP0IWDIS;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0IM200 withV60Compat;
    SP0IM200.SP0IMFL6 = "N";
    SP0IM200.SP0IMFLA = "N";
    SP0IS42(); /* set option flags*/
    SP0IS45(); /* validate quality code*/
    SP0IS46(); /* validate life cycle code*/
    SP0IS47(); /* validate nike dept*/
    SP0IS48(); /* validate status*/
    if (SP1REC.SP1LIFEF == "Y")
      SP0IS49(); /* get seasonal tier unit of meas.*/
    else
      SP0IM200.SP6UOMI = " ";
    end
    exit stack;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SP0IM200.SP0IMMSG = " INVALID SALES PROGRAM";
    else
      SP0IW01.SP0IWDIS = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0I";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0IS40";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0IM200";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0IS24();
      SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0IS40

// set option flags....
Function SP0IS42()


   /* ************************************************************/
      /* this statement group is used to find out which*/
      /* options have associated data- change: 9/87 for flag9 ssj*/
   /* ************************************************************/

  if (SP1REC.SP1OTIND == "Y") /* any s.p. order type info?*/
    SP0IM200.SP0IMFL1 = "*";
  end

  if (SP1REC.SP1COM1 != " "
   || SP1REC.SP1COM2 != " "
   || SP1REC.SP1COM3 != " "
   || SP1REC.SP1COM4 != " "
   || SP1REC.SP1COM5 != " "
   || SP1REC.SP1COM6 != " "
   || SP1REC.SP1COM7 != " "
   || SP1REC.SP1COM8 != " "
   || SP1REC.SP1COM9 != " "
   || SP1REC.SP1COM10 != " "
   || SP1REC.SP1COM11 != " "
   || SP1REC.SP1COM12 != " "
   || SP1REC.SP1COM13 != " "
   || SP1REC.SP1COM14 != " ")
    SP0IM200.SP0IMFL2 = "*";
  end


   /* ------------ PRODUCTS (INCLUDED/EXCLUDED)-------------*/
  SP0IW01.SP0IWPRI = "N"; /* PRODUCTS INCLUDED FLAG*/
  SP0IW01.SP0IWPRE = "N"; /* PRODUCTS EXCLUDED FLAG*/

  SP5REC.SP1ID = SP0IM200.SP1ID;
  call "IO0110" ("SS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    while (SQLCA.VAGen_SQLCODE == +0)
      SP0IS1S(); /* GET PRODUCT DATA*/
    end
    if (SP0IW01.SP0IWPRI == "Y") /* INCLUDED PRODUCTS*/
      SP0IM200.SP0IMFL3 = "*";
    end
    if (SP0IW01.SP0IWPRE == "Y") /* EXCLUDED PRODUCTS*/
      SP0IM200.SP0IMFLB = "*";
    end

    call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0I   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0IS42 ";
    TA1REC.TA1LOCAT[3] = "IO00110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0IM200";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VPROD001";
    TA1TBLKE = SP5REC.SP5KEY;
    SP0IS24(); /* db2 error routine*/
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    exit stack;
  end

  call "IO0110" ("CS", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------ PRODUCT CATEGORY ------------------------*/

  SP0IW01.SP0IWSB1 = 1; /* any s.p. family codes?*/
  while (SP0IW01.SP0IWSB1 < 21
   && SP1REC.XPCCD[SP0IWSB1] != "  ")
    SP0IM200.SP0IMFL4 = "*";
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
  end

   /* ------------ SPORT ACTIVITY  -------------------------*/

  SP0IW01.SP0IWSB1 = 1; /* any s.p. sport act codes?*/
  while (SP0IW01.SP0IWSB1 < 21
   && SP1REC.XSPCD[SP0IWSB1] != "  ")
    if (SP1REC.XSPCD[SP0IWSB1] == "**")
      /* next sentence*/
    else
      SP0IM200.SP0IMFL5 = "*";
    end
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
  end


  SP0IW01.SP0IWSB1 = 1;
  while (SP0IW01.SP0IWSB1 < 21)
    if (SP1REC.XSPCD[SP0IWSB1] != "  ") /* changed 4/19/88 ssj*/
      if (SP1REC.XSPCD[SP0IWSB1] == "**") /* do all products qualify?*/
        SP0IM200.SP0IMFL6 = "Y";
      else
        SP0IM200.SP0IMFL5 = "*";
      end
    end
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
  end

  SP0IW01.SP0IWAPF = SP0IM200.SP0IMFL6;

  SP4REC.SP1ID = SP0IM200.SP1ID;
  SP4REC.KUCCOID = 0;
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* any s.p. customer id's?*/
    call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      SP0IM200.SP0IMFL7 = "*";
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0I   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0IS42 ";
        TA1REC.TA1LOCAT[3] = "IO0100  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0IM200";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1TBLKE = SP4REC.SP4KEY;
        SP0IS24(); /* db2 error routine*/
        SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
        exit stack;
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0I   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0IS42 ";
    TA1REC.TA1LOCAT[3] = "IO0100  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0IM200";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = SP4REC.SP4KEY;
    SP0IS24(); /* db2 error routine*/
    SP0IM200.SP0IMMSG = COMMAREA.CAMSG;
    exit stack;
  end
  call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  SP0IW01.SP0IWSB1 = 1; /* any s.p. cust acct classes?*/
  while (SP0IW01.SP0IWSB1 < 21)
    if (SP1REC.XAUCD[SP0IWSB1] != "  ")
      SP0IM200.SP0IMFL8 = "*";
    end
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
  end

  SP0IW01.SP0IWSB1 = 1; /* any s.p. spec cust groups?*/
  while (SP0IW01.SP0IWSB1 < 11)
    if (SP1REC.XSGCD[SP0IWSB1] != "  ")
      if (SP1REC.XSGCD[SP0IWSB1] == "**") /* do all customers qualify?*/
        SP0IM200.SP0IMFLA = "Y";
      else
        SP0IM200.SP0IMFL9 = "*";
      end
    end
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
  end

  SP0IW01.SP0IWACF = SP0IM200.SP0IMFLA;



end // end SP0IS42

// validate quality code..
Function SP0IS45()


   /* *******************************************************/
      /* if valid quality code, the quality description is moved*/
      /* to sp0im200.xqadesc*/
   /* *******************************************************/

  if (SP0IM200.XQACD == " ")
    SP0IM200.XQADESC = "BLANK";
  else

    if (SP0IM200.XQACD in XQATBL.XQACD)
      SP0IM200.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex == 0)
      set SP0IM200.XQACD cursor, modified, bold;
      SP0IM200.XQADESC = "INVALID QUALITY CODE";
      converseLib.validationFailed(7);
      return;
    end

       /* *********************************************/
        /* the quality code was found.  is it active?*/
       /* *********************************************/

    if (XQATBL.XXXSTAT[sysVar.arrayIndex] != "A")
      set SP0IM200.XQACD cursor, modified, bold;
      SP0IM200.XQADESC = "NOT AN ACTIVE QUALITY CODE";
      converseLib.validationFailed(7);
      return;
    end
  end


end // end SP0IS45

// validate life cycle code..
Function SP0IS46()


   /* *******************************************************/
      /* life cycle code ? description moved to map*/
   /* *******************************************************/
  SP0IW01.SP0IWSB1 = 1;
  while (SP0IW01.SP0IWSB1 < 4)
    if (SP0IM200.XLCCD[SP0IWSB1] == " ")
      SP0IM200.XLCDESC[SP0IWSB1] = "BLANK";
    else
      if (SP0IM200.XLCCD[SP0IWSB1] in XLCTBL.XLCCD)
        SP0IM200.XLCDESC[SP0IWSB1] = XLCTBL.XLCDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        set SP0IM200.XLCCD[SP0IWSB1] cursor, modified, bold;
        SP0IM200.XLCDESC[SP0IWSB1] = "INVALID ";
        converseLib.validationFailed(6);
      else
        if (XLCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          set SP0IM200.XLCCD[SP0IWSB1] cursor, modified, bold;
          SP0IM200.XLCDESC[SP0IWSB1] = "INACTIVE L.CYCLE";
          converseLib.validationFailed(6);
        end
      end
    end
    SP0IWSB1 = SP0IWSB1 + 1;
  end



end // end SP0IS46

// validate nike dept ..
Function SP0IS47()


   /* *******************************************************/
      /* valid nike dept code? move dept desc. to map.*/
   /* *******************************************************/

  if (SP0IM200.XNDCD == " ")
    SP0IM200.XNDDESC = "BLANK";
  else

    if (SP0IM200.XNDCD in XNDTBL.XNDCD)
      SP0IM200.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
    end

    if (sysVar.arrayIndex == 0)
      set SP0IM200.XNDCD cursor, modified, bold;
      SP0IM200.XNDDESC = "INVALID NIKE DEPT CODE";
      converseLib.validationFailed(8);
      return;
    end

      /* *************************************************/
        /* the nike dept code was found.  is it active?*/
      /* *************************************************/

    if (XNDTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      set SP0IM200.XNDCD cursor, modified, bold;
      SP0IM200.XNDDESC = "NOT AN ACTIVE NIKE DEPT CODE";
      converseLib.validationFailed(8);
      return;
    end
  end



end // end SP0IS47

// validate status ..
Function SP0IS48()


  if (SP0IM200.SP1STAT == "P")
    SP0IM200.SP0IMSTD = "PARTIAL";
  end

  if (SP0IM200.SP1STAT == "C")
    SP0IM200.SP0IMSTD = "COMPLETE";
  end

  if (SP0IM200.SP1STAT == "A")
    SP0IM200.SP0IMSTD = "ACTIVE";
  end

  if (SP0IM200.SP1STAT == "I")
    SP0IM200.SP0IMSTD = "INACTIVE";
  end

  if (SP0IM200.SP1STAT == "F")
    SP0IM200.SP0IMSTD = "FINISHED";
  end


end // end SP0IS48

// sp6rec uom from tiered disc
Function SP0IS49()


   /* ************************************************************/
      /* get sp6rec for unit of measure value.*/
   /* ************************************************************/

  set SP6REC empty;
  SP6REC.SP1ID = SP1REC.SP1ID; /* sales program id*/
  SP6REC.XOTCD = "**";


  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SP0IM200.SP6UOMI = SP6REC.SP6UOMI; /* move unit of measure to map*/
  end



end // end SP0IS49

Function SP0IS60()


    /* ----------------------------------------------------*/
                    /* load key*/
    /* ----------------------------------------------------*/

  SP0IW01.SP0IWMST = SP0IM100.SP0IMMST; /* hold request*/
  SP0IW01.SP0IWPRG = SP0IM100.SP0IPROG; /* hold spid start*/
  set SP0IM100 empty; /* reset map*/
  SP0IM100.SP0IMTDT = VGVar.currentShortGregorianDate;
  SP0IM100.SP0IMMST = SP0IW01.SP0IWMST; /* move back*/
  SP0IM100.SP0IPROG = SP0IW01.SP0IWPRG; /* move back spid start*/
  SP0IW01.SP0IWPRG = " ";
  set SP0IW01 empty;
  SP0IW01.SP0IWMST = SP0IM100.SP0IMMST; /* hold request*/

  set SP0IW02 empty;
  set SP1REC empty;
  set SQLCA empty;
  set TA1REC empty;

  if (SP0IM100.SP0IMMST == "A")
    SP0IW02.SP0IWST1 = "A"; /* ACTIVE STATUS*/
    SP0IW02.SP0IWST2 = "*"; /* place holder*/
    SP0IW02.SP0IWST3 = "*"; /* place holder*/
  else
    if (SP0IM100.SP0IMMST == "P")
      SP0IW02.SP0IWST1 = "P"; /* partial status*/
      SP0IW02.SP0IWST2 = "*"; /* place holder*/
      SP0IW02.SP0IWST3 = "*"; /* place holder*/
    else
      if (SP0IM100.SP0IMMST == "C")
        SP0IW02.SP0IWST1 = "C"; /* complete status*/
        SP0IW02.SP0IWST2 = "*"; /* place holder*/
        SP0IW02.SP0IWST3 = "*"; /* place holder*/
      else
        SP0IW02.SP0IWST1 = "I"; /* incomplete status*/
        SP0IW02.SP0IWST2 = "F"; /* finished status*/
        SP0IW02.SP0IWST3 = "*"; /* place holder*/
      end
    end
  end

  SP0IW02.SP0IWSOP = "SS"; /* select set*/


  call "IO0070" (SP0IW02, SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* obtain sales pgms.*/



end // end SP0IS60

// sp1rec list for browse routine
Function SP0IS61()


   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the sales programs from the selected*/
      /* set to the working storage array.  when no more*/
      /* records are in the set (sqlcode = 100) get out of the*/
      /* while loop.*/
   /* ************************************************************/

  SP0IW01.SP0IWSB1 = 0;

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0IW01.SP0IWSB1 = 0;
    while (SP0IW01.SP0IWSB1 < 500)
      call "IO0070" ("SN", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
        SP0IW01.SP1ID[SP0IWSB1] = SP1REC.SP1ID;
        SP0IW01.SP1NM[SP0IWSB1] = SP1REC.SP1NM;
        SP0IW01.SP1ABRV[SP0IWSB1] = SP1REC.SP1ABRV;
        SP0IW01.XNDCD[SP0IWSB1] = SP1REC.XNDCD;
        SP0IW01.SP1STAT[SP0IWSB1] = SP1REC.SP1STAT;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          SP0IW01.SP0IWTSZ = SP0IW01.SP0IWSB1;
          SP0IW01.SP0IWSB1 = 999;
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SP0I   ";
          TA1REC.TA1LOCAT[1] = "A       ";
          TA1REC.TA1LOCAT[2] = "SP0IS11 ";
          TA1REC.TA1LOCAT[3] = "IO0070  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SP0IM100";
          TA1REC.TA1DBASE = "DSPGM.";
          TA1REC.TA1TBLVU = "VSPGM001";
          TA1TBLKE = SP1REC.SP1KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0I   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0IS11 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0IM100";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  call "IO0070" ("CS", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};


  if (SP0IW01.SP0IWSB1 == 999)
     /* ...... less than 500 entries*/
  else
    if (SP0IW01.SP0IWSB1 >= 500)
      SP0IW01.SP0IWTSZ = 500; /* size exceeds 500 !*/
      SP0IW01.SP0IWSB1 = 999;
    end
  end



end // end SP0IS61

// to load 1st 14 sales programs*
Function SP0IS62()



   /* ************************************************************/
      /* select the first 14 sales programs and display on map*/
         /* *  exit for a file i/o error in sp0is60*/
   /* ************************************************************/

  if (converseVar.validationMsgNum != +0)
    return;
  end

  SP0IM100.SP0IMMSG = "USE PF7 & PF8 TO SCROLL --  OR EXIT ";

  SP0IW01.SP0IWSB1 = 0;


  while (SP0IW01.SP0IWSB1 < 14)
    SP0IW01.SP0IWPOS = SP0IW01.SP0IWPOS + 1;
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
    if (SP0IW01.SP0IWPOS > SP0IW01.SP0IWTSZ)
      SP0IM100.SP0IMOP[SP0IWSB1] = " ";
      set SP0IM100.SP0IMOP[SP0IWSB1] protect, invisible;
      SP0IM100.SP1ID[SP0IWSB1] = " ";
      SP0IM100.SP1NM[SP0IWSB1] = " ";
      SP0IM100.SP1ABRV[SP0IWSB1] = " ";
      SP0IM100.XNDCD[SP0IWSB1] = " ";
      SP0IM100.SP1STAT[SP0IWSB1] = " ";
    else
      if (SP0IW01.SP1ID[SP0IWPOS] != " ")
        SP0IM100.SP0IMOP[SP0IWSB1] = " ";
        set SP0IM100.SP0IMOP[SP0IWSB1] initialAttributes;
        SP0IM100.SP1ID[SP0IWSB1] = SP0IW01.SP1ID[SP0IWPOS];
        SP0IM100.SP1NM[SP0IWSB1] = SP0IW01.SP1NM[SP0IWPOS];
        SP0IM100.SP1ABRV[SP0IWSB1] = SP0IW01.SP1ABRV[SP0IWPOS];
        SP0IM100.XNDCD[SP0IWSB1] = SP0IW01.XNDCD[SP0IWPOS];
        SP0IM100.SP1STAT[SP0IWSB1] = SP0IW01.SP1STAT[SP0IWPOS];
      end
    end
  end

  if (SP0IW01.SP0IWTSZ == 0)
    SP0IM100.SP0IMMSG = "NO SALES PROGRAMS CURRENTLY EXIST.";
  end


  if (SP0IW01.SP0IWTSZ == 500)
    SP0IM100.SP0IMMSG = "SALES PROGRAMS EXCEED 500 - PARTIAL DISPLAY";
  end



end // end SP0IS62

Function SP0IS63()


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SP0I";
  TA1REC.TA1LOCAT[1] = "SS";
  TA1REC.TA1LOCAT[2] = "SP0IS13";
  TA1REC.TA1LOCAT[3] = "IO0070 ";
  TA1REC.TA1LOCAT[4] = " ";
  TA1REC.TA1LOCAT[4] = "SP0IM400";
  TA1REC.TA1DBASE = "DSPGM. ";
  TA1REC.TA1TBLVU = "VSPGM001";
  TA1REC.TA1TBLKE = SP0IM100.SP0IMMST;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  XSPF4();
  SP0IM100.SP0IMMSG = COMMAREA.CAMSG;



end // end SP0IS63

// forward scroll of sales progs
Function SP0IS64()

    /* *********************************************/
      /* sp0is14 used to scroll forward*/
    /* *********************************************/

  if (SP0IW01.SP0IWTSZ <= 14)
    SP0IM100.SP0IMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end


  if (SP0IM100.SP0IMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0IW01.SP0IWTSZ > 14)
    while (SP0IW01.SP0IWSB1 < 14)
      SP0IW01.SP0IWPOS = SP0IW01.SP0IWPOS + 1;
      SP0IW01.SP0IWSB1 = 1 + SP0IW01.SP0IWSB1;
      if (SP0IW01.SP0IWPOS > SP0IW01.SP0IWTSZ)
        SP0IM100.SP0IMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
        SP0IM100.SP1ID[SP0IWSB1] = " ";
        SP0IM100.SP1NM[SP0IWSB1] = " ";
        SP0IM100.SP1ABRV[SP0IWSB1] = " ";
        SP0IM100.XNDCD[SP0IWSB1] = " ";
        SP0IM100.SP1STAT[SP0IWSB1] = " ";
        SP0IM100.SP0IMOP[SP0IWSB1] = " ";
        set SP0IM100.SP0IMOP[SP0IWSB1] protect, invisible;
      else
        SP0IM100.SP0IMMSG = " ";
        SP0IM100.SP1ID[SP0IWSB1] = SP0IW01.SP1ID[SP0IWPOS];
        SP0IM100.SP1NM[SP0IWSB1] = SP0IW01.SP1NM[SP0IWPOS];
        SP0IM100.SP1ABRV[SP0IWSB1] = SP0IW01.SP1ABRV[SP0IWPOS];
        SP0IM100.XNDCD[SP0IWSB1] = SP0IW01.XNDCD[SP0IWPOS];
        SP0IM100.SP1STAT[SP0IWSB1] = SP0IW01.SP1STAT[SP0IWPOS];
        SP0IM100.SP0IMOP[SP0IWSB1] = " ";
        set SP0IM100.SP0IMOP[SP0IWSB1] initialAttributes;
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0IW01.SP0IWPOS == SP0IW01.SP0IWTSZ)
    SP0IM100.SP0IMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0IS64

// back. scroll for sales prog
Function SP0IS65()


     /* ************************************/
      /* sp0is15 used to scroll backward*/
     /* ************************************/

  if (converseVar.eventKey is pf7)
    SP0IW01.SP0IWPOS = SP0IW01.SP0IWPOS - 28;
    if (SP0IW01.SP0IWPOS < 0)
      SP0IW01.SP0IWPOS = 0;
    end
  end


  if (SP0IM100.SP0IMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    while (SP0IW01.SP0IWSB1 < 14)
      SP0IW01.SP0IWPOS = SP0IW01.SP0IWPOS + 1;
      SP0IW01.SP0IWSB1 = 1 + SP0IW01.SP0IWSB1;
      if (SP0IW01.SP0IWPOS > SP0IW01.SP0IWTSZ)
        SP0IM100.SP1ID[SP0IWSB1] = " ";
        SP0IM100.SP1NM[SP0IWSB1] = " ";
        SP0IM100.SP1ABRV[SP0IWSB1] = " ";
        SP0IM100.XNDCD[SP0IWSB1] = " ";
        SP0IM100.SP1STAT[SP0IWSB1] = " ";
        SP0IM100.SP0IMOP[SP0IWSB1] = " ";
        set SP0IM100.SP0IMOP[SP0IWSB1] protect, invisible;
        SP0IM100.SP0IMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
      else
        SP0IM100.SP1ID[SP0IWSB1] = SP0IW01.SP1ID[SP0IWPOS];
        SP0IM100.SP1NM[SP0IWSB1] = SP0IW01.SP1NM[SP0IWPOS];
        SP0IM100.SP1ABRV[SP0IWSB1] = SP0IW01.SP1ABRV[SP0IWPOS];
        SP0IM100.XNDCD[SP0IWSB1] = SP0IW01.XNDCD[SP0IWPOS];
        SP0IM100.SP1STAT[SP0IWSB1] = SP0IW01.SP1STAT[SP0IWPOS];
        SP0IM100.SP0IMOP[SP0IWSB1] = " ";
        set SP0IM100.SP0IMOP[SP0IWSB1] initialAttributes;
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0IW01.SP0IWPOS == 14)
    SP0IM100.SP0IMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0IS65

// edit for fast path, data mod..
Function SP0IS67()



   /* *********************************************************/
      /* edit for fast path or pf keys*/
   /* *********************************************************/

  if (SP0IM100.CATOAP != " ")
    COMMAREA.CATOAP = SP0IM100.CATOAP;
    COMMAREA.CAITEM = SP0IM100.CAITEM;
    XSEXIT();
    SP0IM100.SP0IMMSG = COMMAREA.CAMSG;
    SP0IM100.CATOAP = " ";
    SP0IM100.CAITEM = " ";
  end


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pa2)
    /* valid ! !*/
  else
    converseLib.validationFailed(1);
  end


  if (converseVar.eventKey is pf1) /* help*/
    XSPF1();
    SP0IM100.SP0IMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
  end


  if (converseVar.eventKey is pf3) /* master menu*/
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAFROMAP = "SP0I";
    COMMAREA.CAITEM = "  ";
    XSEXIT();
  end


  if (converseVar.eventKey is pf4) /* master menu*/
    XSPF4();
    SP0IM100.SP0IMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
  end


  if (converseVar.eventKey is pa2) /* clear field & return*/
    SP0IM100.SP0IPROG = "  ";
  end



end // end SP0IS67

// was an option selected ?
Function SP0IS68()



   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was either an  ' ' or 's' select.*/
   /* ************************************************************/

  SP0IW01.SP0IWSB1 = 0;

  while (SP0IW01.SP0IWSB1 < 14)
    SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
    if (SP0IM100.SP1ID[SP0IWSB1] == " ") /* end of table*/
      SP0IM100.SP0IMOP[SP0IWSB1] = " ";
      SP0IM100.SP1ID[SP0IWSB1] = " ";
    end
  end

  if ("S" in SP0IM100.SP0IMOP)
    SP0IW01.SP0IWSB2 = sysVar.arrayIndex;
    SP0IW01.SP0IWPOS = sysVar.arrayIndex;
    SP0IM100.SP0IMMSG = " ";
    SP0IM100.SP0IMOP[SP0IWSB2] = " ";
    COMMAREA.CAITEM = SP0IM100.SP1ID[sysVar.arrayIndex];

  else
    COMMAREA.CAITEM = " ";
    SP0IW01.SP0IWSB2 = 1;
    while (SP0IW01.SP0IWSB2 <= 14)
      if (SP0IM100.SP0IMOP[SP0IWSB2] != " ")
         /* invalid character*/
        SP0IW01.SP0IWVF = "N";
        set SP0IM100.SP0IMOP[SP0IWSB2] cursor, modified, bold;
        set SP0IM100.SP1ID[SP0IWSB2] skip, modified, bold;
        converseLib.validationFailed(3);
      end
      SP0IW01.SP0IWSB2 = SP0IW01.SP0IWSB2 + 1;
    end
  end



end // end SP0IS68

// program id entered
Function SP0IS69()


   /* ************************************************************/
   /* check to see if the program id entered is on the table.  if*/
   /* not, start display at next sales program.*/
   /* ************************************************************/


  if (SP0IM100.SP0IPROG > " " /* special starting spgm*/
   && SP0IW01.SP0IWTSZ > 0)   /* work array exists*/
    SP0IW01.SP0IWPOS = 0;
    SP0IW01.SP0IWSB1 = 1;
    SP0IW01.SP0IWSW1 = "N";
    while (SP0IW01.SP0IWSB1 <= 500 /* tops out at 500*/
     && SP0IW01.SP0IWSW1 == "N")
      if (SP0IW01.SP0IWSB1 <= SP0IW01.SP0IWTSZ /* within the array*/
       && SP0IW01.SP1ID[SP0IWSB1] >= SP0IM100.SP0IPROG)
        SP0IW01.SP0IWPOS = SP0IW01.SP0IWSB1;
        SP0IW01.SP0IWSW1 = "Y";
      end
      SP0IW01.SP0IWSB1 = SP0IW01.SP0IWSB1 + 1;
    end
  end

  if (SP0IW01.SP0IWPOS > 0)
    SP0IW01.SP0IWPOS = SP0IW01.SP0IWPOS - 1;
  end



end // end SP0IS69

//*** RECORD=SP0IW01 ****
// ; maintenance record for sp0i
// ***********************
Record SP0IW01 type basicRecord
  10 SP0IWUPF SP0IWUPF ; 
  10 SP0IWSW1 SP0IWSW1 ; 
  10 SP0IWPRI SP0IWPRI ; 
  10 SP0IWPRE SP0IWPRE ; 
  10 SP0IWPRG SP0IWPRG ; 
  10 SP0IWVF SP0IWVF ; 
  10 SP0IWVF1 SP0IWVF1 ; 
  10 SP0IWHDM SP0IWHDM ; 
  10 SP0IWSDM SP0IWSDM ; 
  10 SP0IWDIS SP0IWDIS ; 
  10 SP0IWACF SP0IWACF ; 
  10 SP0IWAPF SP0IWAPF ; 
  10 SP0IWSB1 SP0IWSB1 ; 
  10 SP0IWSB2 SP0IWSB2 ; 
  10 SP0IWTSZ SP0IWTSZ ; 
  10 SP0IWPOS SP0IWPOS ; 
  10 SP5KEY SP5KEY ; 
  10 SP0IWTL4 SP0IWTL4 ; 
    15 SP1ID SP1ID [500] ; 
    15 SP1STAT SP1STAT [500] ; 
    15 SP1NM SP1NM [500] ; 
    15 SP1ABRV SP1ABRV [500] ; 
    15 XNDCD XNDCD [500] ; 
  10 SP4KEY SP4KEY ; 
  10 SP2DIND SP2DIND ; 
  10 SP0IWLOC SP0IWLOC ; 
    15 SP0IWID1 SP0IWID1 ; 
    15 SP0IWL1 SP0IWL1 ; 
    15 * char(15) ; 
  10 SP0IWMST SP0IWMST ; 
end // end SP0IW01

//*** RECORD=SP0IW02 ****
// ************************************************************
// *** CREATED: 06-29-88                 BY: s.job          ***
// ***                                                      ***
// *** USED BY: sp0i                                        ***
// *** PURPOSE: a working storage area for this application.***
// ************************************************************
// ***********************
Record SP0IW02 type basicRecord
  5 SP0IWGR2 SP0IWGR2 ; 
    10 SP0IWSOP SP0IWSOP ; 
    10 SP0IWST1 SP0IWST1 ; 
    10 SP0IWST2 SP0IWST2 ; 
    10 SP0IWST3 SP0IWST3 ; 
end // end SP0IW02

// w.s. all company flag#
DataItem SP0IWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag#
DataItem SP0IWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id#
DataItem SP0IWDIS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level#
DataItem SP0IWGR2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt#
DataItem SP0IWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id to pass to next app#
DataItem SP0IWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part of next app.#
DataItem SP0IWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to next app.#
DataItem SP0IWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales prog. status to browse#
DataItem SP0IWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table position#
DataItem SP0IWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCTS EXCLUDED
DataItem SP0IWPRE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold top of spgm list
DataItem SP0IWPRG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCTS INCLUDED
DataItem SP0IWPRI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1#
DataItem SP0IWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2#
DataItem SP0IWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt#
DataItem SP0IWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection option#
DataItem SP0IWSOP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first  status#
DataItem SP0IWST1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second status#
DataItem SP0IWST2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// third  status#
DataItem SP0IWST3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found it switch
DataItem SP0IWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s.p. browse table#
DataItem SP0IWTL4 char(22500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table size#
DataItem SP0IWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag#
DataItem SP0IWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry#
DataItem SP0IWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del#
DataItem SP0IWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

