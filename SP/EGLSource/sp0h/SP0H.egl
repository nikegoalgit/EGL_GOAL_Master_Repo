package sp0h;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import sp.common.*;
import ta.common.*;
//*** PROGRAM=SP0H ****
// sales program instore promo update
// 
// overview:   module called from sp0u thru forced fastpath or
//      directly thru regular fast pathing.  this module is
//      responsible for updating in store promo.
// 
// date created:
//      4-13-87
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// may 1987   ssjob     this function was separated from
//                      original sp0u and rewritten.
// 12-15-88   jwood     added noncsp option to calls
// 12-15-88   jwood     added xssegtr logic
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGES
// ------- -------- ------ -----------------------------------
// Y2KFIX  11/04/97 WSQUIR Y2K MODIFICATIONS MADE TO SP0HS33
//                         STATEMENT GROUP.
// *********************
Program SP0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SP0HW01 SP0HW01; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SP0HM.SP0HM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0H020: SP0H020();



    goto SP0H030;



    SP0H030: SP0H030();



    goto SP0H030;


  end // end main
end // end SP0H

// initialization and reset
Function SP0H020()


   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the in-store promo comments for this s.p.*/
      /* select any in-store promo comments and show on map*/
      /* sp0hm030.*/
   /* ************************************************************/
  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set SP0HM030 initial; /* clear map*/
  set SP1REC empty; /* clear record area*/

  if (COMMAREA.CAITEM == " ") /* no initial sales prog.id*/
    SP0HS21(); /* set up receive screen*/
  else
    if (COMMAREA.CAITEM != " ")
      SP0HW01.SP1ID = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " ";
      SP0HS22(); /* verify sales program exists*/
    end
  end



end // end SP0H020

// in-store promo comments
Function SP0H030()



   /* ************************************************************/
      /* this process is used to converse the in-store promo*/
      /* comments screen for sales programs.*/
   /* ************************************************************/



  converse SP0HM030 ;


  SP0HS35(); /* reset map*/


  SP0HW01.SP0HWVF = "N"; /* reset mdt flag*/

  if (SP0HM030.SP1ID == " ")
    SP0HS32(); /* validate attention keys*/
    SP0HS21(); /* set up receive screen*/
  else
    if (SP0HW01.SP1ID != SP0HM030.SP1ID) /* change in s.p.*/
      SP0HW01.SP1ID = SP0HM030.SP1ID;
      SP0HS22(); /* verify sales prog.exists*/
    else
      SP0HS31(); /* check for modified data*/
      SP0HS32(); /* validate attention keys*/
      if (SP0HW01.SP0HWVF == "Y")
        SP0HS33(); /* update data base*/
      else
        SP0HM030.SP0HMMSG = "ENTER CHANGES OR EXIT";
      end
    end
  end



end // end SP0H030

// set up receive screen
Function SP0HS21()


  set SP0HM030.SP1ID cursor, bold;
  set SP0HM030.SP1NM protect, invisible;
  set SP0HM030.SP1STATX protect, invisible;
  set SP0HM030.SP1STAT protect, invisible;
  set SP0HM030.SP1COM1 protect, invisible;
  set SP0HM030.SP1COM2 protect, invisible;
  set SP0HM030.SP1COM3 protect, invisible;
  set SP0HM030.SP1COM4 protect, invisible;
  set SP0HM030.SP1COM5 protect, invisible;
  set SP0HM030.SP1COM6 protect, invisible;
  set SP0HM030.SP1COM7 protect, invisible;
  set SP0HM030.SP1COM8 protect, invisible;
  set SP0HM030.SP1COM9 protect, invisible;
  set SP0HM030.SP1COM10 protect, invisible;
  set SP0HM030.SP1COM11 protect, invisible;
  set SP0HM030.SP1COM12 protect, invisible;
  set SP0HM030.SP1COM13 protect, invisible;
  set SP0HM030.SP1COM14 protect, invisible;

  SP0HM030.SP0HMMSG = "ENTER SALES PROGRAM";



end // end SP0HS21

// validate sales program id
Function SP0HS22()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0HW01.SP1ID;
  SP0HM030.SP1ID = SP0HW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0HM030 withV60Compat;
    SP0HW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0U";
      COMMAREA.CAITEM = SP0HM030.SP1ID;
      XSEXIT();
    else
      SP0HW01.SP0HWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0H";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0HS20";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0HM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0HS34();
      SP0HM030.SP0HMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end


end // end SP0HS22

// check for modified data
Function SP0HS31()



   /* *********************************************************/
      /* this statement group is used to determine if any of*/
      /* the in-store promo comments have been modified.*/
   /* *********************************************************/



  if (SP0HM030.SP1COM1 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM2 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM3 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM4 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM5 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM6 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM7 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM8 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM9 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM10 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM11 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM12 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM13 is modified)
    SP0HW01.SP0HWVF = "Y";
  end

  if (SP0HM030.SP1COM14 is modified)
    SP0HW01.SP0HWVF = "Y";
  end


end // end SP0HS31

// validate attention keys
Function SP0HS32()



   /* *********************************************************/
      /* this statement group is used to validate fast path/*/
      /* pf key usage.  fast path cannot be used if data has*/
      /* been modified.*/
   /* *********************************************************/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
     /* valid pf key*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    exit stack;
  end


  if (converseVar.eventKey is pf1) /* transfer to help facility*/
    XSPF1();
  end

  if (converseVar.eventKey is pf3) /* transfer to sp0u....*/
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0HM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pf4) /* transfer to sales pgm menu*/
    XSPF4();
  end

  if (converseVar.eventKey is pa2) /* transfer to master menu*/
    COMMAREA.CATOAP = "SM0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (converseVar.eventKey is enter
   && SP0HM030.CATOAP != " ") /* check for fast path*/
    if (SP0HW01.SP0HWVF == "N") /* if data not modified*/
      COMMAREA.CATOAP = SP0HM030.CATOAP;
      COMMAREA.CAITEM = SP0HM030.CAITEM;
      XSEXIT();
      SP0HM030.SP0HMMSG = COMMAREA.CAMSG; /* xsexit problem*/
      SP0HM030.CATOAP = " ";
      SP0HM030.CAITEM = " ";
      converseLib.validationFailed(99);
      exit stack;
    else
      SP0HM030.SP0HMMSG = "CANNOT MIX UPDATE WITH FAST PATH - CONTINUE";
      SP0HM030.CATOAP = " ";
      SP0HM030.CAITEM = " ";
      converseLib.validationFailed(5);
      exit stack;
    end
  end



end // end SP0HS32

// update data base
Function SP0HS33()



   /* *********************************************************/
      /* this statement group is used to update the in-store*/
      /* promo comments data base.*/
   /* *********************************************************/

  set SQLCA empty;

  SP1REC.SP1ID = SP0HM030.SP1ID;
  SP1REC.SP1COM1 = SP0HM030.SP1COM1;
  SP1REC.SP1COM2 = SP0HM030.SP1COM2;
  SP1REC.SP1COM3 = SP0HM030.SP1COM3;
  SP1REC.SP1COM4 = SP0HM030.SP1COM4;
  SP1REC.SP1COM5 = SP0HM030.SP1COM5;
  SP1REC.SP1COM6 = SP0HM030.SP1COM6;
  SP1REC.SP1COM7 = SP0HM030.SP1COM7;
  SP1REC.SP1COM8 = SP0HM030.SP1COM8;
  SP1REC.SP1COM9 = SP0HM030.SP1COM9;
  SP1REC.SP1COM10 = SP0HM030.SP1COM10;
  SP1REC.SP1COM11 = SP0HM030.SP1COM11;
  SP1REC.SP1COM12 = SP0HM030.SP1COM12;
  SP1REC.SP1COM13 = SP0HM030.SP1COM13;
  SP1REC.SP1COM14 = SP0HM030.SP1COM14;

  SP0HW01.SP0HWT1 = VGVar.currentFormattedTime;
  SP0HW01.SP0HWTH2 = SP0HW01.SP0HWTH1;
  SP0HW01.SP0HWTM2 = SP0HW01.SP0HWTM1;
  SP1REC.ZZZCHGTM = SP0HW01.SP0HWT2;

  SP0HW01.SP0HWD2 = VGVar.currentShortGregorianDate;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  if (SP0HW01.SP0HWD2 > 600000)
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
    SP0HW01.SP0HWD1 = 019;
   /*  */
   /* *************************** Y2K IN BEGIN ******************************/
   /*  */
  else
    SP0HW01.SP0HWD1 = 020;
  end
   /*  */
   /* *************************** Y2K IN END ********************************/
   /*  */
  SP1REC.ZZZCHGDT = SP0HW01.SP0HWD;

  SP1REC.ZZZCHGCT = SP0HW01.ZZZCHGCT;

  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update return*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SP0HM030.SP0HMMSG = "DATA BASE UPDATED - CONTINUE";
    SP0HW01.ZZZCHGCT = SP0HW01.ZZZCHGCT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0HM030.SP0HMMSG = "UNABLE TO UPDATE DATA - TRY AGAIN";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0H   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0HS33 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0HM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0HS34(); /* db2 error routine*/
    end
  end



end // end SP0HS33

// db2 error routine
Function SP0HS34()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0HS34

// reset map fields
Function SP0HS35()


  set SP0HM030.SP1ID cursor, normal;
  set SP0HM030.SP1NM initialAttributes;
  set SP0HM030.SP1STATX initialAttributes;
  set SP0HM030.SP1STAT initialAttributes;
  set SP0HM030.SP1COM1 initialAttributes;
  set SP0HM030.SP1COM2 initialAttributes;
  set SP0HM030.SP1COM3 initialAttributes;
  set SP0HM030.SP1COM4 initialAttributes;
  set SP0HM030.SP1COM5 initialAttributes;
  set SP0HM030.SP1COM6 initialAttributes;
  set SP0HM030.SP1COM7 initialAttributes;
  set SP0HM030.SP1COM8 initialAttributes;
  set SP0HM030.SP1COM9 initialAttributes;
  set SP0HM030.SP1COM10 initialAttributes;
  set SP0HM030.SP1COM11 initialAttributes;
  set SP0HM030.SP1COM12 initialAttributes;
  set SP0HM030.SP1COM13 initialAttributes;
  set SP0HM030.SP1COM14 initialAttributes;
  SP0HM030.VAGen_EZEMSG = " ";
  SP0HM030.SP0HMMSG = " ";



end // end SP0HS35

Record SP0HW01 type basicRecord
  10 SP1ID SP1ID ; 
  10 SP0HWUPF SP0HWUPF ; 
  10 SP0HWMSG SP0HWMSG ; 
  10 SP0HWMOP SP0HWMOP [20] ; 
  10 SP0HWD SP0HWD ; 
    20 SP0HWD1 SP0HWD1 ; 
    20 SP0HWD2 SP0HWD2 ; 
  10 SP0HWT1 SP0HWT1 ; 
    20 SP0HWTH1 SP0HWTH1 ; 
    20 SP0HWTC1 SP0HWTC1 ; 
    20 SP0HWTM1 SP0HWTM1 ; 
    20 SP0HWTC2 SP0HWTC2 ; 
    20 SP0HWTS1 SP0HWTS1 ; 
  10 SP0HWT2 SP0HWT2 ; 
    20 SP0HWTH2 SP0HWTH2 ; 
    20 SP0HWTM2 SP0HWTM2 ; 
  10 SP0HWVF SP0HWVF ; 
  10 SP0HWVF1 SP0HWVF1 ; 
  10 SP0HWMDF SP0HWMDF ; 
  10 SP0HWHDM SP0HWHDM ; 
  10 SP0HWSDM SP0HWSDM ; 
  10 SP0HWSID SP0HWSID ; 
  10 SP0HWACF SP0HWACF ; 
  10 SP0HWAPF SP0HWAPF ; 
  10 SP5KEY SP5KEY ; 
  10 SP0HWOTH SP0HWOTH ; 
  10 SP0HWDDL SP0HWDDL ; 
  10 SP0HWPCT SP0HWPCT ; 
  10 SP2DIND SP2DIND ; 
  10 SP0HWF3 SP0HWF3 ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end SP0HW01

DataItem SP0HWACF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0HWAPF char(2800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem SP0HWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws centry
DataItem SP0HWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem SP0HWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SP0HWDDL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0HWF3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test header data
DataItem SP0HWHDM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws. test for select & path
DataItem SP0HWMDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws map option field
DataItem SP0HWMOP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field
DataItem SP0HWMSG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SP0HWOTH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold
DataItem SP0HWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// test for select data mdt
DataItem SP0HWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0HWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem SP0HWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0HWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1
DataItem SP0HWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0HWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0HWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0HWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #1
DataItem SP0HWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0HWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem SP0HWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag
DataItem SP0HWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0HWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0HWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

