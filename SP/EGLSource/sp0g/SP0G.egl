package sp0g;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0G ****
// sales program customer update
// 
// overview:  all customer update code was removed from sp0u
//     in april, 1987, to create this application: sp0g.
// 
// date created: april 1987
// 
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// 04/15/87   s.job     moved to prod
// 12/15/88   jwood     added noncsp option to calls
// 12/15/88   jwood     added xssegtr logic
// 08/07/89   rcoron    standardized screens and corrected bugs
//                      in sp0g070.
// 12/13/90   S.JOB     INCREASED SIZE OF CUSTOMER ARRAY TO 500
//                      TO SUPPORT SPECIAL ALLOCATION BY OP.
// 06/13/91   S.JOB     limited spec.cust. to 10
// 06/17/91   S.JOB     edit spec.cust. modification
// 04/07/92   S.JOB  E782-increased the size of customer array
//                        to 700.
// 12/07/97   NGANGO    Y2K MODIFICATIONS. Changed Statement
//                      Groups SP0GS38 and SP0GS79.
// *********************
Program SP0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  SP0GW01 SP0GW01; // record
  SP1REC SP1REC; // record
  SP4REC SP4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use SP0GM.SP0GM030,  // forms
      SP0GM.SP0GM050, 
      SP0GM.SP0GM070
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0G010: SP0G010();



    if (SP0GM030.SP1ID <= " ") /* there still is no s.p.id!!*/
      SP0GM030.SP0GMMSG = "PLEASE ENTER A SALES PROGRAM ID ";
      goto SP0G010;
    else
      if (SP0GM030.SP1NM == "NEW SPID")
        SP0GM030.SP1NM = " ";
        COMMAREA.CAITEM = SP0GM030.SP1ID;
        goto SP0G010;
      end
    end


    if (COMMAREA.CAINQFL == "B") /* spec.account classes*/
      goto SP0G020;
    else
      if (COMMAREA.CAINQFL == "C") /* spec.cust.groups*/
        goto SP0G040;
      else
        goto SP0G060; /* customer...default location*/
      end
    end



    SP0G020: SP0G020();



    goto SP0G030;



    SP0G030: SP0G030();


    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(0);
      if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G060; /* customer....*/
      end
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(0);
      if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G020; /* account class*/
      end
    end

    if (converseVar.eventKey is pf16)
      converseLib.validationFailed(0);
      if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G040; /* cust acct. classes*/
      end
    end


    if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* any change in key*/
      goto SP0G010;
    else
      goto SP0G030;
    end



    SP0G040: SP0G040();



    goto SP0G050;



    SP0G050: SP0G050();



    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(0);
      if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G060; /* customer...*/
      end
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(0);
      if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G020; /* account class*/
      end
    end

    if (converseVar.eventKey is pf16)
      converseLib.validationFailed(0);
      if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G040; /* spec. cust groups*/
      end
    end

    if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
      goto SP0G010;
    else
      goto SP0G050; /* spec. cust groups*/
    end




    SP0G060: SP0G060();



    goto SP0G070;



    SP0G070: SP0G070();


    if (SP0GW01.SP0GWVF == "N") /* loop back to converse if error*/
      goto SP0G070;
    end


    if (SP0GW01.SP0GWVF == "Y" /* if entries valid and prompt for update*/
     && SP0GW01.SP0GWVF1 == "Y")
      goto SP0G070;
    end


    if (converseVar.eventKey is pf14) /* customer*/
      if (SP0GM070.SP1ID != SP1REC.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G060;
      end
    end

    if (converseVar.eventKey is pf15) /* acct class*/
      if (SP0GM070.SP1ID != SP0GW01.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G020;
      end
    end

    if (converseVar.eventKey is pf16) /* spec. cust groups*/
      if (SP0GM070.SP1ID != SP1REC.SP1ID) /* change in key*/
        goto SP0G010;
      else
        goto SP0G040;
      end
    end


    if (SP0GM070.SP1ID != SP1REC.SP1ID) /* change in key*/
      goto SP0G010;
    else
      goto SP0G070;
    end



  end // end main
end // end SP0G

// customer trafic director
Function SP0G010()


  XSENTRY();


  XSSEGTR(); /* set segmented transaction id*/

  converseLib.validationFailed(0);
  set SP0GW01 empty;

  if (COMMAREA.CAITEM != " ")
    SP0GW01.SP0GWLOC = COMMAREA.CAITEM;
    if (SP0GW01.SP0GWL1 != " ")
      COMMAREA.CAINQFL = SP0GW01.SP0GWL1; /* strip off the app. id*/
      SP0GW01.SP0GWL1 = " ";
      COMMAREA.CAITEM = SP0GW01.SP0GWLOC;
    end
  end


  if (COMMAREA.CAITEM == " ")
    set SP0GM030 initial;
    SP0GM030.SP0GMTDT = VGVar.currentShortGregorianDate;
    SP0GM030.XXXERRID = "SP0G010";
    SP0GS10(); /* set up receive screen*/
  else
    SP0GM030.SP1ID = COMMAREA.CAITEM;
    SP0GW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAINQFL = COMMAREA.CAINQFL;
    COMMAREA.CAITEM = " ";
    SP0GS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0GM030.SP1ID > " ")
    exit stack;
  end

  SP0GM030.SP1NM = "NEW SPID";



  converse SP0GM030 ;


  SP0GS14(); /* check fast pathing*/
  SP0GS13(); /* reset map attributes*/




end // end SP0G010

// initialization and reset
Function SP0G020()


   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the order type s.p. customer account class*/
      /* select the any account class for this s.p. and*/
      /* show on map sp0gm030.*/
   /* ************************************************************/


  set SP0GM030 empty; /* clear maps*/

  SP0GS21(); /* format customer acct codes*/



end // end SP0G020

// cust acct class
Function SP0G030()


   /* ************************************************************/
      /* this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* customer account class codes for sales programs.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0gm030*/


  if (SP0GW01.SP0GWUPF == "Y")
    SP0GS21(); /* reload sp1rec.xaucd's to screen and sort*/
    SP0GW01.SP0GWUPF = "N";
    SP0GM030.VAGen_EZEMSG = "DATABASE FILE WAS UPDATED";
  else
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "I"
     || SP1REC.SP1STAT == "F"
     || converseVar.validationMsgNum == 12)
      SP0GS21(); /* reload sp1rec.xaucd's to screen and sort*/
    end
  end

  SP0GM030.SP0GMMSG = SP0GW01.SP0GWMSG;
  SP0GW01.SP0GWSB2 = 0;
  SP0GW01.SP0GWSB1 = 0;
  SP0GW01.SP0GWVF = "Y";


  converse SP0GM030 ;


  COMMAREA.CAITEM = SP0GM030.CAITEM;

  SP0GS22(); /* sort the entries on the screen*/

   /* ************************************************************/
      /* sp0gs31  main edit routine*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0uw1.sp0uwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/


  SP0GW01.SP0GWUPF = "N";

  SP0GS31();

  if (SP0GW01.SP0GWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end



      /* were pf keys   entered to transfer control ?*/



  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end



      /* update the sp1rec.  everything is a-okay.*/


  SP0GW01.SP0GWMSG = " ";
  SP0GW01.SP0GWUPF = "Y";
  SP1REC.SP1ID = SP0GM030.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0G030 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM030";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



  SP0GS3A(); /* set up sp1rec*/
  SP0GS37(); /* check status*/

   /* note that the returned message from the update routine*/
   /* is stored in working storage because the message area*/
   /* in screen m050 is replaced by this at the beginning of*/
   /* of the converse option.*/

  SP0GS38(); /* update sp1rec*/
  SP0GW01.SP0GWMSG = SP0GM030.SP0GMMSG;



end // end SP0G030

// initialization and reset
Function SP0G040()


   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the special customer groups for this s.p.*/
      /* select the any of the special cursomer groups and*/
      /* show on map sp0gm050.*/
   /* ************************************************************/



  SP0GS41();



end // end SP0G040

// spec cust groups
Function SP0G050()


   /* ************************************************************/
      /* this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* special customer groups for sales programs.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0gm050*/


  if (SP0GW01.SP0GWUPF == "Y")
    SP0GS41(); /* reload sp1rec.xsgcd's to screen and sort*/
    SP0GW01.SP0GWUPF = "N";
    SP0GM050.VAGen_EZEMSG = "DATABASE FILE WAS UPDATED";
  else
    if (SP1REC.SP1STAT == "A"
     || SP1REC.SP1STAT == "I"
     || SP1REC.SP1STAT == "F"
     || converseVar.validationMsgNum == 12)
      SP0GS41(); /* reload sp1rec.xsgcd's to screen and sort*/
    end
  end

  SP0GM050.SP0GMMSG = SP0GW01.SP0GWMSG;
  SP0GW01.SP0GWSB2 = 0;
  SP0GW01.SP0GWSB1 = 0;
  SP0GW01.SP0GWVF = "Y";


  converse SP0GM050 ;


  COMMAREA.CAITEM = SP0GM050.CAITEM;

  SP0GS42(); /* sort the entries on the screen*/

   /* ************************************************************/
      /* sp0gs51  main edit routine*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0uw1.sp0uwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/


  SP0GW01.SP0GWUPF = "N";

  SP0GS51();

  if (SP0GW01.SP0GWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end



      /* were pf keys   entered to transfer control ?*/



  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end



      /* update the sp1rec.  everything is a-okay.*/


  SP0GW01.SP0GWMSG = " ";
  SP0GW01.SP0GWUPF = "Y";
  SP1REC.SP1ID = SP0GM050.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0G050 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



  SP0GS56(); /* set up sp1rec*/
  SP0GS37(); /* check status*/

   /* sp0gs38 was used by screen m030 and puts messages there.*/
   /* a move message to screen m050 from m030 statement should*/
   /* follow the update routine borrowed from m030 for m050.*/
   /* note that the returned message from the update routine*/
   /* is stored in working storage because the message area*/
   /* in screen m050 is replaced by this at the beginning of*/
   /* of the converse option.*/

  SP0GS38(); /* update sp1rec*/
  SP0GW01.SP0GWMSG = SP0GM030.SP0GMMSG;



end // end SP0G050

// initialization and reset
Function SP0G060()



   /* ************************************************************/
      /* the purpose of this process is to set up a working*/
      /* storage array of customer company id's that have been*/
      /* set up for the sales program selected.  this array of*/
      /* company id's will be used for subsequent processing*/
      /* by the user the array has a limit of 700 associated*/
      /* which may need to be increased in the future.*/
   /* ************************************************************/


                                 /* clear out w.s. array*/
  SP0GW01.SP0GWSB1 = +1;
  while (SP0GW01.SP0GWSB1 <= +700)
    SP0GW01.SP1ID[SP0GWSB1] = " ";
    SP0GW01.KUCCOID[SP0GWSB1] = 0;
    SP0GW01.KUMSTRID[SP0GWSB1] = 0;
    SP0GW01.XNXCD[SP0GWSB1] = 0;
    SP0GW01.XGPCD[SP0GWSB1] = " ";
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  SP0GW01.SP0GWMSG = " "; /* clear out w.s. error message*/
  converseLib.validationFailed(0); /* clear out error area*/
  SP0GW01.SP0GWPOS = 1; /* cursor position..*/
  SP0GW01.SP0GWPGN = 1; /* screen page number*/
  SP0GW01.SP0GWVF1 = "N"; /* set update verify flag*/

  set SP4REC empty;
  set SQLCA empty;

  SP4REC.SP1ID = SP1REC.SP1ID;
  SP4REC.KUCCOID = 0;

  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0GW01.SP0GWTSZ = +0;
    SP0GW01.SP0GWSB1 = +1;
    while (SP0GW01.SP0GWSB1 <= +700
     && SQLCA.VAGen_SQLCODE == +0)
      SP0GS61(); /* fetch next sp4rec and load*/
    end
    call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0GW01.SP0GWTSZ = SP0GW01.SP0GWSB1 - 1; /* set array size*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0G060 ";
    TA1REC.TA1LOCAT[3] = "IO0100  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM070";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = SP4REC.SP4KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
    exit stack;
  end
  SP0GW01.SP0GWMSG = "ENTER CHANGES/UPDATES OR PF3 TO EXIT.";
  SP0GM070.SP0GMMSG = "PLEASE ADD OR DELETE A RECORD; OR PF3 TO EXIT.";


  SP0GS62(); /* move recs to map*/


end // end SP0G060

// customer company id add / del
Function SP0G070()



      /* ********************************************************/
      /* *  this process is used to control access to cust co  **/
      /* *  id's that are valid for a sales program.  this     **/
      /* *  allows the user to add, or delete cust comp id's   **/
      /* *  based upon the selected set of company id's for    **/
      /* *  this s.p.  the user can also scroll                **/
      /* *  forward and backwards through the cust co id set.  **/
      /* ********************************************************/



  if (SP0GW01.SP0GWVF != "Y")
    SP0GW01.SP0GWVF1 = "N";
  end

    /* the previous set of codes ensures that the verified-for-*/
    /* update-flag (sp0gwvf1) is set to 'y' (for update) only*/
    /* after a valid edit and a second confirmation pass that is*/
    /* also valid.*/


  SP0GW01.SP0GWVF = " ";


  converse SP0GM070 ;



  COMMAREA.CAITEM = SP0GM070.CAITEM;
  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = " ";


   /* **********************************************************/
                      /* validate pf keys*/
   /* **********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0GW01.SP0GWVF = "N";
    exit stack;
  end


   /* **********************************************************/
                  /* validate entries on screen*/
      /* note that sp0gw01 will contain ' ' at the start of*/
      /* the converse loop.  after validation, it will contain*/
      /* either a 'y' if an action code was entered, 'n' if*/
      /* any entries were invalid and ' ' if no changes were*/
      /* done.*/
   /* **********************************************************/

  SP0GS71(); /* validate entries*/

  if (SP0GW01.SP0GWVF == "N") /* error was found*/
    exit stack;
  end


  if (SP0GW01.SP0GWVF == " ") /* scroll options*/
    if (converseVar.eventKey is pf8)
      SP0GS73(); /* scroll forward*/
    else
      if (converseVar.eventKey is pf7)
        SP0GS74(); /* scroll backward*/
      else
        if (converseVar.eventKey is pf11)
          SP0GS75(); /* bottom of list*/
        else
          if (converseVar.eventKey is pf10)
            SP0GS76(); /* top of list*/
          end
        end
      end
    end
  end


   /* **********************************************************/
              /* update workarea array and db2 tables*/
      /* note that this application module scrolls through*/
      /* the workarea array for the customer/gpc codes.  this*/
      /* application module assumes that the workarea array*/
      /* reflects the status and contents of the actual db2*/
      /* rows.  this is a constraint defined by not being able*/
      /* to refresh the array because program specs requires*/
      /* the entries to stay in the order in which they were*/
      /* entered on the screen and sorting them only after*/
      /* an intentional refresh (getting out of the screen*/
      /* and comming back in again).*/
   /* **********************************************************/

  if (SP0GW01.SP0GWVF == "Y") /* if 'a' or 'd' was entered and valid*/
    if (SP0GW01.SP0GWVF1 == "N") /* if not yet confirmed for updt*/
      SP0GW01.SP0GWVF1 = "Y"; /* prompt for a confirm (enter)*/
      SP0GS77(); /* set map for confirm*/
      exit stack;
    else /* comfirmed for update*/
      SP0GW01.SP0GWVF1 = "N";
      if (converseVar.eventKey is enter)
        SP0GS78(); /* update tables*/
      else
        SP0GM070.VAGen_EZEMSG = "UPDATES WERE NOT CONFIRMED. ";
        SP0GM070.SP0GMMSG = "PLEASE PRESS <ENTER> TO UPDATE.";
      end
    end
  end




end // end SP0G070

// set up sp1id receive screen
Function SP0GS10()



  set SP0GM030.SP1ID cursor, bold;

  SP0GW01.SP0GWSB1 = 1;
  while (SP0GW01.SP0GWSB1 <= 20)
    set SP0GM030.XAUCD[SP0GWSB1] protect, invisible;
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  SP0GM030.SP0GMMSG = "ENTER A SALES PROGRAM ID";
  SP0GM030.SP0GMDS1 = " ";
  SP0GM030.SP0GMDS2 = " ";
  SP0GM030.SP0GMDS3 = " ";



end // end SP0GS10

// validate sales program id
Function SP0GS12()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0GW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0GM030 withV60Compat;
    SP0GW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      COMMAREA.CATOAP = "SP0U";
      COMMAREA.CAITEM = SP0GM030.SP1ID;
      XSEXIT();
    else
      SP0GW01.SP0GWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0G";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0GS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0GM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0GM030.SP0GMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0GS12

// reset sp1id receive screen
Function SP0GS13()



  set SP0GM030.SP1ID cursor, normal;

  SP0GW01.SP0GWSB1 = 1;
  while (SP0GW01.SP0GWSB1 <= 20)
    set SP0GM030.XAUCD[SP0GWSB1] normal;
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  SP0GM030.SP0GMDS1 = "To Add, enter code;";
  SP0GM030.SP0GMDS2 = "To Delete, space-out code;";
  SP0GM030.SP0GMDS3 = "To Change, type-over code;";




end // end SP0GS13

// edit for fast path, data modif
Function SP0GS14()

   /* **********************************************************/
   /* ***** check fast pathing........                    ******/
   /* **********************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0GM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
   /* *                     pf1, and pf4.*/
   /* *********************************************************/

  if (SP0GM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0GM030.CATOAP;
    COMMAREA.CAITEM = SP0GM030.CAITEM;
    XSEXIT();
  end


   /* *********************************************************/
      /* transfer to help program*/
   /* *********************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0GM030.SP0GMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end

      /* transfer to main menu program mn0m*/


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0GM030.SP0GMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0GS14

// sp1rec sp for cust acct codes-
Function SP0GS21()



   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the special customer gp to sp0gm030.*/
      /* this process is used to initialize the necessary*/
      /* fields for the customer account class codes.*/
   /* ************************************************************/



  set SP0GM030 empty;
  SP0GM030.SP0GMTDT = VGVar.currentShortGregorianDate;
  SP0GM030.XXXERRID = "SP0G030";
  SP0GM030.SP1ID = SP1REC.SP1ID;

  SP0GM030.SP0GMDS1 = "To Add, enter code;";
  SP0GM030.SP0GMDS2 = "To Delete, space-out code;";
  SP0GM030.SP0GMDS3 = "To Change, type-over code;";






   /* ************************************************************/
      /* select all the cust acct class codes for this s.p. and*/
      /* show on map sp0gm030.*/
   /* ************************************************************/



  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0GS21 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM030";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  SP0GM030.SP1ID = SP1REC.SP1ID;
  SP0GM030.SP1NM = SP1REC.SP1NM;
  if (SP1REC.SP1STAT == "A")
    SP0GM030.SP0GMSTD = "ACTIVE";
  else
    if (SP1REC.SP1STAT == "I")
      SP0GM030.SP0GMSTD = "INACTIVE";
    else
      if (SP1REC.SP1STAT == "F")
        SP0GM030.SP0GMSTD = "FINISHED";
      else
        if (SP1REC.SP1STAT == "P")
          SP0GM030.SP0GMSTD = "PARTIAL";
        else
          if (SP1REC.SP1STAT == "C")
            SP0GM030.SP0GMSTD = "COMPLETE";
          else
            SP0GM030.SP0GMSTD = " ";
          end
        end
      end
    end
  end


  SP0GW01.SP0GWSB1 = 1;


  while (SP0GW01.SP0GWSB1 < 21
   && SP1REC.XAUCD[SP0GWSB1] != "  ")
    SP0GW01.SP0GWUPF = "N";
    SP0GM030.XAUCD[SP0GWSB1] = SP1REC.XAUCD[SP0GWSB1];
    if (SP1REC.XAUCD[SP0GWSB1] in XAUTBL.XAUCD)
      SP0GM030.XAUDESC[SP0GWSB1] = XAUTBL.XAUDESC[sysVar.arrayIndex];
    else
      SP0GM030.XAUDESC[SP0GWSB1] = "INVALID CODE";
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  if (SP0GM030.XAUCD[1] == " ")
    SP0GW01.SP0GWMSG = "NO CUSTOMER ACCT CODES CURRENTLY EXIST";
    SP0GW01.SP0GWFL8 = " ";

  else
    SP0GW01.SP0GWFL8 = "*";

  end


   /* *****************************************************/
      /* sp0gs22 sort method for cust acct codes*/
   /* *****************************************************/


  SP0GS22();



end // end SP0GS21

// sort method for cust acct cd
Function SP0GS22()



   /* ************************************************************/
      /* sort method for map array.*/
   /* ************************************************************/



  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWSB2 = 2;

   /* *************************************************************/
                                  /* sort the codes on the screen*/

  while (SP0GW01.SP0GWSB1 < 20)
    while (SP0GW01.SP0GWSB2 < 21)
      if (SP0GM030.XAUCD[SP0GWSB1] > SP0GM030.XAUCD[SP0GWSB2])
        SP0GW01.XAUCD = SP0GM030.XAUCD[SP0GWSB2];
        SP0GW01.XAUDESC = SP0GM030.XAUDESC[SP0GWSB2];
        SP0GM030.XAUCD[SP0GWSB2] = SP0GM030.XAUCD[SP0GWSB1];
        SP0GM030.XAUDESC[SP0GWSB2] = SP0GM030.XAUDESC[SP0GWSB1];
        SP0GM030.XAUCD[SP0GWSB1] = SP0GW01.XAUCD;
        SP0GM030.XAUDESC[SP0GWSB1] = SP0GW01.XAUDESC;
      end
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
    SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB1 + 1;
  end


   /* *************************************************************/
             /* find position of first non-blank entry after sort*/
             /* and strip off blank entries from the top*/

  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWSB2 = 0;

  while (SP0GW01.SP0GWSB1 < 21)
    if (SP0GM030.XAUCD[SP0GWSB1] == "  ")
        /* skip*/
    else
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB1;
      SP0GW01.SP0GWSB1 = 21;
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

     /* note that if the first non-blank entry is found on the*/
     /* first bucket, no need to shift/compress*/

  if (SP0GW01.SP0GWSB2 > 1) /* a non-blank entry was found on screen*/
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GW01.SP0GWSB2 < 21)
      SP0GM030.XAUCD[SP0GWSB1] = SP0GM030.XAUCD[SP0GWSB2];
      SP0GM030.XAUDESC[SP0GWSB1] = SP0GM030.XAUDESC[SP0GWSB2];
      SP0GM030.XAUCD[SP0GWSB2] = " ";
      SP0GM030.XAUDESC[SP0GWSB2] = " ";
      SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
    end
  else
                              /* no non-blank entries on the screen*/
  end


   /* *************************************************************/
      /* display warning message for delete option*/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "F"
   || SP1REC.SP1STAT == "I")
    SP0GW01.SP0GWMSG = "NO DELETES ALLOWED BECAUSE OF STATUS";
  end


   /* *************************************************************/
      /* reset screen attributes*/

  set SP0GM030.XAUCD[1] cursor;
  SP0GW01.SP0GWSB1 = 1;
  while (SP0GW01.SP0GWSB1 < 21)
    set SP0GM030.XAUCD[SP0GWSB1] initialAttributes;
    if (SP0GM030.XAUCD[SP0GWSB1] == "  ")
      SP0GM030.XAUDESC[SP0GWSB1] = " ";
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end



end // end SP0GS22

// main edit group for cust acct-
Function SP0GS31()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0GW01.SP0GWMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0GW01.SP0GWVF = "N";
    return;
  end


   /* ***********************************************************/
      /* sp0gs32  to check fields for entry.  if no change was*/
               /* made, sp0gw01.sp0gwvf is ' '; else if any error*/
               /* is detected, 'n'; else if all correct and a*/
               /* change was made, 'y'.*/
   /* ***********************************************************/


  SP0GS32(); /* validate entries*/


  if (SP0GW01.SP0GWVF == " ") /* no screen update*/
    if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0GM030.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "B";
            exit stack;
          end
        end
      end
    end
  else
    if (SP0GM030.SP1ID != SP0GW01.SP1ID) /* change in key*/
      SP0GM030.SP0GMMSG = "DO NOT UPDATE AND CHANGE SALE PROGRAM ID";
      SP0GM030.SP1ID = SP0GW01.SP1ID; /* move old sp id back*/
      SP0GW01.SP0GWVF = "N";
    end
  end



   /* ***********************************************************/
      /* sp0gs33 check for fast path, modified data, pf1, pf4*/
   /* ***********************************************************/

  SP0GS33();

  if (converseVar.validationMsgNum > 0)
    SP0GW01.SP0GWVF = "N";
    return;
  end



   /* ***********************************************************/
      /* was an option selected ? eg a, or d.  if not,*/
      /* was pa2 or pf3 hit to transfer?*/
   /* ***********************************************************/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end


   /* ********************************************************/
      /* were there any changes made to the screen?*/
   /* ********************************************************/

  if (SP0GW01.SP0GWVF == " ")
    SP0GW01.SP0GWVF = "N";
    converseLib.validationFailed(4);
    SP0GW01.SP0GWMSG = "PLEASE MODIFY DATA OR EXIT FROM THIS SCREEN";
    return;
  end


end // end SP0GS31

// validate cust acct cls entries
Function SP0GS32()


  SP0GW01.SP0GWVF = " ";

   /* ************************************************************/
      /* this statement group is used to validate the entries*/
      /* on the screen.*/
   /* ************************************************************/

   /* ************************************************************/
       /* for active, inactive, or finished spgm status, do not*/
       /* allow deletions of xau codes.  check for deleted xau*/
       /* codes.*/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GWSB1 < 21
     && SP1REC.XAUCD[SP0GWSB1] != "  ")
      if (SP1REC.XAUCD[SP0GWSB1] in SP0GM030.XAUCD)
             /* the xau code was not deleted*/
      else /* the xau code was deleted*/
        SP0GW01.SP0GWMSG = "DELETES NOT POSSIBLE - PLEASE EXIT AND TRY AGAIN";
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(12);
        return;
      end
      SP0GWSB1 = SP0GWSB1 + 1;
    end
  end


   /* ************************************************************/
       /* check for duplicates on the screen*/

  SP0GW01.SP0GWSB1 = 19;
  SP0GW01.SP0GWSB2 = 20;
  while (SP0GWSB1 > 0)
    if (SP0GM030.XAUCD[SP0GWSB2] != "  "
     && SP0GM030.XAUCD[SP0GWSB1] == SP0GM030.XAUCD[SP0GWSB2])
      SP0GW01.SP0GWMSG = "DUPLICATE CUST ACCT CODE";
      SP0GW01.SP0GWVF = "N";
      converseLib.validationFailed(20);
      set SP0GM030.XAUCD[SP0GWSB2] cursor, bold;
    end
    SP0GWSB1 = SP0GWSB1 - 1;
    SP0GWSB2 = SP0GWSB1 + 1;
  end


   /* ************************************************************/
       /* validate entered xau codes against the table*/

  SP0GW01.SP0GWSB1 = 20;
  while (SP0GWSB1 > 0)
    if (SP0GM030.XAUCD[SP0GWSB1] != "  ")

      if (SP0GM030.XAUCD[SP0GWSB1] in XAUTBL.XAUCD)
        SP0GM030.XAUDESC[SP0GWSB1] = XAUTBL.XAUDESC[sysVar.arrayIndex];
        SP0GWSB2 = sysVar.arrayIndex;
        sysVar.arrayIndex = 0;
        if (SP0GM030.XAUCD[SP0GWSB1] in SP1REC.XAUCD)
            /* entry was not new so, no need to check if code was active*/
        else
          if (XAUTBL.XXXSTAT[SP0GWSB2] != "A")
            SP0GW01.SP0GWMSG = "CUST-ACCT-CLS-CD IS INACTIVE";
            SP0GW01.SP0GWVF = "N";
            converseLib.validationFailed(23);
            set SP0GM030.XAUCD[SP0GWSB1] cursor, bold;
          end
        end
      else
        SP0GM030.XAUDESC[SP0GWSB1] = "INVALID CUST ACCT CLS CD";
        SP0GW01.SP0GWMSG = "ERROR - THIS IS NOT A VALID CUST ACCT CLS CD";
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(23);
        set SP0GM030.XAUCD[SP0GWSB1] cursor, bold;
      end
    end
    SP0GWSB1 = SP0GWSB1 - 1;
  end

  if (SP0GW01.SP0GWVF != " ")
    return;
  end



   /* ************************************************************/
       /* after all the validations, check if there were changes*/

  SP0GWSB1 = 1;
                                   /* check if any were deleted from screen*/
  while (SP0GWSB1 < 21
   && SP1REC.XAUCD[SP0GWSB1] != "  ")
    if (SP1REC.XAUCD[SP0GWSB1] in SP0GM030.XAUCD)
         /* the xau code was not deleted from the screen*/
    else /* the xau code was deleted from the screen*/
      SP0GW01.SP0GWVF = "Y"; /* change ' ' to 'y'*/
      SP0GWSB1 = 21;
    end
    SP0GWSB1 = SP0GWSB1 + 1;
  end

  SP0GWSB1 = 1;
                                   /* check if any were added to the screen*/
  while (SP0GWSB1 < 21
   && SP0GM030.XAUCD[SP0GWSB1] != "  ")
    if (SP0GM030.XAUCD[SP0GWSB1] in SP1REC.XAUCD)
         /* the xau code originally existed in sp1rec*/
    else /* the xau code on the screen is new*/
      SP0GW01.SP0GWVF = "Y"; /* change ' ' to 'y'*/
      SP0GWSB1 = 21;
    end
    SP0GWSB1 = SP0GWSB1 + 1;
  end



end // end SP0GS32

// edit for fast path, data mod -
Function SP0GS33()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0GM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end






  if (SP0GM030.CATOAP != " ") /* fast path*/
    if (SP0GW01.SP0GWVF != " ") /* sales pgm change requested*/
      SP0GW01.SP0GWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0GM030.CATOAP = " ";
      SP0GM030.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0GM030.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0GM030.CATOAP;
      COMMAREA.CAITEM = SP0GM030.CAITEM;
      XSEXIT();
      SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
      SP0GM030.CATOAP = " ";
      SP0GM030.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end


  if (converseVar.eventKey is pf1) /* **** transfer to help ********/
    XSPF1();
    SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4) /* **** transfer to main menu ***/
    XSPF4();
    SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0GS33

// check customer status update
Function SP0GS37()


  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    return;
  end


    /* ----------------------------------------------------*/
    /* check for existence of at least one sp4rec (customer)*/

  SP4REC.SP1ID = SP1REC.SP1ID;
  SP4REC.KUCCOID = 0;
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* any s.p. customer id's?*/
    call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      SP0GW01.SP0GWFL7 = "*";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        SP0GW01.SP0GWFL7 = " ";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0G   ";
        TA1REC.TA1LOCAT[1] = "SN     ";
        TA1REC.TA1LOCAT[2] = "SP0GS37";
        TA1REC.TA1LOCAT[3] = "IO0100 ";
        TA1REC.TA1LOCAT[4] = "  ";
        TA1REC.TA1MAP = "SP0GM020";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1TBLKE = SP4REC.SP4KEY;
        SP0GS10();
        exit stack;
      end
    end
  end

  call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};


    /* ----------------------------------------------------*/
    /* check for existence of at least one account class in*/
    /* sp1rec.*/

  SP0GW01.SP0GWFL8 = " ";
  SP0GW01.SP0GWSB1 = 1;
  while (SP0GW01.SP0GWSB1 < 21)
    if (SP1REC.XAUCD[SP0GWSB1] != "  ")
      SP0GW01.SP0GWFL8 = "*";
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end


    /* ----------------------------------------------------*/
    /* check for existence of at least one special customer*/
    /* group code in sp1rec.*/

  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWFL9 = " ";
  SP0GW01.SP0GWFLA = " ";
  while (SP0GW01.SP0GWSB1 < 11)
    if (SP1REC.XSGCD[SP0GWSB1] != "  ")
      if (SP1REC.XSGCD[SP0GWSB1] == "**") /* do all customers qualify?*/
        SP0GW01.SP0GWFLA = "Y";
      else
        SP0GW01.SP0GWFL9 = "*";
      end
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end


    /* ====================================================*/
    /* ----------------------------------------------------*/
    /* evaluate values of flags set from the above routine*/
    /* set sp1rec.sp1cind to 'y' of any flags are true.*/

  if (SP0GW01.SP0GWFL7 == "*" /* customer/gpc exists*/
   || SP0GW01.SP0GWFL8 == "*" /* acct cls exists*/
   || SP0GW01.SP0GWFL9 == "*" /* sp cust grp exists*/
   || SP0GW01.SP0GWFLA == "Y") /* all custs selected*/
    if (SP1REC.SP1CIND == "N")
      SP1REC.SP1CIND = "Y";
      SP0GW01.SP0GWUPF = "Y";
    end
  else
    if (SP1REC.SP1CIND == "Y")
      SP1REC.SP1CIND = "N";
      SP0GW01.SP0GWUPF = "Y";
    end
  end


    /* ----------------------------------------------------*/
    /* evaluate values of the three (3) indicators in sp1rec*/
    /* to determine the value of sp1rec.sp1stat.*/

  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   || SP1REC.SP1PIND == "Y"  /* product info exists*/
   || SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == " ") /* no status ! ! !*/
      SP1REC.SP1STAT = "P";
      SP0GW01.SP0GWUPF = "Y";
    end
  end


  if (SP1REC.SP1OTIND == "Y" /* order type info exists*/
   && SP1REC.SP1PIND == "Y"  /* product info exists*/
   && SP1REC.SP1CIND == "Y") /* customer info exists*/
    if (SP1REC.SP1STAT == "P") /* status is partial*/
      SP1REC.SP1STAT = "C";
      SP0GM030.SP0GMSTD = "COMPLETE";
      SP0GW01.SP0GWUPF = "Y";
    end
  else
    if (SP1REC.SP1STAT == "C") /* status is complete*/
      SP1REC.SP1STAT = "P";
      SP0GM030.SP0GMSTD = "PARTIAL";
      SP0GW01.SP0GWUPF = "Y";
    end
  end



end // end SP0GS37

// update sp1rec-
Function SP0GS38()


   /* ************************************************************/
      /* this statement group is used to update the sp1rec.*/
      /* it assumes that all the necessary information has*/
      /* moved into the record before this statement group*/
      /* was called.*/
   /* ************************************************************/

  if (SP0GW01.SP0GWUPF != "Y")
    return;
  end


  SP0GW01.SP0GWT1 = VGVar.currentFormattedTime;
  SP0GW01.SP0GWTH2 = SP0GW01.SP0GWTH1;
  SP0GW01.SP0GWTM2 = SP0GW01.SP0GWTM1;
  SP1REC.ZZZCHGTM = SP0GW01.SP0GWT2;

  /*  */
  /* ------------------ y2k out begin --------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0GW01.SP0GWD;*/
  /* MOVE 019 TO SP0GW01.SP0GWD1;*/
  /*  */
  /* ------------------ y2k out end ----------------------*/
  /*  */
  /*  */
  /* ------------------ y2k in begin --------------------*/
  /*  */
  SP0GW01.SP0GWD = VGVar.currentGregorianDate;
  /*  */
  /* ------------------ y2k in end ----------------------*/
  /*  */
  SP1REC.ZZZCHGDT = SP0GW01.SP0GWD;

  SP1REC.ZZZCHGCT = SP0GW01.ZZZCHGCT;

  call "IO0070" ("U ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0) /* good update return*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SP0GM030.SP0GMMSG = "DATA BASE UPDATED - CONTINUE";
    SP0GW01.ZZZCHGCT = SP0GW01.ZZZCHGCT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* bad update*/
      SP0GM030.SP0GMMSG = "UNABLE TO UPDATE DATA. TRY AGAIN.";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0G   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0GS38 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0GM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      SP0GS39(); /* db2 error routine*/
    end
  end



end // end SP0GS38

// db2 error routine-
Function SP0GS39()


  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();


end // end SP0GS39

// setup xau's on sp1rec
Function SP0GS3A()



   /* ************************************************************/
      /* this statement group sets up the xau codes on sp0gm030*/
      /* into sp1rec.*/
   /* ************************************************************/



  SP0GW01.SP0GWSB1 = 1;

  while (SP0GWSB1 < 21)
    SP1REC.XAUCD[SP0GWSB1] = SP0GM030.XAUCD[SP0GWSB1];
    SP0GWSB1 = SP0GWSB1 + 1;
  end



end // end SP0GS3A

// sp1rec sp for spec cust gp-
Function SP0GS41()



   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the special customer gp to sp0gm050.*/
      /* this process is used to initialize the necessary*/
      /* fields for the spec cust gp  s.p. codes.*/
   /* ************************************************************/



  set SP0GM050 empty;
  SP0GM050.SP0GMTDT = VGVar.currentShortGregorianDate;
  SP0GM050.XXXERRID = "SP0G050";
  SP0GM050.SP1ID = SP1REC.SP1ID;



   /* ************************************************************/
      /* select the any spec cust codes for this s.p. and*/
      /* show on map sp0um050.*/
   /* ************************************************************/



  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0GS41 ";
    TA1REC.TA1LOCAT[3] = "IO0070  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM050";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1TBLKE = SP1REC.SP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  SP0GM050.SP1ID = SP1REC.SP1ID;
  SP0GM050.SP1NM = SP1REC.SP1NM;
  if (SP1REC.SP1STAT == "A")
    SP0GM050.SP0GMSTD = "ACTIVE";
  else
    if (SP1REC.SP1STAT == "I")
      SP0GM050.SP0GMSTD = "INACTIVE";
    else
      if (SP1REC.SP1STAT == "F")
        SP0GM050.SP0GMSTD = "FINISHED";
      else
        if (SP1REC.SP1STAT == "P")
          SP0GM050.SP0GMSTD = "PARTIAL";
        else
          if (SP1REC.SP1STAT == "C")
            SP0GM050.SP0GMSTD = "COMPLETE";
          else
            SP0GM050.SP0GMSTD = " ";
          end
        end
      end
    end
  end


  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWSB2 = 1;


  while (SP0GW01.SP0GWSB1 < 21
   && SP1REC.XSGCD[SP0GWSB1] != "  ")
    SP0GW01.SP0GWUPF = "N";
    if (SP1REC.XSGCD[SP0GWSB1] != "**"
     && SP1REC.XSGCD[SP0GWSB1] > " A")
      SP0GM050.XSGCD[SP0GWSB2] = SP1REC.XSGCD[SP0GWSB1];
      if (SP1REC.XSGCD[SP0GWSB1] in XSGTBL.XSGCD)
        SP0GM050.XSGDESC[SP0GWSB2] = XSGTBL.XSGDESC[sysVar.arrayIndex];
      else
        SP0GM050.XSGDESC[SP0GWSB2] = "INVALID CODE";
      end
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  if (SP0GM050.XSGCD[1] == " ")
    SP0GW01.SP0GWMSG = "NO SPECIAL CUST CODES CURRENTLY EXIST";
    SP0GW01.SP0GWFL9 = " ";

  else
    SP0GW01.SP0GWFL9 = "*";

  end


   /* *****************************************************/
      /* sp0gs42 sort method for spec cust codes*/
   /* *****************************************************/


  SP0GS42();



end // end SP0GS41

// sort method for spec cust gp-
Function SP0GS42()



   /* ************************************************************/
      /* sort method for map array.*/
   /* ************************************************************/



  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWSB2 = 2;

   /* *************************************************************/
                                  /* sort the codes on the screen*/

  while (SP0GW01.SP0GWSB1 < 20)
    while (SP0GW01.SP0GWSB2 < 21)
      if (SP0GM050.XSGCD[SP0GWSB1] > SP0GM050.XSGCD[SP0GWSB2])
        SP0GW01.XSGCD = SP0GM050.XSGCD[SP0GWSB2];
        SP0GW01.XSGDESC = SP0GM050.XSGDESC[SP0GWSB2];
        SP0GM050.XSGCD[SP0GWSB2] = SP0GM050.XSGCD[SP0GWSB1];
        SP0GM050.XSGDESC[SP0GWSB2] = SP0GM050.XSGDESC[SP0GWSB1];
        SP0GM050.XSGCD[SP0GWSB1] = SP0GW01.XSGCD;
        SP0GM050.XSGDESC[SP0GWSB1] = SP0GW01.XSGDESC;
      end
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
    SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB1 + 1;
  end


   /* *************************************************************/
             /* find position of first non-blank entry after sort*/
             /* and strip off blank entries from the top*/

  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP0GWSB2 = 0;

  while (SP0GW01.SP0GWSB1 < 21)
    if (SP0GM050.XSGCD[SP0GWSB1] == "  ")
        /* skip*/
    else
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB1;
      SP0GW01.SP0GWSB1 = 21;
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

     /* note that if the first non-blank entry is found on the*/
     /* first bucket, no need to shift/compress*/

  if (SP0GW01.SP0GWSB2 > 1) /* a non-blank entry was found on screen*/
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GW01.SP0GWSB2 < 21)
      SP0GM050.XSGCD[SP0GWSB1] = SP0GM050.XSGCD[SP0GWSB2];
      SP0GM050.XSGDESC[SP0GWSB1] = SP0GM050.XSGDESC[SP0GWSB2];
      SP0GM050.XSGCD[SP0GWSB2] = " ";
      SP0GM050.XSGDESC[SP0GWSB2] = " ";
      SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
    end
  else
                              /* no non-blank entries on the screen*/
  end


   /* *************************************************************/
      /* display warning message for delete option*/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "F"
   || SP1REC.SP1STAT == "I")
    SP0GW01.SP0GWMSG = "NO DELETES ALLOWED BECAUSE OF STATUS";
  end


   /* *************************************************************/
      /* reset screen attributes*/

  set SP0GM050.XSGCD[1] cursor;
  SP0GW01.SP0GWSB1 = 1;
  while (SP0GW01.SP0GWSB1 < 21)
    set SP0GM050.XSGCD[SP0GWSB1] initialAttributes;
    if (SP0GM050.XSGCD[SP0GWSB1] == "  ")
      SP0GM050.XSGDESC[SP0GWSB1] = " ";
    end
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end



end // end SP0GS42

// main edit group for spec cust-
Function SP0GS51()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0GW01.SP0GWMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0GW01.SP0GWVF = "N";
    return;
  end


   /* ***********************************************************/
      /* sp0gs52  to check fields for entry.  if no change was*/
               /* made, sp0gw01.sp0gwvf is ' '; else if any error*/
               /* is detected, 'n'; else if all correct and a*/
               /* change was made, 'y'.*/
   /* ***********************************************************/


  SP0GS52(); /* validate entries*/


  if (SP0GW01.SP0GWVF == " ") /* no screen update*/
    if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0GM050.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "C";
            exit stack;
          end
        end
      end
    end
  else
    if (SP0GM050.SP1ID != SP0GW01.SP1ID) /* change in key*/
      SP0GM050.SP0GMMSG = "DO NOT UPDATE AND CHANGE SALE PROGRAM ID";
      SP0GM050.SP1ID = SP0GW01.SP1ID; /* move old sp id back*/
      SP0GW01.SP0GWVF = "N";
    end
  end



   /* ***********************************************************/
      /* sp0gs53 check for fast path, modified data, pf1, pf4*/
   /* ***********************************************************/

  SP0GS53();

  if (converseVar.validationMsgNum > 0)
    SP0GW01.SP0GWVF = "N";
    return;
  end



   /* ***********************************************************/
      /* was an option selected ? eg a, or d.  if not,*/
      /* was pa2 or pf3 hit to transfer?*/
   /* ***********************************************************/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end


   /* ********************************************************/
      /* were there any changes made to the screen?*/
   /* ********************************************************/

  if (SP0GW01.SP0GWVF == " ")
    SP0GW01.SP0GWVF = "N";
    converseLib.validationFailed(4);
    SP0GW01.SP0GWMSG = "PLEASE MODIFY DATA OR EXIT FROM THIS SCREEN";
    return;
  end


end // end SP0GS51

// validate spcl cust grp entries
Function SP0GS52()


  SP0GW01.SP0GWVF = " ";

   /* ************************************************************/
      /* this statement group is used to validate the entries*/
      /* on the screen.*/
   /* ************************************************************/

   /* ************************************************************/
       /* for active, inactive, or finished spgm status, do not*/
       /* allow deletions of xsg codes.  check for deleted xsg*/
       /* codes.*/

  if (SP1REC.SP1STAT == "A"
   || SP1REC.SP1STAT == "I"
   || SP1REC.SP1STAT == "F")
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GWSB1 < 21
     && SP1REC.XSGCD[SP0GWSB1] != "  ")
      if (SP1REC.XSGCD[SP0GWSB1] != "**"
       && SP1REC.XSGCD[SP0GWSB1] > " A")
        if (SP1REC.XSGCD[SP0GWSB1] in SP0GM050.XSGCD)
               /* the xsg code was not deleted*/
        else /* the xsg code was deleted*/
          SP0GW01.SP0GWMSG = "DELETES NOT POSSIBLE - PLEASE EXIT AND TRY AGAIN";
          SP0GW01.SP0GWVF = "N";
          converseLib.validationFailed(12);
          return;
        end
      end
      SP0GWSB1 = SP0GWSB1 + 1;
    end
  end


   /* ************************************************************/
       /* check for duplicates on the screen*/

  SP0GW01.SP0GWSB1 = 19;
  SP0GW01.SP0GWSB2 = 20;
  while (SP0GWSB1 > 0)
    if (SP0GM050.XSGCD[SP0GWSB2] != "  "
     && SP0GM050.XSGCD[SP0GWSB1] == SP0GM050.XSGCD[SP0GWSB2])
      SP0GW01.SP0GWMSG = "DUPLICATE SPCL GRP CODE ";
      SP0GW01.SP0GWVF = "N";
      converseLib.validationFailed(20);
      set SP0GM050.XSGCD[SP0GWSB2] cursor, bold;
    end
    SP0GWSB1 = SP0GWSB1 - 1;
    SP0GWSB2 = SP0GWSB1 + 1;
  end


   /* ************************************************************/
       /* validate entered xsg codes against the table*/

  SP0GW01.SP0GWSB1 = 20;
  while (SP0GWSB1 > 0)
    if (SP0GM050.XSGCD[SP0GWSB1] != "  ")

      if (SP0GM050.XSGCD[SP0GWSB1] in XSGTBL.XSGCD)
        SP0GM050.XSGDESC[SP0GWSB1] = XSGTBL.XSGDESC[sysVar.arrayIndex];
      end

      if (sysVar.arrayIndex == 0)
        SP0GM050.XSGDESC[SP0GWSB1] = "INVALID SPCL CUST GRP CD";
        SP0GW01.SP0GWMSG = "ERROR - THIS IS NOT A VALID SPCL CUST GRP CD";
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(26);
        set SP0GM050.XSGCD[SP0GWSB1] cursor, bold;
      else
        SP0GWSB2 = sysVar.arrayIndex;
        sysVar.arrayIndex = 0;
        if (SP0GM050.XSGCD[SP0GWSB1] in SP1REC.XSGCD)
            /* entry was not new so, no need to check if code was active*/
        else
          if (XSGTBL.XXXSTAT[SP0GWSB2] != "A")
            SP0GW01.SP0GWMSG = "SPCL-CUST-GRP-CD IS INACTIVE";
            SP0GW01.SP0GWVF = "N";
            converseLib.validationFailed(26);
            set SP0GM050.XSGCD[SP0GWSB1] cursor, bold;
          end
        end
      end
    end
    SP0GWSB1 = SP0GWSB1 - 1;
  end

  if (SP0GW01.SP0GWVF != " ")
    return;
  end


   /* ************************************************************/
      /* for sp1recs with '**' present in one of the xsg buckets,*/
      /* only 19 entries are allowed.*/

  if ("**" in SP1REC.XSGCD
   && SP0GM050.XSGCD[20] != "  ")
    SP0GW01.SP0GWMSG = "ONLY 19 SP CUST GRP CODES ALLOWED FOR THIS SPGM";
    SP0GW01.SP0GWVF = "N";
    converseLib.validationFailed(26);
    set SP0GM050.XSGCD[20] cursor, bold;
    return;
  end





   /* ************************************************************/
       /* after all the validations, check if there were changes*/

  SP0GWSB1 = 1;
                                   /* check if any were deleted from screen*/
  while (SP0GWSB1 < 21
   && SP1REC.XSGCD[SP0GWSB1] != "  ")
    if (SP1REC.XSGCD[SP0GWSB1] != "**"
     && SP1REC.XSGCD[SP0GWSB1] > " A")
      if (SP1REC.XSGCD[SP0GWSB1] in SP0GM050.XSGCD)
           /* the xsg code was not deleted from the screen*/
      else /* the xsg code was deleted from the screen*/
        SP0GW01.SP0GWVF = "Y"; /* change ' ' to 'y'*/
        SP0GWSB1 = 21;
      end
    end
    SP0GWSB1 = SP0GWSB1 + 1;
  end

  SP0GWSB1 = 1;
                                   /* check if any were added to the screen*/
  while (SP0GWSB1 < 21
   && SP0GM050.XSGCD[SP0GWSB1] != "  ")
    if (SP0GM050.XSGCD[SP0GWSB1] in SP1REC.XSGCD)
         /* the xsg code originally existed in sp1rec*/
    else /* the xsg code on the screen is new*/
      SP0GW01.SP0GWVF = "Y"; /* change ' ' to 'y'*/
      SP0GWSB1 = 21;
    end
    SP0GWSB1 = SP0GWSB1 + 1;
  end



end // end SP0GS52

// edit for fast path, data mod--
Function SP0GS53()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0GM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end




   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/

  if (SP0GM050.CATOAP != " ")
    if (SP0GW01.SP0GWVF != " ") /* if header modified*/
      SP0GW01.SP0GWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0GM050.CATOAP = " ";
      SP0GM050.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0GM050.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0GM050.CATOAP;
      COMMAREA.CAITEM = SP0GM050.CAITEM;
      XSEXIT();
      SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
      SP0GM050.CATOAP = " ";
      SP0GM050.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0GS53

// set up xsgcd's on sp1rec
Function SP0GS56()



   /* ************************************************************/
      /* this statement group sets up the xsg codes on sp0gm050*/
      /* on sp1rec.  this routine also provides for '**' on one*/
      /* of the sp1rec xsgcd buckets.*/
   /* ************************************************************/



  if ("**" in SP1REC.XSGCD)
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GWSB1 < 11)
      SP1REC.XSGCD[SP0GWSB1] = SP0GM050.XSGCD[SP0GWSB1];
      SP0GWSB1 = SP0GWSB1 + 1;
    end
    if ("  " in SP1REC.XSGCD)
      SP1REC.XSGCD[sysVar.arrayIndex] = "**";
    else
      SP1REC.XSGCD[10] = "**";
    end
  else
    SP0GW01.SP0GWSB1 = 1;
    while (SP0GWSB1 < 11)
      SP1REC.XSGCD[SP0GWSB1] = SP0GM050.XSGCD[SP0GWSB1];
      SP0GWSB1 = SP0GWSB1 + 1;
    end
  end



end // end SP0GS56

// sp4rec sp for cust comp id's-
Function SP0GS61()


  call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SP0GW01.SP1ID[SP0GWSB1] = SP4REC.SP1ID;
    SP0GW01.KUCCOID[SP0GWSB1] = SP4REC.KUCCOID;
    SP0GW01.KUMSTRID[SP0GWSB1] = SP4REC.KUMSTRID;
    SP0GW01.XNXCD[SP0GWSB1] = SP4REC.XNXCD;
    SP0GW01.XGPCD[SP0GWSB1] = SP4REC.XGPCD;
    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0G   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0GSA1 ";
      TA1REC.TA1LOCAT[3] = "IO0100  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0GM070";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1TBLKE = SP4REC.SP4KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0GW01.SP0GWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0GS61

// to load entries to map
Function SP0GS62()



   /* ************************************************************/
      /* move all information from the work areas to*/
      /* show on map sp0gm070.*/
   /* ************************************************************/
         /* load heading information*/

  SP0GM070.XXXERRID = "SP0G070";
  SP0GM070.SP0GMTDT = VGVar.currentShortGregorianDate;
  SP0GM070.SP1ID = SP1REC.SP1ID;
  SP0GM070.SP1NM = SP1REC.SP1NM;
  if (SP1REC.SP1STAT == "A")
    SP0GM070.SP0GMSTD = "ACTIVE";
  else
    if (SP1REC.SP1STAT == "I")
      SP0GM070.SP0GMSTD = "INACTIVE";
    else
      if (SP1REC.SP1STAT == "F")
        SP0GM070.SP0GMSTD = "FINISHED";
      else
        if (SP1REC.SP1STAT == "P")
          SP0GM070.SP0GMSTD = "PARTIAL";
        else
          if (SP1REC.SP1STAT == "C")
            SP0GM070.SP0GMSTD = "COMPLETE";
          else
            SP0GM070.SP0GMSTD = " ";
          end
        end
      end
    end
  end

       /* load item information to 7 lines*/

  SP0GW01.SP0GWSB2 = SP0GW01.SP0GWPOS; /* start pos in work array*/
  SP0GW01.SP0GWSB1 = 1;
  set SP0GM070.SP0GWMOP[1] cursor;

  while (SP0GW01.SP0GWSB1 < 8)
    SP0GM070.SP0GWMOP[SP0GWSB1] = " ";
    SP0GM070.KUCCOID[SP0GWSB1] = SP0GW01.KUCCOID[SP0GWSB2];
    SP0GM070.KUMSTRID[SP0GWSB1] = SP0GW01.KUMSTRID[SP0GWSB2];
    SP0GM070.XNXCD[SP0GWSB1] = SP0GW01.XNXCD[SP0GWSB2];
    SP0GM070.XGPCD[SP0GWSB1] = SP0GW01.XGPCD[SP0GWSB2];

    if (SP0GM070.KUCCOID[SP0GWSB1] == 0 /* blank screen line*/
     && SP0GM070.KUMSTRID[SP0GWSB1] == 0
     && SP0GM070.XNXCD[SP0GWSB1] == 0   
     && SP0GM070.XGPCD[SP0GWSB1] == "  ")

      SP0GM070.KUCCONM[SP0GWSB1] = " ";
      SP0GM070.KUMSTRNM[SP0GWSB1] = " ";
      SP0GM070.XNXDESC[SP0GWSB1] = " ";
      SP0GM070.XGPDESC[SP0GWSB1] = " ";

      set SP0GM070.SP0GWMOP[SP0GWSB1] normal;
      set SP0GM070.KUCCOID[SP0GWSB1] normal;
      set SP0GM070.KUMSTRID[SP0GWSB1] normal;
      set SP0GM070.XNXCD[SP0GWSB1] normal;
      set SP0GM070.XGPCD[SP0GWSB1] normal;

    else /* occupied screen line*/
      SP0GS63(); /* get customer name*/
      SP0GS64(); /* get store name*/
      SP0GS65(); /* get dept name*/
      SP0GS66(); /* get gpc description*/

      set SP0GM070.SP0GWMOP[SP0GWSB1] normal;
      set SP0GM070.KUCCOID[SP0GWSB1] protect;
      set SP0GM070.KUMSTRID[SP0GWSB1] protect;
      set SP0GM070.XNXCD[SP0GWSB1] protect;
      set SP0GM070.XGPCD[SP0GWSB1] protect;

    end

    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
    SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
  end


  if (SP0GW01.SP0GWTSZ == 0)
    SP0GM070.SP0GMMSG = "NO CUST COMPANIES CURRENTLY EXIST FOR THIS S.P.";
    SP0GM070.VAGen_EZEMSG = "VALID SELECTIONS ==>  'a' to add  --  or exit  ";
  end


  SP0GM070.SP0GMPGN = SP0GW01.SP0GWPGN;



end // end SP0GS62

// get cust company name
Function SP0GS63()



   /* ************************************************************/
      /* this statement group is validate customer company id's*/
      /* against the customer company db2 table.*/
      /* this routine assumes that it is being performed by*/
      /* another routine looping through the screen (sp0gm070)*/
      /* and that sp0gwsb1 is valued.*/
   /* ************************************************************/


  SQLCA.VAGen_SQLCODE = 0;
  KUCREC.KUCCOID = SP0GM070.KUCCOID[SP0GWSB1];

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0GM070.KUCCONM[SP0GWSB1] = KUCREC.KUCCONM;
  else
    SP0GM070.KUCCONM[SP0GWSB1] = "INVALID COMPANY";
  end



end // end SP0GS63

// get cust store id name
Function SP0GS64()



   /* ************************************************************/
      /* this statement group gets the description for company-*/
      /* store codes and assumes that sp0gwsb1 points to a row*/
      /* on the map (sp0gm070).*/
   /* ************************************************************/


  SQLCA.VAGen_SQLCODE = 0;

  if (SP0GM070.KUMSTRID[SP0GWSB1] == 9999)
    SP0GM070.KUMSTRNM[SP0GWSB1] = "ALL STORES SELECTED";
    return;
  else
    KUMREC.KUCCOID = SP0GM070.KUCCOID[SP0GWSB1];
    KUMREC.KUMSTRID = SP0GM070.KUMSTRID[SP0GWSB1];
  end

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0GM070.KUMSTRNM[SP0GWSB1] = KUMREC.KUMSTRNM;
  else
    SP0GM070.KUMSTRNM[SP0GWSB1] = "INVALID STORE";
  end



end // end SP0GS64

// get xref dept id name
Function SP0GS65()



   /* ************************************************************/
      /* this statement group gets the nike xref dept description*/
      /* from the xnxtbl.*/
      /* the xref id must also be active.*/
   /* ************************************************************/


  sysVar.arrayIndex = 0;

  if (SP0GM070.XNXCD[SP0GWSB1] == 99)
    SP0GM070.XNXDESC[SP0GWSB1] = "ALL DEPTS";
    return;
  end

  if (SP0GM070.XNXCD[SP0GWSB1] in XNXTBL.XNXCD)
    if (XNXTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SP0GM070.XNXDESC[SP0GWSB1] = "INACTIVE XREF CODE";
    else
      SP0GM070.XNXDESC[SP0GWSB1] = XNXTBL.XNXABRV[sysVar.arrayIndex];
    end
  else
    SP0GM070.XNXDESC[SP0GWSB1] = "INVALID NIKE XREF CODE";
  end



end // end SP0GS65

// get gen product codes desc
Function SP0GS66()



   /* ************************************************************/
      /* this statement group gets the general product code*/
      /* description from gen product table (xgptbl).*/

      /* the general product code must also be active.*/
   /* ************************************************************/



  sysVar.arrayIndex = 0;

  if (SP0GM070.XGPCD[SP0GWSB1] == "99"
   || SP0GM070.XGPCD[SP0GWSB1] == " ")
    SP0GM070.XGPCD[SP0GWSB1] = "99";
    SP0GM070.XGPDESC[SP0GWSB1] = "all gpc's";
    return;
  end


  if (SP0GM070.XGPCD[SP0GWSB1] in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SP0GM070.XGPDESC[SP0GWSB1] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      SP0GM070.XGPDESC[SP0GWSB1] = "INACT GPC";
    end
  else
    SP0GM070.XGPDESC[SP0GWSB1] = "INVAL GPC";
  end



end // end SP0GS66

// validate sp0gm070 entries
Function SP0GS71()



   /* *********************************************************/
      /* this statement group validates entries made to*/
      /* sp0gm070.  if errors are found on the screen,*/
      /* sp0gwvf will contain 'n'.  if change requests were*/
      /* made on the screen and were valid, sp0gwvf will*/
      /* have 'y' for its value.  if no change requests were*/
      /* made to the screen, sp0gwvf will have ' '.*/
   /* *********************************************************/
                                    /* reset screen to defined*/
  set SP0GM070.SP0GWMOP[1] cursor;
  SP0GW01.SP0GWSB1 = 1;
  SP0GW01.SP1ID = SP0GM070.SP1ID;

  while (SP0GWSB1 < 8)
    set SP0GM070.SP0GWMOP[SP0GWSB1] initialAttributes;
    set SP0GM070.KUCCOID[SP0GWSB1] initialAttributes;
    set SP0GM070.KUMSTRID[SP0GWSB1] initialAttributes;
    set SP0GM070.XNXCD[SP0GWSB1] initialAttributes;
    set SP0GM070.XGPCD[SP0GWSB1] initialAttributes;

    if (SP0GM070.SP0GWMOP[SP0GWSB1] != "  ")
      SP0GW01.SP0GWVF = "Y";
    end

    SP0GWSB2 = SP0GWPOS + SP0GWSB1 - 1;
    if (SP0GWSB2 <= SP0GWTSZ)
      set SP0GM070.KUCCOID[SP0GWSB1] protect;
      set SP0GM070.KUMSTRID[SP0GWSB1] protect;
      set SP0GM070.XNXCD[SP0GWSB1] protect;
      set SP0GM070.XGPCD[SP0GWSB1] protect;
    end
    SP0GWSB1 = SP0GWSB1 + 1;
  end


   /* *********************************************************/
                             /* validate action codes entered*/

  SP0GW01.SP0GWSB1 = 7;

  while (SP0GWSB1 > 0)
    if (SP0GM070.SP0GWMOP[SP0GWSB1] != " " /* invalid action code*/
     && SP0GM070.SP0GWMOP[SP0GWSB1] != "A" 
     && SP0GM070.SP0GWMOP[SP0GWSB1] != "D")
      SP0GW01.SP0GWVF = "N";
      set SP0GM070.SP0GWMOP[SP0GWSB1] cursor, bold;
      converseLib.validationFailed(34);
    else
      SP0GWSB2 = SP0GWPOS + SP0GWSB1 - 1;
      if (SP0GM070.SP0GWMOP[SP0GWSB1] == "A" /* add not allowed here*/
       && SP0GWSB2 <= SP0GWTSZ)             
        SP0GW01.SP0GWVF = "N";
        set SP0GM070.SP0GWMOP[SP0GWSB1] cursor, bold;
        converseLib.validationFailed(35);
      else
        if (SP0GM070.SP0GWMOP[SP0GWSB1] == "D" /* delete not allowed here*/
         && SP0GWSB2 > SP0GWTSZ)              
          SP0GW01.SP0GWVF = "N";
          set SP0GM070.SP0GWMOP[SP0GWSB1] cursor, bold;
          converseLib.validationFailed(32);
        else
          if (SP0GM070.SP0GWMOP[SP0GWSB1] == "D") /* no del bec. of status*/
            if (SP1REC.SP1STAT == "A"
             || SP1REC.SP1STAT == "I"
             || SP1REC.SP1STAT == "F")
              SP0GW01.SP0GWVF = "N";
              set SP0GM070.SP0GWMOP[SP0GWSB1] cursor, bold;
              SP0GM070.SP0GMMSG = "NO DELETES ALLOWED.";
              converseLib.validationFailed(12);
            end
          else
              /* line is filled but no action code 'a'*/
            if (SP0GWSB2 > SP0GWTSZ
             && SP0GM070.SP0GWMOP[SP0GWSB1] == " ")
              if (SP0GM070.KUCCOID[SP0GWSB1] > 0
               || SP0GM070.KUMSTRID[SP0GWSB1] > 0
               || SP0GM070.XNXCD[SP0GWSB1] > 0
               || SP0GM070.XGPCD[SP0GWSB1] != " ")
                SP0GW01.SP0GWVF = "N";
                set SP0GM070.SP0GWMOP[SP0GWSB1] cursor, bold;
                SP0GM070.SP0GMMSG = "AN ACTION CODE IS REQUIRED.";
                converseLib.validationFailed(32);
              end
            end
          end
        end
      end
    end

    SP0GWSB1 = SP0GWSB1 - 1;
  end


   /* *********************************************************/
                   /* if no action code, check for change key*/
                   /* or transfer to another screen.*/

  if (SP0GW01.SP0GWVF == " ") /* no screen update*/
    if (SP0GM070.SP1ID != SP1REC.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0GM070.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "A";
            exit stack;
          end
        end
      end
    end
  else
    if (SP0GM070.SP1ID != SP1REC.SP1ID) /* change in key*/
      SP0GM070.SP0GMMSG = "DO NOT UPDATE AND CHANGE SALES PROGRAM ID";
      SP0GM070.SP1ID = SP1REC.SP1ID; /* move old sp id back*/
      SP0GW01.SP0GWVF = "N";
    end
  end


   /* *********************************************************/
      /* sp0gs72 check for fast path, modified data, pf1, pf4*/

  SP0GS72();

  if (SP0GW01.SP0GWVF == "N")
    return;
  end



   /* *********************************************************/
                              /* was pf 14, 15 or 16 pressed?*/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end



   /* *********************************************************/
      /* was an option selected ? eg a, or d.  if not,*/
      /* send a message to select an option and return*/
      /* to sp0m070 with no updates.*/

  if (SP0GW01.SP0GWVF == " ")
    SP0GS62(); /* refresh screen*/
    converseLib.validationFailed(4);
    SP0GM070.SP0GMMSG = "PLEASE ADD OR DELETE A RECORD; OR PF3 TO EXIT";
    return;
  end


   /* *********************************************************/
                              /* validate codes on the screen*/

  SP0GW01.SP0GWSB1 = 7;
  SP0GW01.SP0GWID = SP0GM070.SP1ID;

  while (SP0GWSB1 > 0)

      /* validate each component of the code against csp tables*/
      /* only for new lines. (option = 'add')*/

    if (SP0GM070.SP0GWMOP[SP0GWSB1] == "A")
      SP0GS66(); /* get group product code*/
      if (SP0GM070.XGPCD[SP0GWSB1] != "99"
       && sysVar.arrayIndex == 0)
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.XGPCD[SP0GWSB1] cursor, bold;
      end

      SP0GS65(); /* get customer department description*/
      if (SP0GM070.XNXCD[SP0GWSB1] != 99
       && sysVar.arrayIndex == 0)
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.XNXCD[SP0GWSB1] cursor, bold;
      end

      SP0GS64(); /* get customer store description*/
      if (SQLCA.VAGen_SQLCODE != +0)
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.KUMSTRID[SP0GWSB1] cursor, bold;
      end

      SP0GS63(); /* get company description*/
      if (SQLCA.VAGen_SQLCODE != +0)
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.KUCCOID[SP0GWSB1] cursor, bold;
      end
    end

      /* validate the entire line against the saved array in w.s.*/

    SP0GW01.SP0GWKC = SP0GM070.KUCCOID[SP0GWSB1];
    SP0GW01.SP0GWKM = SP0GM070.KUMSTRID[SP0GWSB1];
    SP0GW01.SP0GWXN = SP0GM070.XNXCD[SP0GWSB1];
    SP0GW01.SP0GWXG = SP0GM070.XGPCD[SP0GWSB1];
    if (SP0GW01.SP4KEY in SP0GWTL2)
                                   /* line entry on screen exists in table*/
      if (SP0GM070.SP0GWMOP[SP0GWSB1] == "A") /* duplicate entry*/
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.KUCCOID[SP0GWSB1] cursor, bold;
        set SP0GM070.KUMSTRID[SP0GWSB1] bold;
        set SP0GM070.XNXCD[SP0GWSB1] bold;
        set SP0GM070.XGPCD[SP0GWSB1] bold;
        SP0GM070.SP0GMMSG = "CUSTOMER CODE/GPC ALREADY EXISTS";
      end
    else
      if (SP0GM070.SP0GWMOP[SP0GWSB1] == "D") /* record does not exist*/
        SP0GW01.SP0GWVF = "N";
        converseLib.validationFailed(27);
        set SP0GM070.KUCCOID[SP0GWSB1] cursor, bold;
        set SP0GM070.KUMSTRID[SP0GWSB1] bold;
        set SP0GM070.XNXCD[SP0GWSB1] bold;
        set SP0GM070.XGPCD[SP0GWSB1] bold;
        SP0GM070.SP0GMMSG = "CUSTOMER CODE/GPC NOT FOUND";
      end
    end

      /* validate the entire line against any prior line on screen*/
      /* for duplicates if the option was add.*/

    if (SP0GM070.SP0GWMOP[SP0GWSB1] == "A")
      SP0GWSB2 = 1;
      while (SP0GWSB2 < SP0GWSB1)
        if (SP0GM070.SP0GWMOP[SP0GWSB2] == "A")
          if (SP0GM070.XGPCD[SP0GWSB2] == "  ")
            SP0GM070.XGPCD[SP0GWSB2] = "99";
          end
          if (SP0GM070.KUCCOID[SP0GWSB1] == SP0GM070.KUCCOID[SP0GWSB2]
           && SP0GM070.KUMSTRID[SP0GWSB1] == SP0GM070.KUMSTRID[SP0GWSB2]
           && SP0GM070.XNXCD[SP0GWSB1] == SP0GM070.XNXCD[SP0GWSB2]
           && SP0GM070.XGPCD[SP0GWSB1] == SP0GM070.XGPCD[SP0GWSB2])
            SP0GW01.SP0GWVF = "N";
            converseLib.validationFailed(27);
            set SP0GM070.KUCCOID[SP0GWSB1] cursor, bold;
            set SP0GM070.KUMSTRID[SP0GWSB1] bold;
            set SP0GM070.XNXCD[SP0GWSB1] bold;
            set SP0GM070.XGPCD[SP0GWSB1] bold;
            SP0GM070.SP0GMMSG = "CUSTOMER CODE/GPC BEING ADDED TWICE";
          end
        end
        SP0GWSB2 = SP0GWSB2 + 1;
      end
    end


    SP0GWSB1 = SP0GWSB1 - 1;
  end



end // end SP0GS71

// edit for fast path, data mod -
Function SP0GS72()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0U";
    COMMAREA.CAITEM = SP0GM070.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end




   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/

  if (SP0GM070.CATOAP != " ")
    if (SP0GW01.SP0GWVF != " ") /* if header modified*/
      SP0GM070.SP0GMMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0GM070.CATOAP = " ";
      SP0GM070.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0GM070.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0GM070.CATOAP;
      COMMAREA.CAITEM = SP0GM070.CAITEM;
      XSEXIT();
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0GM070.SP0GMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0GM070.SP0GMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0GS72

// forward scroll for cust comp
Function SP0GS73()


           /* forward scroll routine for sp0gm070*/


   /* ***********************************************************/
      /* check if last line on screen is filled in array*/

  SP0GW01.SP0GWSB1 = SP0GW01.SP0GWPOS + 6;

  if (SP0GW01.SP0GWSB1 > SP0GW01.SP0GWTSZ)
    SP0GW01.SP0GWVF = "N";
    SP0GM070.SP0GMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
    return;
  end


   /* ***********************************************************/
      /* increment sp0gwpos (top of screen pointer) and*/
      /* refresh the map from the saved array in working*/
      /* storage.*/

  SP0GW01.SP0GWPGN = SP0GW01.SP0GWPGN + 1;
  SP0GW01.SP0GWPOS = SP0GW01.SP0GWPOS + 7;

  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = "FORWARD SCROLL PERFORMED.";
  SP0GS62(); /* load map from array using sp0gwpos as starting pointer*/



end // end SP0GS73

// backward scroll for cust comp
Function SP0GS74()


           /* backward scroll routine for sp0gm070*/


   /* *********************************************************/
       /* check if top of screen pointer is set to 1.*/

  if (SP0GW01.SP0GWPOS == 1)
    SP0GW01.SP0GWVF = "N";
    SP0GM070.SP0GMMSG = "NO MORE BACKWARD SCROLL POSSIBLE";
    return;
  end

  SP0GW01.SP0GWPGN = SP0GW01.SP0GWPGN - 1;
  SP0GW01.SP0GWPOS = SP0GW01.SP0GWPOS - 7;

  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = "BACKWARD SCROLL PERFORMED.";
  SP0GS62(); /* load map from array using sp0gwpos as starting pointer*/



end // end SP0GS74

// scroll to bottom of cust comp
Function SP0GS75()


       /* forward scroll to the bottom routine for sp0gm070*/


   /* ***********************************************************/
      /* check if last line on screen is filled in array*/
      /* to see if forward scroll is still possible*/

  SP0GW01.SP0GWSB1 = SP0GW01.SP0GWPOS + 6;

  if (SP0GW01.SP0GWSB1 > SP0GW01.SP0GWTSZ)
    SP0GW01.SP0GWVF = "N";
    SP0GM070.SP0GMMSG = "ALREADY AT THE BOTTOM OF LIST";
    return;
  end


   /* ***********************************************************/
      /* compute for the last page depending on the size of*/
      /* the loaded workarea array and the top of page pointer.*/

  SP0GW01.SP0GWPGN = mathLib.round(SP0GW01.SP0GWTSZ / 7 + 0.5, -mathLib.decimals(SP0GW01.SP0GWPGN));
  SP0GW01.SP0GWPOS = SP0GW01.SP0GWPGN * 7 - 6;


  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = "BOTTOM OF LIST.";
  SP0GS62(); /* load map from array using sp0gwpos as starting point*/



end // end SP0GS75

// scroll to top of cust company
Function SP0GS76()


         /* backward scroll to top routine for sp0gm070*/


   /* *********************************************************/
       /* check if top of screen pointer is set to 1.*/

  if (SP0GW01.SP0GWPOS == 1)
    SP0GW01.SP0GWVF = "N";
    SP0GM070.SP0GMMSG = "SCREEN ALREADY DISPLAYS TOP OF LIST";
    return;
  end

  SP0GW01.SP0GWPGN = 1;
  SP0GW01.SP0GWPOS = 1;

  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = "TOP OF LIST.";
  SP0GS62(); /* load map from array using sp0gwpos as starting pointer*/



end // end SP0GS76

// set map for update confirmatio
Function SP0GS77()



   /* ************************************************************/
      /* this statement group sets all map attributes to protect*/
      /* and prompt an 'enter' key confirmation for update*/
   /* ************************************************************/



  SP0GW01.SP0GWSB1 = 1;

  while (SP0GWSB1 < 8)
    if (SP0GM070.SP0GWMOP[SP0GWSB1] != " ")
      set SP0GM070.SP0GWMOP[SP0GWSB1] bold;
      set SP0GM070.KUCCOID[SP0GWSB1] bold;
      set SP0GM070.KUMSTRID[SP0GWSB1] bold;
      set SP0GM070.XNXCD[SP0GWSB1] bold;
      set SP0GM070.XGPCD[SP0GWSB1] bold;
    end

    set SP0GM070.SP0GWMOP[SP0GWSB1] protect;
    set SP0GM070.KUCCOID[SP0GWSB1] protect;
    set SP0GM070.KUMSTRID[SP0GWSB1] protect;
    set SP0GM070.XNXCD[SP0GWSB1] protect;
    set SP0GM070.XGPCD[SP0GWSB1] protect;

    SP0GW01.SP0GWSB1 = SP0GW01.SP0GWSB1 + 1;
  end

  set SP0GM070.CATOAP cursor;
  SP0GM070.SP0GMMSG = "PRESS ENTER TO CONFIRM UPDATE";



end // end SP0GS77

// update array, sp4rec & sp1rec
Function SP0GS78()


      /* this statement group updates the array in working*/
      /* storage as well as sp4rec.*/

   /* *******************************************************/
                                          /* update sp4recs*/


  SP0GW01.SP0GWSB1 = 1;

  while (SP0GWSB1 <= 7)
    SP0GS79(); /* update sp4rec from sp0gm070*/
    SP0GWSB1 = SP0GWSB1 + 1;
  end


   /* *******************************************************/
                                /* update sp1rec indicators*/

  SP0GW01.SP0GWUPF = "N";

  SP0GS37(); /* check customer status update*/
  SP0GS38(); /* update sp1rec*/

    /* the previous routines were 'borrowed' from screen*/
    /* sp0gm030.  messages are put out to sp0gm030*/
    /* by the routines.  to display the proper messages,*/
    /* move the contents of the message area on sp0gm030*/
    /* to sp0gm070.*/

  converseLib.validationFailed(0);
  SP0GM070.SP0GMMSG = SP0GM030.SP0GMMSG;

   /* *******************************************************/
                           /* refresh screen from the array*/

  SP0GS62();



end // end SP0GS78

// update array & sp4rec by line
Function SP0GS79()



   /* ************************************************************/
      /* this statement group is used to add , or delete*/
      /* an customer company id for a sales program.*/
   /* ************************************************************/


   /* -----------------------------------------------------------*/
      /* goback if the option code for the line is not 'a' or 'd'*/

  if (SP0GM070.SP0GWMOP[SP0GWSB1] != "A"
   && SP0GM070.SP0GWMOP[SP0GWSB1] != "D")
    return;
  end


  SP4REC.SP1ID = SP0GM070.SP1ID;
  SP4REC.KUCCOID = SP0GM070.KUCCOID[SP0GWSB1];
  SP4REC.KUMSTRID = SP0GM070.KUMSTRID[SP0GWSB1];
  SP4REC.XNXCD = SP0GM070.XNXCD[SP0GWSB1];
  SP4REC.XGPCD = SP0GM070.XGPCD[SP0GWSB1];

  SP0GW01.SP0GWID = SP0GM070.SP1ID;
  SP0GW01.SP0GWKC = SP0GM070.KUCCOID[SP0GWSB1];
  SP0GW01.SP0GWKM = SP0GM070.KUMSTRID[SP0GWSB1];
  SP0GW01.SP0GWXN = SP0GM070.XNXCD[SP0GWSB1];
  SP0GW01.SP0GWXG = SP0GM070.XGPCD[SP0GWSB1];


   /* -----------------------------------------------------------*/
                    /* retrieve the current sp4rec on screen line*/

  call "IO0100" ("S ", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SP0GS79 ";
    TA1REC.TA1LOCAT[3] = "IO0100  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0GM070";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = SP4REC.SP4KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end


   /* -----------------------------------------------------------*/
                                         /* if option code is add*/

  if (SP0GM070.SP0GWMOP[SP0GWSB1] == "A")

     /* ------------------------------------------- add to sp4rec*/

    if (SQLCA.VAGen_SQLCODE == +0)
         /* sp4rec was added by another user*/
    else
         /* add an sp4rec from the screen*/
      set SP4REC empty;
      set SQLCA empty;
      SP4REC.SP1ID = SP0GM070.SP1ID;
      SP4REC.KUCCOID = SP0GM070.KUCCOID[SP0GWSB1];
      SP4REC.KUMSTRID = SP0GM070.KUMSTRID[SP0GWSB1];
      SP4REC.XNXCD = SP0GM070.XNXCD[SP0GWSB1];
      SP4REC.XGPCD = SP0GM070.XGPCD[SP0GWSB1];
      SP4REC.ZZZCHGCT = 0;
      SP0GW01.SP0GWT1 = VGVar.currentFormattedTime;
      SP0GW01.SP0GWTH2 = SP0GW01.SP0GWTH1;
      SP0GW01.SP0GWTM2 = SP0GW01.SP0GWTM1;
      SP4REC.ZZZCHGTM = SP0GW01.SP0GWT2;
  /*  */
  /* -------------------- y2k out begin ----------------------*/
  /*  */
  /* MOVE EZEDTE TO SP0GW01.SP0GWD;*/
  /* MOVE 019 TO SP0GW01.SP0GWD1;*/
  /*  */
  /* -------------------- y2k out end ------------------------*/
  /*  */
  /*  */
  /* -------------------- y2k in begin ----------------------*/
  /*  */
      SP0GW01.SP0GWD = VGVar.currentGregorianDate;
  /*  */
  /* -------------------- y2k in end ------------------------*/
  /*  */
      SP4REC.ZZZCHGDT = SP0GW01.SP0GWD;
      call "IO0100" ("A ", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE != +0)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0G   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "SP0GS79 ";
        TA1REC.TA1LOCAT[3] = "IO0100  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0GM070";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1TBLKE = SP4REC.SP4KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end

     /* -------------------------------------------- add to array*/

    SP0GW01.SP0GWTSZ = SP0GW01.SP0GWTSZ + 1;
                                   /* increment array size counter*/

    SP0GW01.SP1ID[SP0GWTSZ] = SP0GM070.SP1ID;
    SP0GW01.KUCCOID[SP0GWTSZ] = SP0GM070.KUCCOID[SP0GWSB1];
    SP0GW01.KUMSTRID[SP0GWTSZ] = SP0GM070.KUMSTRID[SP0GWSB1];
    SP0GW01.XNXCD[SP0GWTSZ] = SP0GM070.XNXCD[SP0GWSB1];
    SP0GW01.XGPCD[SP0GWTSZ] = SP0GM070.XGPCD[SP0GWSB1];


    return;

  end


   /* -----------------------------------------------------------*/
                                      /* if option code is delete*/

  if (SP0GM070.SP0GWMOP[SP0GWSB1] == "D")

     /* -------------------------------------- delete from sp4rec*/

    if (SQLCA.VAGen_SQLCODE == +100)
         /* sp4rec was deleted by another user*/
    else
         /* delete an sp4rec*/
      SP4REC.SP1ID = SP0GM070.SP1ID;
      SP4REC.KUCCOID = SP0GM070.KUCCOID[SP0GWSB1];
      SP4REC.KUMSTRID = SP0GM070.KUMSTRID[SP0GWSB1];
      SP4REC.XNXCD = SP0GM070.XNXCD[SP0GWSB1];
      SP4REC.XGPCD = SP0GM070.XGPCD[SP0GWSB1];
      call "IO0100" ("D ", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE != +0)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SP0G   ";
        TA1REC.TA1LOCAT[1] = "D       ";
        TA1REC.TA1LOCAT[2] = "SP0GS79 ";
        TA1REC.TA1LOCAT[3] = "IO0100  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SP0GM070";
        TA1REC.TA1DBASE = "DSPGM.";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1TBLKE = SP4REC.SP4KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end

     /* --------------------------------------- delete from array*/

     /* get position of code to delete in array and put to sb2*/

    SP0GW01.SP0GWSB2 = SP0GW01.SP0GWPOS - 1 + SP0GW01.SP0GWSB1;
    SP0GW01.SP0GWSB3 = SP0GW01.SP0GWSB2 + 1;

     /* collapse the array to take the vacant line left by the*/
     /* deleted customer/gpc code.*/

    while (SP0GWSB2 <= SP0GWTSZ)

      if (SP0GWSB2 < SP0GWTSZ)
        SP0GW01.SP1ID[SP0GWSB2] = SP0GW01.SP1ID;
        SP0GW01.KUCCOID[SP0GWSB2] = SP0GW01.KUCCOID[SP0GWSB3];
        SP0GW01.KUMSTRID[SP0GWSB2] = SP0GW01.KUMSTRID[SP0GWSB3];
        SP0GW01.XNXCD[SP0GWSB2] = SP0GW01.XNXCD[SP0GWSB3];
        SP0GW01.XGPCD[SP0GWSB2] = SP0GW01.XGPCD[SP0GWSB3];
      else
        SP0GW01.SP1ID[SP0GWSB2] = " ";
        SP0GW01.KUCCOID[SP0GWSB2] = 0;
        SP0GW01.KUMSTRID[SP0GWSB2] = 0;
        SP0GW01.XNXCD[SP0GWSB2] = 0;
        SP0GW01.XGPCD[SP0GWSB2] = " ";
      end

      SP0GW01.SP0GWSB2 = SP0GW01.SP0GWSB2 + 1;
      SP0GW01.SP0GWSB3 = SP0GW01.SP0GWSB2 + 1;
    end

    SP0GW01.SP0GWTSZ = SP0GW01.SP0GWTSZ - 1; /* reduce array size counter*/


    return;

  end



end // end SP0GS79

//*** RECORD=SP0GW01 ****
// *******************************************************
// *   sales program customer work record
// *******************************************************
// *
// *
// *                 MAINTENANCE LOG
// *
// *   date        who         what
// *  04/07/92     ssj    E782-increased the size of the
// *                           table to hold 700 customers.
// *
// *******************************************************
// ***********************
Record SP0GW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0GWUPF SP0GWUPF ; 
  10 SP0GWMSG SP0GWMSG ; 
  10 SP0GWMOP SP0GWMOP [20] ; 
  10 SP0GWD SP0GWD ; 
    20 SP0GWD1 SP0GWD1 ; 
    20 SP0GWD2 SP0GWD2 ; 
  10 SP0GWT1 SP0GWT1 ; 
    20 SP0GWTH1 SP0GWTH1 ; 
    20 SP0GWTC1 SP0GWTC1 ; 
    20 SP0GWTM1 SP0GWTM1 ; 
    20 SP0GWTC2 SP0GWTC2 ; 
    20 SP0GWTS1 SP0GWTS1 ; 
  10 SP0GWT2 SP0GWT2 ; 
    20 SP0GWTH2 SP0GWTH2 ; 
    20 SP0GWTM2 SP0GWTM2 ; 
  10 SP0GWVF SP0GWVF ; 
  10 SP0GWVF1 SP0GWVF1 ; 
  10 SP0GWMDF SP0GWMDF ; 
  10 SP0GWHDM SP0GWHDM ; 
  10 SP0GWSDM SP0GWSDM ; 
  10 SP0GWSID SP0GWSID ; 
  10 SP0GWACF SP0GWACF ; 
  10 SP0GWAPF SP0GWAPF ; 
  10 SP0GWSB1 SP0GWSB1 ; 
  10 SP0GWSB2 SP0GWSB2 ; 
  10 SP0GWSB3 SP0GWSB3 ; 
  10 SP0GWSB4 SP0GWSB4 ; 
  10 SP0GWTSZ SP0GWTSZ ; 
  10 SP0GWPOS SP0GWPOS ; 
  10 SP0GWTBL SP0GWTBL ; 
    15 XOTCD XOTCD [200] ; 
  10 SP0GWTL2 SP0GWTL2 [700] ; 
    15 SP1ID SP1ID ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 XGPCD XGPCD ; 
  10 SP5KEY SP5KEY ; 
  10 SP0GWTL3 SP0GWTL3 ; 
    15 SP0GWFIL SP0GWFIL [200] ; 
    15 SY1STNBR SY1STNBR [200] ; 
    15 SY2CLRID SY2CLRID [200] ; 
    15 XDMCD XDMCD [200] ; 
  10 SP0GWTL4 SP0GWTL4 ; 
    15 SP1STAT SP1STAT [200] ; 
    15 SP1NM SP1NM [200] ; 
    15 SP1ABRV SP1ABRV [200] ; 
    15 XNDCD XNDCD [200] ; 
  10 XFMCD XFMCD ; 
  10 XFMDESC XFMDESC ; 
  10 XAUCD XAUCD ; 
  10 XAUDESC XAUDESC ; 
  10 XSGCD XSGCD ; 
  10 XSGDESC XSGDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP0GWOTH SP0GWOTH ; 
  10 SP0GWQTY SP0GWQTY ; 
  10 SP0GWDDL SP0GWDDL ; 
  10 SP0GWPCT SP0GWPCT ; 
  10 SP4KEY SP4KEY ; 
    15 SP0GWID SP0GWID ; 
    15 SP0GWKC SP0GWKC ; 
    15 SP0GWKM SP0GWKM ; 
    15 SP0GWXN SP0GWXN ; 
    15 SP0GWXG SP0GWXG ; 
  10 SP2DIND SP2DIND ; 
  10 SP0GWF3 SP0GWF3 ; 
  10 SP0GWFL1 SP0GWFL1 ; 
  10 SP0GWFL2 SP0GWFL2 ; 
  10 SP0GWFL3 SP0GWFL3 ; 
  10 SP0GWFL4 SP0GWFL4 ; 
  10 SP0GWFL5 SP0GWFL5 ; 
  10 SP0GWFL6 SP0GWFL6 ; 
  10 SP0GWFL7 SP0GWFL7 ; 
  10 SP0GWFL8 SP0GWFL8 ; 
  10 SP0GWFL9 SP0GWFL9 ; 
  10 SP0GWFLA SP0GWFLA ; 
  10 SP0GWPGN SP0GWPGN ; 
  10 SP0GWLOC SP0GWLOC ; 
    15 SP0GWID1 SP0GWID1 ; 
    15 SP0GWL1 SP0GWL1 ; 
    15 * char(15) ; 
end // end SP0GW01

// w.s. all company flag-
DataItem SP0GWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag-
DataItem SP0GWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date-
DataItem SP0GWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century-
DataItem SP0GWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd-
DataItem SP0GWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollar amount hold-
DataItem SP0GWDDL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view only flag...no update-
DataItem SP0GWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for sp1id & gpcd-
DataItem SP0GWFIL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag1
DataItem SP0GWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag2
DataItem SP0GWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag3
DataItem SP0GWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag4
DataItem SP0GWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag5
DataItem SP0GWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag6
DataItem SP0GWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag7
DataItem SP0GWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag8
DataItem SP0GWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag9
DataItem SP0GWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flaga
DataItem SP0GWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt-
DataItem SP0GWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold-
DataItem SP0GWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id for transfer
DataItem SP0GWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec kuccoid hold-
DataItem SP0GWKC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp4rec kumstrid hold-
DataItem SP0GWKM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part of app transfering to
DataItem SP0GWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// app transfer key
DataItem SP0GWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path-
DataItem SP0GWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen option field
DataItem SP0GWMOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field-
DataItem SP0GWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold code-
DataItem SP0GWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold
DataItem SP0GWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save page count
DataItem SP0GWPGN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table position
DataItem SP0GWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// discount quantity hold
DataItem SP0GWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1
DataItem SP0GWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2
DataItem SP0GWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript3
DataItem SP0GWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript4
DataItem SP0GWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt
DataItem SP0GWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id
DataItem SP0GWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem SP0GWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem SP0GWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order type table
DataItem SP0GWTBL char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 1
DataItem SP0GWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem SP0GWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem SP0GWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem SP0GWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust company id table
DataItem SP0GWTL2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product record table
DataItem SP0GWTL3 char(3400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s.p. browse table
DataItem SP0GWTL4 char(8200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time minute #1
DataItem SP0GWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem SP0GWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem SP0GWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table size
DataItem SP0GWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag
DataItem SP0GWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry
DataItem SP0GWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del
DataItem SP0GWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xgpcd hold
DataItem SP0GWXG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xnxcd hold
DataItem SP0GWXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

