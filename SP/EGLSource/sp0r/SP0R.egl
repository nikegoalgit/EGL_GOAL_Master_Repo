package sp0r;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ku.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SP0R ****
// sales program customer inquiry
// 
// overview:  this is the parallel of sp0g (used for update).
// 
// date created: june  1988
// 
// 
// maintenance history:
// 
// 
//   when       who        what
// --------  ---------  --------------------------------------
// 06/02/88   s.job     SP0G was chopped down for this app.
// 08/16/88   s.job     b12-fetch logic was modified for
//                      inaccurate spgm codes.
// 12/16/88   JWOOD     ADDED NONCSP OPTION TO CALLS
// 12/16/88   JWOOD     ADDED XSSEGTR LOGIC
// 12/13/90   S.JOB     INCREASE SIZE OF CUSTOMER ARRAY TO 500.
// 07/01/91   S.JOB     scroll error for customer corrected.
// 04/07/92   S.JOB     increase size of customer array to 700.
// *********************
Program SP0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  SP0RW01 SP0RW01; // record
  SP1REC SP1REC; // record
  SP4REC SP4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use SP0RM.SP0RM030,  // forms
      SP0RM.SP0RM050, 
      SP0RM.SP0RM070
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SP0R010: SP0R010();



    if (SP0RM030.SP1ID <= " ") /* there still is no s.p.id!!*/
      SP0RM030.SP0RMMSG = "PLEASE ENTER A SALES PROGRAM ID ";
      goto SP0R010;
    else
      if (SP0RM030.SP1NM == "NEW SPID")
        SP0RM030.SP1NM = " ";
        COMMAREA.CAITEM = SP0RM030.SP1ID;
        goto SP0R010;
      end
    end


    if (COMMAREA.CAINQFL == "B") /* spec.account classes*/
      goto SP0R020;
    else
      if (COMMAREA.CAINQFL == "C") /* spec.cust.groups*/
        goto SP0R040;
      else
        goto SP0R060; /* customer...default location*/
      end
    end



    SP0R020: SP0R020();



    goto SP0R030;



    SP0R030: SP0R030();


    if (SP0RM030.SP1ID != SP0RW01.SP1ID) /* change in key*/
      goto SP0R010;
    else
      if (converseVar.eventKey is pf14)
        goto SP0R060; /* customer....*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0R020; /* account class*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0R040; /* cust acct. classes*/
          else
            goto SP0R030;
          end
        end
      end
    end



    SP0R040: SP0R040();


    goto SP0R050;



    SP0R050: SP0R050();


    if (SP0RM050.SP1ID != SP0RW01.SP1ID) /* change in key*/
      goto SP0R010;
    else
      if (converseVar.eventKey is pf14)
        goto SP0R060; /* customer...*/
      else
        if (converseVar.eventKey is pf15)
          goto SP0R020; /* account class*/
        else
          if (converseVar.eventKey is pf16)
            goto SP0R040; /* spec. cust groups*/
          else
            goto SP0R050; /* spec. cust groups*/
          end
        end
      end
    end



    SP0R060: SP0R060();


    goto SP0R070;



    SP0R070: SP0R070();


    if (SP0RM070.SP1ID != SP1REC.SP1ID) /* change in key*/
      goto SP0R010;
    else
      if (converseVar.validationMsgNum > 0)
        goto SP0R070;
      else
        if (converseVar.eventKey is pf14) /* customer*/
          goto SP0R060;
        else
          if (converseVar.eventKey is pf15) /* acct class*/
            goto SP0R020;
          else
            if (converseVar.eventKey is pf16) /* spec. cust groups*/
              goto SP0R040;
            else
              goto SP0R070;
            end
          end
        end
      end
    end



  end // end main
end // end SP0R

// customer trafic director*
Function SP0R010()


   /* SENTRY;*/


   /* SSEGTR                        ; SET SEGMENTED TRANSACTION ID*/

  converseLib.validationFailed(0);
  set SP0RW01 empty;

  if (COMMAREA.CAITEM != " ")
    SP0RW01.SP0RWLOC = COMMAREA.CAITEM;
    if (SP0RW01.SP0RWL1 != " ")
      COMMAREA.CAINQFL = SP0RW01.SP0RWL1; /* strip off the app. id*/
      SP0RW01.SP0RWL1 = " ";
      COMMAREA.CAITEM = SP0RW01.SP0RWLOC;
    end
  end


  if (COMMAREA.CAITEM == " ")
    set SP0RM030 initial;
    SP0RS10(); /* set up receive screen*/
  else
    SP0RM030.SP1ID = COMMAREA.CAITEM;
    SP0RW01.SP1ID = COMMAREA.CAITEM;
    COMMAREA.CAINQFL = COMMAREA.CAINQFL;
    COMMAREA.CAITEM = " ";
    SP0RS12(); /* verify s.p. exists*/
  end


  if (SP1REC.SP1ID > " "
   && SP0RM030.SP1ID > " ")
    exit stack;
  end

  SP0RM030.SP1NM = "NEW SPID";



  converse SP0RM030 ;


  SP0RS14(); /* check fast pathing*/
  SP0RS13(); /* reset map attributes*/




end // end SP0R010

// initialization and reset-*
Function SP0R020()


   /* ************************************************************/
      /* this process is used to initialize the necessary*/
      /* fields for the order type s.p. customer account class*/
      /* select the any account class for this s.p. and*/
      /* show on map sp0gm030.*/
   /* ************************************************************/


  set SP0RM030 empty; /* clear maps*/

  SP0RS21(); /* format customer acct codes*/



end // end SP0R020

// cust acct class*
Function SP0R030()


   /* ************************************************************/
      /* this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* customer acct types for sales programs.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0gm030*/


  if (SP0RW01.SP0RWUPF == "Y")
    SP0RS21();
    SP0RW01.SP0RWUPF = "N";
  end

  SP0RM030.SP0RMMSG = SP0RW01.SP0RWMSG;
  SP0RW01.SP0RWSB2 = 0;
  SP0RW01.SP0RWSB1 = 0;
  SP0RW01.SP0RWVF = "Y";
  set SP0RM030.SP0RSTX initialAttributes;
  SP0RM030.SP0RSTX = "STATUS:";


  converse SP0RM030 ;



  COMMAREA.CAITEM = SP0RM030.CAITEM;



   /* ************************************************************/
      /* sp0rs31  main edit routine ....*/
               /* errors are tagged with ezemno ne 0, or*/
               /* sp0rw1.sp0rwvf will eq 'n'.  either will signal*/
               /* to enter the flow section to display the error.*/
   /* *************************************************************/

  SP0RW01.SP0RWUPF = "N";



  SP0RS31();

  if (SP0RW01.SP0RWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end



      /* were pf keys   entered to transfer control ?*/



  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end





end // end SP0R030

// initialization and reset*
Function SP0R040()


   /* ************************************************************/
      /* shows the special customer groups for this s.p.*/
      /* on map sp0gm050.*/
   /* ************************************************************/

  SP0RS41();



end // end SP0R040

// spec cust groups *
Function SP0R050()


   /* ************************************************************/
      /* this process is used to converse the header screen.*/
      /* the screen can be used to add and / or delete*/
      /* special customer groups for sales programs.*/
   /* ************************************************************/


      /* if the file was updated, rebuild the array for sp0gm050*/


  if (SP0RW01.SP0RWUPF == "Y")
    SP0RS41();
    SP0RW01.SP0RWUPF = "N";
  end

  SP0RM050.SP0RMMSG = SP0RW01.SP0RWMSG;
  SP0RW01.SP0RWSB2 = 0;
  SP0RW01.SP0RWSB1 = 0;
  SP0RW01.SP0RWVF = "Y";
  set SP0RM050.SP0RSTX initialAttributes;
  SP0RM050.SP0RSTX = "STATUS:";


  converse SP0RM050 ;


  COMMAREA.CAITEM = SP0RM050.CAITEM;



  SP0RW01.SP0RWUPF = "N";

  SP0RS51(); /* main edit process*/

  if (SP0RW01.SP0RWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end


   /* **************************************************/
      /* were pf keys   entered to transfer control ?*/
   /* **************************************************/


  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end



end // end SP0R050

// select set of cust. co id's*
Function SP0R060()



   /* ************************************************************/
      /* the purpose of this process is to set up a working*/
      /* storage array of customer company id's that have been*/
      /* set up for the sales program selected.  this array of*/
      /* company id's will be used for subsequent processing*/
      /* by the user the array has a limit of 700 associated*/
      /* which may need to be increased in the future.*/
      /* the table.*/
   /* ************************************************************/


  SP0RW01.SP0RWMSG = " "; /* clear out w.s. error message*/
  SP0RW01.SP0RWTL2 = " "; /* clear out w.s. array*/
  converseLib.validationFailed(0); /* clear out error area*/
  SP0RW01.SP0RWPOS = 1; /* cursor position..*/

  set SP4REC empty;
  set SQLCA empty;

  SP4REC.SP1ID = SP1REC.SP1ID;
  SP4REC.KUCCOID = 0;

  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0RW01.SP0RWTSZ = +0;
    SP0RW01.SP0RWSB1 = +1;
    while (SP0RW01.SP0RWSB1 <= +700
     && SQLCA.VAGen_SQLCODE == +0)
      SP0RS61(); /* select next sp4rec*/
    end
    call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
    SP0RW01.SP0RWTSZ = SP0RW01.SP0RWSB1 - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SP0R   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SP0R060 ";
    TA1REC.TA1LOCAT[3] = "IO0100  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SP0RM070";
    TA1REC.TA1DBASE = "DSPGM.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = SP4REC.SP4KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
    exit stack;
  end


  SP0RS62(); /* move recs to map*/


end // end SP0R060

// customer company id add / del*
Function SP0R070()



      /* ********************************************************/
      /* *  this process is used to control access to cust co  **/
      /* *  id's that are valid for a sales program.  this     **/
      /* *  allows the user to add, or delete cust comp id's   **/
      /* *  based upon the selected set of company id's for    **/
      /* *  this s.p.  the user can also scroll                **/
      /* *  forward and backwards through the cust co id set.  **/
      /* ********************************************************/

  SP0RM070.SP0RMTDT = VGVar.currentShortGregorianDate;
  SP0RM070.SP1ID = SP1REC.SP1ID;

  SP0RW01.SP0RWSB1 = 0;

  if (SP0RW01.SP0RWSB2 == 0 /* pointer for delete option*/
   || SP0RW01.SP0RWSB2 == 99
   || SP0RW01.SP0RWSB2 == 8)
                                   /* a bad way to correct for scrollin*/
    SP0RW01.SP0RWSB2 = 1;
  end



      /* sp0rs71 used to scroll forward*/
      /* sp0rs72 used to scroll backward*/



  if (converseVar.eventKey is pf8)
    SP0RS71();
  else
    if (converseVar.eventKey is pf7)
      SP0RS72();
    end
  end



  converse SP0RM070 ;



  COMMAREA.CAITEM = SP0RM070.CAITEM;


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    exit stack;
  end



   /* ************************************************************/
      /* sp0rs74  main edit routine ......*/
   /* *************************************************************/


  SP0RS74();

  if (SP0RW01.SP0RWVF != "Y"
   || converseVar.validationMsgNum > 0)
    exit stack;
  end

      /* were pf keys   entered to transfer control ?*/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

  SP0RS73();



end // end SP0R070

// set up sp1id receive screen*
Function SP0RS10()



  set SP0RM030.SP1ID cursor, bold;
  set SP0RM030.SP1NM protect, invisible;
  set SP0RM030.SP0RMSTD protect, invisible;

  SP0RM030.SP0RMMSG = "ENTER A SALES PROGRAM ID";
  set SP0RM030.SP0RMDS2 protect, invisible;



end // end SP0RS10

// validate sales program id*
Function SP0RS12()


   /* *********************************************************/
   /* * verify sales prog exists.....if not force to sp0u....**/
   /* *********************************************************/


  set SP1REC empty;
  set SQLCA empty;

  SP1REC.SP1ID = SP0RW01.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    move SP1REC to SP0RM030 withV60Compat;
    SP0RW01.ZZZCHGCT = SP1REC.ZZZCHGCT;
  else

     /* *******************************************************/
     /* *   if new sales program...transfer to sm0u for add  **/
     /* *******************************************************/

    if (SQLCA.VAGen_SQLCODE == +100)
      SP0RM030.SP0RMMSG = "THIS SALES PROGRAM DOES NOT CURRENTLY EXIST";
    else
      SP0RW01.SP0RWSID = "****";
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0R";
      TA1REC.TA1LOCAT[1] = "A      ";
      TA1REC.TA1LOCAT[2] = "SP0RS12";
      TA1REC.TA1LOCAT[3] = "IO0070 ";
      TA1REC.TA1LOCAT[4] = "       ";
      TA1REC.TA1MAP = "SP0RM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;

      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();

      SP0RM030.SP0RMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0RS12

// reset sp1id receive screen*
Function SP0RS13()



  set SP0RM030.SP1ID cursor, bold;
  set SP0RM030.SP1NM initialAttributes;
  set SP0RM030.SP0RMSTD initialAttributes;
  set SP0RM030.SP0RMDS2 initialAttributes;

  SP0RW01.SP0RWSB1 = 1;
  while (SP0RW01.SP0RWSB1 <= 20)
    set SP0RM030.XAUCD[SP0RWSB1] initialAttributes;
    set SP0RM030.XAUDESC[SP0RWSB1] initialAttributes;
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
  end



end // end SP0RS13

// edit for fast path, data mod*
Function SP0RS14()

   /* **********************************************************/
   /* ***** check fast pathing........                    ******/
   /* **********************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0RM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


   /* *********************************************************/
   /* *   this statement group is to edit for fast path,*/
   /* *                     pf1, and pf4.*/
   /* *********************************************************/

  if (SP0RM030.CATOAP != " ")
    COMMAREA.CATOAP = SP0RM030.CATOAP;
    COMMAREA.CAITEM = SP0RM030.CAITEM;
    XSEXIT();
  end


   /* *********************************************************/
      /* transfer to help program*/
   /* *********************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0RM030.SP0RMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0RM030.SP0RMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0RS14

// sp1rec sp for cust acct codes*
Function SP0RS21()



   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the cust acct codes to sp0rm030.*/
   /* ************************************************************/

  set SP0RM030 empty;
  SP0RM030.SP0RMTDT = VGVar.currentShortGregorianDate;
  SP0RM030.SP1ID = SP1REC.SP1ID;
  SP0RM030.SP1NM = SP1REC.SP1NM;


  if (SP1REC.SP1STAT == "P")
    SP0RM030.SP0RMSTD = "PARTIAL";
  end

  if (SP1REC.SP1STAT == "C")
    SP0RM030.SP0RMSTD = "COMPLETE";
  end

  if (SP1REC.SP1STAT == "A")
    SP0RM030.SP0RMSTD = "ACTIVE";
  end

  if (SP1REC.SP1STAT == "F")
    SP0RM030.SP0RMSTD = "FINISHED";
  end

  SP0RW01.SP0RWSB1 = 1;

  while (SP0RW01.SP0RWSB1 < 21)
    set SP0RM030.XAUCD[SP0RWSB1] initialAttributes;
    set SP0RM030.XAUDESC[SP0RWSB1] initialAttributes;
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
  end

   /* ************************************************************/
      /* select the many cust acct codes for this s.p. and*/
      /* show on map sp0rm030.*/
   /* ************************************************************/

  SP0RW01.SP0RWSB1 = 1;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  while (SP0RW01.SP0RWSB1 < 21
   && SP1REC.XAUCD[SP0RWSB1] != " ")
    SP0RW01.SP0RWUPF = "N";
    if (SQLCA.VAGen_SQLCODE == 0)
      SP0RW01.SP0RWUPF = "N";
      SP0RM030.XAUCD[SP0RWSB1] = SP1REC.XAUCD[SP0RWSB1];
      if (SP1REC.XAUCD[SP0RWSB1] in XAUTBL.XAUCD)
        SP0RM030.XAUDESC[SP0RWSB1] = XAUTBL.XAUABRV[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0RM030.XAUDESC[SP0RWSB1] = "INVALID CODE";
      end
      SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0R   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0RS21 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0RM030";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


  if (SP0RW01.SP0RWSB1 == 1)
    SP0RW01.SP0RWSB1 = 999;
    SP0RW01.SP0RWMSG = "NO CUSTOMER ACCT CODES CURRENTLY EXIST";
  end


    /* *****************************************************/
    /* * sp0rs22 sort method for cust acct codes          **/
    /* *****************************************************/

  SP0RS22();



end // end SP0RS21

// sort method for cust acct c*
Function SP0RS22()



   /* ************************************************************/
      /* sort method for map array.*/
   /* ************************************************************/



  if (SP0RW01.SP0RWSB1 != 999)
    SP0RW01.SP0RWTSZ = SP0RW01.SP0RWSB1 - 1;
  else
    SP0RW01.SP0RWTSZ = 0;
  end

  SP0RW01.SP0RWSB1 = 1;
  SP0RW01.SP0RWSB2 = 2;

  while (SP0RW01.SP0RWSB1 < 21
   && SP0RW01.SP0RWTSZ >= SP0RW01.SP0RWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0RW01.SP0RWSB2 < 21
     && SP0RW01.SP0RWTSZ >= SP0RW01.SP0RWSB2)
      if (SP0RM030.XAUCD[SP0RWSB1] > SP0RM030.XAUCD[SP0RWSB2])
        SP0RW01.XAUCD = SP0RM030.XAUCD[SP0RWSB2];
        SP0RW01.XAUDESC = SP0RM030.XAUDESC[SP0RWSB2];
        SP0RM030.XAUCD[SP0RWSB2] = SP0RM030.XAUCD[SP0RWSB1];
        SP0RM030.XAUDESC[SP0RWSB2] = SP0RM030.XAUDESC[SP0RWSB1];
        SP0RM030.XAUCD[SP0RWSB1] = SP0RW01.XAUCD;
        SP0RM030.XAUDESC[SP0RWSB1] = SP0RW01.XAUDESC;
        SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
      else
        SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
      end
    end
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB1 + 1;
  end



end // end SP0RS22

// main edit group for cust acct*
Function SP0RS31()




   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/

  SP0RW01.SP0RWMSG = " ";

  if (converseVar.eventKey is enter /* valid pf key pressed?*/
   || converseVar.eventKey is pf1   /* help*/
   || converseVar.eventKey is pf3   /* to sp0u*/
   || converseVar.eventKey is pf4   /* to mn0m*/
   || converseVar.eventKey is pf14  /* to sp0g020*/
   || converseVar.eventKey is pf15  /* to sp0g040*/
   || converseVar.eventKey is pf16) /* to sp0g060*/
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0RW01.SP0RWVF = "N";
    return;
  end


  SP0RS32(); /* validates entries*/


  if (SP0RW01.SP0RWVF == " ") /* no screen update*/
    if (SP0RM030.SP1ID != SP0RW01.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0RM030.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "B";
            exit stack;
          end
        end
      end
    end
  else
    if (SP0RM030.SP1ID != SP0RW01.SP1ID) /* change in key*/
      SP0RM030.SP0RMMSG = "DO NOT UPDATE AND CHANGE SALES PROGRAM ID";
      SP0RM030.SP1ID = SP0RW01.SP1ID; /* move old sp id back*/
    end
  end



  SP0RS33(); /* ** check for fast path,modified data & pf keys ***/

  if (converseVar.validationMsgNum > 0) /* if any error, return*/
    SP0RW01.SP0RWVF = "N";
    return;
  end


     /* ** pf keys transfer to another part of application ***/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end


   /* ************************************************************/
   /* **    test for an option being selected (eg a or d)     ****/
   /* ************************************************************/

  if (SP0RW01.SP0RWVF == " ")
    SP0RW01.SP0RWVF = "N";
    converseLib.validationFailed(4);
    SP0RW01.SP0RWMSG = "PLEASE SELECT AN OPTION OR SELECT A RECORD";
    return;
  end


   /* ************************************************************/
   /* **    validate account type and make sure request is    ****/
   /* **    not a duplicate........                           ****/
   /* ************************************************************/

  SP0RS34(); /* is the account type valid?*/


  if (converseVar.validationMsgNum > 0
   || SP0RW01.SP0RWVF == "N")
    SP0RW01.SP0RWVF = "N";
    return;
  end



end // end SP0RS31

// validate add/delete/select c*
Function SP0RS32()




  SP0RW01.SP0RWVF = " ";
  SP0RW01.SP0RWSB2 = 1;
  SP0RW01.SP0RWSB1 = 0;



  while (SP0RW01.SP0RWSB1 < SP0RW01.SP0RWTSZ)
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    set SP0RM030.XAUCD[SP0RWSB1] initialAttributes;
    set SP0RM030.XAUDESC[SP0RWSB1] initialAttributes;
  end

  if (SP0RW01.SP0RWTSZ < 20)
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWTSZ + 1;
    set SP0RM030.XAUCD[SP0RWSB1] normal;
    set SP0RM030.XAUCD[SP0RWSB1] bold;
  end



end // end SP0RS32

// edit for fast path, data mod*
Function SP0RS33()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0RM030.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end






  if (SP0RM030.CATOAP != " ") /* fast path*/
    if (SP0RW01.SP0RWVF != " ") /* sales pgm change requested*/
      SP0RW01.SP0RWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0RM030.CATOAP = " ";
      SP0RM030.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0RM030.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0RM030.CATOAP;
      COMMAREA.CAITEM = SP0RM030.CAITEM;
      XSEXIT();
      SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
      SP0RM030.CATOAP = " ";
      SP0RM030.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end


  if (converseVar.eventKey is pf1) /* **** transfer to help ********/
    XSPF1();
    SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4) /* **** transfer to main menu ***/
    XSPF4();
    SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0RS33

// validate cust acct codes*
Function SP0RS34()



   /* ************************************************************/
      /* this statement group is validate cust acct codes*/
      /* have been entered against the cust acct table.*/

      /* the customer account code must also be active.*/
   /* ************************************************************/

  SP0RW01.SP0RWUPF = "Y";


  if (SP0RM030.XAUCD[SP0RWSB2] == 0
   || SP0RM030.XAUCD[SP0RWSB2] == " ")
    set SP0RM030.XAUCD[SP0RWSB2] initialAttributes;
    set SP0RM030.XAUDESC[SP0RWSB2] skip;
    SP0RM030.XAUDESC[SP0RWSB2] = "ZERO";
    return;
  end

  if (SP0RM030.XAUCD[SP0RWSB2] in XAUTBL.XAUCD)
    SP0RM030.XAUDESC[SP0RWSB2] = XAUTBL.XAUABRV[sysVar.arrayIndex];
  end



end // end SP0RS34

// sp1rec sp for spec cust gp*
Function SP0RS41()



   /* ************************************************************/
      /* if the return code from the select set was good then*/
      /* go through and move the special customer gp to sp0rm030.*/
   /* ************************************************************/

  set SP0RM050 empty;
  SP0RM050.SP0RMTDT = VGVar.currentShortGregorianDate;
  SP0RM050.SP1ID = SP1REC.SP1ID;
  SP0RM050.SP1NM = SP1REC.SP1NM;

  if (SP1REC.SP1STAT == "P")
    SP0RM050.SP1STAT = "PARTIAL";
  end

  if (SP1REC.SP1STAT == "C")
    SP0RM050.SP1STAT = "COMPLETE";
  end

  if (SP1REC.SP1STAT == "A")
    SP0RM050.SP1STAT = "ACTIVE ";
  end

  if (SP1REC.SP1STAT == "F")
    SP0RM050.SP1STAT = "FINISHED";
  end

  if (SP1REC.SP1STAT == "I")
    SP0RM050.SP1STAT = "INACTIVE";
  end

   /* ************************************************************/
      /* select the any spec cust codes for this s.p. and*/
      /* show on map sp0rm050.*/
   /* ************************************************************/


  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* no record*/
       /* go on......*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* in use!*/
      SP0RW01.SP0RWMSG = "DATABASE CURRENTLY IN USE. TRY LATER.";
      SP0RM050.SP1ID = "    ";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0R   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0RS41 ";
      TA1REC.TA1LOCAT[3] = "IO0070  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0RM050";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1TBLKE = SP1REC.SP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  SP0RW01.SP0RWSB1 = 1;
  SP0RW01.SP0RWSB2 = 1;


  while (SP0RW01.SP0RWSB1 < 21
   && SP1REC.XSGCD[SP0RWSB1] != "  ")
    SP0RW01.SP0RWUPF = "N";
    if (SP1REC.XSGCD[SP0RWSB1] != "**"
     && SP1REC.XSGCD[SP0RWSB1] > " A")
      SP0RM050.XSGCD[SP0RWSB2] = SP1REC.XSGCD[SP0RWSB1];
      if (SP1REC.XSGCD[SP0RWSB1] in XSGTBL.XSGCD)
        SP0RM050.XSGDESC[SP0RWSB2] = XSGTBL.XSGDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SP0RM050.XSGDESC[SP0RWSB2] = "INVALID CODE";
      end
      SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
    end
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
  end

  if (SP0RW01.SP0RWSB2 == 1)
    SP0RW01.SP0RWSB2 = 999;
    SP0RW01.SP0RWMSG = "NO SPECIAL CUST CODES CURRENTLY EXIST";
  end

   /* *****************************************************/
      /* sp0rs42 sort method for spec cust codes*/
   /* *****************************************************/


  SP0RS42();



end // end SP0RS41

// sort method for spec cust gp*
Function SP0RS42()


   /* ************************************************************/
      /* sort method for map array.*/
   /* ************************************************************/

  if (SP0RW01.SP0RWSB2 != 999)
    SP0RW01.SP0RWTSZ = SP0RW01.SP0RWSB2 - 1;
  else
    SP0RW01.SP0RWTSZ = 0;
  end

  SP0RW01.SP0RWSB1 = 1;
  SP0RW01.SP0RWSB2 = 2;

  while (SP0RW01.SP0RWSB1 < 21
   && SP0RW01.SP0RWTSZ >= SP0RW01.SP0RWSB1
   && SQLCA.VAGen_SQLCODE == +0)
    while (SP0RW01.SP0RWSB2 < 21
     && SP0RW01.SP0RWTSZ >= SP0RW01.SP0RWSB2)
      if (SP0RM050.XSGCD[SP0RWSB1] > SP0RM050.XSGCD[SP0RWSB2])
        SP0RW01.XSGCD = SP0RM050.XSGCD[SP0RWSB2];
        SP0RW01.XSGDESC = SP0RM050.XSGDESC[SP0RWSB2];
        SP0RM050.XSGCD[SP0RWSB2] = SP0RM050.XSGCD[SP0RWSB1];
        SP0RM050.XSGDESC[SP0RWSB2] = SP0RM050.XSGDESC[SP0RWSB1];
        SP0RM050.XSGCD[SP0RWSB1] = SP0RW01.XSGCD;
        SP0RM050.XSGDESC[SP0RWSB1] = SP0RW01.XSGDESC;
        SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
      else
        SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
      end
    end
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB1 + 1;
  end



end // end SP0RS42

// main edit group for spec cust*
Function SP0RS51()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/



  SP0RW01.SP0RWMSG = " ";



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0RW01.SP0RWVF = "N";
    return;
  end


   /* ***********************************************************/
      /* sp0gs52  to check fields for entry.  if a bad selection*/
               /* code is used sp0gw1.sp0gwvf will eq 'n', else*/
               /* 'y';  if no fields are selected it will eq ' '.*/
   /* ***********************************************************/

  SP0RS52();

  if (SP0RW01.SP0RWVF == " ") /* no screen update*/
    if (SP0RM050.SP1ID != SP0RW01.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0RM050.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "C";
            exit stack;
          end
        end
      end
    end
  else
    if (SP0RM050.SP1ID != SP0RW01.SP1ID) /* change in key*/
      SP0RM050.SP0RMMSG = "DO NOT UPDATE AND CHANGE SALE PROGRAM ID";
      SP0RM050.SP1ID = SP0RW01.SP1ID; /* move old sp id back*/
      SP0RW01.SP0RWVF = "N";
    end
  end



   /* ***********************************************************/
      /* sp0gs53 check for fast path, modified data, pf1, pf4*/
   /* ***********************************************************/

  SP0RS53();

  if (converseVar.validationMsgNum > 0)
    SP0RW01.SP0RWVF = "N";
    return;
  end


  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end


   /* *********************************************************/
      /* sp0rs54 is the spec cust group code valid ?*/
   /* *********************************************************/

  SP0RS54();

  if (converseVar.validationMsgNum > 0
   || SP0RW01.SP0RWVF == "N")
    SP0RW01.SP0RWVF = "N";
    return;
  end


   /* *********************************************************/
      /* sp0rs55 does the spec cust group code already exist ?*/
   /* *********************************************************/

  SP0RS55();



end // end SP0RS51

// validate select code*
Function SP0RS52()



   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
      /* and will check that both fields are entered for a add*/
      /* and will not allow a delete on a new record*/
      /* or an add on an existing one.*/
      /* resets all fields to normal.*/
   /* ************************************************************/



  SP0RW01.SP0RWVF = " ";
  SP0RW01.SP0RWSB2 = 1;
  SP0RW01.SP0RWSB1 = 0;



  while (SP0RW01.SP0RWSB1 <= SP0RW01.SP0RWTSZ)
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    set SP0RM050.XSGCD[SP0RWSB1] initialAttributes;
    set SP0RM050.XSGDESC[SP0RWSB1] initialAttributes;
  end

  if (SP0RW01.SP0RWTSZ < 20)
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWTSZ + 1;
    set SP0RM050.XSGCD[SP0RWSB1] normal;
    set SP0RM050.XSGCD[SP0RWSB1] bold;
  end



end // end SP0RS52

// edit for fast path, data mod-*
Function SP0RS53()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0RM030.SP1ID;
    XSEXIT();
  end


  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end




   /* *********************************************************/
      /* this statement group is to edit for fast path,*/
      /* or modified data, pf1, and pf4.*/
   /* *********************************************************/

  if (SP0RM050.CATOAP != " ")
    if (SP0RW01.SP0RWVF != " ") /* if header modified*/
      SP0RW01.SP0RWMSG = "CANNOT MIX UPDATES WITH FAST PATH - CONTINUE";
      SP0RM050.CATOAP = " ";
      SP0RM050.CAITEM = " ";
      converseLib.validationFailed(5);
      set SP0RM050.CATOAP normal;
      return;
    else
      COMMAREA.CATOAP = SP0RM050.CATOAP;
      COMMAREA.CAITEM = SP0RM050.CAITEM;
      XSEXIT();
      SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
      SP0RM050.CATOAP = " ";
      SP0RM050.CAITEM = " ";
      converseLib.validationFailed(99);
      return;
    end
  end



      /* transfer to help program*/



  if (converseVar.eventKey is pf1)
    XSPF1();
    SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



      /* transfer to main menu program mn0m*/



  if (converseVar.eventKey is pf4)
    XSPF4();
    SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0RS53

// validate spec cust groups*
Function SP0RS54()


  SP0RW01.SP0RWUPF = "Y";

  if (SP0RM050.XSGCD[SP0RWSB2] == " ")
    set SP0RM050.XSGCD[SP0RWSB2] initialAttributes;
    set SP0RM050.XSGDESC[SP0RWSB2] skip;
    SP0RM050.XSGDESC[SP0RWSB2] = "BLANK";
    return;
  end

  if (SP0RM050.XSGCD[SP0RWSB2] in XSGTBL.XSGCD)
    SP0RM050.XSGDESC[SP0RWSB2] = XSGTBL.XSGDESC[sysVar.arrayIndex];
  end



end // end SP0RS54

// validate sports act cd exist*
Function SP0RS55()






end // end SP0RS55

// sp4rec sp for cust comp id's*
Function SP0RS61()


  call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SP0RW01.SP1ID[SP0RWSB1] = SP4REC.SP1ID;
    SP0RW01.KUCCOID[SP0RWSB1] = SP4REC.KUCCOID;
    SP0RW01.KUMSTRID[SP0RWSB1] = SP4REC.KUMSTRID;
    SP0RW01.XNXCD[SP0RWSB1] = SP4REC.XNXCD;
    SP0RW01.XGPCD[SP0RWSB1] = SP4REC.XGPCD;
    if (SP4REC.SP4KEY == SP0RW01.SP4KEY)
      SP0RW01.SP0RWPOS = SP0RW01.SP0RWSB1;
    end
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SP0R   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SP0RSA1 ";
      TA1REC.TA1LOCAT[3] = "IO0100  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SP0RM070";
      TA1REC.TA1DBASE = "DSPGM.";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1TBLKE = SP4REC.SP4KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
      SP0RW01.SP0RWMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end



end // end SP0RS61

// to load 1st 7 cust co id's*
Function SP0RS62()



   /* ************************************************************/
      /* select the first 7 cust co id's for this s.p. and*/
      /* show on map sp0gm070.*/
   /* ************************************************************/

  if (converseVar.validationMsgNum != +0)
    return;
  end

  SP0RM070.SP1NM = SP1REC.SP1NM;

  if (SP1REC.SP1STAT == "P")
    SP0RM070.SP1STAT = "PARTIAL";
  end

  if (SP1REC.SP1STAT == "C")
    SP0RM070.SP1STAT = "COMPLETE";
  end

  if (SP1REC.SP1STAT == "A")
    SP0RM070.SP1STAT = "ACTIVE  ";
  end

  if (SP1REC.SP1STAT == "I")
    SP0RM070.SP1STAT = "INACTIVE";
  end

  if (SP1REC.SP1STAT == "F")
    SP0RM070.SP1STAT = "FINISHED";
  end

  SP0RW01.SP0RWPOS = SP0RW01.SP0RWPOS - 1; /* determines cursor position*/

  if (SP0RW01.SP0RWPOS > SP0RW01.SP0RWTSZ)
    SP0RW01.SP0RWPOS = SP0RW01.SP0RWTSZ - 2;
  end

  if (SP0RW01.SP0RWPOS < 0)
    SP0RW01.SP0RWPOS = 0;
  end

  SP0RW01.SP0RWSB2 = 0;

  while (SP0RW01.SP0RWSB2 < 7)
    SP0RW01.SP0RWPOS = SP0RW01.SP0RWPOS + 1;
    SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
    if (SP0RW01.SP0RWSB2 > SP0RW01.SP0RWTSZ)
      SP0RM070.KUCCOID[SP0RWSB2] = " ";
      SP0RM070.KUMSTRID[SP0RWSB2] = " ";
      SP0RM070.XNXCD[SP0RWSB2] = " ";
      SP0RM070.XGPCD[SP0RWSB2] = " ";
      SP0RM070.KUCCONM[SP0RWSB2] = " ";
      SP0RM070.KUMSTRNM[SP0RWSB2] = " ";
      SP0RM070.XNXDESC[SP0RWSB2] = " ";
      SP0RM070.XGPDESC[SP0RWSB2] = " ";
    else
      if (SP0RW01.SP1ID[SP0RWPOS] != " ")
        SP0RM070.KUCCOID[SP0RWSB2] = SP0RW01.KUCCOID[SP0RWPOS];
        KUCREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        SP0RM070.KUMSTRID[SP0RWSB2] = SP0RW01.KUMSTRID[SP0RWPOS];
        KUMREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        KUMREC.KUMSTRID = SP0RW01.KUMSTRID[SP0RWPOS];
        SP0RM070.XNXCD[SP0RWSB2] = SP0RW01.XNXCD[SP0RWPOS];
        SP0RM070.XGPCD[SP0RWSB2] = SP0RW01.XGPCD[SP0RWPOS];
        SP0RS63(); /* get customer name*/
        SP0RS64(); /* get store name*/
        SP0RS65(); /* get dept name*/
        SP0RS66(); /* get gpc description*/
      end
    end
  end

  if (SP0RW01.SP0RWTSZ == 0)
    SP0RM070.SP0RMMSG = "NO CUST COMPANIES CURRENTLY EXIST FOR THIS S.P.";
    SP0RM070.VAGen_EZEMSG = " ";
  end



end // end SP0RS62

// validate cust company id*
Function SP0RS63()



   /* ************************************************************/
      /* this statement group is validate customer company id's*/
      /* against the customer company db2 table.*/
   /* ************************************************************/


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0RM070.KUCCONM[SP0RWSB2] = KUCREC.KUCCONM;
  else
    SP0RW01.SP0RWMSG = "THIS CUSTOMER COMPANY ID DOES NOT EXIST";
    converseLib.validationFailed(27);
    SP0RM070.KUCCONM[SP0RWSB2] = "INVALID COMPANY";
    return;
  end



end // end SP0RS63

// validate cust store id*
Function SP0RS64()



   /* ************************************************************/
      /* this statement group is validate cust company store id*/
      /* against the customer company store db2 table.*/
   /* ************************************************************/



  if (SP0RM070.KUMSTRID[SP0RWSB2] == 9999)
    SP0RM070.KUMSTRNM[SP0RWSB2] = "ALL STORES SELECTED";
    return;
  end

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    SP0RM070.KUMSTRNM[SP0RWSB2] = KUMREC.KUMSTRNM;
  else
    SP0RW01.SP0RWMSG = "THIS CUSTOMER STORE ID DOES NOT EXIST";
    converseLib.validationFailed(27);
    SP0RW01.SP0RWVF = "N";
    SP0RM070.KUMSTRNM[SP0RWSB2] = "INVALID STORE";
    return;
  end



end // end SP0RS64

// validate xref dept id*
Function SP0RS65()



   /* ************************************************************/
      /* validates the nike xref dept against xref table*/
      /* the xref id must be active.*/
   /* ************************************************************/

  SP0RW01.SP0RWVF = "Y";

  if (SP0RM070.XNXCD[SP0RWSB2] == 99)
    SP0RM070.XNXDESC[SP0RWSB2] = "ALL DEPTS";
    return;
  end

  if (SP0RM070.XNXCD[SP0RWSB2] in XNXTBL.XNXCD)
    SP0RM070.XNXDESC[SP0RWSB2] = XNXTBL.XNXABRV[sysVar.arrayIndex];
  end



end // end SP0RS65

// validate gen product codes*
Function SP0RS66()



   /* ************************************************************/
      /* validates general product codes*/
      /* the gpc must also be active.*/
   /* ************************************************************/


  SP0RW01.SP0RWVF = "Y";

  if (SP0RM070.XGPCD[SP0RWSB2] == "99"
   || SP0RM070.XGPCD[SP0RWSB2] == " ")
    SP0RM070.XGPCD[SP0RWSB2] = "99";
    SP0RM070.XGPDESC[SP0RWSB2] = "all gpc's";
    return;
  end

  if (SP0RM070.XGPCD[SP0RWSB2] in XGPTBL.XGPCD)
    SP0RM070.XGPDESC[SP0RWSB2] = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end



end // end SP0RS66

// forward scroll for cust comp*
Function SP0RS71()



      /* sp0rs71 user to scroll forward*/



  if (SP0RW01.SP0RWTSZ <= 7)
    SP0RM070.SP0RMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end

  SP0RW01.SP0RWSB2 = 0;



  if (SP0RM070.SP0RMMSG != "NO MORE FORWARD SCROLLING POSSIBLE"
   && SP0RW01.SP0RWTSZ > 7)
    set SP0RM070 empty;
    SP0RM070.SP0RMTDT = VGVar.currentShortGregorianDate;
    SP0RM070.SP1ID = SP1REC.SP1ID;
    SP0RM070.SP1NM = SP1REC.SP1NM;
    SP0RM070.SP1STAT = SP1REC.SP1STAT;
    while (SP0RW01.SP0RWSB2 < 7)
      SP0RW01.SP0RWPOS = SP0RW01.SP0RWPOS + 1;
      SP0RW01.SP0RWSB2 = 1 + SP0RW01.SP0RWSB2;
      if (SP0RW01.SP0RWPOS > SP0RW01.SP0RWTSZ)
        SP0RM070.SP0RMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
      else
        SP0RM070.SP0RMMSG = " ";
        SP0RM070.KUCCOID[SP0RWSB2] = SP0RW01.KUCCOID[SP0RWPOS];
        KUCREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        SP0RM070.KUMSTRID[SP0RWSB2] = SP0RW01.KUMSTRID[SP0RWPOS];
        KUMREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        KUMREC.KUMSTRID = SP0RW01.KUMSTRID[SP0RWPOS];
        SP0RM070.XNXCD[SP0RWSB2] = SP0RW01.XNXCD[SP0RWPOS];
        SP0RM070.XGPCD[SP0RWSB2] = SP0RW01.XGPCD[SP0RWPOS];
        SP0RS63(); /* get company name*/
        SP0RS64(); /* get store name*/
        SP0RS65(); /* get department name*/
        SP0RS66(); /* get gpc description*/
      end
    end
  end

  if (converseVar.eventKey is pf8
   && SP0RW01.SP0RWPOS == SP0RW01.SP0RWTSZ)
    SP0RM070.SP0RMMSG = "NO MORE FORWARD SCROLLING POSSIBLE";
  end



end // end SP0RS71

// backward scroll for cust comp*
Function SP0RS72()

   /* ***********************************************/
      /* sp0rs71 used to scroll backward*/
   /* ***********************************************/

  if (converseVar.eventKey is pf7)
    SP0RW01.SP0RWPOS = SP0RW01.SP0RWPOS - 14;
    if (SP0RW01.SP0RWPOS < 0)
      SP0RW01.SP0RWPOS = 0;
    end
  end

  SP0RW01.SP0RWSB2 = 0;



  if (SP0RM070.SP0RMMSG != "NO MORE BACKWARD SCROLLING POSSIBLE")
    set SP0RM070 empty;
    SP0RM070.SP0RMTDT = VGVar.currentShortGregorianDate;
    SP0RM070.SP1ID = SP1REC.SP1ID;
    SP0RM070.SP1NM = SP1REC.SP1NM;
    SP0RM070.SP1STAT = SP1REC.SP1STAT;
    while (SP0RW01.SP0RWSB2 < 7)
      SP0RW01.SP0RWPOS = SP0RW01.SP0RWPOS + 1;
      SP0RW01.SP0RWSB2 = SP0RW01.SP0RWSB2 + 1;
      if (SP0RW01.SP0RWPOS > SP0RW01.SP0RWTSZ)
        SP0RM070.SP0RMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
      else
        SP0RM070.SP0RMMSG = " ";
        SP0RM070.KUCCOID[SP0RWSB2] = SP0RW01.KUCCOID[SP0RWPOS];
        KUCREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        SP0RM070.KUMSTRID[SP0RWSB2] = SP0RW01.KUMSTRID[SP0RWPOS];
        KUMREC.KUCCOID = SP0RW01.KUCCOID[SP0RWPOS];
        KUMREC.KUMSTRID = SP0RW01.KUMSTRID[SP0RWPOS];
        SP0RM070.XNXCD[SP0RWSB2] = SP0RW01.XNXCD[SP0RWPOS];
        SP0RM070.XGPCD[SP0RWSB2] = SP0RW01.XGPCD[SP0RWPOS];
        SP0RS63(); /* get company name*/
        SP0RS64(); /* get store name*/
        SP0RS65(); /* get dept name*/
        SP0RS66(); /* get gpc description*/
      end
    end
  end

  if (converseVar.eventKey is pf7
   && SP0RW01.SP0RWPOS == 7)
    SP0RM070.SP0RMMSG = "NO MORE BACKWARD SCROLLING POSSIBLE";
  end



end // end SP0RS72

// cust comp id add /change/del*
Function SP0RS73()



   /* ************************************************************/
      /* this statement group is used to add , or delete*/
      /* an customer company id for a sales program.*/
   /* ************************************************************/



  SP4REC.SP1ID = SP0RM070.SP1ID;
  SP4REC.KUCCOID = SP0RM070.KUCCOID[SP0RWSB2];
  SP4REC.KUMSTRID = SP0RM070.KUMSTRID[SP0RWSB2];
  SP4REC.XNXCD = SP0RM070.XNXCD[SP0RWSB2];
  SP4REC.XGPCD = SP0RM070.XGPCD[SP0RWSB2];

  SP0RW01.SP0RWID = SP0RM070.SP1ID;
  SP0RW01.SP0RWKC = SP0RM070.KUCCOID[SP0RWSB2];
  SP0RW01.SP0RWKM = SP0RM070.KUMSTRID[SP0RWSB2];
  SP0RW01.SP0RWXN = SP0RM070.XNXCD[SP0RWSB2];
  SP0RW01.SP0RWXG = SP0RM070.XGPCD[SP0RWSB2];



end // end SP0RS73

// main edit group for customers*
Function SP0RS74()



   /* *********************************************************/
      /* this statement group is the initial edit process*/
      /* for required data, and pf/enter key selection.*/
   /* *********************************************************/

  SP0RW01.SP0RWVF1 = " ";

   /* *********************************************************/
      /* check for valid attention keys*/
   /* *********************************************************/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* valid key entered*/
  else
    converseLib.validationFailed(1);
    SP0RW01.SP0RWVF = "N";
    return;
  end


   /* *********************************************************/
      /* sp0gs75  - general edit processing*/
   /* *********************************************************/

  SP0RS75();

  if (SP0RW01.SP0RWVF == " ") /* no screen update*/
    if (SP0RM070.SP1ID != SP1REC.SP1ID) /* change in key*/
      COMMAREA.CAITEM = SP0RM070.SP1ID;
      if (converseVar.eventKey is pf14)
        COMMAREA.CAINQFL = "A";
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAINQFL = "B";
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            COMMAREA.CAINQFL = "C";
            exit stack;
          else
            COMMAREA.CAINQFL = "A";
            exit stack;
          end
        end
      end
    end
  end


   /* *********************************************************/
      /* sp0rs76 check for fast path, modified data, pf1, pf4*/
   /* *********************************************************/

  SP0RS76();


  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end



   /* ************************************************************/
      /* sp0rs63  check for valid customer company id and desc*/
      /* sp0rs64  check for valid company store id and desc*/
      /* sp0rs65  check for valid nike xref code desc*/
      /* sp0gs66  check for valid general product class and desc*/
   /* ************************************************************/

  KUCREC.KUCCOID = SP0RM070.KUCCOID[SP0RWSB2];
  KUMREC.KUCCOID = SP0RM070.KUCCOID[SP0RWSB2];
  KUMREC.KUMSTRID = SP0RM070.KUMSTRID[SP0RWSB2];

  SP0RS63();
  SP0RS64();
  SP0RS65();
  SP0RS66();

  if (SP0RW01.SP0RWVF != "Y"
   || converseVar.validationMsgNum > 0)
    return;
  end



end // end SP0RS74

// validate select code*
Function SP0RS75()



   /* ************************************************************/
      /* this statement group is used to make sure that the*/
      /* option entered was either an 'a' add or 'd' delete*/
   /* ************************************************************/



  SP0RM070.SP0RMMSG = " ";
  SP0RW01.SP0RWVF = " ";
  SP0RW01.SP0RWSB1 = 0;
  SP0RW01.SP0RWSB2 = 1;



  while (SP0RW01.SP0RWSB1 < 7)
    SP0RW01.SP0RWSB1 = SP0RW01.SP0RWSB1 + 1;
    if (SP0RM070.KUCCOID[SP0RWSB1] == " ") /* end of the table*/
      SP0RM070.KUCCOID[SP0RWSB1] = " ";
      SP0RM070.KUMSTRID[SP0RWSB1] = " ";
      SP0RM070.XNXCD[SP0RWSB1] = " ";
      SP0RM070.XGPCD[SP0RWSB1] = " ";
      SP0RM070.KUCCONM[SP0RWSB1] = " ";
      SP0RM070.KUMSTRNM[SP0RWSB1] = " ";
      SP0RM070.XNXDESC[SP0RWSB1] = " ";
      SP0RM070.XGPDESC[SP0RWSB1] = " ";
    end
  end



end // end SP0RS75

// edit for fast path, data mod *
Function SP0RS76()



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SP0I";
    COMMAREA.CAITEM = SP0RM070.SP1ID;
    XSEXIT();
  end

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "SP0M";
    COMMAREA.CAITEM = " ";
    XSEXIT();
  end


  if (SP0RM070.CATOAP != " ")
    COMMAREA.CATOAP = SP0RM070.CATOAP;
    COMMAREA.CAITEM = SP0RM070.CAITEM;
    XSEXIT();
    return;
  end


  if (converseVar.eventKey is pf1) /* transfer to help*/
    XSPF1();
    SP0RM070.SP0RMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end


  if (converseVar.eventKey is pf4) /* trans. to mn0m (main menu)*/
    XSPF4();
    SP0RM070.SP0RMMSG = COMMAREA.CAMSG;
    converseLib.validationFailed(99);
    return;
  end



end // end SP0RS76

//*** RECORD=SP0RW01 ****
// this is the work record for sp0r: sales program inquiry
// for customer information.
// 
// ----------------------------------------------------------
//                MAINTENANCE RECORD
// 
// DATE     WHO    WHAT
// 
// 04/07/92 SSJ    E782:enlarge the customer file to 700.
// 
// 
// 
// -----------------------------------------------------------
// ***********************
Record SP0RW01 type basicRecord
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SP0RWUPF SP0RWUPF ; 
  10 SP0RWMSG SP0RWMSG ; 
  10 SP0RWD SP0RWD ; 
    20 SP0RWD1 SP0RWD1 ; 
    20 SP0RWD2 SP0RWD2 ; 
  10 SP0RWT1 SP0RWT1 ; 
    20 SP0RWTH1 SP0RWTH1 ; 
    20 SP0RWTC1 SP0RWTC1 ; 
    20 SP0RWTM1 SP0RWTM1 ; 
    20 SP0RWTC2 SP0RWTC2 ; 
    20 SP0RWTS1 SP0RWTS1 ; 
  10 SP0RWT2 SP0RWT2 ; 
    20 SP0RWTH2 SP0RWTH2 ; 
    20 SP0RWTM2 SP0RWTM2 ; 
  10 SP0RWVF SP0RWVF ; 
  10 SP0RWVF1 SP0RWVF1 ; 
  10 SP0RWMDF SP0RWMDF ; 
  10 SP0RWHDM SP0RWHDM ; 
  10 SP0RWSDM SP0RWSDM ; 
  10 SP0RWSID SP0RWSID ; 
  10 SP0RWACF SP0RWACF ; 
  10 SP0RWAPF SP0RWAPF ; 
  10 SP0RWSB1 SP0RWSB1 ; 
  10 SP0RWSB2 SP0RWSB2 ; 
  10 SP0RWSB3 SP0RWSB3 ; 
  10 SP0RWSB4 SP0RWSB4 ; 
  10 SP0RWTSZ SP0RWTSZ ; 
  10 SP0RWPOS SP0RWPOS ; 
  10 SP0RWTBL SP0RWTBL ; 
    15 XOTCD XOTCD [200] ; 
  10 SP0RWTL2 SP0RWTL2 [700] ; 
    15 SP1ID SP1ID ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 XGPCD XGPCD ; 
  10 SP5KEY SP5KEY ; 
  10 SP0RWTL3 SP0RWTL3 ; 
    15 SP0RWFIL SP0RWFIL [200] ; 
    15 SY1STNBR SY1STNBR [200] ; 
    15 SY2CLRID SY2CLRID [200] ; 
    15 XDMCD XDMCD [200] ; 
  10 SP0RWTL4 SP0RWTL4 ; 
    15 SP1STAT SP1STAT [200] ; 
    15 SP1NM SP1NM [200] ; 
    15 SP1ABRV SP1ABRV [200] ; 
    15 XNDCD XNDCD [200] ; 
  10 XFMCD XFMCD ; 
  10 XFMDESC XFMDESC ; 
  10 XAUCD XAUCD ; 
  10 XAUDESC XAUDESC ; 
  10 XSGCD XSGCD ; 
  10 XSGDESC XSGDESC ; 
  10 XSPCD XSPCD ; 
  10 XSPDESC XSPDESC ; 
  10 SP0RWOTH SP0RWOTH ; 
  10 SP0RWQTY SP0RWQTY ; 
  10 SP0RWDDL SP0RWDDL ; 
  10 SP0RWPCT SP0RWPCT ; 
  10 SP4KEY SP4KEY ; 
    15 SP0RWID SP0RWID ; 
    15 SP0RWKC SP0RWKC ; 
    15 SP0RWKM SP0RWKM ; 
    15 SP0RWXN SP0RWXN ; 
    15 SP0RWXG SP0RWXG ; 
  10 SP2DIND SP2DIND ; 
  10 SP0RWF3 SP0RWF3 ; 
  10 SP0RWFL1 SP0RWFL1 ; 
  10 SP0RWFL2 SP0RWFL2 ; 
  10 SP0RWFL3 SP0RWFL3 ; 
  10 SP0RWFL4 SP0RWFL4 ; 
  10 SP0RWFL5 SP0RWFL5 ; 
  10 SP0RWFL6 SP0RWFL6 ; 
  10 SP0RWFL7 SP0RWFL7 ; 
  10 SP0RWFL8 SP0RWFL8 ; 
  10 SP0RWFL9 SP0RWFL9 ; 
  10 SP0RWFLA SP0RWFLA ; 
  10 SP0RWLOC SP0RWLOC ; 
    15 SP0RWID1 SP0RWID1 ; 
    15 SP0RWL1 SP0RWL1 ; 
    15 * char(15) ; 
end // end SP0RW01

// w.s. all company flag*
DataItem SP0RWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. all product flag*
DataItem SP0RWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date*
DataItem SP0RWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century*
DataItem SP0RWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd*
DataItem SP0RWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollar amount hold*
DataItem SP0RWDDL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view only flag...no update*
DataItem SP0RWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for sp1id & gpcd*
DataItem SP0RWFIL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag1*
DataItem SP0RWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag2*
DataItem SP0RWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag3*
DataItem SP0RWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag4*
DataItem SP0RWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag5*
DataItem SP0RWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag6*
DataItem SP0RWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag7*
DataItem SP0RWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag8*
DataItem SP0RWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag9*
DataItem SP0RWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flaga*
DataItem SP0RWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for header data mdt*
DataItem SP0RWHDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id hold*
DataItem SP0RWID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1id for transfer*
DataItem SP0RWID1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec kuccoid hold*
DataItem SP0RWKC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sp4rec kumstrid hold-*
DataItem SP0RWKM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part of app transfering to*
DataItem SP0RWL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// app transfer key*
DataItem SP0RWLOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for select & path*
DataItem SP0RWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws message field*
DataItem SP0RWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types hold code-*
DataItem SP0RWOTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discount percent hold*
DataItem SP0RWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. table position*
DataItem SP0RWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// discount quantity hold*
DataItem SP0RWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w.s. subscript 1*
DataItem SP0RWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript2*
DataItem SP0RWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript3*
DataItem SP0RWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. subscript4*
DataItem SP0RWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// test for select data mdt*
DataItem SP0RWSDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. saved s.p. id*
DataItem SP0RWSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1*
DataItem SP0RWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2*
DataItem SP0RWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order type table*
DataItem SP0RWTBL char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 1*
DataItem SP0RWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2*
DataItem SP0RWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1*
DataItem SP0RWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2*
DataItem SP0RWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust company id table*
DataItem SP0RWTL2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product record table*
DataItem SP0RWTL3 char(3400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s.p. browse table*
DataItem SP0RWTL4 char(8200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time minute #1*
DataItem SP0RWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2*
DataItem SP0RWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1*
DataItem SP0RWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. table size8
DataItem SP0RWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws update flag*
DataItem SP0RWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// test for name & abbr entry*
DataItem SP0RWVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for add, chg, or del*
DataItem SP0RWVF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xgpcd hol*
DataItem SP0RWXG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp4rec xnxcd hold*
DataItem SP0RWXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

