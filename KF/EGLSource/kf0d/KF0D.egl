package kf0d;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKFS-CHK-SECURITY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx2.XSE-SESN-CD;
import corpy2.YNS-BUS-FUNC-ID;
import corpy2.YNS-SESN-BDT;
import corpy2.YNS-SESN-XDT;
import corpy2.YNSTBL;
import kf.common.*;
import sm.common.SM-SREP-MGR-IND;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
import vv.common.VFRMLA01;
import vv.common.VKOAUD01;
import vv.common.VKOCTL01;
import vv.common.VREPOS01;
import vv.common.VSNADJ01;
import vv.common.VSNSLS01;
//*** PROGRAM=KF0D ****
// KF0D is used to enter and update rep compensation formulas.
// 
// The user enters the Agency ID and the Rep ID.  KF system
// internal security is checked to see if the user is allowed
// access to information for that agency and rep.  If access
// is not allowed no data is displayed.
// 
// If access is allowed, GOAL security is used to determine if
// the user has update authority, or browse authority only.
// 
// If the user entered KF0D from another KF program, the agency
// and rep entered on the previous screen will be used to build
// the KF0D screen (after security is checked).
// 
// Data for the next compensation system is displayed first.
// The user can use PF19 and PF20 to change the season
// displayed.
// 
// The user can exit this screen by pressing PF1, PF3 or PF4;
// or by entering a valid fastpath option.
// 
// If the user presses PA2 and updates are pending, the
// updates are cancelled and the screen is refreshed with the
// original data for the agency / rep.
// 
// if the user presses PA2 and no updates are pending, the
// screen is cleared.
// 
// ************************************************************
// *                MAINTENANCE HISTORY                       *
// ************************************************************
// 
// Log #    Date     Name   Description
// -----  --------  ------  -----------------------------------
// 
//  001   10/19/92  JBECKE  Created new program.
//  001   11/30/92  JBECKE  Allow entry of 0 target income.
//  001   12/16/92  JBECKE  Do not protect target income and
//                          include inactive flag fields on
//                          expired rates.
//  01    12/17/92  JBECKE  Pick up changes to VKOCTL01 and
//                          VKOAUD01.
// 026    12/28/92  DLIDDL  Rate Forecasting Enhancements
// 032    05/24/93  GCALKI  Change so screen starts with the
//                          current season.
// 000    06/02/93  jbecke  Do not allow update of include
//                          inactive flag for non-current
//                          formulas.  Do allow update of
//                          percentages for all formulas.
// 034    07/07/93  jbecke  allow effective dates greater than
//                          the end of the current month.
// 000    08/09/93  jbecke  change audit filler length for
//                          august table changes.
// 000    09/22/93  ISCHMI  Changed call to IO5610 to come from
//                          a 4 byte record instead of a
//                          literal, which will prevent over-
//                          laying of storage in subsequent
//                          calls to other subroutines.
// 
// *********************
Program KF0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KF0DW01 KF0DW01; // record
  KF0DW02 KF0DW02; // record
  KF0DW03 KF0DW03; // record
  KFWREC KFWREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VFRMLA01 VFRMLA01; // record
  VKOAUD01 VKOAUD01; // record
  VKOCTL01 VKOCTL01; // record
  VREPOS01 VREPOS01; // record
  VSNADJ01 VSNADJ01; // record
  VSNSLS01 VSNSLS01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KFATBL {deleteAfterUse = yes}; // table
  use YNSTBL {deleteAfterUse = yes}; // table
  use KF0DM.KF0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KF0D-00000: KF0D-00000();
    KF0D-10000: KF0D-10000();
    ;
        /* always loop through this process*/
    ;
    goto KF0D-10000;
    ;
  end // end main
end // end KF0D

// start of program
Function KF0D-00000()
  /* initial processing*/
  ;
  XSENTRY(); /* goal security*/
  ;
  XSSEGTR(); /* set segmented transaction ID*/
  ;
  KF0DS-INITIALIZE(); /* initialize*/
  ;
  ;
  if (KFWREC.SM-SAGCY-ID != " " /* agency ID or rep ID passed*/
   || KFWREC.SM-SREP-ID != 0)  
    KF0DM001.KF0DM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
    KF0DM001.KF0DM-SM-SREP-ID = KFWREC.SM-SREP-ID;
    ;
    KF0DS-START-PROC(); /* edit them & build map if OK*/
    ;
  else
    ;
   /* KF0DS-SET-FIELDS;                /* set map fields*/
    KF0DS-PROTECT-MAP(); /* protect the map fields*/
    set KF0DM001.KF0DM-SM-SAGCY-ID cursor;
    ;
  end
  ;
  ;
end // end KF0D-00000

// converse KF0D map
Function KF0D-10000()
  ;
     /* nothing to do in the before section*/
  ;
  ;
  ;
  converse KF0DM001 ;
  ;
  KF0DM001.KF0DM-MESSAGE = " "; /* program message area*/
  ;
  set KF0DM001.KF0DM-SM-SAGCY-ID initialAttributes;
  set KF0DM001.KF0DM-SM-SREP-ID initialAttributes;
  ;
  ;
  if (converseVar.eventKey is enter) /* user pressed enter*/
    KF0DS-EDIT-ENTER();
  else
    KF0DW01.KF0DW-ERROR-IND = "N"; /* no errors*/
    if (converseVar.eventKey is pa2) /* user pressed PA2*/
      KF0DS-PROCESS-PA2();
    else
      if (converseVar.eventKey is pf1 /* user presses a PF key*/
       || converseVar.eventKey is pf3 /* that is valid*/
       || converseVar.eventKey is pf4 
       || converseVar.eventKey is pf7 
       || converseVar.eventKey is pf8 
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20)
        KF0DS-EDIT-PF-KEYS();
      else
        converseLib.validationFailed(2); /* invalid key pressed*/
      end
    end
  end
  ;
end // end KF0D-10000

// add new formula
Function KF0DS-ADD-FORMULA()
  ;
  ;
       /* insert a new formula for the rep*/
  ;
  ;
  KF0DS-MOVE-TO-WS();
  ;
  KF0DS-MOVE-TO-FMLA();
  ;
  VFRMLA01.XXX-USER-ID = COMMAREA.CAUSERID;
  VFRMLA01.ZZ-CHNG-CNT = 0;
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "ADD FRM";
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    COMMAREA.CATOAP = "KF0D";
    XSEXIT();
    exit program;
  end
  ;
  VFRMLA01.ZZ-SDT = TA2REC.TA2GRGGN;
  VFRMLA01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  VFRMLA01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
  ;
  call "IO3950" ("A ", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* add new row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    ;
    set VKOAUD01 empty;
    VKOAUD01.XXX-TBL-NM = "VFRMLA01";
    VKOAUD01.CO-AUD-TYP-IND = "A";
    VKOAUD01.SM-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
    VKOAUD01.SM-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
    VKOAUD01.XXX-USER-ID = COMMAREA.CAUSERID;
    VKOAUD01.ZZ-SDT = TA2REC.TA2GRGGN;
    VKOAUD01.ZZ-SETUP-HHMMSS = TA2REC.TA2TIMEN;
    VKOAUD01.CO-AUD-FILLR-BFR-LEN = KF0DW01.KF0DW-AUDIT-FILL-LEN;
    VKOAUD01.CO-AUD-FILLR-AFT-LEN = KF0DW01.KF0DW-AUDIT-FILL-LEN;
    VKOAUD01.CO-AUD-FILLR-AFT-TEXT = VFRMLA01.VFRMLA01-GROUP;
    ;
    KF0DS-WRITE-AUDIT();
    ;
  else
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFRMLA01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "ADD FRML"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3950"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
  ;
end // end KF0DS-ADD-FORMULA

// build the map
Function KF0DS-BUILD-MAP()
  ;
       /* display the season*/
  ;
       /* fetch all of the data.  Load it into temporary storage if*/
       /* the working storage array gets full.*/
  ;
       /* move the first page of data to the map.*/
  ;
       /* if no data is found for the rep, issue an error message.*/
  ;
  ;
  KF0DM001.KF0DM-SEASON-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0DW-SESN-INDEX];
  ;
  set KF0DM001.KF0DM-SEASON-HEADING initialAttributes;
  set KF0DM001.KF0DM-SEASON-YR-DESC initialAttributes;
  ;
  KF0DS-FETCH-DATA(); /* get all of the detail*/
  ;
  if (KF0DW01.KF0DW-DATA-FOUND-IND == "Y") /* if detail was found*/
    ;
    KF0DS-MOVE-TO-MAP(); /* move the data to the map*/
    ;
    KF0DS-FORMAT-DATES();
    ;
  else /* no detail found*/
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(16);
      KF0DW01.KF0DW-ERROR-IND = "Y";
    end
  end
  ;
  KF0DS-SET-FIELDS();
  ;
end // end KF0DS-BUILD-MAP

Function KF0DS-CHCK-NEW-UDT()
  ;
  ;
       /* check detail for new updates.*/
  ;
  ;
  KF0DW01.KF0DW-NEW-UPDATE-IND = "N";
  ;
  KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-BOTTOM-OF-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0) /* from bottom to top*/
    ;
    if (KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] > " ")
      KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX];
      move KF0DW-DATE-OUT-MM to KF0DW-DATE-WORK-MM withV60Compat;
      move KF0DW-DATE-OUT-DD to KF0DW-DATE-WORK-DD withV60Compat;
      move KF0DW-DATE-OUT-YY to KF0DW-DATE-WORK-YY withV60Compat;
      if (KF0DW-DATE-OUT-YY > 80)
        KF0DW-DATE-WORK-CC = 19;
      else
        KF0DW-DATE-WORK-CC = 20;
      end
    else
      KF0DW-DATE-WORK-CCYYMMDD = 0;
    end
    if (KF0DW-DATE-WORK-CCYYMMDD
     != KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX])
      KF0DW01.KF0DW-NEW-UPDATE-IND = "Y";
    end
    ;
    if (KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] > " ")
      KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX];
      move KF0DW-DATE-OUT-MM to KF0DW-DATE-WORK-MM withV60Compat;
      move KF0DW-DATE-OUT-DD to KF0DW-DATE-WORK-DD withV60Compat;
      move KF0DW-DATE-OUT-YY to KF0DW-DATE-WORK-YY withV60Compat;
      if (KF0DW-DATE-OUT-YY > 80)
        KF0DW-DATE-WORK-CC = 19;
      else
        KF0DW-DATE-WORK-CC = 20;
      end
    else
      if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] > " ")
        KF0DW-DATE-WORK-CCYYMMDD = 99999999;
      else
        KF0DW-DATE-WORK-CCYYMMDD = KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX];
      end
    end
    if (KF0DW-DATE-WORK-CCYYMMDD
     != KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX])
      KF0DW01.KF0DW-NEW-UPDATE-IND = "Y";
    end
    ;
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX - 1;
    ;
  end
  ;
  ;
end // end KF0DS-CHCK-NEW-UDT

// check for formula update
Function KF0DS-CHECK-UPDT()
  ;
  ;
        /* edit the map detail*/
  ;
        /* if detail was updated and no errors have occurred,*/
        /* update the database.*/
  ;
        /* if there were no updates, and no data has been displayed*/
        /* for the rep, issue an error message.*/
  ;
  ;
  KF0DS-EDIT-DETAIL(); /* edit detail*/
  ;
  if (KF0DW01.KF0DW-UPDATE-PENDING == "Y" /* an update occurred*/
   && KF0DW01.KF0DW-ERROR-IND == "N")     /* and there are no errors*/
    if (KF0DW01.KF0DW-DATE-GAP == "N"      /* and no date gaps*/
     && KF0DW01.KF0DW-BAD-FIRST-EDT == "N" /* and no date gaps*/
     && KF0DW01.KF0DW-BAD-LAST-XDT == "N") /* and no date gaps*/
      KF0DS-PROCESS-UPDT(); /* process the update*/
    else
      if (KF0DW01.KF0DW-DATE-GAP == "Y")
        KF0DM001.KF0DM-MESSAGE = "-- A DATE GAP EXISTS BETWEEN THIS FORMULA AND THE PREVIOUS ONE"; /* date gap message*/
        converseLib.validationFailed(27); /* press enter to accept*/
      else
        if (KF0DW01.KF0DW-BAD-FIRST-EDT == "Y")
          KF0DM001.KF0DM-MESSAGE = "EFFECTIVE DATE SHOULD NOT BE BEFORE THE CURRENT SHIP SEASON STARTS"; /* bad first effective date*/
          converseLib.validationFailed(27); /* press enter to accept*/
        else
          KF0DM001.KF0DM-MESSAGE = "EXPIRE DATE SHOULD NOT BE AFTER THE CURRENT SHIP SEASON ENDS"; /* bad first effective date*/
          converseLib.validationFailed(27); /* press enter to accept*/
        end
      end
    end
  else
    if (KF0DW01.KF0DW-UPDATE-PENDING == "N") /* no updates*/
      if (KF0DW01.KF0DW-DATA-FOUND-IND == "N")
        KF0DS-START-PROC(); /* start over so error dsplyd*/
      end
    end
  end
  ;
end // end KF0DS-CHECK-UPDT

// change existing formula
Function KF0DS-CHNG-FORMULA()
  ;
  ;
       /* update a formula for the rep*/
  ;
  ;
  set VKOAUD01 empty;
  set VFRMLA01 empty;
  ;
  KF0DS-MOVE-TO-FMLA(); /* setup fields*/
  ;
  call "IO3950" ("S ", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* read for update*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* return ok*/
    VKOAUD01.CO-AUD-FILLR-BFR-TEXT = VFRMLA01.VFRMLA01-GROUP;
  else
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFRMLA01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "UPDT RD "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3950"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
  VKOAUD01.XXX-TBL-NM = "VFRMLA01";
  VKOAUD01.CO-AUD-TYP-IND = "C";
  VKOAUD01.SM-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
  VKOAUD01.SM-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
  VKOAUD01.XXX-USER-ID = COMMAREA.CAUSERID;
  VKOAUD01.CO-AUD-FILLR-BFR-LEN = KF0DW01.KF0DW-AUDIT-FILL-LEN;
  VKOAUD01.CO-AUD-FILLR-AFT-LEN = KF0DW01.KF0DW-AUDIT-FILL-LEN;
  VKOAUD01.CO-AUD-FILLR-BFR-TEXT = VFRMLA01.VFRMLA01-GROUP;
  ;
  KF0DS-MOVE-TO-WS(); /* move map to array*/
  ;
  KF0DS-MOVE-TO-FMLA(); /* setup fields*/
  ;
  VFRMLA01.XXX-USER-ID = COMMAREA.CAUSERID;
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "ADD FRM";
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    COMMAREA.CATOAP = "KF0D";
    XSEXIT();
    exit program;
  end
  ;
  VFRMLA01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  VFRMLA01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
  ;
  VKOAUD01.ZZ-SDT = TA2REC.TA2GRGGN;
  VKOAUD01.ZZ-SETUP-HHMMSS = TA2REC.TA2TIMEN;
  ;
  call "IO3950" ("U ", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* get next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* return ok*/
    ;
    VKOAUD01.CO-AUD-FILLR-AFT-TEXT = VFRMLA01.VFRMLA01-GROUP;
    ;
    KF0DS-WRITE-AUDIT();
    ;
  else
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFRMLA01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "UPDT FML"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3950"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
  ;
end // end KF0DS-CHNG-FORMULA

// close DCOMM.VFRMLA01 cursor
Function KF0DS-CLOSE-CURSOR()
  ;
          /* close DCOMM.VSNSLS01 cursor*/
  ;
  ;
  KF0DW01.KF0DW-END-OF-FILE = "Y"; /* end of file*/
  ;
  call "IO3950" ("C1", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* close  cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFRMLA01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLOSE C1"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3950"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0DS-CLOSE-CURSOR

// edit agency and rep ID's
Function KF0DS-EDIT-AGY-REP()
  ;
           /* validate fields the user entered - agency ID and rep ID*/
           /* send back error message if fields are not valid*/
  ;
           /* if both agency and rep ID are valid, check to see*/
           /* if the rep works for the agency.  If not, send back*/
           /* an error message.*/
  ;
           /* if the rep works for the agency, get the rep's*/
           /* postion description.*/
  ;
  ;
  KF0DM001.KF0DM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  KF0DM001.KF0DM-SM-SREP-ID = KFWREC.SM-SREP-ID;
  ;
  KF0DW01.KF0DW-ERROR-IND = "N";
  ;
  set SM1REC empty;
  set SM4REC empty;
  set SM5REC empty;
  ;
  if (KF0DM001.KF0DM-SM-SREP-ID == 0) /* validate rep id*/
    converseLib.validationFailed(13); /* must enter rep id*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-SM-SREP-ID cursor, bold;
  else
    SM4REC.SM4REPID = KF0DM001.KF0DM-SM-SREP-ID;
    call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch rep row*/
  /*  */
    if (SQLCA.VAGen_SQLCODE == 0) /* if rep is found*/
      KF0DM001.KF0DM-XXX-LAST-NM = SM4REC.XXXLSTNM; /* move to map*/
      KF0DM001.KF0DM-XXX-FRST-NM = SM4REC.XXXFSTNM;
    else /* an error occurred*/
      if (SQLCA.VAGen_SQLCODE == 100) /* rep not found*/
        converseLib.validationFailed(7); /* rep does not exist*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set KF0DM001.KF0DM-SM-SREP-ID cursor, bold;
      else /* an error occurred*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set ERRSQLCA empty;
        move SQLCA to ERRSQLCA withV60Compat;
        TA1REC.TA1TYPE = "DB2"; /* db2 error*/
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
        TA1REC.TA1TBLVU = "VREPS001"; /* table view name*/
        TA1REC.TA1LOCAT[3] = "BUILD  1"; /* error location*/
        TA1REC.TA1LOCAT[4] = "IO0020"; /* i/o mod*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* message formatter*/
        COMMAREA.CAUSERA = " "; /* clear commarea*/
        XSPF4(); /* pass to goal menu*/
        exit program; /* goal memu failure*/
      end
    end
  end
  ;
  if (KF0DM001.KF0DM-SM-SAGCY-ID == " ") /* validate agency id*/
    converseLib.validationFailed(12); /* must enter agency id*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
  else
    SM1REC.SM1AGYID = KF0DM001.KF0DM-SM-SAGCY-ID;
    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* fetch agency row*/
  /*  */
    if (SQLCA.VAGen_SQLCODE == 0) /* if agency is found*/
      KF0DM001.KF0DM-SM-SAGCY-NM = SM1REC.SM1AGYNM; /* move to map*/
    else /* agency not found*/
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(5); /* agency doesn't exist*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
      else /* an error occurred*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set ERRSQLCA empty;
        move SQLCA to ERRSQLCA withV60Compat;
        TA1REC.TA1TYPE = "DB2"; /* db2 error*/
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
        TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
        TA1REC.TA1LOCAT[3] = "BUILD  2"; /* error location*/
        TA1REC.TA1LOCAT[4] = "IO0020"; /* i/o mod*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* message formatter*/
        COMMAREA.CAUSERA = " "; /* clear commarea*/
        XSPF4(); /* pass to goal menu*/
        exit program; /* goal memu failure*/
      end
    end
  end
  ;
  if (KF0DW01.KF0DW-ERROR-IND == "N") /* if no errors*/
                                                  /* validate agency/rep*/
    SM5REC.SM1AGYID = KF0DM001.KF0DM-SM-SAGCY-ID;
    SM5REC.SM4REPID = KF0DM001.KF0DM-SM-SREP-ID;
    SM5REC.XXXSTAT = "A";
    ;
    call "IO0160" ("S ", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* fetch agency/rep row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* rep found*/
      KF0DM001.KF0DM-SM-SREP-PSTN-ID = SM5REC.SM-SREP-PSTN-ID;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* look for inactive*/
        SM5REC.XXXSTAT = " ";
        call "IO0160" ("S3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0160" ("N3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0) /* inactive found*/
            KF0DM001.KF0DM-REP-TERM-DATE = SM5REC.SM5TDT;
            set KF0DM001.KF0DM-REP-TERM-DATE skip, bold;
            set KF0DM001.KF0DM-REP-TERM-HEADING skip, bold;
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              converseLib.validationFailed(14); /* rep not in agency*/
              KF0DW01.KF0DW-ERROR-IND = "Y";
              set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
              set KF0DM001.KF0DM-SM-SREP-ID bold;
            end
          end
          call "IO0160" ("C3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE != 0)
            KF0DW01.KF0DW-ERROR-IND = "D";
          end
        else
          KF0DW01.KF0DW-ERROR-IND = "D";
        end
      else
        KF0DW01.KF0DW-ERROR-IND = "D";
      end
    end
    if (KF0DW01.KF0DW-ERROR-IND == "D") /* db2 error occurred*/
      KF0DW01.KF0DW-ERROR-IND = "Y";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
      TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "BUILD  2"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO0020"; /* i/o mod*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      COMMAREA.CAUSERA = " "; /* clear commarea*/
      XSPF4(); /* pass to goal menu*/
      exit program; /* goal memu failure*/
    end
  end
  ;
  KF0DW01.SM-SREP-MGR-IND = "N";
  ;
  if (KF0DM001.KF0DM-SM-SREP-PSTN-ID > " " /* postion ID found*/
   && KF0DW01.KF0DW-ERROR-IND == "N")      /* and no error*/
    VREPOS01.SM-SREP-PSTN-ID = KF0DM001.KF0DM-SM-SREP-PSTN-ID;
    ;
   /* get position desc*/
    call "IO0660" ("S ", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* found*/
      KF0DM001.KF0DM-SM-SREP-PSTN-DESC = VREPOS01.SM-SREP-PSTN-DESC;
      KF0DW01.SM-SREP-MGR-IND = VREPOS01.SM-SREP-MGR-IND;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        KF0DM001.KF0DM-SM-SREP-PSTN-DESC = "UNKNOWN";
      else /* db2 error*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set ERRSQLCA empty;
        move SQLCA to ERRSQLCA withV60Compat;
        TA1REC.TA1TYPE = "DB2"; /* db2 error*/
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
        TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
        TA1REC.TA1LOCAT[3] = "GET DESC"; /* error location*/
        TA1REC.TA1LOCAT[4] = "IO0660"; /* i/o mod*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* message formatter*/
        COMMAREA.CAUSERA = " "; /* clear commarea*/
        XSPF4(); /* pass to goal menu*/
        exit program; /* goal memu failure*/
      end
    end
  else
    if (KF0DW01.KF0DW-ERROR-IND == "N") /* no errors*/
      KF0DM001.KF0DM-SM-SREP-PSTN-ID = " ";
      KF0DM001.KF0DM-SM-SREP-PSTN-DESC = "NONE";
    end
  end
  ;
end // end KF0DS-EDIT-AGY-REP

// edit map detail
Function KF0DS-EDIT-DETAIL()
  ;
  ;
       /* edit detail from right to left and from bottom to top.*/
  ;
       /* if any changes were made, determine if it is an add or a change.*/
  ;
  /* **********************************************************************/
  /* * Get the last day of the current month for the purpose of editing  **/
  /* * the effective date.                                               **/
  /* **********************************************************************/
  ;
  KF0DS-GET-LAST-DAY(); /* get last day of current month*/
  ;
  KF0DW01.KF0DW-UPDATE-PENDING = "N";
  KF0DW01.KF0DW-DATE-GAP = "N";
  KF0DW01.KF0DW-BAD-FIRST-EDT = "N";
  KF0DW01.KF0DW-BAD-LAST-XDT = "N";
  ;
  KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-BOTTOM-OF-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0) /* from bottom to top*/
    ;
    KF0DW01.KF0DW-DATE-CHANGE = "N";
    KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = " ";
    ;
    if (KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] == " ")
      if (KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] == 0
       || KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] > 90000000)
                                  /* not entered*/
      else /* blanked out*/
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
      end
    else /* entered*/
      KF0DS-EDIT-EXP-DT(); /* expire date*/
    end
    ;
    if (KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] == " ")
                                  /* not entered*/
    else
      KF0DS-EDIT-EFF-DT(); /* effective date*/
    end
    ;
    KF0DW01.KF0DW-PCT-CHECK-SLRY = KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] / 100;
    ;
    KF0DW01.KF0DW-PCT-CHECK-COMM = KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] / 100;
    ;
    if (KF0DW01.KF0DW-PCT-CHECK-SLRY
     != KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX]
     || KF0DW01.KF0DW-PCT-CHECK-COMM
     != KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX])
      KF0DS-EDIT-PCTS(); /* sal & comm percents*/
      if (KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX] == 0
       && KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX] == 0)
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "A";
      else
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
      end
    end
    ;
    if (KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX]
     != KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX])
                                  /* target income*/
      if (KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] < 0)
        converseLib.validationFailed(43);
        set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] cursor, bold;
        KF0DW01.KF0DW-ERROR-IND = "Y";
      else
        if (KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX] == 0)
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "A";
        else
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
        end
      end
    else /* = 0*/
      if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] != " ") /* row changed*/
        if (KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] < 0)
          converseLib.validationFailed(43); /* must be > 0*/
          set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] cursor, bold;
          KF0DW01.KF0DW-ERROR-IND = "Y";
        end
      end
    end
    ;
    if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX]
     != KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX]
     || KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] != " ")
      KF0DS-EDIT-INCL(); /* include inactive flag*/
      if (KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX] == " ")
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "A";
      else
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
      end
    end
    ;
    if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] == "A"
     || KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] == "U")
      if (KF0DW01.KF0DW-PCT-CHECK-SLRY == 0
       && KF0DW01.KF0DW-PCT-CHECK-COMM == 0
       && KF0DW01.KF0DW-ERROR-IND == "N") /* no errors*/
        converseLib.validationFailed(22);
        set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] cursor, bold;
        set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] bold;
        KF0DW01.KF0DW-ERROR-IND = "Y";
      end
      KF0DW01.KF0DW-UPDATE-PENDING = "Y";
      if (KF0DW01.KF0DW-ERROR-IND == "N") /* no errors*/
        if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX]
         != KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX]
         || KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] == "A")
          KF0DS-GET-SLS-TOT(); /* get sales total*/
          KF0DS-GET-TOT-ADJ(); /* get total adjustments*/
          ;
  /* ***********************************************************************/
  /* * Add the total adjustments for the agency/rep to the total seasonal **/
  /* * sales amount for the agency/rep.                                   **/
  /* ***********************************************************************/
          ;
          KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] = VSNSLS01.CO-CUST-SESN-SLS + VSNADJ01.CO-CUST-SLS-ADJAMT;
        end
        KF0DS-RECALC-FRMLA(); /* recalculate formula*/
      end
    end
    ;
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX - 1;
    ;
  end
  ;
  if (KF0DW01.KF0DW-ERROR-IND == "N")
    KF0DS-FORMAT-DATES(); /* put dates in internal format*/
    KF0DS-EDIT-DT-RNG(); /* check date ranges*/
  end
  ;
end // end KF0DS-EDIT-DETAIL

// edit date ranges
Function KF0DS-EDIT-DT-RNG()
  ;
  ;
         /* effective date must be < expire date*/
         /* dates ranges cannot overlap*/
         /* effective date should be equal to the last expire date + 1*/
         /* or a date gap has occurred.  Only checked if*/
         /* the date has been updated.*/
  ;
  ;
  KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0)
                                            /* process if updated*/
    if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-SCREEN-INDEX] != " ")
      ;
      KF0DW01.KF0DW-RANGE-DATE = 0;
      ;
      if (KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
       > KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX])
        converseLib.validationFailed(25); /* must be < expire date*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
        if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-SCREEN-INDEX] == "A")
          set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
        end
      end
      ;
      KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-MAX-WS-LINES;
      ;
      while (KF0DW01.KF0DW-WS-INDEX > 0)
        ;
        if (KF0DW01.KF0DW-WS-INDEX == KF0DW01.KF0DW-SCREEN-INDEX)
                                                     /* current entry*/
        else
          if (KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX] == 0
           && KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX] == 0)
                                                      /* not entered*/
          else
            if (KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
             >= KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX]
             && KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
             <= KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
             && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX] > 0)
              converseLib.validationFailed(38); /* date overlap*/
              KF0DW01.KF0DW-ERROR-IND = "Y";
              if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-SCREEN-INDEX] == "A")
                set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
              else
                set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
              end
            end
            ;
            if (KF0DW01.KF0DW-ERROR-IND == "N")
              if (KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX]
               >= KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX]
               <= KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX] > 0)
                converseLib.validationFailed(38); /* date overlap*/
                KF0DW01.KF0DW-ERROR-IND = "Y";
                set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
              end
            end
            ;
            if (KF0DW01.KF0DW-ERROR-IND == "N")
              if (KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX]
               >= KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
               && KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX]
               <= KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX] > 0)
                converseLib.validationFailed(38); /* date overlap*/
                KF0DW01.KF0DW-ERROR-IND = "Y";
                if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-SCREEN-INDEX] == "A")
                  set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
                else
                  set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
                end
              end
            end
            ;
            if (KF0DW01.KF0DW-ERROR-IND == "N")
              if (KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
               >= KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
               <= KF0DW01.KF0DW-EXP-DATE[KF0DW-SCREEN-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX] > 0)
                converseLib.validationFailed(38); /* date overlap*/
                KF0DW01.KF0DW-ERROR-IND = "Y";
                set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
              end
            end
            ;
            if (KF0DW01.KF0DW-ERROR-IND == "N")
              if (KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]
               > KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
               && KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX]
               > KF0DW01.KF0DW-RANGE-DATE)
                KF0DW01.KF0DW-RANGE-DATE = KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX];
              end
            end
            ;
          end
        end
        ;
        KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX - 1;
      end
      ;
      if (KF0DW01.KF0DW-ERROR-IND == "N"                      
       && KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]          
       > KF0DW01.KF0DW-RANGE-DATE                             /* previous expire date*/
       && KF0DW02.KF0DW-UPDATE-IND[KF0DW-SCREEN-INDEX] == "A" /* added*/
       && KF0DW01.KF0DW-RANGE-DATE > 0)                       /* and someting to check*/
        ;
        set TA2REC empty;
        ;
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* option*/
        TA2REC.TA2DBDTN = KF0DW01.KF0DW-EFF-DATE[KF0DW-SCREEN-INDEX]; /* from - to dates*/
        TA2REC.TA2DBDFN = KF0DW01.KF0DW-RANGE-DATE;
        ;
        try
          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
        end /* check for gap*/
        ;
        if (sysVar.errorCode == "00000000") /* good call*/
          if (TA2REC.TA2DBDDN == 1) /* no gap*/
            ;
          else /* gap in formula dates*/
            KF0DW01.KF0DW-DATE-GAP = "Y";
            set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
          end
        else /* bad call*/
          KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
          set TAEREC empty;
          TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
          TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parms*/
          TA1REC.TA1TYPE = "APPL"; /* application error*/
          TA1REC.TA1FUNC = "POST"; /* post, no abend*/
          TA1REC.TA1LOCAT[1] = "VLDT EDT"; /* location*/
          TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
          try
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          end /* message formatter*/
          converseLib.validationFailed(40); /* set error message*/
        end
      end
    end
    ;
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
  end
end // end KF0DS-EDIT-DT-RNG

// edit effective date
Function KF0DS-EDIT-EFF-DT()
  ;
         /* must be 0 if for the first formula of the season*/
         /* must be a valid date if present*/
         /* must be smaller than the expiration date*/
  ;
  KF0DW01.KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX];
  ;
  if (KF0DW01.KF0DW-DATE-FILL-1 == "-" /* date with separators*/
   || KF0DW01.KF0DW-DATE-FILL-1 == "/" 
   || KF0DW01.KF0DW-DATE-FILL-1 == ".")
    ;
  else /* date with no separators*/
    KF0DW01.KF0DW-DATE-TEST-MMDDYY = KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX];
    KF0DW01.KF0DW-DATE-OUT-MM = KF0DW01.KF0DW-DATE-TEST-MM;
    KF0DW01.KF0DW-DATE-OUT-DD = KF0DW01.KF0DW-DATE-TEST-DD;
    KF0DW01.KF0DW-DATE-OUT-YY = KF0DW01.KF0DW-DATE-TEST-YY;
    KF0DW01.KF0DW-DATE-FILL-1 = "-";
    KF0DW01.KF0DW-DATE-FILL-2 = "-";
  end
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2GRTYP = "B"; /* date type*/
  TA2REC.TA2GRGB = KF0DW01.KF0DW-DATE-OUT;
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* validate date*/
  ;
  if (sysVar.errorCode == "00000000") /* good call*/
    if (TA2REC.TA2RTNCD == 0) /* valid date*/
      KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DATE-OUT;
      if (TA2REC.TA2GRGGN != KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX])
        KF0DW01.KF0DW-DATE-CHANGE = "Y"; /* date changed*/
        ;
        if (TA2REC.TA2GRGGN < KF0DW01.YNS-SESN-BDT)
          KF0DW01.KF0DW-BAD-FIRST-EDT = "Y";
          set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
        end
        if (KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX] == 0)
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "A";
        else
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
        end
      end
      ;
    else /* bad date*/
      converseLib.validationFailed(24);
      KF0DW01.KF0DW-ERROR-IND = "Y";
      set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
    end
  else /* bad call*/
    KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "VLDT EDT"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    converseLib.validationFailed(40); /* set error message*/
  end
  ;
end // end KF0DS-EDIT-EFF-DT

// user pressed enter
Function KF0DS-EDIT-ENTER()
  ;
       /* If a fastpath was entered and no updates are pending*/
       /* pass control to the program entered.*/
  ;
       /* if the agency ID or rep ID have changed, edit them and*/
       /* build a new map.*/
  ;
       /* if the agency ID and rep ID have not changed, check for*/
       /* an updated formula.*/
  ;
  ;
  if (KF0DM001.CATOAP > " ") /* fastpath requested*/
    if (KF0DW01.KF0DW-UPDATE-PENDING == "Y") /* update pending*/
      converseLib.validationFailed(30); /* no fastpath & updt*/
      KF0DW-ERROR-IND = "Y";
    else
      COMMAREA.CATOAP = KF0DM001.CATOAP;
      COMMAREA.CAITEM = KF0DM001.CAITEM;
      COMMAREA.CAUSERA = " "; /* clear user area*/
      if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* transfer in KF system*/
        COMMAREA.CAUSERA = KFWREC.KFW-GROUP; /* common w/s record*/
      end
      XSEXIT(); /* transfer control*/
      KF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error was found*/
    end
  else /* new agency or rep*/
    if (KF0DM001.KF0DM-SM-SAGCY-ID != KFWREC.SM-SAGCY-ID
     || KF0DM001.KF0DM-SM-SREP-ID != KFWREC.SM-SREP-ID)
      KF0DW01.KF0DW-ERROR-IND = "N";
      KF0DS-START-PROC(); /* edit agency & rep*/
    else
      KF0DS-SET-FIELDS(); /* reset field display*/
      if (KF0DW01.KF0DW-DATE-GAP == "Y"      /* date gap*/
       || KF0DW01.KF0DW-BAD-FIRST-EDT == "Y" /* bad first date*/
       || KF0DW01.KF0DW-BAD-LAST-XDT == "Y") /* bad last date*/
        if (KF0DW01.KF0DW-ERROR-IND == "N") /* no other errors*/
          KF0DS-CHCK-NEW-UDT(); /* check for update*/
          if (KF0DW01.KF0DW-NEW-UPDATE-IND == "N") /* no other changes*/
            KF0DS-PROCESS-UPDT(); /* user accepts date*/
          else
            KF0DS-CHECK-UPDT(); /* check for update*/
          end
        else
          KF0DW01.KF0DW-ERROR-IND = "N";
          KF0DS-CHECK-UPDT(); /* check for update*/
        end
      else
        KF0DW01.KF0DW-ERROR-IND = "N";
        KF0DS-CHECK-UPDT(); /* check for update*/
      end
    end
  end
  ;
end // end KF0DS-EDIT-ENTER

// edit expiration date
Function KF0DS-EDIT-EXP-DT()
  ;
  ;
         /* must be a valid date if present*/
  ;
  KF0DW01.KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX];
  ;
  if (KF0DW01.KF0DW-DATE-FILL-1 == "-" /* date with separators*/
   || KF0DW01.KF0DW-DATE-FILL-1 == "/" 
   || KF0DW01.KF0DW-DATE-FILL-1 == ".")
    ;
  else /* date with no separators*/
    KF0DW01.KF0DW-DATE-TEST-MMDDYY = KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX];
    KF0DW01.KF0DW-DATE-OUT-MM = KF0DW01.KF0DW-DATE-TEST-MM;
    KF0DW01.KF0DW-DATE-OUT-DD = KF0DW01.KF0DW-DATE-TEST-DD;
    KF0DW01.KF0DW-DATE-OUT-YY = KF0DW01.KF0DW-DATE-TEST-YY;
    KF0DW01.KF0DW-DATE-FILL-1 = "-";
    KF0DW01.KF0DW-DATE-FILL-2 = "-";
  end
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2GRTYP = "B"; /* date type*/
  TA2REC.TA2GRGB = KF0DW01.KF0DW-DATE-OUT;
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* validate date*/
  ;
  if (sysVar.errorCode == "00000000") /* good call*/
    if (TA2REC.TA2RTNCD == 0) /* valid date*/
      KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DATE-OUT;
      if (TA2REC.TA2GRGGN
       != KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX])
        KF0DW01.KF0DW-DATE-CHANGE = "Y"; /* date changed*/
        if (TA2REC.TA2GRGGN > KF0DW01.YNS-SESN-XDT)
          KF0DW01.KF0DW-BAD-LAST-XDT = "Y";
          set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
        end
        if (KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] == 0)
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "A";
        else
          KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = "U";
        end
      end
      ;
    else /* bad date*/
      converseLib.validationFailed(26);
      KF0DW01.KF0DW-ERROR-IND = "Y";
      set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
    end
  else /* bad call*/
    KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "VLDT XDT"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    converseLib.validationFailed(40); /* set error message*/
  end
  ;
end // end KF0DS-EDIT-EXP-DT

// edit include inactive flag
Function KF0DS-EDIT-INCL()
  ;
           /* include inactive flag must be equal to 'Y' or 'N'*/
  ;
  ;
  if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] == "Y"
   || KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] == "N")
                                                /* OK*/
  else
    converseLib.validationFailed(23); /* invalid*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] cursor, bold;
  end
  ;
end // end KF0DS-EDIT-INCL

// edit comm & salary percents
Function KF0DS-EDIT-PCTS()
  ;
          /* salary % and commission % are stored in decimal format*/
          /* ( 0.0000 )*/
  ;
          /* both salary % and commission % must be between*/
          /* 0 and 100, inclusive.*/
  ;
          /* salary %  +  commission % must = 100*/
  ;
  ;
  if (KF0DW01.KF0DW-PCT-CHECK-COMM < 0 /* less than 0*/
   || KF0DW01.KF0DW-PCT-CHECK-COMM > 1) /* greater than 100*/
    converseLib.validationFailed(21); /* invalid value*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] cursor, bold;
  end
  ;
  if (KF0DW01.KF0DW-PCT-CHECK-SLRY < 0 /* less than 0*/
   || KF0DW01.KF0DW-PCT-CHECK-SLRY > 1) /* greater than 100*/
    converseLib.validationFailed(19); /* invalid value*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] cursor, bold;
  end
  ;
  KF0DW01.KF0DW-PCT-CHECK = KF0DW01.KF0DW-PCT-CHECK-SLRY + KF0DW01.KF0DW-PCT-CHECK-COMM;
  ;
  if (KF0DW01.KF0DW-PCT-CHECK != 1) /* not equal to 100*/
    converseLib.validationFailed(22); /* invalid value*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] cursor, bold;
    set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] bold;
  end
  ;
end // end KF0DS-EDIT-PCTS

// user pressed a PF key
Function KF0DS-EDIT-PF-KEYS()
       /* user pressed a PF key*/
       /* edit for valid options and pass control as requested*/
  ;
       /* valid PF keys are:*/
             /* 1 - pass control to help system*/
             /* 3 - pass control to KF0A*/
             /* 4 - pass control to GOAL main menu*/
             /* 7 - scroll up*/
             /* 8 - scroll down*/
             /* 12 - edit the data the user entered*/
             /* 19 - display the prior season's data*/
             /* 20 - display the next season's data*/
  ;
  if (KF0DM001.CATOAP > " ") /* fastpath entered*/
    converseLib.validationFailed(4); /* can't fastpath and PF key*/
  else
    if (KF0DW01.KF0DW-UPDATE-PENDING == "Y" /* update pending*/
     && converseVar.eventKey not pf12)      /* and not edit*/
      converseLib.validationFailed(31);
    else
      if (converseVar.eventKey is pf1) /* PF1*/
        XSPF1();
        KF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
      else
        if (converseVar.eventKey is pf3) /* pf3*/
          COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
          COMMAREA.CATOAP = "KF0A";
          COMMAREA.CAITEM = " ";
          XSEXIT();
          KF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
        else
          if (converseVar.eventKey is pf4) /* PF 4*/
            XSPF4();
            KF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
          else
            if (converseVar.eventKey is pf7) /* PF 7*/
              KF0DS-SCROLL-UP(); /* scroll up*/
              KF0DS-SET-FIELDS();
            else
              if (converseVar.eventKey is pf8) /* pf 8*/
                KF0DS-SCROLL-DOWN(); /* scroll down*/
                KF0DS-SET-FIELDS();
              else
                if (converseVar.eventKey is pf12) /* pf 12*/
                  KF0DS-EDIT-DETAIL(); /* edit detail*/
                  if (KF0DW01.KF0DW-ERROR-IND == "N")
                    if (KF0DW01.KF0DW-UPDATE-PENDING == "Y")
                      converseLib.validationFailed(27); /* press enter to accept*/
                    else
                      converseLib.validationFailed(42); /* no changes*/
                    end
                  end
                else
                  if (converseVar.eventKey is pf19 /* pf 19*/
                   || converseVar.eventKey is pf20) /* pf 20*/
                    if (KFWREC.KFW-ACCESS-IND == "Y") /* access ok*/
                      KF0DS-NEW-SEASON(); /* determine new season*/
                    else
                      KF0DS-START-PROC(); /* access not allowed*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end KF0DS-EDIT-PF-KEYS

// fetch the rep's formulas
Function KF0DS-FETCH-DATA()
  ;
        /* open the dcomm.vfrmla01 cursor*/
  ;
        /* fetch all of the detail rows.  Move each row to the working*/
        /* storage array.*/
  ;
        /* if the working storage array becomes full, write an error*/
        /* message.*/
  ;
        /* close the cursor after all data has been fetched.*/
  ;
  ;
  set SQLCA empty;
  ;
  KF0DS-OPEN-CURSOR(); /* open cursor*/
  ;
  KF0DW01.KF0DW-FETCH-COUNT = 0;
  KF0DW01.KF0DW-DATA-FOUND-IND = "N";
  ;
  while (KF0DW01.KF0DW-END-OF-FILE == "N") /* until end of file*/
    ;
    call "IO3950" ("N1", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* get next row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      ;
      KF0DW01.KF0DW-FETCH-COUNT = KF0DW01.KF0DW-FETCH-COUNT + 1;
      ;
      if (KF0DW01.KF0DW-FETCH-COUNT == 1) /* first row*/
        KF0DW01.KF0DW-DATA-FOUND-IND = "Y";
      end
      ;
                                             /* ws table is full*/
      if (KF0DW01.KF0DW-FETCH-COUNT > KF0DW01.KF0DW-MAX-WS-LINES)
        converseLib.validationFailed(44);
        KF0DW01.KF0DW-ERROR-IND = "Y";
        ;
      else
        ;
        KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX + 1;
        KF0DS-LOAD-WS-TBL(); /* load data to ws*/
      end
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if at end*/
        ;
        KF0DS-CLOSE-CURSOR(); /* close cursor*/
        ;
        KF0DW01.KF0DW-TOP-OF-SCREEN = 1;
        KF0DW01.KF0DW-BOTTOM-OF-SCREEN = KF0DW01.KF0DW-MAX-LINES-SCREEN;
        ;
      else /* if an error occured*/
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set ERRSQLCA empty;
        move SQLCA to ERRSQLCA withV60Compat;
        TA1REC.TA1TYPE = "DB2"; /* db2 error*/
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
        TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
        TA1REC.TA1LOCAT[3] = "SELCT N1"; /* error location*/
        TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* message formatter*/
        COMMAREA.CAUSERA = " "; /* clear commarea*/
        XSPF4(); /* pass to goal menu*/
        exit program; /* goal menu failure*/
      end
    end
  end
  ;
  ;
end // end KF0DS-FETCH-DATA

// put map dates in internal frmt
Function KF0DS-FORMAT-DATES()
  ;
  ;
        /* all of the effective dates and expiration dates on the screen*/
        /* are stored in internal format in working storage.*/
  ;
        /* internal format = 'ccyymmdd'*/
        /* display format = 'mm-dd-yy'*/
  ;
  ;
  KF0DW01.KF0DW-WS-INDEX = 1;
  KF0DW01.KF0DW-SCREEN-INDEX = 1;
  ;
  while (KF0DW01.KF0DW-WS-INDEX <= KF0DW01.KF0DW-MAX-WS-LINES)
    ;
    if (KF0DW01.KF0DW-WS-INDEX < KF0DW01.KF0DW-TOP-OF-SCREEN
     || KF0DW01.KF0DW-WS-INDEX > KF0DW01.KF0DW-BOTTOM-OF-SCREEN)
      KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX] = KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX];
      KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX] = KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX];
    else
      ;
      if (KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] > " ")
        KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX];
        move KF0DW-DATE-OUT-MM to KF0DW-DATE-WORK-MM withV60Compat;
        move KF0DW-DATE-OUT-DD to KF0DW-DATE-WORK-DD withV60Compat;
        move KF0DW-DATE-OUT-YY to KF0DW-DATE-WORK-YY withV60Compat;
        if (KF0DW-DATE-OUT-YY > 80)
          KF0DW-DATE-WORK-CC = 19;
        else
          KF0DW-DATE-WORK-CC = 20;
        end
        KF0DW-EFF-DATE[KF0DW-WS-INDEX] = KF0DW-DATE-WORK-CCYYMMDD;
      else
        KF0DW-EFF-DATE[KF0DW-WS-INDEX] = 0;
        KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] = " ";
      end
      ;
      if (KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] > " ")
        KF0DW-DATE-OUT = KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX];
        move KF0DW-DATE-OUT-MM to KF0DW-DATE-WORK-MM withV60Compat;
        move KF0DW-DATE-OUT-DD to KF0DW-DATE-WORK-DD withV60Compat;
        move KF0DW-DATE-OUT-YY to KF0DW-DATE-WORK-YY withV60Compat;
        if (KF0DW-DATE-OUT-YY > 80)
          KF0DW-DATE-WORK-CC = 19;
        else
          KF0DW-DATE-WORK-CC = 20;
        end
        KF0DW-EXP-DATE[KF0DW-WS-INDEX] = KF0DW-DATE-WORK-CCYYMMDD;
      else
        if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] > " ")
          KF0DW-EXP-DATE[KF0DW-WS-INDEX] = 99999999;
          KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] = " ";
        else
          KF0DW-EXP-DATE[KF0DW-WS-INDEX] = 0;
          KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] = " ";
        end
      end
      ;
      KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX + 1;
    end
    ;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX + 1;
  end
end // end KF0DS-FORMAT-DATES

// get last day of month
Function KF0DS-GET-LAST-DAY()
  /* ***********************************************************************/
  /* *  MODULE: GET LAST DAY                                              **/
  /* * PURPOSE: Gets the last day of the current year and month           **/
  /* ***********************************************************************/
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DTOPT = "LASTDAY"; /* option*/
  TA2GRTYP = "G"; /* date type*/
  TA2REC.TA2GRGG = KF0DW01.KF0DW-CURR-DATE;
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* validate date*/
  ;
  if (sysVar.errorCode == "00000000" /* good call*/
   && TA2REC.TA2RTNCD == 0)          /* valid date*/
    KF0DW01.KF0DW-LAST-DAY = TA2REC.TA2GRGGN;
  else
    KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "LAST DAY"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* initialise user area*/
    XSPF4(); /* transfer to goal menu*/
    exit program; /* transfer failed*/
  end
  ;
end // end KF0DS-GET-LAST-DAY

// fetch DCOMM.VSNSLS01 for rep
Function KF0DS-GET-SLS-TOT()
  ;
  ;
      /* get the seasonal sales total for the rep.*/
  ;
      /* if the rep is a manager, use the seasonal sales total for the*/
      /* entire agency.  Otherwise, use the seasonal sales total for*/
      /* the rep only.*/
  ;
      /* if the rep's 'include inactive' flag is 'Y' get the sales*/
      /* total for all customers.  If the 'include inactive' flag is*/
      /* 'N' get the total for active customers only.*/
  ;
  ;
  set VSNSLS01 empty;
  set SQLCA empty;
  ;
  VSNSLS01.SM-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
  VSNSLS01.XSE-SESN-CD = KF0DW01.KF0DW-NEW-SEASON;
  VSNSLS01.YNS-SESN-YR = KF0DW01.KF0DW-NEW-YEAR - 1; /* prev year*/
  VSNSLS01.CU-CO-ID = 0; /* customer total*/
  VSNSLS01.CU-STOR-ID = 0;
  VSNSLS01.XNX-DEPT-ID-XREF = 0;
  ;
  if (KF0DW01.SM-SREP-MGR-IND == "Y") /* rep is a manager*/
    VSNSLS01.SM-SREP-ID = 0; /* total for agency*/
  else /* total for rep*/
    VSNSLS01.SM-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
  end
  ;
  if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] == "Y")
    VSNSLS01.CO-CUST-STAT-IND = " "; /* all customers*/
  else
    VSNSLS01.CO-CUST-STAT-IND = "A"; /* active csustomers*/
  end
  ;
  call "IO3960" ("S ", SQLCA, VSNSLS01) {isNoRefresh = yes, isExternal = yes}; /* fetch sales row*/
  /*  */
  if (SQLCA.VAGen_SQLCODE == 0 /* no errors*/
   || SQLCA.VAGen_SQLCODE == 100) /* no row*/
  /* next sentence*/
  else /* errors*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET TOTS"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0DS-GET-SLS-TOT

// get total adjustments
Function KF0DS-GET-TOT-ADJ()
  ;
  /* ***********************************************************************/
  /* *  MODULE: GET TOTAL ADJUSTMENTS                                     **/
  /* * PURPOSE: Get the total sales adjustments for the agency/rep from   **/
  /* *          the database.                                             **/
  /* ***********************************************************************/
  ;
  set VSNADJ01 empty; /* initialise record*/
  set SQLCA empty;
                                  /* set up DB2 fields*/
  if (KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] == " ")
    VSNADJ01.CO-SLS-ADJ-EDT = 999999999;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2GRTYP = "B"; /* date type*/
    TA2REC.TA2GRGB = KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX];
    ;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* validate date*/
    ;
    if (sysVar.errorCode == "00000000") /* good call*/
      if (TA2REC.TA2RTNCD == 0) /* valid date*/
        VSNADJ01.CO-SLS-ADJ-EDT = TA2REC.TA2GRGGN;
        ;
      else /* bad date*/
        converseLib.validationFailed(24);
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] cursor, bold;
      end
    else /* bad call*/
      KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
      set TAEREC empty;
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parameters*/
      TA1REC.TA1TYPE = "APPL"; /* application error*/
      TA1REC.TA1FUNC = "POST"; /* post, no abend*/
      TA1REC.TA1LOCAT[1] = "VLDT EDT"; /* location*/
      TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* message formatter*/
      converseLib.validationFailed(40); /* set error message*/
    end
  end
  ;
  if (KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] == " ")
    VSNADJ01.CO-SLS-ADJ-XDT = 0;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2GRTYP = "B"; /* date type*/
    TA2REC.TA2GRGB = KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX];
    ;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* validate date*/
    ;
    if (sysVar.errorCode == "00000000") /* good call*/
      if (TA2REC.TA2RTNCD == 0) /* valid date*/
        VSNADJ01.CO-SLS-ADJ-XDT = TA2REC.TA2GRGGN;
        ;
      else /* bad date*/
        converseLib.validationFailed(26);
        KF0DW01.KF0DW-ERROR-IND = "Y";
        set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] cursor, bold;
      end
    else /* bad call*/
      KF0DW01.KF0DW-ERROR-IND = "Y"; /* set error flag*/
      set TAEREC empty;
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP; /* subroutine parameters*/
      TA1REC.TA1TYPE = "APPL"; /* application error*/
      TA1REC.TA1FUNC = "POST"; /* post, no abend*/
      TA1REC.TA1LOCAT[1] = "VLDT EDT"; /* location*/
      TA1REC.TA1LOCAT[2] = "TA0040  "; /* subroutine*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* message formatter*/
      converseLib.validationFailed(40); /* set error message*/
    end
  end
  ;
  VSNADJ01.CO-MGMT-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
  VSNADJ01.XSE-SESN-CD = KF0DW01.KF0DW-NEW-SEASON;
  VSNADJ01.YNS-SESN-YR = KF0DW01.KF0DW-NEW-YEAR - 1;
  VSNADJ01.XXX-STAT = "A";
  ;
  /* ***********************************************************************/
  /* * If the rep is a manager retrieve the total adjustments for the     **/
  /* * agency.                                                            **/
  /* ***********************************************************************/
  ;
  if (KF0DW01.SM-SREP-MGR-IND == "Y") /* rep is a manager*/
    VSNADJ01.CO-ADJ-MGR-SLS-FL = "Y";
    VSNADJ01.CO-MGMT-SREP-ID = -1;
  else /* rep isnt a manager*/
    ;
  /* ***********************************************************************/
  /* * If the rep is not a manager retrieve the total adjustments for the **/
  /* * rep.                                                               **/
  /* ***********************************************************************/
    ;
    VSNADJ01.CO-ADJ-MGR-SLS-FL = "*";
    VSNADJ01.CO-MGMT-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
  end
  ;
  KF0DW03.KF0DW-IO-TASK = "SM"; /* set up call parms*/
  KF0DW03.KF0DW-IO-IND1 = 0;
  call "IO5610" (KF0DW03, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch sales row*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* errors*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET TOT"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO5610"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal memu failure*/
  end
  ;
end // end KF0DS-GET-TOT-ADJ

// initial processing
Function KF0DS-INITIALIZE()
  ;
      /* Clear files.  Initialize working storage counters and indexes.*/
      /* Fetch the Commissions System control card.*/
  ;
  set KFWREC empty;
  set KF0DW01 empty;
  set KF0DW02 empty;
  set KF0DW03 empty;
  set VKOCTL01 empty;
  ;
  if (COMMAREA.CAFRMSYS == "KF") /* from same system*/
    KFWREC.KFW-GROUP = COMMAREA.CAUSERA; /* pass common record*/
  end
  ;
  KF0DS-SET-INDEXES(); /* initialize indexes and counters*/
  ;
  call "IO3970" ("S ", SQLCA, VKOCTL01) {isNoRefresh = yes, isExternal = yes}; /* fetch control card*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* control card found*/
                                  /* current season*/
    KF0DW01.XSE-SESN-CD = VKOCTL01.CO-CURR-XSE-CD; /* set up key*/
    KF0DW01.KF0DW-YNS-SESN-YR-DISP = VKOCTL01.CO-CURR-YNS-YR;
    KF0DW01.YNS-BUS-FUNC-ID = "COM";
    ;
    if (KF0DW01.KF0DW-SEASON-KEY in YNSTBL.YNS-RECORD-KEY)
      KF0DW01.KF0DW-SESN-INDEX = sysVar.arrayIndex;
      KF0DW01.YNS-SESN-BDT = YNSTBL.YNS-SESN-BDT[sysVar.arrayIndex];
      KF0DW01.YNS-SESN-XDT = YNSTBL.YNS-SESN-XDT[sysVar.arrayIndex];
    else
      KF0DW01.YNS-SESN-BDT = 0;
      KF0DW01.YNS-SESN-XDT = 999999999;
    end
    ;
    if (YNSTBL.XSE-SESN-CD[KF0DW-SESN-INDEX] != "99"
     && YNSTBL.YNS-BUS-FUNC-ID[KF0DW-SESN-INDEX] == "COM")
      KF0DW01.KF0DW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0DW-SESN-INDEX];
      KF0DW01.KF0DW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0DW-SESN-INDEX];
      KF0DW01.KF0DW-SESN-PNTR = KF0DW01.KF0DW-SESN-INDEX;
    else
      COMMAREA.CAUSERA = " "; /* pass working storage*/
      KFWREC.KFW-MSGNO = 45; /* pass msg no*/
      COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
      COMMAREA.CATOAP = "KF0A";
      COMMAREA.CAITEM = " ";
      XSEXIT();
      KF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
    end
  else /* an error occurred*/
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VKOCTL01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "INITIAL "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3970"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal memu failure*/
  end
  ;
  KF0DW01.KF0DW-CURR-DATE = VGVar.currentShortGregorianDate; /* get current date*/
  ;
  if (KF0DW01.KF0DW-CURR-YY > 75) /* determine century*/
    KF0DW01.KF0DW-CURR-CC = 19;
  else
    KF0DW01.KF0DW-CURR-CC = 20;
  end
  ;
  KF0DS-RESET-MAP();
  ;
end // end KF0DS-INITIALIZE

// load ws array from VFRMLA01
Function KF0DS-LOAD-WS-TBL()
  ;
  ;
             /* move the row into the working storage table*/
  ;
  ;
                                  /* move fields to ws table*/
  KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX] = VFRMLA01.CO-SREP-TRGT-INCM;
  KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX] = VFRMLA01.CO-TRGT-SLRY-PCT;
  KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX] = VFRMLA01.CO-TRGT-COMM-PCT;
  KF0DW02.KF0DW-CO-TOT-SESNSLS-AMT[KF0DW-WS-INDEX] = VFRMLA01.CO-TOT-SESNSLS-AMT;
  KF0DW02.KF0DW-CO-SREP-OVRD-RATE[KF0DW-WS-INDEX] = VFRMLA01.CO-SREP-OVRD-RATE;
  KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX] = VFRMLA01.CO-INCL-INACT-FL;
  KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX] = VFRMLA01.CO-OVRD-RATE-EDT;
  if (VFRMLA01.CO-OVRD-RATE-XDT > 90000000)
    KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] = 99999999;
  else
    KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] = VFRMLA01.CO-OVRD-RATE-XDT;
  end
  ;
  KF0DW02.KF0DW-SALARY-AMOUNT[KF0DW-WS-INDEX] = VFRMLA01.CO-SREP-TRGT-INCM * VFRMLA01.CO-TRGT-SLRY-PCT;
  ;
  KF0DW02.KF0DW-COMMISSION-AMOUNT[KF0DW-WS-INDEX] = VFRMLA01.CO-SREP-TRGT-INCM * VFRMLA01.CO-TRGT-COMM-PCT;
  ;
end // end KF0DS-LOAD-WS-TBL

// move from ws to VFRMLA01 row
Function KF0DS-MOVE-TO-FMLA()
  ;
  ;
       /* move fields into the formula row*/
  ;
  ;
  VFRMLA01.SM-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
  VFRMLA01.SM-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
  VFRMLA01.SM-SREP-PSTN-ID = SM5REC.SM-SREP-PSTN-ID;
  VFRMLA01.XSE-SESN-CD = KF0DW01.KF0DW-NEW-SEASON;
  VFRMLA01.YNS-SESN-YR = KF0DW01.KF0DW-NEW-YEAR;
  VFRMLA01.CO-OVRD-RATE-EDT = KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX];
  if (KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] > 90000000)
    VFRMLA01.CO-OVRD-RATE-XDT = 999999999;
  else
    VFRMLA01.CO-OVRD-RATE-XDT = KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX];
  end
  VFRMLA01.CO-SREP-OVRD-RATE = KF0DW02.KF0DW-CO-SREP-OVRD-RATE[KF0DW-WS-INDEX];
  VFRMLA01.CO-SREP-TRGT-INCM = KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX];
  VFRMLA01.CO-TRGT-SLRY-PCT = KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX];
  VFRMLA01.CO-TRGT-COMM-PCT = KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX];
  VFRMLA01.CO-TOT-SESNSLS-AMT = KF0DW02.KF0DW-CO-TOT-SESNSLS-AMT[KF0DW-WS-INDEX];
  VFRMLA01.CO-INCL-INACT-FL = KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX];
end // end KF0DS-MOVE-TO-FMLA

// move w/s array to map fields
Function KF0DS-MOVE-TO-MAP()
  ;
  ;
             /* move the row into the map from the working storage array*/
  ;
  KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-BOTTOM-OF-SCREEN;
  KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0)
    KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX];
    ;
    KF0DW01.KF0DW-DISPLAY-PCT = KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX] * 100;
    KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DISPLAY-PCT;
    ;
    KF0DW01.KF0DW-DISPLAY-PCT = KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX] * 100;
    KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DISPLAY-PCT;
    ;
    KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-CO-TOT-SESNSLS-AMT[KF0DW-WS-INDEX];
    KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-CO-SREP-OVRD-RATE[KF0DW-WS-INDEX];
    KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX];
    ;
    if (KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX] > 0)
      KF0DW01.KF0DW-DATE-WORK-CCYYMMDD = KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX];
      KF0DW01.KF0DW-DATE-OUT-YY = KF0DW01.KF0DW-DATE-WORK-YY;
      KF0DW01.KF0DW-DATE-OUT-MM = KF0DW01.KF0DW-DATE-WORK-MM;
      KF0DW01.KF0DW-DATE-OUT-DD = KF0DW01.KF0DW-DATE-WORK-DD;
      KF0DW01.KF0DW-DATE-FILL-1 = "-";
      KF0DW01.KF0DW-DATE-FILL-2 = "-";
      KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DATE-OUT;
    else
      KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] = " ";
    end
    ;
    if (KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] < 90000000
     && KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] > 0)
      KF0DW01.KF0DW-DATE-WORK-CCYYMMDD = KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX];
      KF0DW01.KF0DW-DATE-OUT-YY = KF0DW01.KF0DW-DATE-WORK-YY;
      KF0DW01.KF0DW-DATE-OUT-MM = KF0DW01.KF0DW-DATE-WORK-MM;
      KF0DW01.KF0DW-DATE-OUT-DD = KF0DW01.KF0DW-DATE-WORK-DD;
      KF0DW01.KF0DW-DATE-FILL-1 = "-";
      KF0DW01.KF0DW-DATE-FILL-2 = "-";
      KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] = KF0DW01.KF0DW-DATE-OUT;
    else
      KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] = " ";
    end
    ;
    KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-SALARY-AMOUNT[KF0DW-WS-INDEX];
    KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX] = KF0DW02.KF0DW-COMMISSION-AMOUNT[KF0DW-WS-INDEX];
    ;
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX - 1;
  end
end // end KF0DS-MOVE-TO-MAP

// move from map to w/s
Function KF0DS-MOVE-TO-WS()
  ;
  ;
       /* move fields from map to working storage array*/
  ;
  ;
  KF0DW02.KF0DW-CO-SREP-TRGT-INCM[KF0DW-WS-INDEX] = KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX];
  KF0DW02.KF0DW-CO-TOT-SESNSLS-AMT[KF0DW-WS-INDEX] = KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX];
  KF0DW02.KF0DW-CO-SREP-OVRD-RATE[KF0DW-WS-INDEX] = KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX];
  KF0DW02.KF0DW-CO-INCL-INACT-FL[KF0DW-WS-INDEX] = KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX];
  ;
  KF0DW02.KF0DW-CO-OVRD-RATE-EDT[KF0DW-WS-INDEX] = KF0DW01.KF0DW-EFF-DATE[KF0DW-WS-INDEX];
  ;
  KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] = KF0DW01.KF0DW-EXP-DATE[KF0DW-WS-INDEX];
  ;
  KF0DW02.KF0DW-SALARY-AMOUNT[KF0DW-WS-INDEX] = KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX];
  KF0DW02.KF0DW-COMMISSION-AMOUNT[KF0DW-WS-INDEX] = KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX];
  ;
  KF0DW01.KF0DW-PCT-CHECK-SLRY = KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] / 100;
  ;
  KF0DW01.KF0DW-PCT-CHECK-COMM = KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] / 100;
  ;
  KF0DW02.KF0DW-CO-TRGT-SLRY-PCT[KF0DW-WS-INDEX] = KF0DW01.KF0DW-PCT-CHECK-SLRY;
  KF0DW02.KF0DW-CO-TRGT-COMM-PCT[KF0DW-WS-INDEX] = KF0DW01.KF0DW-PCT-CHECK-COMM;
end // end KF0DS-MOVE-TO-WS

// determine processing season
Function KF0DS-NEW-SEASON()
  ;
        /*  */
        /* Determine the new season code & year by decrementing*/
        /* (PF19) or incrementing (PF20) the season index.*/
        /*  */
  ;
  if (converseVar.eventKey is pf19)
    KF0DW01.KF0DW-SESN-INDEX = KF0DW01.KF0DW-SESN-INDEX - 1;
    if (KF0DW01.KF0DW-SESN-INDEX == 0
     || YNSTBL.YNS-BUS-FUNC-ID[KF0DW-SESN-INDEX] != "COM")
      KF0DW01.KF0DW-ERROR-IND = "Y";
      converseLib.validationFailed(10); /* season boundary reached*/
      KF0DW01.KF0DW-SESN-INDEX = KF0DW01.KF0DW-SESN-INDEX + 1;
    else
      KF0DW01.KF0DW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0DW-SESN-INDEX];
      KF0DW01.KF0DW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0DW-SESN-INDEX];
    end
  end
  ;
  if (converseVar.eventKey is pf20)
    KF0DW01.KF0DW-SESN-INDEX = KF0DW01.KF0DW-SESN-INDEX + 1;
    if (YNSTBL.XSE-SESN-CD[KF0DW-SESN-INDEX] == "99"
     || YNSTBL.YNS-BUS-FUNC-ID[KF0DW-SESN-INDEX] != "COM")
      KF0DW01.KF0DW-ERROR-IND = "Y";
      converseLib.validationFailed(11); /* season boundary reached*/
      KF0DW01.KF0DW-SESN-INDEX = KF0DW01.KF0DW-SESN-INDEX - 1;
    else
      KF0DW01.KF0DW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0DW-SESN-INDEX];
      KF0DW01.KF0DW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0DW-SESN-INDEX];
    end
  end
  ;
  KF0DS-START-PROC();
end // end KF0DS-NEW-SEASON

// open DCOMM.VFRMLA01 cursor
Function KF0DS-OPEN-CURSOR()
  ;
          /* open a cursor for DCOMM.VFRMLA01 to fetch the*/
          /* sales rep compensation formulas for the map*/
  ;
  ;
  set VFRMLA01 empty; /* initialize record*/
  ;
  VFRMLA01.SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  VFRMLA01.SM-SREP-ID = KFWREC.SM-SREP-ID;
  VFRMLA01.XSE-SESN-CD = KF0DW01.KF0DW-NEW-SEASON;
  VFRMLA01.YNS-SESN-YR = KF0DW01.KF0DW-NEW-YEAR;
  ;
  KF0DW01.KF0DW-END-OF-FILE = "N"; /* not end of file*/
  ;
  call "IO3950" ("S1", SQLCA, VFRMLA01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFRMLA01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S1 "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3950"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0DS-OPEN-CURSOR

// user pressed PA2
Function KF0DS-PROCESS-PA2()
  ;
  ;
         /* if updates are pending, cancel them by moving the*/
         /* working storage array to the map and setting the*/
         /* updates pending indicator to 'n'.*/
  ;
         /* if no updates are pending, clear the screen.*/
  ;
  ;
  if (KF0DW01.KF0DW-UPDATE-PENDING == "Y") /* updates pending*/
    KF0DS-MOVE-TO-MAP(); /* reset map fields*/
    KF0DS-SET-FIELDS();
    KF0DW01.KF0DW-UPDATE-PENDING = "N"; /* no updates pending*/
    KF0DW01.KF0DW-DATE-GAP = "N"; /* no date gaps*/
    converseLib.validationFailed(29); /* updates cancelled*/
    ;
  else /* no updates pending*/
    KF0DS-RESET-MAP(); /* clear map;*/
    KF0DS-PROTECT-MAP(); /* protect map fields*/
    set KF0DW02 empty; /* clear working storage*/
    KF0DS-SET-INDEXES(); /* reset indexes and counters*/
    ;
  end
end // end KF0DS-PROCESS-PA2

// process updated formula
Function KF0DS-PROCESS-UPDT()
  ;
        /* update the database.*/
  ;
        /* start the map display over again.*/
  ;
        /* if there were no updates, and no data has been displayed*/
        /* for the rep, issue an error message.*/
  ;
  ;
  KF0DW01.KF0DW-ADD = "N";
  KF0DW01.KF0DW-SCREEN-INDEX = 1;
  KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-TOP-OF-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX <= KF0DW01.KF0DW-MAX-LINES-SCREEN)
    ;
    if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] == "A")
      KF0DS-ADD-FORMULA(); /* add new formula*/
      KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = " ";
    else
      if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] == "U")
        KF0DS-CHNG-FORMULA(); /* update formula*/
        KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] = " ";
      end
    end
    ;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX + 1;
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX + 1;
    ;
  end
  ;
  converseLib.validationFailed(28); /* updates accepted*/
  ;
  KF0DW01.KF0DW-UPDATE-PENDING = "N";
  KF0DW01.KF0DW-DATE-GAP = "N";
  KF0DW01.KF0DW-BAD-FIRST-EDT = "N";
  KF0DW01.KF0DW-BAD-LAST-XDT = "N";
  ;
  set KF0DW02 empty; /* clear working storage*/
  KF0DS-SET-INDEXES(); /* reset indexes*/
  KF0DS-BUILD-MAP(); /* rebuild map*/
  ;
end // end KF0DS-PROCESS-UPDT

// protect map fields
Function KF0DS-PROTECT-FLDS()
  ;
  ;
             /* autoskip the map fields*/
  ;
  set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX] skip;
  set KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX] skip;
  ;
end // end KF0DS-PROTECT-FLDS

// protect the map fields
Function KF0DS-PROTECT-MAP()
  /* ***********************************************************************/
  /* *  MODULE: PROTECT MAP                                               **/
  /* * PURPOSE: Protect and darken the map fields.                        **/
  /* ***********************************************************************/
  ;
  KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0)
    KF0DS-SET-DARK();
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
  end
  ;
end // end KF0DS-PROTECT-MAP

// recalculate rep formula
Function KF0DS-RECALC-FRMLA()
  ;
  ;
         /* divide commissions % by 100 to get decimal*/
         /* recalculate rate*/
  ;
         /* (Trgt Incm * Comm %) / (# seasons in year) / (seasonal sales)*/
         /* = override rate*/
  ;
  ;
  KF0DW01.KF0DW-PCT-CHECK-COMM = KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] / 100;
  KF0DW01.KF0DW-PCT-CHECK-SLRY = KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] / 100;
  ;
  KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX] = mathLib.round(KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX]    * KF0DW01.KF0DW-PCT-CHECK-SLRY, -mathLib.decimals(KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX]));
  ;
  KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX] = mathLib.round(KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX]    * KF0DW01.KF0DW-PCT-CHECK-COMM, -mathLib.decimals(KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX]));
  ;
  if (KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] > 0)
                                               /* target income * comm %*/
    KF0DW01.KF0DW-RATE-WORK = mathLib.round(KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX]       * KF0DW01.KF0DW-PCT-CHECK-COMM, -mathLib.decimals(KF0DW01.KF0DW-RATE-WORK));
    ;
                                                /* div by # seasons*/
    KF0DW01.KF0DW-RATE-WORK = mathLib.round(KF0DW01.KF0DW-RATE-WORK / 2, -mathLib.decimals(KF0DW01.KF0DW-RATE-WORK));
    ;
                                                /* div by seasonal sales*/
    KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX] = mathLib.round(KF0DW01.KF0DW-RATE-WORK       / KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX], -mathLib.decimals(KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX]));
    ;
  else /* no seasonal sales*/
    KF0DM001.KF0DM-CO-SREP-OVRD-RATE = 0; /* or sales < 0*/
    ;
  end
  ;
end // end KF0DS-RECALC-FRMLA

// clear map and reset fields
Function KF0DS-RESET-MAP()
  ;
     /* Clear the map.  Set the season heading dark*/
     /* Move the current date to the map.*/
  ;
  set KF0DM001 initial; /* clear map*/
  ;
  set KF0DM001.KF0DM-SEASON-HEADING skip, invisible;
  set KF0DM001.KF0DM-SEASON-YR-DESC skip, invisible;
  ;
  KF0DM001.KF0DM-DATE = VGVar.currentShortGregorianDate; /* move date to map*/
  ;
end // end KF0DS-RESET-MAP

// display the next screen page
Function KF0DS-SCROLL-DOWN()
  ;
  ;
          /* user pressed PF8 - scroll down*/
  ;
          /* if already at the bottom, post an error message*/
  ;
          /* if the next 8 detail rows are in working storage,*/
          /* clear the map and move them to the map fields.*/
  ;
          /* if the next 8 detail rows are in temporary storage, clear*/
          /* working storage, read the temporary storage record*/
          /* into working storage and move the rows to the map fields.*/
  ;
  ;
  if (KF0DW01.KF0DW-DATA-FOUND-IND == "N") /* no data to report*/
    converseLib.validationFailed(9); /* already at bottom*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
  else
    if (KF0DW01.KF0DW-BOTTOM-OF-SCREEN
     < KF0DW01.KF0DW-MAX-WS-LINES) /* rows are in table*/
                                                  /* set first line*/
      KF0DW01.KF0DW-TOP-OF-SCREEN = KF0DW01.KF0DW-BOTTOM-OF-SCREEN + 1;
      KF0DW01.KF0DW-BOTTOM-OF-SCREEN = KF0DW01.KF0DW-BOTTOM-OF-SCREEN + KF0DW01.KF0DW-MAX-LINES-SCREEN;
      KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-TOP-OF-SCREEN;
      KF0DS-MOVE-TO-MAP(); /* move table to map*/
    else
      converseLib.validationFailed(9); /* already at bottom*/
      KF0DW01.KF0DW-ERROR-IND = "Y";
    end
  end
  ;
  ;
end // end KF0DS-SCROLL-DOWN

// display the previous map page
Function KF0DS-SCROLL-UP()
  ;
  ;
          /* user pressed PF7 - scroll up*/
  ;
          /* if already at the top, post an error message*/
  ;
          /* if the previous 8 detail rows are in working storage,*/
          /* clear the map and move them to the map fields.*/
  ;
          /* if the previous 8 detail rows are in temporary storage,*/
          /* write working storage to temporary storage, clear*/
          /* working storage, read the temporary storage record*/
          /* into working storage and move the rows to the map fields.*/
  ;
  ;
  if (KF0DW01.KF0DW-DATA-FOUND-IND == "N") /* no data*/
    converseLib.validationFailed(3); /* already at top*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
  else
    if (KF0DW01.KF0DW-TOP-OF-SCREEN == 1) /* first screen in table*/
      converseLib.validationFailed(3); /* already at top*/
      KF0DW01.KF0DW-ERROR-IND = "Y";
    else /* not first screen*/
      if (KF0DW01.KF0DW-TOP-OF-SCREEN > 1) /* rows are in table*/
                                                /* set first line*/
        KF0DW01.KF0DW-BOTTOM-OF-SCREEN = KF0DW01.KF0DW-TOP-OF-SCREEN - 1;
        KF0DW01.KF0DW-TOP-OF-SCREEN = KF0DW01.KF0DW-TOP-OF-SCREEN - KF0DW01.KF0DW-MAX-LINES-SCREEN;
        KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-TOP-OF-SCREEN;
        KF0DS-MOVE-TO-MAP(); /* move table to map*/
      end
    end
  end
end // end KF0DS-SCROLL-UP

// set map fields dark
Function KF0DS-SET-DARK()
  ;
  ;
             /* set the map fields dark*/
  ;
  set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX] skip, invisible;
  set KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX] skip, invisible;
  ;
end // end KF0DS-SET-DARK

// set map fields as defined
Function KF0DS-SET-DEFINED()
  ;
  ;
             /* set the map fields as defined*/
  ;
  set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] cursor, initialAttributes;
  set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-TOT-SESNSLS-AMT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-SREP-OVRD-RATE[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-CO-OVRD-RATE-XDT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-SALARY-AMOUNT[KF0DW-SCREEN-INDEX] initialAttributes;
  set KF0DM001.KF0DM-COMM-AMOUNT[KF0DW-SCREEN-INDEX] initialAttributes;
  ;
end // end KF0DS-SET-DEFINED

// set fields for display
Function KF0DS-SET-FIELDS()
  /* set fields for display*/
  ;
  KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-MAX-LINES-SCREEN;
  KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-BOTTOM-OF-SCREEN;
  ;
  /* ***********************************************************************/
  /* * As the include inactive flag is a required field, we can determine **/
  /* * if a map line is populated or not by checking the flags status.    **/
  /* ***********************************************************************/
  ;
  while (KF0DW01.KF0DW-SCREEN-INDEX > 0)
    if (KF0DM001.KF0DM-CO-INCL-INACT-FL[KF0DW-SCREEN-INDEX] != " ")
      if (KF0DM001.KF0DM-REP-TERM-DATE > 0 /* rep terminated*/
       || COMMAREA.CACHGFL == "N"          /* can't update*/
       || KF0DM001.KF0DM-SM-SREP-PSTN-ID == " ") /* no position ID*/
        KF0DS-PROTECT-FLDS(); /* set fields protected*/
      else
        if (KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX]
         < KF0DW01.KF0DW-CURR-DATE /* rate expired*/
         && KF0DW02.KF0DW-CO-OVRD-RATE-XDT[KF0DW-WS-INDEX] > 0)
          KF0DS-PROTECT-FLDS(); /* set fields protected*/
          set KF0DM001.KF0DM-CO-SREP-TRGT-INCM[KF0DW-SCREEN-INDEX] cursor, initialAttributes;
          set KF0DM001.KF0DM-CO-TRGT-COMM-PCT[KF0DW-SCREEN-INDEX] initialAttributes;
          set KF0DM001.KF0DM-CO-TRGT-SLRY-PCT[KF0DW-SCREEN-INDEX] initialAttributes;
          ;
        else
          KF0DS-SET-DEFINED(); /* set fields defined*/
          if (KF0DW02.KF0DW-UPDATE-IND[KF0DW-WS-INDEX] != "A")
            set KF0DM001.KF0DM-CO-OVRD-RATE-EDT[KF0DW-SCREEN-INDEX] protect;
          end
        end
      end
    else
      if (COMMAREA.CAADDFL == "N"          /* can't add*/
       || KF0DM001.KF0DM-REP-TERM-DATE > 0 /* rep terminated*/
       || KF0DM001.KF0DM-SM-SREP-PSTN-ID == " ") /* no position ID*/
        KF0DS-SET-DARK(); /* set fields dark*/
      else
        KF0DS-SET-DEFINED(); /* set fields defined*/
      end
    end
    KF0DW01.KF0DW-SCREEN-INDEX = KF0DW01.KF0DW-SCREEN-INDEX - 1;
    KF0DW01.KF0DW-WS-INDEX = KF0DW01.KF0DW-WS-INDEX - 1;
  end
  ;
  ;
  if (KF0DM001.KF0DM-SM-SREP-PSTN-ID == " ") /* no position id*/
    if (COMMAREA.CAADDFL == "Y" /* can add*/
     || COMMAREA.CACHGFL == "Y") /* can update*/
      converseLib.validationFailed(72); /* no changes allowed*/
      set KF0DM001.KF0DM-SM-SAGCY-ID cursor;
      set KF0DM001.KF0DM-SM-SREP-PSTN-DESC skip, bold;
    end
  end
  ;
  ;
end // end KF0DS-SET-FIELDS

// set indexes and counters
Function KF0DS-SET-INDEXES()
  /* initialize indexes and counters*/
  ;
  KF0DW01.KF0DW-AUDIT-FILL-LEN = 1992; /* length of audit text*/
  ;
  KF0DW01.KF0DW-MAX-LINES-SCREEN = 8;
                                             /* max lines on screen display*/
  KF0DW01.KF0DW-MAX-WS-LINES = 400; /* max size of work str array*/
  ;
  KF0DW01.KF0DW-FETCH-COUNT = 0; /* formula table fetch count*/
  ;
  KF0DW01.KF0DW-TOP-OF-SCREEN = 1; /* work st array entry at top*/
  KF0DW01.KF0DW-BOTTOM-OF-SCREEN = 8; /* work str entry at bottom*/
  KF0DW01.KF0DW-SCREEN-INDEX = 0; /* index for screen array*/
  KF0DW01.KF0DW-WS-INDEX = 0; /* working storage index*/
  ;
  KF0DW01.KF0DW-DATA-FOUND-IND = "N"; /* no data on screen*/
  KF0DW01.KF0DW-UPDATE-PENDING = "N"; /* pending updates*/
  KF0DW01.KF0DW-ERROR-IND = "N"; /* no errors*/
  ;
end // end KF0DS-SET-INDEXES

// start processing rep/agency
Function KF0DS-START-PROC()
  ;
       /* purge temporary storage*/
       /* clear map and reset indexes and counters*/
       /* clear the working storage array*/
       /* reset the season*/
       /* validate the agency and rep ID's*/
       /* if no errors are found, check KF system security*/
  ;
  ;
  KFWREC.SM-SAGCY-ID = KF0DM001.KF0DM-SM-SAGCY-ID;
  KFWREC.SM-SREP-ID = KF0DM001.KF0DM-SM-SREP-ID;
  ;
  KF0DS-RESET-MAP(); /* clear the map fields*/
  ;
  if (converseVar.eventKey is pf19 /* already have new season*/
   || converseVar.eventKey is pf20 
   || KF0DW-DATA-FOUND-IND == "N") /* or no data displayed*/
                                  /* skip season reset*/
  else /* reset season*/
    ;
    KF0DW01.KF0DW-NEW-SEASON = VKOCTL01.CO-CURR-XSE-CD;
    KF0DW01.KF0DW-NEW-YEAR = VKOCTL01.CO-CURR-YNS-YR;
    KF0DW01.KF0DW-SESN-INDEX = KF0DW01.KF0DW-SESN-PNTR; /* reset index*/
    ;
  end
  ;
  KF0DS-SET-INDEXES(); /* reset indexes and counters*/
  ;
  set KF0DW02 empty; /* clear working storage array*/
  ;
  KF0DM001.KF0DM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  KF0DM001.KF0DM-SM-SREP-ID = KFWREC.SM-SREP-ID;
  ;
  KF0DS-EDIT-AGY-REP(); /* validate agency and rep IDs*/
  ;
  if (KF0DW01.KF0DW-ERROR-IND == "N") /* no errors*/
    XSKFS-CHK-SECURITY(); /* check KF system security*/
    if (KFWREC.KFW-ACCESS-IND == "Y") /* access OK*/
      KF0DS-BUILD-MAP(); /* build map*/
    else
      KF0DS-PROTECT-MAP();
      if (KFWREC.KFW-SCRTY-LVL-CD == 0) /* no access*/
        set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
        set KF0DM001.KF0DM-SM-SREP-ID bold;
      else
        if (KFWREC.KFW-SCRTY-LVL-CD == 2) /* no access to agency*/
          set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
        else
          if (KFWREC.KFW-SCRTY-LVL-CD == 3) /* no access to rep*/
            set KF0DM001.KF0DM-SM-SREP-ID cursor, bold;
          else
            if (KFWREC.KFW-SCRTY-LVL-CD == 4)
              if (converseVar.validationMsgNum == 6) /* no access to agency*/
                set KF0DM001.KF0DM-SM-SAGCY-ID cursor, bold;
              else /* no access to rep*/
                set KF0DM001.KF0DM-SM-SREP-ID cursor, bold;
              end
            end
          end
        end
      end
    end
  else
    KF0DS-PROTECT-MAP();
  end
  ;
  ;
end // end KF0DS-START-PROC

// write DCOMM.VKOAUD01 row
Function KF0DS-WRITE-AUDIT()
  ;
  ;
       /* insert a new audit row*/
  ;
  ;
  call "IO3940" ("A ", SQLCA, VKOAUD01) {isNoRefresh = yes, isExternal = yes}; /* get next row*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* bad return*/
    KF0DW01.KF0DW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VKOAUD01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "ADD AUDT"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3940"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0DS-WRITE-AUDIT

//*** RECORD=KF0DW01 ****
// this record contains working storage fields for program KF0D
// 
// ************************************************************
// *                  Maintenance History                     *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   10/27/92  JBECKE    Created record.
// 
// ***********************
Record KF0DW01 type basicRecord
  5 KF0DW-WORKING-STORAGE KF0DW-WORKING-STORAGE ; 
    10 SM-SREP-MGR-IND SM-SREP-MGR-IND ; 
    10 KF0DW-ADD KF0DW-ADD ; 
    10 KF0DW-UPDATE-PENDING KF0DW-UPDATE-PENDING ; 
    10 KF0DW-END-OF-FILE KF0DW-END-OF-FILE ; 
    10 KF0DW-DATA-FOUND-IND KF0DW-DATA-FOUND-IND ; 
    10 KF0DW-ERROR-IND KF0DW-ERROR-IND ; 
    10 KF0DW-NEW-UPDATE-IND KF0DW-NEW-UPDATE-IND ; 
    10 KF0DW-DATE-CHANGE KF0DW-DATE-CHANGE ; 
    10 KF0DW-DATE-GAP KF0DW-DATE-GAP ; 
    10 KF0DW-BAD-FIRST-EDT KF0DW-BAD-FIRST-EDT ; 
    10 KF0DW-BAD-LAST-XDT KF0DW-BAD-LAST-XDT ; 
    10 KF0DW-AUDIT-FILL-LEN KF0DW-AUDIT-FILL-LEN ; 
    10 KF0DW-MAX-LINES-SCREEN KF0DW-MAX-LINES-SCREEN ; 
    10 KF0DW-MAX-WS-LINES KF0DW-MAX-WS-LINES ; 
    10 KF0DW-FETCH-COUNT KF0DW-FETCH-COUNT ; 
    10 KF0DW-TOP-OF-SCREEN KF0DW-TOP-OF-SCREEN ; 
    10 KF0DW-BOTTOM-OF-SCREEN KF0DW-BOTTOM-OF-SCREEN ; 
    10 KF0DW-SCREEN-INDEX KF0DW-SCREEN-INDEX ; 
    10 KF0DW-WS-INDEX KF0DW-WS-INDEX ; 
    10 KF0DW-SESN-INDEX KF0DW-SESN-INDEX ; 
    10 KF0DW-SESN-PNTR KF0DW-SESN-PNTR ; 
    10 KF0DW-NEW-SEASON KF0DW-NEW-SEASON ; 
    10 KF0DW-NEW-YEAR KF0DW-NEW-YEAR ; 
      15 KF0DW-NEW-YEAR-CC KF0DW-NEW-YEAR-CC ; 
      15 KF0DW-NEW-YEAR-YY KF0DW-NEW-YEAR-YY ; 
    10 KF0DW-YNS-SESN-YR-ABRV KF0DW-YNS-SESN-YR-ABRV ; 
      15 KF0DW-YNS-ABRV-SESN-CD KF0DW-YNS-ABRV-SESN-CD ; 
      15 KF0DW-YNS-ABRV-SESN-YR KF0DW-YNS-ABRV-SESN-YR ; 
    10 YNS-SESN-BDT YNS-SESN-BDT ; 
    10 YNS-SESN-XDT YNS-SESN-XDT ; 
    10 KF0DW-PCT-CHECK KF0DW-PCT-CHECK ; 
    10 KF0DW-PCT-CHECK-SLRY KF0DW-PCT-CHECK-SLRY ; 
    10 KF0DW-PCT-CHECK-COMM KF0DW-PCT-CHECK-COMM ; 
    10 KF0DW-DISPLAY-PCT KF0DW-DISPLAY-PCT ; 
    10 KF0DW-RATE-WORK KF0DW-RATE-WORK ; 
    10 KF0DW-RANGE-DATE KF0DW-RANGE-DATE ; 
    10 KF0DW-CURR-DATE KF0DW-CURR-DATE ; 
      15 KF0DW-CURR-CC KF0DW-CURR-CC ; 
      15 KF0DW-CURR-YYMMDD KF0DW-CURR-YYMMDD ; 
        20 KF0DW-CURR-YY KF0DW-CURR-YY ; 
        20 KF0DW-CURR-MM KF0DW-CURR-MM ; 
        20 KF0DW-CURR-DD KF0DW-CURR-DD ; 
    10 KF0DW-DATE-OUT KF0DW-DATE-OUT ; 
      15 KF0DW-DATE-OUT-MM KF0DW-DATE-OUT-MM ; 
      15 KF0DW-DATE-FILL-1 KF0DW-DATE-FILL-1 ; 
      15 KF0DW-DATE-OUT-DD KF0DW-DATE-OUT-DD ; 
      15 KF0DW-DATE-FILL-2 KF0DW-DATE-FILL-2 ; 
      15 KF0DW-DATE-OUT-YY KF0DW-DATE-OUT-YY ; 
    10 KF0DW-DATE-TEST-MMDDYY KF0DW-DATE-TEST-MMDDYY ; 
      15 KF0DW-DATE-TEST-MM KF0DW-DATE-TEST-MM ; 
      15 KF0DW-DATE-TEST-DD KF0DW-DATE-TEST-DD ; 
      15 KF0DW-DATE-TEST-YY KF0DW-DATE-TEST-YY ; 
    10 KF0DW-DATE-WORK KF0DW-DATE-WORK ; 
      15 * num(1) ; 
      15 KF0DW-DATE-WORK-CCYYMMDD KF0DW-DATE-WORK-CCYYMMDD ; 
        20 KF0DW-DATE-WORK-CC KF0DW-DATE-WORK-CC ; 
        20 KF0DW-DATE-WORK-YYMMDD KF0DW-DATE-WORK-YYMMDD ; 
          25 KF0DW-DATE-WORK-YY KF0DW-DATE-WORK-YY ; 
          25 KF0DW-DATE-WORK-MM KF0DW-DATE-WORK-MM ; 
          25 KF0DW-DATE-WORK-DD KF0DW-DATE-WORK-DD ; 
    10 KF0DW-EFF-DATE KF0DW-EFF-DATE [400] ; 
    10 KF0DW-EXP-DATE KF0DW-EXP-DATE [400] ; 
    10 * num(1) ; 
    10 KF0DW-DATE-FRST-CCYYMMDD KF0DW-DATE-FRST-CCYYMMDD ; 
      15 KF0DW-DATE-FRST-CC KF0DW-DATE-FRST-CC ; 
      15 KF0DW-DATE-FRST-YY KF0DW-DATE-FRST-YY ; 
      15 KF0DW-DATE-FRST-MM KF0DW-DATE-FRST-MM ; 
      15 KF0DW-DATE-FRST-DD KF0DW-DATE-FRST-DD ; 
    10 * char(3) ; 
    10 KF0DW-LAST-DAY KF0DW-LAST-DAY ; 
    10 KF0DW-SEASON-KEY KF0DW-SEASON-KEY ; 
      15 XSE-SESN-CD XSE-SESN-CD ; 
      15 KF0DW-YNS-SESN-YR-DISP KF0DW-YNS-SESN-YR-DISP ; 
      15 YNS-BUS-FUNC-ID YNS-BUS-FUNC-ID ; 
end // end KF0DW01

//*** RECORD=KF0DW02 ****
// this record contains the working storage table that is moved
// to the screen map KF0DM001
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   10/27/92  JBECKE    Created table.
// 
// ***********************
Record KF0DW02 type basicRecord
  5 * char(26000) ; 
    10 KF0DW-DETAIL-LINE KF0DW-DETAIL-LINE [400] ; 
      15 KF0DW-CO-SREP-TRGT-INCM KF0DW-CO-SREP-TRGT-INCM ; 
      15 KF0DW-CO-TRGT-SLRY-PCT KF0DW-CO-TRGT-SLRY-PCT ; 
      15 KF0DW-SALARY-AMOUNT KF0DW-SALARY-AMOUNT ; 
      15 KF0DW-CO-TRGT-COMM-PCT KF0DW-CO-TRGT-COMM-PCT ; 
      15 KF0DW-COMMISSION-AMOUNT KF0DW-COMMISSION-AMOUNT ; 
      15 KF0DW-CO-TOT-SESNSLS-AMT KF0DW-CO-TOT-SESNSLS-AMT ; 
      15 KF0DW-CO-SREP-OVRD-RATE KF0DW-CO-SREP-OVRD-RATE ; 
      15 KF0DW-CO-INCL-INACT-FL KF0DW-CO-INCL-INACT-FL ; 
      15 KF0DW-CO-OVRD-RATE-EDT KF0DW-CO-OVRD-RATE-EDT ; 
      15 KF0DW-CO-OVRD-RATE-XDT KF0DW-CO-OVRD-RATE-XDT ; 
      15 KF0DW-UPDATE-IND KF0DW-UPDATE-IND ; 
end // end KF0DW02

//*** RECORD=KF0DW03 ****
// This record contains the working storage fields for the call
// to IO5610
// ************************************************************
// *                MAINTENANCE HISTORY                       *
// ************************************************************
// Log #     Date        Name    Description
// ---       ----        ----    -----------
// 001       09/22/93    ISCHMI  Created record.
// ***********************
Record KF0DW03 type basicRecord
  5 KF0DW-IO-PASS KF0DW-IO-PASS ; 
    10 KF0DW-IO-TASK KF0DW-IO-TASK ; 
    10 KF0DW-IO-IND1 KF0DW-IO-IND1 ; 
end // end KF0DW03

// update is an add
DataItem KF0DW-ADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// length of audit row
DataItem KF0DW-AUDIT-FILL-LEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first effective date not OK
DataItem KF0DW-BAD-FIRST-EDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last exp. date not OK
DataItem KF0DW-BAD-LAST-XDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws rec on bottom of screen
DataItem KF0DW-BOTTOM-OF-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formula include inactive flag
DataItem KF0DW-CO-INCL-INACT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formula effective date
DataItem KF0DW-CO-OVRD-RATE-EDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formula expire date
DataItem KF0DW-CO-OVRD-RATE-XDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep override rate
DataItem KF0DW-CO-SREP-OVRD-RATE num(5,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep target income
DataItem KF0DW-CO-SREP-TRGT-INCM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer total seasonal sales
DataItem KF0DW-CO-TOT-SESNSLS-AMT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep commission percent
DataItem KF0DW-CO-TRGT-COMM-PCT num(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep salary percent
DataItem KF0DW-CO-TRGT-SLRY-PCT num(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep commission amount
DataItem KF0DW-COMMISSION-AMOUNT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date century portion
DataItem KF0DW-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem KF0DW-CURR-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date dd portion
DataItem KF0DW-CURR-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date mm portion
DataItem KF0DW-CURR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date yy portion
DataItem KF0DW-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date yymmdd portion
DataItem KF0DW-CURR-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail data found in vsnsls01
DataItem KF0DW-DATA-FOUND-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// an editing error encountered
DataItem KF0DW-DATE-CHANGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output date first dash
DataItem KF0DW-DATE-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output date 2nd dash
DataItem KF0DW-DATE-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first of current month century
DataItem KF0DW-DATE-FRST-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month date
DataItem KF0DW-DATE-FRST-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month day
DataItem KF0DW-DATE-FRST-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month month
DataItem KF0DW-DATE-FRST-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month year
DataItem KF0DW-DATE-FRST-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// a date gap error encountered
DataItem KF0DW-DATE-GAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date output format
DataItem KF0DW-DATE-OUT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output date day portion
DataItem KF0DW-DATE-OUT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output date month portion
DataItem KF0DW-DATE-OUT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output date year portion
DataItem KF0DW-DATE-OUT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit field dd portion
DataItem KF0DW-DATE-TEST-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date edit field mm portion
DataItem KF0DW-DATE-TEST-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date edit field
DataItem KF0DW-DATE-TEST-MMDDYY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date edit field yy portion
DataItem KF0DW-DATE-TEST-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date work fields
DataItem KF0DW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century portion of date
DataItem KF0DW-DATE-WORK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date in ccyymmcc format
DataItem KF0DW-DATE-WORK-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day portion of date
DataItem KF0DW-DATE-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month portion of date
DataItem KF0DW-DATE-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year portion of date
DataItem KF0DW-DATE-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yymmdd portion
DataItem KF0DW-DATE-WORK-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage array for map
DataItem KF0DW-DETAIL-LINE char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent display field
DataItem KF0DW-DISPLAY-PCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work fields
DataItem KF0DW-EFF-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of vsnsls01 table
DataItem KF0DW-END-OF-FILE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// an editing error encountered
DataItem KF0DW-ERROR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date work fields
DataItem KF0DW-EXP-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of recs fetched in loop
DataItem KF0DW-FETCH-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unused
DataItem KF0DW-IO-IND1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io5610 calling field
DataItem KF0DW-IO-PASS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal value
DataItem KF0DW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last day of current month
DataItem KF0DW-LAST-DAY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines on each map page
DataItem KF0DW-MAX-LINES-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines in working storage
DataItem KF0DW-MAX-WS-LINES smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season to display
DataItem KF0DW-NEW-SEASON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// an editing error encountered
DataItem KF0DW-NEW-UPDATE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year of season to display
DataItem KF0DW-NEW-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year century portion
DataItem KF0DW-NEW-YEAR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year year portion
DataItem KF0DW-NEW-YEAR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent edit field
DataItem KF0DW-PCT-CHECK decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent edit for commission
DataItem KF0DW-PCT-CHECK-COMM decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent edit for salary
DataItem KF0DW-PCT-CHECK-SLRY decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last expire date
DataItem KF0DW-RANGE-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override rate work field
DataItem KF0DW-RATE-WORK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep salary amount
DataItem KF0DW-SALARY-AMOUNT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen line index
DataItem KF0DW-SCREEN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yns table key fields
DataItem KF0DW-SEASON-KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for season table
DataItem KF0DW-SESN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for season pointer
DataItem KF0DW-SESN-PNTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws rec on top of screen
DataItem KF0DW-TOP-OF-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formula updated indicator
DataItem KF0DW-UPDATE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// an update is pending
DataItem KF0DW-UPDATE-PENDING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kf working storage rec group
DataItem KF0DW-WORKING-STORAGE char(6529)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index
DataItem KF0DW-WS-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season code
DataItem KF0DW-YNS-ABRV-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem KF0DW-YNS-ABRV-SESN-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season description abrev
DataItem KF0DW-YNS-SESN-YR-ABRV char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem KF0DW-YNS-SESN-YR-DISP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

