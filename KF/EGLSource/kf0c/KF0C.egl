package kf0c;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKFS-CHK-SECURITY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CO-CUST-SESN-SLS;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXX-FRST-NM;
import corpcom7.XXX-LAST-NM;
import corpx2.XSE-SESN-CD;
import corpy2.YNS-BUS-FUNC-ID;
import corpy2.YNSTBL;
import kf.common.*;
import sm.common.SM-SREP-ID;
import sm.common.SM-SREP-PSTN-ABRV;
import sm.common.SM1REC;
import ta.common.TA1REC;
import ta.common.TA5APPID;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VKOCTL01;
import vv.common.VRAGCY02;
import vv.common.VREPOS01;
import vv.common.VSNADJ01;
import vv.common.VSNSLS01;
//*** PROGRAM=KF0C ****
// KF0C shows seasonal sales totals by rep for a given agency.
// 
// The user enters the agency ID.  KF internal security is
// checked to see if the user is authorized to access the
// information for that agency and rep.  If the user is not
// authorized, no information is displayed.
// 
// If the user has entered KF0C from another KF system program,
// the agency that was browsed on that screen will be used to
// build the KF0C map (after security is checked).
// 
// Data from the prior season is displayed first.  The user can
// use PF20 and PF19 to scroll to previous or next seasons.
// 
// The user can exit this screen by pressing PF1, PF3 or PF4;
// or by entering a valid fast path option.
// 
// The screen is cleared if the user presses PA2.
// 
// ************************************************************
// *                MAINTENANCE HISTORY                       *
// ************************************************************
// 
// Log #    Date     Name   Description
// -----  --------  ------  -----------------------------------
// 
//  001   10/14/92  JBECKE  Created new program.
//  001   11/09/92  DLIDDL  Changed all table, map and WS refs
//                          to column XSN_SESN_YR_RNG to
//                          YNS_SESN_YR.
//  026   12/17/92  JBECKE  Pick up changes to VKOCTL01.
// 026    12/28/92  DLIDDL  Rate Forecasting Enhancements.
//  032   05/24/93  GCALKI  Change so starting screen is two
//  033   09/22/93  ISCHMI  Changed call to IO5610 to come from
//                          a 4 byte record instead of a
//                          literal, which will prevent over-
//                          laying of storage in subsequent
//                          calls to subroutines.
// *********************
Program KF0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KF0CW01 KF0CW01; // record
  KF0CW02 KF0CW02; // record
  KF0CW03 KF0CW03; // record
  KFWREC KFWREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VKOCTL01 VKOCTL01; // record
  VRAGCY02 VRAGCY02; // record
  VREPOS01 VREPOS01; // record
  VSNADJ01 VSNADJ01; // record
  VSNSLS01 VSNSLS01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KFATBL {deleteAfterUse = yes}; // table
  use YNSTBL {deleteAfterUse = yes}; // table
  use KF0CM.KF0CM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KF0C-00000: KF0C-00000();
    KF0C-10000: KF0C-10000();
      /* always loop through converse*/
    ;
    goto KF0C-10000; /* converse map*/
    ;
    ;
  end // end main
end // end KF0C

Function KF0C-00000()
   /* initial processesing*/
  ;
  XSENTRY(); /* check goal security*/
  ;
  XSSEGTR(); /* set segmented tran id*/
  ;
  KF0CS-INITIALIZE(); /* initialize process*/
  ;
  if (KFWREC.SM-SAGCY-ID != " ") /* agency id passed*/
    KF0CM001.KF0CM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
    KF0CS-BUILD-MAP(); /* use it to build map*/
    ;
  else
    KF0CS-CLEAR-MAP(); /* clear the map*/
    ;
  end
  ;
end // end KF0C-00000

// converse kf0cm001 map
Function KF0C-10000()
  ;
  ;
                   /* nothing to do in the before stage*/
  ;
  ;
  ;
  converse KF0CM001 ;
  ;
  ;
             /* set the error flag off and edit the attention key*/
  ;
  ;
  KF0CW01.KF0CW-ERROR-IND = "N";
  set KF0CM001.KF0CM-SM-SAGCY-ID initialAttributes; /* set map entry fields*/
  ;
  if (converseVar.eventKey is enter) /* user pressed enter*/
    KF0CS-EDIT-ENTRY();
  else
    if (converseVar.eventKey is pf1 /* user pressed a valid pf key*/
     || converseVar.eventKey is pf3 
     || converseVar.eventKey is pf4 
     || converseVar.eventKey is pf7 
     || converseVar.eventKey is pf8 
     || converseVar.eventKey is pf19
     || converseVar.eventKey is pf20)
      KF0CS-EDIT-PF-KEYS();
    else
      if (converseVar.eventKey is pa2) /* user pressed PA2*/
        KF0CS-CLEAR-MAP();
      else
        converseLib.validationFailed(2); /* invalid key pressed*/
      end
    end
  end
  ;
end // end KF0C-10000

// add ws to temp storage
Function KF0CS-ADD-TMP-STR()
  ;
  ;
             /* when the working storage table becomes full*/
             /* add the working storage array to the*/
             /* temporary storage queue*/
             /* and clear out working storage*/
  ;
             /* if an error occurs, post an error message*/
  ;
  ;
  set TA5REC empty; /* clear ts parms*/
  ;
  TA5REC.TA5FNCCD = "A"; /* add record*/
  TA5REC.TA5APPID = KF0CW01.TA5APPID; /* application ID*/
  KF0CW02.KF0CW-LENGTH = KF0CW01.KF0CW-MAX-QUEUE-LENGTH;
  TA5REC.TA5TSQIX = KF0CW01.KF0CW-TS-REC-COUNT + 1;
  ;
  try
    call "TA0050" (KF0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage*/
  ;
  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    KF0CW01.KF0CW-TS-REC-COUNT = TA5REC.TA5TSQIX; /* count rec*/
  else /* an error occurred*/
    KF0CW01.KF0CW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "ADD TS  "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    converseLib.validationFailed(34); /* set error message*/
  end
  ;
end // end KF0CS-ADD-TMP-STR

// build map detail
Function KF0CS-BUILD-DTL()
  /* ***********************************************************************/
  /* *  MODULE: BUILD MAP DETAIL                                          **/
  /* * PURPOSE: Builds the map detail based on seasonal and adjusted      **/
  /* *          sales.                                                    **/
  /* ***********************************************************************/
  ;
  KF0CS-OPEN-SLS-CSR(); /* open seasonal sales cursor*/
  KF0CS-OPEN-ADJ-CSR(); /* open adjustments cursor*/
  ;
  KF0CS-FTCH-SLS-ROW(); /* fetch a seasonal sales row*/
  KF0CS-FTCH-ADJ-ROW(); /* fetch an adjustments row*/
  ;
  KF0CW02.KF0CW-WS-LOAD-COUNT = 0;
  ;
  while (VSNSLS01.SM-SREP-ID != 9999
   || VSNADJ01.CO-MGMT-SREP-ID != 9999)
    ;
  /* ***********************************************************************/
  /* * If the rep id from the seasonal sales row is less than the rep id  **/
  /* * from the adjustments row, process the seasonal sales row.          **/
  /* ***********************************************************************/
    ;
    if (VSNSLS01.SM-SREP-ID < 
    VSNADJ01.CO-MGMT-SREP-ID)
      KF0CS-PROC-SLS-ROW(); /* process seasonal sales row*/
    else
      ;
  /* ***********************************************************************/
  /* * If the rep id from the seasonal sales row is equal the rep id from **/
  /* * the adjustments row, merge the rows.                               **/
  /* ***********************************************************************/
      ;
      if (VSNSLS01.SM-SREP-ID == 
      VSNADJ01.CO-MGMT-SREP-ID)
        KF0CS-PROC-MRG-ROW(); /* merge both rows*/
      else
        ;
  /* ***********************************************************************/
  /* * If the rep id from the seasonal sales row is equal the rep id from **/
  /* * the adjustments row, process the adjustments row                   **/
  /* ***********************************************************************/
        ;
        if (VSNSLS01.SM-SREP-ID > 
        VSNADJ01.CO-MGMT-SREP-ID)
          KF0CS-PROC-ADJ-ROW(); /* process adjustments row*/
        end
      end
    end
  end
  ;
  KF0CS-CLSE-SLS-CSR(); /* close seasonal sales cursor*/
  KF0CS-CLSE-ADJ-CSR(); /* close adjustments cursor*/
  ;
  if (KF0CW02.KF0CW-WS-LOAD-COUNT > 0) /* rows in working storage*/
    KF0CS-ADD-TMP-STR(); /* add to temp storage*/
  end
  ;
  set KF0CW02 empty; /* clear table*/
  ;
end // end KF0CS-BUILD-DTL

// build kf0cm001 map
Function KF0CS-BUILD-MAP()
  ;
           /* validate fields the user entered - agency ID and rep ID*/
           /* build map if fields are valid*/
           /* send back error message if fields are not valid*/
  ;
  ;
  KFWREC.SM-SAGCY-ID = KF0CM001.KF0CM-SM-SAGCY-ID;
  KF0CS-CLEAR-MAP();
  KF0CM001.KF0CM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  ;
  KF0CW01.KF0CW-ERROR-IND = "N";
  ;
  set SM1REC empty;
  set VRAGCY02 empty;
  ;
  if (KF0CM001.KF0CM-SM-SAGCY-ID == " ") /* validate agency id*/
    converseLib.validationFailed(12); /* must enter agency id*/
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set KF0CM001.KF0CM-SM-SAGCY-ID cursor, bold;
  else
    SM1REC.SM1AGYID = KF0CM001.KF0CM-SM-SAGCY-ID;
    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* fetch agency row*/
  /*  */
    if (SQLCA.VAGen_SQLCODE == 0) /* if agency is found*/
      KF0CM001.KF0CM-SM-SAGCY-NM = SM1REC.SM1AGYNM; /* move to map*/
    else /* agency not found*/
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(5); /* agency doesn't exist*/
        KF0CW01.KF0CW-ERROR-IND = "Y";
        set KF0CM001.KF0CM-SM-SAGCY-ID cursor, bold;
      else /* an error occurred*/
        KF0CS-PURGE-TMP-ST();
        KF0CW01.KF0CW-ERROR-IND = "Y";
        set ERRSQLCA empty;
        move SQLCA to ERRSQLCA withV60Compat;
        TA1REC.TA1TYPE = "DB2"; /* db2 error*/
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
        TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
        TA1REC.TA1LOCAT[3] = "BUILD  2"; /* error location*/
        TA1REC.TA1LOCAT[4] = "IO0020"; /* i/o mod*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* message formatter*/
        COMMAREA.CAUSERA = " "; /* clear commarea*/
        XSPF4(); /* pass to goal menu*/
        exit program; /* goal memu failure*/
      end
    end
  end
  ;
  if (KF0CW01.KF0CW-ERROR-IND == "N") /* if no errors*/
    XSKFS-CHK-SECURITY(); /* check security*/
    ;
    if (KFW-ACCESS-IND == "Y") /* access ok'd*/
      KF0CS-NEW-SEASON(); /* start new season*/
    else /* no access to agency*/
      set KF0CM001.KF0CM-SM-SAGCY-ID bold;
    end
    ;
  end
end // end KF0CS-BUILD-MAP

// calculate realign dt boundary
Function KF0CS-CALC-STRT-DT()
  /*  */
  /* the date required is the 20th day of the previous month*/
  /*  */
  KF0CW01.KF0CW-DATE-STRT-CCYYMMDD = VGVar.currentShortGregorianDate;
  ;
  if (KF0CW01.KF0CW-DATE-STRT-YY > 90)
    KF0CW01.KF0CW-DATE-STRT-CC = 19;
  else
    KF0CW01.KF0CW-DATE-STRT-CC = 20;
  end
  ;
  KF0CW01.KF0CW-CURR-DATE = KF0CW01.KF0CW-DATE-STRT-CCYYMMDD;
  KF0CW01.KF0CW-DATE-FRST-CCYYMMDD = KF0CW01.KF0CW-DATE-STRT-CCYYMMDD;
  KF0CW01.KF0CW-DATE-FRST-DD = 01;
  ;
  KF0CW01.KF0CW-DATE-STRT-CCYYMMDD = KF0CW01.KF0CW-DATE-STRT-CCYYMMDD - 100;
  ;
  if (KF0CW01.KF0CW-DATE-STRT-MM == 0) /* year change*/
    KF0CW01.KF0CW-DATE-STRT-CCYYMMDD = KF0CW01.KF0CW-DATE-STRT-CCYYMMDD - 8800;
  end
  ;
  KF0CW01.KF0CW-DATE-STRT-DD = 20;
  ;
end // end KF0CS-CALC-STRT-DT

// clear kf0cm001 map
Function KF0CS-CLEAR-MAP()
  ;
     /* Clear the map.  Set the season and*/
     /* last realign date headings dark.*/
     /* Move the current date to the map.*/
  ;
  set KF0CM001 initial; /* clear map*/
  ;
  set KF0CM001.KF0CM-SEASON-HEADING skip, invisible;
  set KF0CM001.KF0CM-SEASON-YR-DESC skip, invisible;
  set KF0CM001.KF0CM-UPDATE-DATE-HEADING skip, invisible;
  set KF0CM001.KF0CM-CO-LST-RALGN-DT skip, invisible;
  ;
  KF0CM001.KF0CM-DATE = VGVar.currentShortGregorianDate; /* move date to map*/
  ;
end // end KF0CS-CLEAR-MAP

// close the DCOMM.VSNADJ01 csr
Function KF0CS-CLSE-ADJ-CSR()
  /* ***********************************************************************/
  /* *  MODULE: CLOSE THE ADJUSTMENTS CURSOR                              **/
  /* * PURPOSE: Closes the adjustments cursor.                            **/
  /* ***********************************************************************/
  ;
  KF0CW03.KF0CW-IO-TASK = "C3"; /* set up call parm*/
  KF0CW03.KF0CW-IO-IND1 = 0;
  call "IO5610" (KF0CW03, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* close  cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLOSE C3"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-CLSE-ADJ-CSR

// close the DSLSMN.VRAGCY02 csr
Function KF0CS-CLSE-AGY-CSR()
  /* ***********************************************************************/
  /* *  MODULE: CLOSE THE AGENCY CURSOR                                   **/
  /* * PURPOSE: Closes the agency cursor.                                 **/
  /* ***********************************************************************/
  ;
  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes}; /* close  cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
    TA1REC.TA1TBLVU = "VRAGCY02"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLOSE C3"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-CLSE-AGY-CSR

// close the DCOMM.VSNSLS01 csr
Function KF0CS-CLSE-SLS-CSR()
  /* ***********************************************************************/
  /* *  MODULE: CLOSE THE SEASONAL SALES CURSOR                           **/
  /* * PURPOSE: Closes the seasonal sales cursor.                         **/
  /* ***********************************************************************/
  ;
  call "IO3960" ("C2", SQLCA, VSNSLS01) {isNoRefresh = yes, isExternal = yes}; /* close  cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLOSE C2"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-CLSE-SLS-CSR

// user pressed enter
Function KF0CS-EDIT-ENTRY()
  ;
      /* if a fast path has been entered, pass control to that program*/
      /* otherwise, build the map*/
  ;
  ;
  if (KF0CM001.CATOAP > " ") /* fastpath requested*/
    KF0CS-PURGE-TMP-ST(); /* purge temp storage*/
    COMMAREA.CATOAP = KF0CM001.CATOAP;
    COMMAREA.CAITEM = KF0CM001.CAITEM;
    COMMAREA.CAUSERA = " "; /* clear user area*/
    if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* transfer in KF system*/
      COMMAREA.CAUSERA = KFWREC.KFW-GROUP; /* common w/s record*/
    end
    XSEXIT(); /* transfer control*/
    KF0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error was found*/
  else /* new agency or rep*/
    if (KF0CM001.KF0CM-SM-SAGCY-ID != KFWREC.SM-SAGCY-ID)
      KF0CW01.KF0CW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0CW-SESN-PNTR];
      KF0CW01.KF0CW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0CW-SESN-PNTR];
      KF0CW01.KF0CW-SESN-INDEX = KF0CW01.KF0CW-SESN-PNTR;
                                   /* reset index*/
      KFWREC.SM-SREP-ID = 0; /* old rep ID*/
    end
    KF0CS-BUILD-MAP(); /* build map*/
  end
end // end KF0CS-EDIT-ENTRY

// Edit pf keys
Function KF0CS-EDIT-PF-KEYS()
       /* user pressed a PF key*/
       /* edit for valid options and pass control as requested*/
  ;
       /* valid PF keys are:*/
             /* 1 - pass control to help system*/
             /* 3 - pass control to KF0A*/
             /* 4 - pass control to GOAL main menu*/
             /* 7 - scroll up*/
             /* 8 - scroll down*/
             /* 19 - display the prior season's data*/
             /* 20 - display the next season's data*/
  ;
  ;
  if (KF0CM001.CATOAP > " ") /* fastpath entered*/
    converseLib.validationFailed(4); /* can't fastpath and PF key*/
  else
    if (converseVar.eventKey is pf1) /* PF1*/
      KF0CS-PURGE-TMP-ST(); /* purge temp storage*/
      XSPF1();
      KF0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
    else
      if (converseVar.eventKey is pf3) /* pf3*/
        KF0CS-PURGE-TMP-ST(); /* purge temp storage*/
        COMMAREA.CAUSERA = " "; /* pass working storage*/
        COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
        COMMAREA.CATOAP = "KF0A";
        COMMAREA.CAITEM = " ";
        XSEXIT();
        KF0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
      else
        if (converseVar.eventKey is pf4) /* PF 4*/
          KF0CS-PURGE-TMP-ST(); /* purge temp storage*/
          XSPF4();
          KF0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
        else
          if (converseVar.eventKey is pf7) /* PF 7*/
            KF0CS-SCROLL-UP(); /* scroll up*/
          else
            if (converseVar.eventKey is pf8) /* pf 8*/
              KF0CS-SCROLL-DOWN(); /* scroll down*/
            else
              if (converseVar.eventKey is pf19 /* pf 19*/
               || converseVar.eventKey is pf20) /* or pf 20*/
                if (KFWREC.KFW-ACCESS-IND == "Y")
                  KF0CS-GET-SEASON(); /* determine new season*/
                  if (KF0CW01.KF0CW-ERROR-IND != "Y") /* No errors*/
                    KF0CS-NEW-SEASON(); /* start new season*/
                  end
                else
                  KF0CS-BUILD-MAP(); /* access not allowed*/
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end KF0CS-EDIT-PF-KEYS

// fetch an adjustments row
Function KF0CS-FTCH-ADJ-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FETCH ADJUSTMENTS ROW                                     **/
  /* * PURPOSE: Fetches the next row from the adjustments cursor.         **/
  /* ***********************************************************************/
  ;
  KF0CW03.KF0CW-IO-TASK = "N3"; /* set up call parm*/
  KF0CW03.KF0CW-IO-IND1 = 0;
  call "IO5610" (KF0CW03, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* no errors*/
  /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/
      ;
  /* ***********************************************************************/
  /* * Move all 9's to the rep id. This will allow the program to continue**/
  /* * processing the seasonal sales cursor when all the adjustment cursor**/
  /* * rows have been processed.                                          **/
  /* ***********************************************************************/
      ;
      VSNADJ01.CO-MGMT-SREP-ID = 9999;
    else /* serious error*/
      KF0CS-PURGE-TMP-ST();
      KF0CW01.KF0CW-ERROR-IND = "Y";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "FETCH N3"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO5610"; /* i/o mod*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      COMMAREA.CAUSERA = " "; /* clear commarea*/
      XSPF4(); /* pass to goal menu*/
      exit program; /* goal menu failure*/
    end
  end
  ;
end // end KF0CS-FTCH-ADJ-ROW

// fetch an agency row
Function KF0CS-FTCH-AGY-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FETCH AGENCY ROW                                          **/
  /* * PURPOSE: Fetches the next row from the agency cursor.              **/
  /* ***********************************************************************/
  ;
  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes}; /* fetch row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* no errors*/
  /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/
  /* next sentence*/
    else /* serious error*/
      KF0CS-PURGE-TMP-ST();
      KF0CW01.KF0CW-ERROR-IND = "Y";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
      TA1REC.TA1TBLVU = "VRAGCY02"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "FETCH N3"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      COMMAREA.CAUSERA = " "; /* clear commarea*/
      XSPF4(); /* pass to goal menu*/
      exit program; /* goal menu failure*/
    end
  end
  ;
end // end KF0CS-FTCH-AGY-ROW

// fetch a seasonal sales row
Function KF0CS-FTCH-SLS-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FETCH SEASONAL SALES ROW                                  **/
  /* * PURPOSE: Fetches the next row from the seasonal sales cursor.      **/
  /* ***********************************************************************/
  ;
  call "IO3960" ("N2", SQLCA, VSNSLS01) {isNoRefresh = yes, isExternal = yes}; /* fetch row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* no errors*/
  /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/
      ;
  /* ***********************************************************************/
  /* * Move all 9's to the rep id. This will allow the program to continue**/
  /* * processing the adjustments cursor when all the seasonal sales      **/
  /* * cursor rows have been processed.                                   **/
  /* ***********************************************************************/
      ;
      VSNSLS01.SM-SREP-ID = 9999;
    else /* serious error*/
      KF0CS-PURGE-TMP-ST();
      KF0CW01.KF0CW-ERROR-IND = "Y";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "FETCH N1"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      COMMAREA.CAUSERA = " "; /* clear commarea*/
      XSPF4(); /* pass to goal menu*/
      exit program; /* goal menu failure*/
    end
  end
  ;
end // end KF0CS-FTCH-SLS-ROW

// get data for map
Function KF0CS-GET-DATA()
  /* ***********************************************************************/
  /* *  MODULE: GET DATA                                                  **/
  /* * PURPOSE: Get the grand total sales and total adjustments. Load the **/
  /* *          agency rep detail into WS.                                **/
  /* ***********************************************************************/
  ;
  KF0CW01.KF0CW-DATA-FOUND-IND = "N"; /* set found to no*/
  ;
  set VSNSLS01 empty;
  set SQLCA empty;
                                  /* set up DB2 fields*/
  VSNSLS01.SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  VSNSLS01.SM-SREP-ID = 0;
  VSNSLS01.XSE-SESN-CD = KF0CW01.KF0CW-NEW-SEASON;
  VSNSLS01.YNS-SESN-YR = KF0CW01.KF0CW-NEW-YEAR;
  VSNSLS01.CU-CO-ID = 0;
  VSNSLS01.CU-STOR-ID = 0;
  VSNSLS01.XNX-DEPT-ID-XREF = 0;
  ;
  VSNSLS01.CO-CUST-STAT-IND = " "; /* grand total sales*/
  ;
  call "IO3960" ("S ", SQLCA, VSNSLS01) {isNoRefresh = yes, isExternal = yes}; /* fetch sales row*/
  /*  */
  if (SQLCA.VAGen_SQLCODE == 0) /* if row is found*/
    ;
    KF0CM001.KF0CM-TOT-SALES = VSNSLS01.CO-CUST-SESN-SLS; /* move data to map*/
    KF0CW01.KF0CW-DATE-WORK = VSNSLS01.CO-LST-RALGN-DT;
  else /* an error occurred*/
    if (SQLCA.VAGen_SQLCODE != 100)
      KF0CS-PURGE-TMP-ST();
      KF0CW01.KF0CW-ERROR-IND = "Y";
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "GETDATA3"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      COMMAREA.CAUSERA = " "; /* clear commarea*/
      XSPF4(); /* pass to goal menu*/
      exit program; /* goal memu failure*/
    end
  end
  ;
  /* ***********************************************************************/
  /* * Get the total sales adjustments for the agency and moves the total **/
  /* * to the map header. Calculates the net sales based on the grand     **/
  /* * sales total + total adjustments and moves the result to the map    **/
  /* * header.                                                            **/
  /* ***********************************************************************/
  ;
  set VSNADJ01 empty; /* initialise record*/
  VSNADJ01.CO-MGMT-SREP-ID = -1;
  KF0CS-GET-TOT-ADJ(); /* get total sales adjustments for*/
                                   /* agency;*/
  ;
  KF0CM001.KF0CM-ADJUSTMENTS = VSNADJ01.CO-CUST-SLS-ADJAMT;
  KF0CM001.KF0CM-ADJUSTED-SLS = KF0CM001.KF0CM-TOT-SALES + KF0CM001.KF0CM-ADJUSTMENTS;
  ;
  KF0CW01.KF0CW-WS-INDEX = 0; /* initialize index*/
  KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
  KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN;
  ;
  KF0CS-BUILD-DTL(); /* get detail rows*/
  ;
  ;
end // end KF0CS-GET-DATA

// get position description
Function KF0CS-GET-POS-DESC()
  /* ***********************************************************************/
  /* *  MODULE: GET POSITION DESCRIPTION                                  **/
  /* * PURPOSE: Get the total sales adjustments for the agency/rep from   **/
  /* *          the database.                                             **/
  /* ***********************************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0660" ("S ", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* fetch sales row*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0 /* errors*/
   && SQLCA.VAGen_SQLCODE != 100) /* row not found*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
    TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET DESC"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0660"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal memu failure*/
  end
  ;
  ;
end // end KF0CS-GET-POS-DESC

// determine processing season
Function KF0CS-GET-SEASON()
  ;
        /*  */
        /* Determine the new season code & year by decrementing*/
        /* (PF19) or incrementing (PF20) the season index.*/
  ;
  if (converseVar.eventKey is pf19)
    KF0CW01.KF0CW-SESN-INDEX = KF0CW01.KF0CW-SESN-INDEX - 1;
    if (KF0CW01.KF0CW-SESN-INDEX == 0
     || YNSTBL.YNS-BUS-FUNC-ID[KF0CW-SESN-INDEX] != "COM")
      KF0CW01.KF0CW-ERROR-IND = "Y";
      converseLib.validationFailed(10); /* season boundary reached*/
      KF0CW01.KF0CW-SESN-INDEX = KF0CW01.KF0CW-SESN-INDEX + 1;
    else
      KF0CW01.KF0CW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0CW-SESN-INDEX];
      KF0CW01.KF0CW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0CW-SESN-INDEX];
    end
  end
  ;
  if (converseVar.eventKey is pf20)
    KF0CW01.KF0CW-SESN-INDEX = KF0CW01.KF0CW-SESN-INDEX + 1;
    if (YNSTBL.XSE-SESN-CD[KF0CW-SESN-INDEX] == "99"
     || YNSTBL.YNS-BUS-FUNC-ID[KF0CW-SESN-INDEX] != "COM")
      KF0CW01.KF0CW-ERROR-IND = "Y";
      converseLib.validationFailed(11); /* season boundary reached*/
      KF0CW01.KF0CW-SESN-INDEX = KF0CW01.KF0CW-SESN-INDEX - 1;
    else
      KF0CW01.KF0CW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0CW-SESN-INDEX];
      KF0CW01.KF0CW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0CW-SESN-INDEX];
    end
  end
end // end KF0CS-GET-SEASON

// add ws to temp storage
Function KF0CS-GET-TMP-STR()
  ;
  ;
             /* retrieve the temporary storage queue record*/
  ;
             /* NOTE:  TA5REC.TA5TSQIX - the record number to retrieve*/
             /* must be set before calling this statement group*/
  ;
             /* if an error occurs, post an error message*/
  ;
  ;
  TA5REC.TA5FNCCD = "R"; /* retrieve temp storage*/
  TA5REC.TA5APPID = KF0CW01.TA5APPID; /* application ID*/
  KF0CW02.KF0CW-LENGTH = KF0CW01.KF0CW-MAX-QUEUE-LENGTH;
  ;
  try
    call "TA0050" (KF0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage*/
  ;
  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    KF0CW01.KF0CW-CURRENT-WS-ARRAY = TA5REC.TA5TSQIX;
  else /* an error occurred*/
    KF0CW01.KF0CW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "GET TS  "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    converseLib.validationFailed(34); /* set error message*/
  end
  ;
end // end KF0CS-GET-TMP-STR

// get total adjustments
Function KF0CS-GET-TOT-ADJ()
  /* ***********************************************************************/
  /* *  MODULE: GET TOTAL ADJUSTMENTS                                     **/
  /* * PURPOSE: Get the total sales adjustments for the agency/rep from   **/
  /* *          the database.                                             **/
  /* ***********************************************************************/
  ;
  set SQLCA empty;
                                  /* set up DB2 fields*/
  VSNADJ01.CO-MGMT-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  VSNADJ01.XSE-SESN-CD = KF0CW01.KF0CW-NEW-SEASON;
  VSNADJ01.YNS-SESN-YR = KF0CW01.KF0CW-NEW-YEAR;
  VSNADJ01.XXX-STAT = "A";
  VSNADJ01.CO-ADJ-MGR-SLS-FL = "*";
  VSNADJ01.CO-SLS-ADJ-EDT = KF0CW01.KF0CW-DATE-FRST-CCYYMMDD;
  VSNADJ01.CO-SLS-ADJ-XDT = KF0CW01.KF0CW-DATE-FRST-CCYYMMDD;
  ;
  KF0CW03.KF0CW-IO-TASK = "SM"; /* set up call parm*/
  KF0CW03.KF0CW-IO-IND1 = 0;
  call "IO5610" (KF0CW03, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch sales row*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* errors*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "SUM ADJ"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO5610"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal memu failure*/
  end
  ;
  ;
end // end KF0CS-GET-TOT-ADJ

// initialize application fields
Function KF0CS-INITIALIZE()
  ;
      /* Clear files.  Initialize working storage counters and indexes.*/
      /* Fetch the Commissions System control card.*/
  ;
  set KFWREC empty;
  set KF0CW01 empty;
  set KF0CW02 empty;
  set KF0CW03 empty;
  set VKOCTL01 empty;
  ;
  if (COMMAREA.CAFRMSYS == "KF") /* from same system*/
    KFWREC.KFW-GROUP = COMMAREA.CAUSERA; /* pass common record*/
  end
  ;
  KF0CW01.TA5APPID = "KF0C"; /* application id*/
  KF0CW01.KF0CW-MAX-TS-ADDS = 9998;
                                   /* max size of temporary storage*/
  KF0CW01.KF0CW-MAX-QUEUE-LENGTH = 3722; /* temp str rec length*/
  KF0CW01.KF0CW-MAX-LINES-SCREEN = 9;
                                   /* max lines on screen display*/
  KF0CW01.KF0CW-MAX-WS-LINES = 60; /* max size of work str array*/
  KF0CW01.KF0CW-TS-REC-COUNT = 0;
                                   /* number of temp str rec adds*/
  KF0CW01.KF0CW-CURRENT-WS-ARRAY = 1; /* current array in ws table*/
  ;
  KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
                                   /* work str array entry at top*/
  KF0CW01.KF0CW-BOTTOM-OF-SCREEN = 9; /* work str entry at bottom*/
  KF0CW01.KF0CW-SCREEN-INDEX = 0; /* index for screen array*/
  KF0CW01.KF0CW-WS-INDEX = 0; /* working storage index*/
  ;
  KF0CW01.KF0CW-DATA-FOUND-IND = "N"; /* no data on screen*/
  ;
  KF0CS-CALC-STRT-DT();
  ;
  call "IO3970" ("S ", SQLCA, VKOCTL01) {isNoRefresh = yes, isExternal = yes}; /* fetch control card*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* control card found*/
    KF0CW01.KF0CW-YNS-SESN-YR-DISP = VKOCTL01.CO-CURR-YNS-YR;
    KF0CW01.XSE-SESN-CD = VKOCTL01.CO-CURR-XSE-CD;
    KF0CW01.YNS-BUS-FUNC-ID = "COM";
    if (KF0CW01.KF0CW-SEASON-KEY in YNSTBL.YNS-RECORD-KEY)
      KF0CW01.KF0CW-SESN-INDEX = sysVar.arrayIndex;
      KF0CW01.KF0CW-SESN-INDEX = KF0CW-SESN-INDEX - 2;
      KF0CW-SESN-PNTR = KF0CW01.KF0CW-SESN-INDEX; /* 2bak ssn*/
      KF0CW01.KF0CW-SESN-PNTR-1 = KF0CW01.KF0CW-SESN-PNTR - 1; /* prev ssn*/
      KF0CW01.KF0CW-NEW-YEAR = YNSTBL.YNS-SESN-YR[KF0CW-SESN-PNTR];
      KF0CW01.KF0CW-NEW-SEASON = YNSTBL.XSE-SESN-CD[KF0CW-SESN-PNTR];
    else
      KF0CS-PURGE-TMP-ST(); /* purge temp storage*/
      COMMAREA.CAUSERA = " "; /* pass working storage*/
      KFWREC.KFW-MSGNO = 45; /* pass msg no*/
      COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
      COMMAREA.CATOAP = "KF0A";
      COMMAREA.CAITEM = " ";
      XSEXIT();
      KF0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* an error occurred*/
    end
  else /* an error occurred*/
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VKOCTL01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "INITIAL "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3970"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal memu failure*/
  end
  ;
  KF0CW01.KF0CW-CURR-YYMMDD = VGVar.currentShortGregorianDate; /* get current date*/
  ;
  if (KF0CW-CURR-YY > 90)
    KF0CW01.KF0CW-CURR-CC = 19;
  else
    KF0CW01.KF0CW-CURR-CC = 20;
  end
  ;
end // end KF0CS-INITIALIZE

// move data to map
Function KF0CS-MOVE-TO-MAP()
  ;
             /* move the working storage fields to the screen map*/
  ;
             /* If there is no data to move, set the screen map fields*/
             /* dark.*/
  ;
             /* NOTE:  the working storage index should be set before*/
             /* entering this statement group.*/
  ;
  ;
  ;
  KF0CW01.KF0CW-SCREEN-INDEX = 1; /* initialize the screen index*/
  ;
  while (KF0CW01.KF0CW-SCREEN-INDEX <= KF0CW01.KF0CW-MAX-LINES-SCREEN)
                                             /* until the screen is full*/
    if (KF0CW02.SM-SREP-ID[KF0CW-WS-INDEX] > 0) /* move to screen*/
      set KF0CM001.KF0CM-SM-SREP-ID[KF0CW-SCREEN-INDEX] initialAttributes;
      set KF0CM001.KF0CM-XXX-LAST-NM[KF0CW-SCREEN-INDEX] initialAttributes;
      set KF0CM001.KF0CM-XXX-FRST-NM[KF0CW-SCREEN-INDEX] initialAttributes;
      set KF0CM001.KF0CM-SM-SREP-PSTN-ABRV[KF0CW-SCREEN-INDEX] initialAttributes;
      set KF0CM001.KF0CM-CO-CUST-SESN-SLS[KF0CW-SCREEN-INDEX] initialAttributes;
      KF0CM001.KF0CM-SM-SREP-ID[KF0CW-SCREEN-INDEX] = KF0CW02.SM-SREP-ID[KF0CW-WS-INDEX];
      KF0CM001.KF0CM-XXX-LAST-NM[KF0CW-SCREEN-INDEX] = KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX];
      KF0CM001.KF0CM-XXX-FRST-NM[KF0CW-SCREEN-INDEX] = KF0CW02.XXX-FRST-NM[KF0CW-WS-INDEX];
      KF0CM001.KF0CM-SM-SREP-PSTN-ABRV[KF0CW-SCREEN-INDEX] = KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX];
      KF0CM001.KF0CM-CO-CUST-SESN-SLS[KF0CW-SCREEN-INDEX] = KF0CW02.CO-CUST-SESN-SLS[KF0CW-WS-INDEX];
      if (KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] > " ")
        set KF0CM001.KF0CM-TERM-IND[KF0CW-SCREEN-INDEX] skip, bold;
        KF0CM001.KF0CM-TERM-IND[KF0CW-SCREEN-INDEX] = KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX];
      else
        set KF0CM001.KF0CM-TERM-IND[KF0CW-SCREEN-INDEX] initialAttributes;
      end
    else /* set fields dark*/
      set KF0CM001.KF0CM-SM-SREP-ID[KF0CW-SCREEN-INDEX] skip, invisible;
      set KF0CM001.KF0CM-XXX-LAST-NM[KF0CW-SCREEN-INDEX] skip, invisible;
      set KF0CM001.KF0CM-XXX-FRST-NM[KF0CW-SCREEN-INDEX] skip, invisible;
      set KF0CM001.KF0CM-SM-SREP-PSTN-ABRV[KF0CW-SCREEN-INDEX] skip, invisible;
      set KF0CM001.KF0CM-CO-CUST-SESN-SLS[KF0CW-SCREEN-INDEX] skip, invisible;
      set KF0CM001.KF0CM-TERM-IND[KF0CW-SCREEN-INDEX] initialAttributes;
    end /* bump up indexes*/
    KF0CW01.KF0CW-SCREEN-INDEX = KF0CW01.KF0CW-SCREEN-INDEX + 1;
    KF0CW01.KF0CW-WS-INDEX = KF0CW01.KF0CW-WS-INDEX + 1;
  end
end // end KF0CS-MOVE-TO-MAP

// initial process for sesn chng
Function KF0CS-NEW-SEASON()
  ;
  ;
          /* if the vsnsls01 cursor is open, close it*/
          /* purge the temporary storage queue*/
          /* clear the map*/
          /* clear the working storage table*/
          /* start the new season*/
  ;
  ;
  KF0CS-PURGE-TMP-ST(); /* purge the ts queue*/
  ;
  KF0CS-CLEAR-MAP(); /* clear the map*/
  ;
  KF0CM001.KF0CM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  KF0CM001.KF0CM-SM-SAGCY-NM = SM1REC.SM1AGYNM;
  ;
  set KF0CW02 empty; /* clear the ws table*/
  ;
  KF0CW01.KF0CW-CURRENT-WS-ARRAY = 1;
  ;
  KF0CS-START-SEASON(); /* start the season*/
  ;
end // end KF0CS-NEW-SEASON

// open the DCOMM.VSNADJ01 cursor
Function KF0CS-OPEN-ADJ-CSR()
  /* ***********************************************************************/
  /* *  MODULE: OPEN ADJUSTMENTS CURSOR                                   **/
  /* * PURPOSE: Opens the adjustments cursor.                             **/
  /* ***********************************************************************/
  ;
  set VSNADJ01 empty; /* initialize record*/
  ;
  VSNADJ01.CO-MGMT-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  VSNADJ01.XSE-SESN-CD = KF0CW01.KF0CW-NEW-SEASON;
  VSNADJ01.YNS-SESN-YR = KF0CW01.KF0CW-NEW-YEAR;
  VSNADJ01.XXX-STAT = "A";
  VSNADJ01.CO-SLS-ADJ-EDT = KF0CW01.KF0CW-DATE-FRST-CCYYMMDD;
  VSNADJ01.CO-SLS-ADJ-XDT = KF0CW01.KF0CW-DATE-FRST-CCYYMMDD;
  ;
  KF0CW03.KF0CW-IO-TASK = "S3"; /* set up call parm*/
  KF0CW03.KF0CW-IO-IND1 = 0;
  call "IO5610" (KF0CW03, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S3 "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO5610"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-OPEN-ADJ-CSR

// open the DSLSMN.VRAGCY02 csr
Function KF0CS-OPEN-AGY-CSR()
  /* ***********************************************************************/
  /* *  MODULE: OPEN AGENCY CURSOR                                        **/
  /* * PURPOSE: Opens the agency cursor.                                  **/
  /* ***********************************************************************/
  ;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
    TA1REC.TA1TBLVU = "VRAGCY02"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S3 "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-OPEN-AGY-CSR

// open the DCOMM.VSNSLS01 cursor
Function KF0CS-OPEN-SLS-CSR()
  /* ***********************************************************************/
  /* *  MODULE: OPEN SEASONAL SALES CURSOR                                **/
  /* * PURPOSE: Opens the seasonal sales cursor.                          **/
  /* ***********************************************************************/
  ;
  set VSNSLS01 empty; /* initialize record*/
  ;
  VSNSLS01.SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
  VSNSLS01.XSE-SESN-CD = KF0CW01.KF0CW-NEW-SEASON;
  VSNSLS01.YNS-SESN-YR = KF0CW01.KF0CW-NEW-YEAR;
  VSNSLS01.CU-CO-ID = 0;
  VSNSLS01.CU-STOR-ID = 0;
  VSNSLS01.XNX-DEPT-ID-XREF = 0;
  ;
  ;
  call "IO3960" ("S2", SQLCA, VSNSLS01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  /*  */
  if (SQLCA.VAGen_SQLCODE != 0) /* if an error occured*/
    KF0CS-PURGE-TMP-ST();
    KF0CW01.KF0CW-ERROR-IND = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSNSLS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S2 "; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3960"; /* i/o mod*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    COMMAREA.CAUSERA = " "; /* clear commarea*/
    XSPF4(); /* pass to goal menu*/
    exit program; /* goal menu failure*/
  end
  ;
end // end KF0CS-OPEN-SLS-CSR

// Process adjustments row
Function KF0CS-PROC-ADJ-ROW()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS ADJUSTMENTS ROW                                   **/
  /* * PURPOSE: Retrieve the corresponding name and position abbreviation **/
  /* *          for the rep and move the rep detail to working storage.   **/
  /* *          If we have a full page, move to temp storage.             **/
  /* ***********************************************************************/
  ;
  KF0CW01.KF0CW-DATA-FOUND-IND = "Y";
  KF0CW02.KF0CW-WS-LOAD-COUNT = KF0CW02.KF0CW-WS-LOAD-COUNT + 1;
  KF0CW01.KF0CW-WS-INDEX = KF0CW02.KF0CW-WS-LOAD-COUNT;
  ;
  KF0CW02.SM-SREP-ID[KF0CW-WS-INDEX] = VSNADJ01.CO-MGMT-SREP-ID;
  KF0CW02.CO-CUST-SESN-SLS[KF0CW-WS-INDEX] = VSNADJ01.CO-CUST-SLS-ADJAMT;
  ;
  /* ***********************************************************************/
  /* * Open cursor on VRAGCY02 to get rep name and status.                **/
  /* ***********************************************************************/
  ;
  VRAGCY02.SM1AGYID = VSNADJ01.CO-MGMT-SAGCY-ID;
  VRAGCY02.SM4REPID = VSNADJ01.CO-MGMT-SREP-ID;
  ;
  KF0CS-OPEN-AGY-CSR(); /* open cursor*/
  ;
  KF0CS-FTCH-AGY-ROW(); /* fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* store name found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXLSTNM;
    KF0CW02.XXX-FRST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXFSTNM;
    if (VRAGCY02.XXXSTAT == "I"
     || VRAGCY02.SM5TDT > KF0CW01.KF0CW-CURR-DATE)
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
    else
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = " ";
    end
  else /* store name not found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = "UNKNOWN";
    KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
  end
  ;
  KF0CS-CLSE-AGY-CSR(); /* close cursor*/
  ;
  /* ***********************************************************************/
  /* * If we have a rep position id get the corresponding rep position id **/
  /* * description and move to working storage.                           **/
  /* ***********************************************************************/
  ;
  if (VRAGCY02.SM-SREP-PSTN-ID > " ")
    VREPOS01.SM-SREP-PSTN-ID = VRAGCY02.SM-SREP-PSTN-ID;
    KF0CS-GET-POS-DESC(); /* get rep pstn description*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = VREPOS01.SM-SREP-PSTN-ABRV;
    else
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
    end
  else
    KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
  end
  ;
  /* ***********************************************************************/
  /* * If the working storage area is full, add to temp storage and reset **/
  /* * indexes and counters.                                              **/
  /* ***********************************************************************/
  ;
  if (KF0CW02.KF0CW-WS-LOAD-COUNT == KF0CW01.KF0CW-MAX-WS-LINES)
    KF0CS-ADD-TMP-STR(); /* add page to temp storage*/
    set KF0CW02 empty;
    KF0CW01.KF0CW-CURRENT-WS-ARRAY = KF0CW01.KF0CW-CURRENT-WS-ARRAY + 1;
    KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
    KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN;
    KF0CW02.KF0CW-WS-LOAD-COUNT = 0;
  end
  ;
  KF0CS-FTCH-ADJ-ROW(); /* fetch next adjustments row*/
end // end KF0CS-PROC-ADJ-ROW

// Process both rows
Function KF0CS-PROC-MRG-ROW()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS MERGE ROWS                                        **/
  /* * PURPOSE: Apply the adjustments to the seasonal sales and move to   **/
  /* *          working storage.                                          **/
  /* *          Retrieve the corresponding name and position abbreviation **/
  /* *          for the rep and move the rep detail to working storage.   **/
  /* *          If we have a full page, move to temp storage.             **/
  /* ***********************************************************************/
  ;
  KF0CW01.KF0CW-DATA-FOUND-IND = "Y";
  KF0CW02.KF0CW-WS-LOAD-COUNT = KF0CW02.KF0CW-WS-LOAD-COUNT + 1;
  KF0CW01.KF0CW-WS-INDEX = KF0CW02.KF0CW-WS-LOAD-COUNT;
  ;
  KF0CW02.SM-SREP-ID[KF0CW-WS-INDEX] = VSNSLS01.SM-SREP-ID;
  KF0CW02.CO-CUST-SESN-SLS[KF0CW-WS-INDEX] = VSNSLS01.CO-CUST-SESN-SLS + VSNADJ01.CO-CUST-SLS-ADJAMT;
  ;
  /* ***********************************************************************/
  /* * Open cursor on VRAGCY02 to get rep name and status.                **/
  /* ***********************************************************************/
  ;
  VRAGCY02.SM1AGYID = VSNSLS01.SM-SAGCY-ID;
  VRAGCY02.SM4REPID = VSNSLS01.SM-SREP-ID;
  ;
  KF0CS-OPEN-AGY-CSR(); /* open cursor*/
  ;
  KF0CS-FTCH-AGY-ROW(); /* fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* store name found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXLSTNM;
    KF0CW02.XXX-FRST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXFSTNM;
    if (VRAGCY02.XXXSTAT == "I"
     || VRAGCY02.SM5TDT > KF0CW01.KF0CW-CURR-DATE)
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
    else
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = " ";
    end
  else /* store name not found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = "UNKNOWN";
    KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
  end
  ;
  KF0CS-CLSE-AGY-CSR(); /* close cursor*/
  ;
  /* ***********************************************************************/
  /* * If we have a rep position id get the corresponding rep position id **/
  /* * description and move to working storage.                           **/
  /* ***********************************************************************/
  ;
  if (VSNSLS01.SM-SREP-PSTN-ID > " ")
    VREPOS01.SM-SREP-PSTN-ID = VSNSLS01.SM-SREP-PSTN-ID;
    KF0CS-GET-POS-DESC(); /* get rep pstn description*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = VREPOS01.SM-SREP-PSTN-ABRV;
    else
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
    end
  else
    KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
  end
  ;
  /* ***********************************************************************/
  /* * If the working storage area is full, add to temp storage and reset **/
  /* * indexes and counters.                                              **/
  /* ***********************************************************************/
  ;
  if (KF0CW02.KF0CW-WS-LOAD-COUNT == KF0CW01.KF0CW-MAX-WS-LINES)
    KF0CS-ADD-TMP-STR(); /* add page to temp storage*/
    set KF0CW02 empty;
    KF0CW01.KF0CW-CURRENT-WS-ARRAY = KF0CW01.KF0CW-CURRENT-WS-ARRAY + 1;
    KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
    KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN;
    KF0CW02.KF0CW-WS-LOAD-COUNT = 0;
  end
  KF0CS-FTCH-ADJ-ROW(); /* fetch next adjustments row*/
  ;
  KF0CS-FTCH-SLS-ROW(); /* fetch next seasonal sales row*/
end // end KF0CS-PROC-MRG-ROW

// Process seasonal sales row
Function KF0CS-PROC-SLS-ROW()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS SEASONAL SALES ROW                                **/
  /* * PURPOSE: Retrieve the corresponding name and position abbreviation **/
  /* *          for the rep and move the rep detail to working storage.   **/
  /* *          If we have a full page, move to temp storage.             **/
  /* ***********************************************************************/
  ;
  KF0CW01.KF0CW-DATA-FOUND-IND = "Y";
  KF0CW02.KF0CW-WS-LOAD-COUNT = KF0CW02.KF0CW-WS-LOAD-COUNT + 1;
  KF0CW01.KF0CW-WS-INDEX = KF0CW02.KF0CW-WS-LOAD-COUNT;
  ;
  KF0CW02.SM-SREP-ID[KF0CW-WS-INDEX] = VSNSLS01.SM-SREP-ID;
  KF0CW02.CO-CUST-SESN-SLS[KF0CW-WS-INDEX] = VSNSLS01.CO-CUST-SESN-SLS;
  ;
  /* ***********************************************************************/
  /* * Open cursor on VRAGCY02 to get rep name and status.                **/
  /* ***********************************************************************/
  ;
  VRAGCY02.SM1AGYID = VSNSLS01.SM-SAGCY-ID;
  VRAGCY02.SM4REPID = VSNSLS01.SM-SREP-ID;
  ;
  KF0CS-OPEN-AGY-CSR(); /* open cursor*/
  ;
  KF0CS-FTCH-AGY-ROW(); /* fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* store name found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXLSTNM;
    KF0CW02.XXX-FRST-NM[KF0CW-WS-INDEX] = VRAGCY02.XXXFSTNM;
    if (VRAGCY02.XXXSTAT == "I"
     || VRAGCY02.SM5TDT > KF0CW01.KF0CW-CURR-DATE)
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
    else
      KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = " ";
    end
  else /* store name not found*/
    KF0CW02.XXX-LAST-NM[KF0CW-WS-INDEX] = "UNKNOWN";
    KF0CW02.KF0CW-TERM-IND[KF0CW-WS-INDEX] = "T";
  end
  ;
  KF0CS-CLSE-AGY-CSR(); /* close cursor*/
  ;
  /* ***********************************************************************/
  /* * If we have a rep position id get the corresponding rep position id **/
  /* * description and move to working storage.                           **/
  /* ***********************************************************************/
  ;
  if (VSNSLS01.SM-SREP-PSTN-ID > " ")
    VREPOS01.SM-SREP-PSTN-ID = VSNSLS01.SM-SREP-PSTN-ID;
    KF0CS-GET-POS-DESC(); /* get rep pstn description*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = VREPOS01.SM-SREP-PSTN-ABRV;
    else
      KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
    end
  else
    KF0CW02.SM-SREP-PSTN-ABRV[KF0CW-WS-INDEX] = "UNKNOWN";
  end
  ;
  /* ***********************************************************************/
  /* * If the working storage area is full, add to temp storage and reset **/
  /* * indexes and counters.                                              **/
  /* ***********************************************************************/
  ;
  if (KF0CW02.KF0CW-WS-LOAD-COUNT == KF0CW01.KF0CW-MAX-WS-LINES)
    KF0CS-ADD-TMP-STR(); /* add page to temp storage*/
    set KF0CW02 empty;
    KF0CW01.KF0CW-CURRENT-WS-ARRAY = KF0CW01.KF0CW-CURRENT-WS-ARRAY + 1;
    KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
    KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN;
    KF0CW02.KF0CW-WS-LOAD-COUNT = 0;
  end
  ;
  KF0CS-FTCH-SLS-ROW(); /* fetch next seasonal sales row*/
end // end KF0CS-PROC-SLS-ROW

// purge the temp storage queue
Function KF0CS-PURGE-TMP-ST()
  ;
  ;
             /* purge the temporary storage queue*/
  ;
             /* if an error occurs, post an error message*/
  ;
  ;
  set TA5REC empty; /* clear ts parms*/
  ;
  TA5REC.TA5FNCCD = "P"; /* purge queue*/
  TA5REC.TA5APPID = KF0CW01.TA5APPID; /* application ID*/
  ;
  try
    call "TA0050" (KF0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage*/
  ;
  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    KF0CW01.KF0CW-TS-REC-COUNT = 0; /* count rec*/
  else /* an error occurred*/
    KF0CW01.KF0CW-ERROR-IND = "Y"; /* set error flag*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "PURGE TS"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    converseLib.validationFailed(34); /* set error message*/
  end
  ;
end // end KF0CS-PURGE-TMP-ST

// display next 9 rows
Function KF0CS-SCROLL-DOWN()
  ;
  ;
          /* user pressed PF8 - scroll down*/
  ;
          /* if already at the bottom, post an error message*/
  ;
          /* if the next 9 detail rows are in working storage,*/
          /* clear the map and move them to the map fields.*/
  ;
          /* if the next 9 detail rows are in temporary storage, clear*/
          /* working storage, read the temporary storage record*/
          /* into working storage and move the rows to the map fields.*/
  ;
  ;
  if (KF0CW01.KF0CW-DATA-FOUND-IND == "N") /* no data to report*/
    converseLib.validationFailed(9); /* already at bottom*/
    KF0CW01.KF0CW-ERROR-IND = "Y";
  else
    if (KF0CW01.KF0CW-BOTTOM-OF-SCREEN
     < KF0CW02.KF0CW-WS-LOAD-COUNT) /* rows are in table*/
                                                  /* set first line*/
      KF0CW01.KF0CW-TOP-OF-SCREEN = KF0CW01.KF0CW-BOTTOM-OF-SCREEN + 1;
      KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-BOTTOM-OF-SCREEN + KF0CW01.KF0CW-MAX-LINES-SCREEN;
    else /* not last array*/
      if (KF0CW01.KF0CW-CURRENT-WS-ARRAY
       < KF0CW01.KF0CW-TS-REC-COUNT) /* table in ts queue*/
        set KF0CW02 empty; /* initialize ws table*/
        TA5REC.TA5TSQIX = KF0CW01.KF0CW-CURRENT-WS-ARRAY + 1;
        KF0CS-GET-TMP-STR(); /* fetch ts queue rec*/
                                                 /* set first line*/
        KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN;
        KF0CW01.KF0CW-TOP-OF-SCREEN = 1;
      else /* need to fetch rows*/
        converseLib.validationFailed(9); /* already at bottom*/
        KF0CW01.KF0CW-ERROR-IND = "Y";
      end
    end
  end
  ;
  if (KF0CW01.KF0CW-ERROR-IND == "N")
    KF0CW01.KF0CW-WS-INDEX = KF0CW01.KF0CW-TOP-OF-SCREEN;
    KF0CS-MOVE-TO-MAP(); /* move table to map*/
  end
  ;
end // end KF0CS-SCROLL-DOWN

// display previous 9 rows
Function KF0CS-SCROLL-UP()
  ;
  ;
          /* user pressed PF7 - scroll up*/
  ;
          /* if already at the top, post an error message*/
  ;
          /* if the previous 9 detail rows are in working storage,*/
          /* clear the map and move them to the map fields.*/
  ;
          /* if the previous 9 detail rows are in temporary storage,*/
          /* write working storage to temporary storage, clear*/
          /* working storage, read the temporary storage record*/
          /* into working storage and move the rows to the map fields.*/
  ;
  ;
  if (KF0CW01.KF0CW-DATA-FOUND-IND == "N") /* no data*/
    converseLib.validationFailed(3); /* already at top*/
    KF0CW01.KF0CW-ERROR-IND = "Y";
  else /* not first screen*/
    if (KF0CW01.KF0CW-TOP-OF-SCREEN == 1 /* first screen in table*/
     && KF0CW01.KF0CW-CURRENT-WS-ARRAY == 1) /* first table*/
      converseLib.validationFailed(3); /* already at top*/
      KF0CW01.KF0CW-ERROR-IND = "Y";
    else /* not first screen*/
      if (KF0CW01.KF0CW-TOP-OF-SCREEN > 1) /* rows are in table*/
                                                /* set first line*/
        KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-TOP-OF-SCREEN - 1;
        KF0CW01.KF0CW-TOP-OF-SCREEN = KF0CW01.KF0CW-TOP-OF-SCREEN - KF0CW01.KF0CW-MAX-LINES-SCREEN;
      else /* not first array*/
        set KF0CW02 empty; /* initialize ws table*/
        KF0CW02.KF0CW-LENGTH = KF0CW01.KF0CW-MAX-QUEUE-LENGTH;
        TA5REC.TA5TSQIX = KF0CW01.KF0CW-CURRENT-WS-ARRAY - 1; /* rec to get*/
        KF0CS-GET-TMP-STR(); /* fetch ts queue rec*/
                                              /* set first line*/
        KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-WS-LINES;
        KF0CW01.KF0CW-TOP-OF-SCREEN = KF0CW01.KF0CW-MAX-WS-LINES - KF0CW01.KF0CW-MAX-LINES-SCREEN;
        KF0CW01.KF0CW-TOP-OF-SCREEN = KF0CW01.KF0CW-TOP-OF-SCREEN + 1;
      end
      KF0CW01.KF0CW-WS-INDEX = KF0CW01.KF0CW-TOP-OF-SCREEN;
      KF0CS-MOVE-TO-MAP(); /* move table to map*/
    end
  end
end // end KF0CS-SCROLL-UP

// start processing a new season
Function KF0CS-START-SEASON()
  ;
             /* Retrieve data for the agency/rep entered.*/
  ;
             /* If data is found, move the working storage fields to the*/
             /* screen map and display the headings.*/
  ;
             /* If no data is found, issue an error message.*/
  ;
  ;
  KF0CS-GET-DATA(); /* fetch the data*/
  ;
  set KF0CM001.KF0CM-SEASON-HEADING initialAttributes; /* display map fields*/
  set KF0CM001.KF0CM-SEASON-YR-DESC initialAttributes;
  set KF0CM001.KF0CM-UPDATE-DATE-HEADING initialAttributes;
  set KF0CM001.KF0CM-CO-LST-RALGN-DT initialAttributes;
  ;
  KF0CM001.KF0CM-SEASON-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0CW-SESN-INDEX];
  if (KF0CW01.KF0CW-DATA-FOUND-IND == "Y") /* if data is found*/
    ;
    KF0CM001.KF0CM-CO-LST-RALGN-DT = KF0CW01.KF0CW-DATE-WORK;
    ;
    set KF0CW02 empty; /* clear working strg array*/
    TA5REC.TA5TSQIX = 1; /* set temp st index*/
    KF0CS-GET-TMP-STR(); /* get first array*/
    ;
    KF0CW01.KF0CW-WS-INDEX = 1; /* initialize work strg index*/
    KF0CW01.KF0CW-TOP-OF-SCREEN = 1; /* set first line*/
    KF0CW01.KF0CW-BOTTOM-OF-SCREEN = KF0CW01.KF0CW-MAX-LINES-SCREEN; /* set last line*/
    ;
    KF0CS-MOVE-TO-MAP();
    ;
  else /* set heading dark*/
    set KF0CM001.KF0CM-UPDATE-DATE-HEADING skip, invisible;
    set KF0CM001.KF0CM-CO-LST-RALGN-DT skip, invisible;
    converseLib.validationFailed(15); /* no data for season*/
  end
end // end KF0CS-START-SEASON

//*** RECORD=KF0CW01 ****
// this record contains working storage fields for program KF0B
// 
// ************************************************************
// *                  Maintenance History                     *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   09/22/92  JBECKE    Created record.
//  000   03/03/93  jbecke    added first of month fields.
// 
// ***********************
Record KF0CW01 type basicRecord
  5 KF0CW-WORKING-STORAGE KF0CW-WORKING-STORAGE ; 
    10 KF0CW-END-OF-FILE KF0CW-END-OF-FILE ; 
    10 KF0CW-DATA-FOUND-IND KF0CW-DATA-FOUND-IND ; 
    10 KF0CW-ERROR-IND KF0CW-ERROR-IND ; 
    10 TA5APPID TA5APPID ; 
    10 KF0CW-MAX-QUEUE-LENGTH KF0CW-MAX-QUEUE-LENGTH ; 
    10 KF0CW-MAX-TS-ADDS KF0CW-MAX-TS-ADDS ; 
    10 KF0CW-MAX-LINES-SCREEN KF0CW-MAX-LINES-SCREEN ; 
    10 KF0CW-MAX-WS-LINES KF0CW-MAX-WS-LINES ; 
    10 KF0CW-TS-REC-COUNT KF0CW-TS-REC-COUNT ; 
    10 KF0CW-CURRENT-WS-ARRAY KF0CW-CURRENT-WS-ARRAY ; 
    10 KF0CW-TOP-OF-SCREEN KF0CW-TOP-OF-SCREEN ; 
    10 KF0CW-BOTTOM-OF-SCREEN KF0CW-BOTTOM-OF-SCREEN ; 
    10 KF0CW-SCREEN-INDEX KF0CW-SCREEN-INDEX ; 
    10 KF0CW-WS-INDEX KF0CW-WS-INDEX ; 
    10 KF0CW-SESN-INDEX KF0CW-SESN-INDEX ; 
    10 KF0CW-SESN-PNTR KF0CW-SESN-PNTR ; 
    10 KF0CW-SESN-PNTR-1 KF0CW-SESN-PNTR-1 ; 
    10 KF0CW-NEW-SEASON KF0CW-NEW-SEASON ; 
    10 KF0CW-NEW-YEAR KF0CW-NEW-YEAR ; 
    10 * char(3) ; 
    10 KF0CW-CURR-DATE KF0CW-CURR-DATE ; 
      15 KF0CW-CURR-CC KF0CW-CURR-CC ; 
      15 KF0CW-CURR-YYMMDD KF0CW-CURR-YYMMDD ; 
        20 KF0CW-CURR-YY KF0CW-CURR-YY ; 
        20 KF0CW-CURR-MM KF0CW-CURR-MM ; 
        20 KF0CW-CURR-DD KF0CW-CURR-DD ; 
    10 * num(1) ; 
    10 KF0CW-DATE-WORK KF0CW-DATE-WORK ; 
      15 * num(1) ; 
      15 KF0CW-DATE-WORK-CC KF0CW-DATE-WORK-CC ; 
      15 KF0CW-DATE-WORK-YY KF0CW-DATE-WORK-YY ; 
      15 KF0CW-DATE-WORK-MM KF0CW-DATE-WORK-MM ; 
      15 KF0CW-DATE-WORK-DD KF0CW-DATE-WORK-DD ; 
    10 * char(3) ; 
    10 KF0CW-DATE-STRT-CCYYMMDD KF0CW-DATE-STRT-CCYYMMDD ; 
      15 KF0CW-DATE-STRT-CC KF0CW-DATE-STRT-CC ; 
      15 KF0CW-DATE-STRT-YY KF0CW-DATE-STRT-YY ; 
      15 KF0CW-DATE-STRT-MM KF0CW-DATE-STRT-MM ; 
      15 KF0CW-DATE-STRT-DD KF0CW-DATE-STRT-DD ; 
    10 * char(3) ; 
    10 KF0CW-DATE-FRST-CCYYMMDD KF0CW-DATE-FRST-CCYYMMDD ; 
      15 KF0CW-DATE-FRST-CC KF0CW-DATE-FRST-CC ; 
      15 KF0CW-DATE-FRST-YY KF0CW-DATE-FRST-YY ; 
      15 KF0CW-DATE-FRST-MM KF0CW-DATE-FRST-MM ; 
      15 KF0CW-DATE-FRST-DD KF0CW-DATE-FRST-DD ; 
    10 * char(3) ; 
    10 KF0CW-SEASON-KEY KF0CW-SEASON-KEY ; 
      15 XSE-SESN-CD XSE-SESN-CD ; 
      15 KF0CW-YNS-SESN-YR-DISP KF0CW-YNS-SESN-YR-DISP ; 
      15 YNS-BUS-FUNC-ID YNS-BUS-FUNC-ID ; 
end // end KF0CW01

//*** RECORD=KF0CW02 ****
// this record contains the working storage table that is moved
// to the screen map or saved in the temporary storage queue.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   09/22/92  JBECKE    Created table.
// 
// ***********************
Record KF0CW02 type basicRecord
  5 KF0CW-LENGTH KF0CW-LENGTH ; 
  5 * char(3302) ; 
    10 KF0CW-WS-LOAD-COUNT KF0CW-WS-LOAD-COUNT ; 
    10 KF0CW-DETAIL-LINE KF0CW-DETAIL-LINE [60] ; 
      15 SM-SREP-ID SM-SREP-ID ; 
      15 KF0CW-TERM-IND KF0CW-TERM-IND ; 
      15 XXX-LAST-NM XXX-LAST-NM ; 
      15 XXX-FRST-NM XXX-FRST-NM ; 
      15 SM-SREP-PSTN-ABRV SM-SREP-PSTN-ABRV ; 
      15 CO-CUST-SESN-SLS CO-CUST-SESN-SLS ; 
end // end KF0CW02

//*** RECORD=KF0CW03 ****
// This record contains the working storage fields for the call
// to IO5610
// ************************************************************
// *                MAINTENANCE HISTORY                       *
// ************************************************************
// Log #     Date        Name    Description
// ---       ----        ----    -----------
// 001       09/22/93    ISCHMI  Created record.
// ***********************
Record KF0CW03 type basicRecord
  5 KF0CW-IO-PASS KF0CW-IO-PASS ; 
    10 KF0CW-IO-TASK KF0CW-IO-TASK ; 
    10 KF0CW-IO-IND1 KF0CW-IO-IND1 ; 
end // end KF0CW03

// ws rec on bottom of screen
DataItem KF0CW-BOTTOM-OF-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date century portion
DataItem KF0CW-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem KF0CW-CURR-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date day portion
DataItem KF0CW-CURR-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date month portion
DataItem KF0CW-CURR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date year portion
DataItem KF0CW-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date yymmdd portion
DataItem KF0CW-CURR-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage rec in ws
DataItem KF0CW-CURRENT-WS-ARRAY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail data found in vsnsls01
DataItem KF0CW-DATA-FOUND-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first of current month century
DataItem KF0CW-DATE-FRST-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month date
DataItem KF0CW-DATE-FRST-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month day
DataItem KF0CW-DATE-FRST-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month month
DataItem KF0CW-DATE-FRST-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of current month year
DataItem KF0CW-DATE-FRST-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check realign date - century
DataItem KF0CW-DATE-STRT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check for realign date
DataItem KF0CW-DATE-STRT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check realign date - day
DataItem KF0CW-DATE-STRT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check realign date - month
DataItem KF0CW-DATE-STRT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check realign date - year
DataItem KF0CW-DATE-STRT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work fields
DataItem KF0CW-DATE-WORK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century portion of date
DataItem KF0CW-DATE-WORK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day portion of date
DataItem KF0CW-DATE-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month portion of date
DataItem KF0CW-DATE-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year portion of date
DataItem KF0CW-DATE-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen detail line
DataItem KF0CW-DETAIL-LINE char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of vsnsls01 table
DataItem KF0CW-END-OF-FILE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// an editing error encountered
DataItem KF0CW-ERROR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unused
DataItem KF0CW-IO-IND1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io5610 calling field
DataItem KF0CW-IO-PASS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal value
DataItem KF0CW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary storage queue length
DataItem KF0CW-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines on each map page
DataItem KF0CW-MAX-LINES-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max length of ts queue rec
DataItem KF0CW-MAX-QUEUE-LENGTH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum temp storage adds
DataItem KF0CW-MAX-TS-ADDS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines in working storage
DataItem KF0CW-MAX-WS-LINES smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season to display
DataItem KF0CW-NEW-SEASON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year of season to display
DataItem KF0CW-NEW-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen line index
DataItem KF0CW-SCREEN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yns table key fields
DataItem KF0CW-SEASON-KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index to season table
DataItem KF0CW-SESN-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yns table at previous season
DataItem KF0CW-SESN-PNTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KF0CW-SESN-PNTR-1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep terminated indicator
DataItem KF0CW-TERM-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws rec on top of screen
DataItem KF0CW-TOP-OF-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of temp storage adds
DataItem KF0CW-TS-REC-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kf working storage rec group
DataItem KF0CW-WORKING-STORAGE char(94)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index
DataItem KF0CW-WS-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tot recs in tmp strg record
DataItem KF0CW-WS-LOAD-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem KF0CW-YNS-SESN-YR-DISP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

