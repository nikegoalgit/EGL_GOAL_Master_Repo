package kf0f;

import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKFS-CHK-SECURITY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CO-ADJ-MGR-SLS-FL;
import corpcom5.CO-CUST-SLS-ADJAMT;
import corpcom5.CO-MGMT-SAGCY-ID;
import corpcom5.CO-MGMT-SREP-ID;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.CU-STOR-ID;
import corpcom5.CU-STOR-NM;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXTBLNM;
import corpcom7.ZZHHMMSS;
import corpx2.XNX-DEPT-ID-XREF;
import corpx2.XSE-SESN-CD;
import corpx2.XURDEST;
import corpx2.XXX-STAT;
import corpx2.XXXUSRID;
import corpy2.YNS-BUS-FUNC-ID;
import corpy2.YNS-SESN-YR;
import corpy2.YNS-SESN-YR-DESC;
import corpy2.YNSTBL;
import corpy2.YSB-SLS-RESP-CD;
import corpz3.ZZZSDT;
import kf.common.*;
import ku.common.KUMREC;
import sm.common.SM-BFR-AFT-IND;
import sm.common.SM-SAGCY-ID;
import sm.common.SM-SREP-ID;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5APPID;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VKOCTL01;
import vv.common.VSNADJ01;
//*** PROGRAM=KF0F ****
// KF0F is an inquiry only screen that will display adjustments
// to seasonal commissionable sales data (management view) for
// a given agency.
// 
// ************************************************************
// *                    MAINTENANCE HISTORY                   *
// ************************************************************
// 
// Log #    Date     Name   Description
// -----  --------  ------  -----------------------------------
// 
//   001  15/01/93  DLIDDL  Created application.
//   032  05/25/93  GCALKI  Changed application so opening
//                          screen is 2 seasons before current.
//   000  09/22/93  ISCHMI  Changed call to IO5610 to come from
//                          a 4 byte record instead of a
//                          literal, which will prevent over-
//                          laying of storage in subsequent
//                          calls to other subroutines.
// *********************
Program KF0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KF0FW01 KF0FW01; // record
  KF0FW02 KF0FW02; // record
  KF0FW03 KF0FW03; // record
  KF0FW04 KF0FW04; // record
  KF0FW06 KF0FW06; // record
  KF0FW07 KF0FW07; // record
  KF0FW08 KF0FW08; // record
  KF0FW09 KF0FW09; // record
  KFWREC KFWREC; // record
  KUMREC KUMREC; // record
  SM1REC SM1REC; // record
  SMHREC SMHREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VKOCTL01 VKOCTL01; // record
  VSNADJ01 VSNADJ01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YNSTBL {deleteAfterUse = yes}; // table
  use KFATBL {deleteAfterUse = yes}; // table
  use KF0FT01 {deleteAfterUse = yes}; // table
  use KF0FT02 {deleteAfterUse = yes}; // table
  use KF0FT03 {deleteAfterUse = yes}; // table
  use KF0FT04 {deleteAfterUse = yes}; // table
  use KF0FM.KF0FM001, // form
  		KF0FM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KF0F-00000: KF0F-00000();
    KF0F-10000: KF0F-10000();
    /* ***********************************************************************/
    /* Flow to kf0W-10000 which will display the map.                       **/
    /* ***********************************************************************/
    ;
    goto KF0F-10000; /* converse the map*/
    ;
  end // end main
end // end KF0F

// Initial Processing
Function KF0F-00000()
  /* ***********************************************************************/
  /* *  MODULE: INITIAL PROCESSING                                        **/
  /* * PURPOSE: Check security, set segmented transaction id and do       **/
  /* *          application initialization.                               **/
  /* ***********************************************************************/
  ;
  XSENTRY(); /* check goal security*/
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  KF0FS-INITIALIZE(); /* initialize*/
  ;
end // end KF0F-00000

// Converse KF0F map
Function KF0F-10000()
  /* ***********************************************************************/
  /* *  MODULE: CONVERSE MAP                                              **/
  /* * PURPOSE: Converse the map. Determine if a valid key has been       **/
  /* *          pressed and process accordingly.                          **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * Move the current date to the map heading date.                     **/
  /* ***********************************************************************/
  ;
  KF0FM001.KF0FM-DATE = VGVar.currentShortGregorianDate;
  ;
  if (KF0FW01.KF0FW-POPUP-IND == "Y")
    set KF0FM001.KF0FM-SELECT[1] cursor;
  end
  ;
  converse KF0FM001 ;
  ;
  KF0FM001.KF0FM-MESSAGE = " "; /* program message area*/
  ;
  /* ***********************************************************************/
  /* * Move the agency id to the save area.                               **/
  /* ***********************************************************************/
  ;
  KF0FW02.SM-SAGCY-ID = KF0FM001.KF0FM-SM-SAGCY-ID;
  ;
  /* ***********************************************************************/
  /* * Reset the attributes enterable fields.                             **/
  /* ***********************************************************************/
  ;
  if (COMMAREA.CAFROMAP == "KF0E"
   && KF0FW01.KF0FW-POPUP-IND == "Y")
  /* next sentence*/
  else
    set KF0FM001.KF0FM-SM-SAGCY-ID initialAttributes;
  end
  ;
  set KF0FM001.CATOAP initialAttributes;
  set KF0FM001.CAITEM initialAttributes;
  ;
  if (converseVar.eventKey is enter) /* user pressed enter*/
    KF0FS-PROC-ENTER();
  else
    ;
  /* ***********************************************************************/
  /* * If PA2 has been pressed and a popup has been requested, display    **/
  /* * invalid key pressed message. If PA2 has been pressed and KF0F isn't**/
  /* * being called as a popup, process the PA2 key.                      **/
  /* ***********************************************************************/
    ;
    if (converseVar.eventKey is pa2) /* user pressed PA2*/
      if (COMMAREA.CAFROMAP == "KF0E" /* and a popup requested*/
       && KF0FW01.KF0FW-POPUP-IND == "Y")
        converseLib.validationFailed(2); /* invalid key pressed msg*/
      else /* no popup requested*/
        KF0FS-PROC-PA2();
      end
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8) /* user presses PF7 or PF8*/
        KF0FS-PROC-PF-SCRL();
      else
        if (converseVar.eventKey is pf1 /* user presses a valid PF key*/
         || converseVar.eventKey is pf3 
         || converseVar.eventKey is pf4)
          KF0FS-PROC-PF-KEYS();
        else
          ;
  /* ***********************************************************************/
  /* * If PF19 or PF20 has been pressed and a popup has been requested,   **/
  /* * display invalid key pressed message. If PF19 or PF20 has been      **/
  /* * pressed and KF0F isn't being called as a popup, process the PF19 or**/
  /* * PF20 key.                                                          **/
  /* ***********************************************************************/
          ;
          if (converseVar.eventKey is pf19 /* user presses PF19 or PF20*/
           || converseVar.eventKey is pf20)
            if (COMMAREA.CAFROMAP == "KF0E" /* and a popup requested*/
             && KF0FW01.KF0FW-POPUP-IND == "Y")
              converseLib.validationFailed(2); /* invalid key pressed msg*/
            else /* no popup requested*/
              KF0FS-PROC-PF-SESN();
            end
          else
            ;
  /* ***********************************************************************/
  /* * If PF15 has been pressed and a popup has been requested, display   **/
  /* * invalid key pressed message. If PF15 has been pressed and KF0F     **/
  /* * isn't being called as a popup, process the PF15 key.               **/
  /* ***********************************************************************/
            ;
            if (converseVar.eventKey is pf15) /* user presses PF15*/
              if (COMMAREA.CAFROMAP == "KF0E" /* and a popup requested*/
               && KF0FW01.KF0FW-POPUP-IND == "Y")
                converseLib.validationFailed(2); /* invalid key pressed msg*/
              else /* no popup requested*/
                KF0FS-PROC-PRINT();
              end
            else
              converseLib.validationFailed(2); /* invalid key pressed msg*/
            end
          end
        end
      end
    end
  end
  ;
end // end KF0F-10000

// Process new selections
Function KF0FS-ADD-SELECT()
  /* ***********************************************************************/
  /* *  MODULE: ADD SELECTIONS                                            **/
  /* * PURPOSE: Processes the new selections by adding them to the        **/
  /* *          selection table.                                          **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX
   <= KF0FW01.KF0FW-MAX-PER-PAGE
   && converseVar.validationMsgNum == 0)
    ;
  /* ***********************************************************************/
  /* * If the selection field has changed ...                             **/
  /* ***********************************************************************/
    ;
    if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] != 
    KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX])
      ;
  /* ***********************************************************************/
  /* * ... and was previously blank, the selection has been added.        **/
  /* ***********************************************************************/
      ;
      if (KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] == " ")
        ;
  /* ***********************************************************************/
  /* * Find the first blank entry in the selection table and insert the   **/
  /* * new selection.                                                     **/
  /* ***********************************************************************/
        ;
        KF0FW01.KF0FW-SAVE-XXX-STAT = " ";
        KF0FW01.KF0FW-SAVE-CU-CO-ID = 0;
        KF0FW01.KF0FW-SAVE-CU-STOR-ID = 0;
        KF0FW01.KF0FW-SAVE-XNX-DEPT-ID-XREF = 0;
        KF0FW01.KF0FW-SAVE-YSB-SLS-RESP-CD = "  ";
        ;
        if (KF0FW01.KF0FW-SAVE-KEY in KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE)
          KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[sysVar.arrayIndex] = KF0FW04.KF0FW-SELECTION-KEY-FLDS[KF0FW-SCREEN-INDEX];
          KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] = KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX];
        end
        ;
      end
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-ADD-SELECT

// Add WS page to temp storage
Function KF0FS-ADD-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: ADD TEMPORARY STORAGE PAGE                                **/
  /* * PURPOSE: Adds a full restart table to the temporary storage area.  **/
  /* ***********************************************************************/
  ;
  set TA5REC empty; /* clear ts parms*/
  ;
  TA5REC.TA5APPID = KF0FW01.TA5APPID; /* application ID*/
  KF0FW06.KF0FW-TEMP-STRG-LENGTH = KF0FW01.KF0FW-TSQ-REC-LENGTH; /* temp storage length*/
  ;
  if (KF0FW01.KF0FW-HIGHEST-PAGE == 0) /* we have no pages formatted*/
    TA5REC.TA5FNCCD = "N"; /* function is new (purge & add)*/
  else /* we have pages formatted*/
    TA5REC.TA5FNCCD = "A"; /* function is add*/
  end
  ;
  try
    call "TA0050" (KF0FW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage routine*/
  ;
  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    /* next sentence*/
  else /* bad call or abnormal return*/
    ;
    set TAEREC empty; /* initialise record*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1LOCAT[1] = "ADD TS  "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/
    ;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass control to menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error msg*/
    ;
  end
  ;
end // end KF0FS-ADD-TMP-STRG

// Build the map detail page
Function KF0FS-BUILD-MAP()
  /* ***********************************************************************/
  /* MODULE: BUILD MAP                                                   **/
  /* PURPOSE: Build the map detail page using the restartable cursor.    **/
  /* ***********************************************************************/
  ;
  KF0FS-FMT-ADJ-CSR(); /* format the adjustments cursor*/
  KF0FS-OPEN-ADJ-CSR(); /* open the adjustments cursor*/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* screen detail line index*/
  KF0FS-GET-NXT-ADJ(); /* get the next adjustments row*/
  ;
  /* ***********************************************************************/
  /* * Process adjustments until we have a full page or we have no more   **/
  /* * adjustments or their are no more adjustments within range.         **/
  /* ***********************************************************************/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE
   && KF0FW01.KF0FW-MORE-ADJUSTMENTS-FLG == "Y"
   && KF0FW-CSR-CURR-VALUE <= KF0FW-CSR-HIGH-VALUE)
    ;
    KUMREC.KUCCOID = VSNADJ01.CU-CO-ID;
    KUMREC.KUMSTRID = VSNADJ01.CU-STOR-ID;
    ;
    KF0FS-GET-STOR-NM(); /* get the store name*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* store name found*/
      KF0FW04.CU-STOR-NM[KF0FW-SCREEN-INDEX] = KUMREC.KUMSTRNM;
    else /* store name not found*/
      KF0FW04.CU-STOR-NM[KF0FW-SCREEN-INDEX] = "UNKNOWN";
    end
    ;
  /* ***********************************************************************/
  /* * Move the adjustments data to the save area.                        **/
  /* ***********************************************************************/
    ;
    KF0FW04.CU-CO-ID[KF0FW-SCREEN-INDEX] = VSNADJ01.CU-CO-ID;
    KF0FW04.CU-STOR-ID[KF0FW-SCREEN-INDEX] = VSNADJ01.CU-STOR-ID;
    KF0FW04.XNX-DEPT-ID-XREF[KF0FW-SCREEN-INDEX] = VSNADJ01.XNX-DEPT-ID-XREF;
    KF0FW04.YSB-SLS-RESP-CD[KF0FW-SCREEN-INDEX] = VSNADJ01.YSB-SLS-RESP-CD;
    KF0FW04.CO-MGMT-SAGCY-ID[KF0FW-SCREEN-INDEX] = VSNADJ01.CO-MGMT-SAGCY-ID;
    KF0FW04.CO-MGMT-SREP-ID[KF0FW-SCREEN-INDEX] = VSNADJ01.CO-MGMT-SREP-ID;
    KF0FW04.CO-CUST-SLS-ADJAMT[KF0FW-SCREEN-INDEX] = VSNADJ01.CO-CUST-SLS-ADJAMT;
    KF0FW04.XXX-STAT[KF0FW-SCREEN-INDEX] = VSNADJ01.XXX-STAT;
    KF0FW04.CO-ADJ-MGR-SLS-FL[KF0FW-SCREEN-INDEX] = VSNADJ01.CO-ADJ-MGR-SLS-FL;
    ;
    KF0FS-GET-NXT-ADJ(); /* get the next adjustments row*/
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
  KF0FS-CLSE-ADJ-CSR(); /* close the adjustments cursor*/
  ;
end // end KF0FS-BUILD-MAP

// Check security
Function KF0FS-CHK-SECURITY()
  /* ***********************************************************************/
  /* *  MODULE: CHECK SECURITY                                            **/
  /* * PURPOSE: Check to see if user has access to the passed agency and  **/
  /* *          set up the parameters accordingly.                        **/
  /* ***********************************************************************/
  ;
  XSKFS-CHK-SECURITY(); /* check security*/
  ;
  if (KFWREC.KFW-SCRTY-LVL-CD == "1")
    ;
  /* ***********************************************************************/
  /* * Access is unlimited.                                               **/
  /* ***********************************************************************/
    ;
    if (KF0FW02.SM-SAGCY-ID == "ALL")
      KF0FW01.CO-MGMT-SAGCY-ID = "*";
    else
      KF0FW01.CO-MGMT-SAGCY-ID = KF0FW02.SM-SAGCY-ID;
    end
    ;
    KF0FW01.CO-MGMT-SREP-ID = -1;
  else
    ;
    if (KFWREC.KFW-SCRTY-LVL-CD == "2")
      ;
  /* ***********************************************************************/
  /* * Access is limited by agency.                                       **/
  /* ***********************************************************************/
      ;
      if (KF0FW02.SM-SAGCY-ID != "ALL"
       && KF0FW02.SM-SAGCY-ID != KFWREC.KFW-USER-SM-SAGCY-ID)
        /* access denied*/
      else
        KF0FW01.CO-MGMT-SAGCY-ID = KFWREC.KFW-USER-SM-SAGCY-ID;
        KF0FW01.CO-MGMT-SREP-ID = -1;
        ;
        KFWREC.KFW-ACCESS-IND = "Y";
        converseLib.validationFailed(0);
      end
      ;
    else
      ;
      if (KFWREC.KFW-SCRTY-LVL-CD == "3")
        ;
  /* ***********************************************************************/
  /* * Access is limited by rep.                                          **/
  /* ***********************************************************************/
        ;
        KFWREC.KFW-ACCESS-IND = "Y";
        converseLib.validationFailed(0);
        ;
        if (KF0FW02.SM-SAGCY-ID == "ALL")
          KF0FW01.CO-MGMT-SAGCY-ID = "*";
        else
          KF0FW01.CO-MGMT-SAGCY-ID = KF0FW02.SM-SAGCY-ID;
        end
        ;
        KF0FW01.CO-MGMT-SREP-ID = KFWREC.KFW-USER-SM-SREP-ID;
        KFWREC.SM-SREP-ID = KFWREC.KFW-USER-SM-SREP-ID;
      else
        if (KFWREC.KFW-SCRTY-LVL-CD == "4")
          ;
  /* ***********************************************************************/
  /* * Access is limited by agency and rep.                               **/
  /* ***********************************************************************/
          ;
          if (KF0FW02.SM-SAGCY-ID != "ALL"
           && KF0FW02.SM-SAGCY-ID != KFWREC.KFW-USER-SM-SAGCY-ID)
            /* access denied*/
          else
            ;
            KF0FW01.CO-MGMT-SAGCY-ID = KFWREC.KFW-USER-SM-SAGCY-ID;
            KF0FW01.CO-MGMT-SREP-ID = KFWREC.KFW-USER-SM-SREP-ID;
            KFWREC.SM-SREP-ID = KFWREC.KFW-USER-SM-SREP-ID;
            ;
            KFWREC.KFW-ACCESS-IND = "Y";
            converseLib.validationFailed(0);
            ;
          end
        end
      end
    end
  end
end // end KF0FS-CHK-SECURITY

// Get cics region info
Function KF0FS-CICS-INFO()
  /* ***********************************************************************/
  /* *  MODULE: GET CICS INFORMATION                                      **/
  /* * PURPOSE: Get CICS information - determine if program is running on **/
  /* *          the production or development machine.                    **/
  /* ***********************************************************************/
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* get CICS info*/
  ;
  if (sysVar.errorCode != "00000000" /* call was not good*/
   || TA3REC.TA3RTNCD != 0)          /* or bad return code*/
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "POST"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "CICS INF"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0230  "; /* subroutine*/
    ;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    ;
    converseLib.validationFailed(35); /* set error message*/
    ;
  end
  ;
end // end KF0FS-CICS-INFO

// Close the adjustments cursor
Function KF0FS-CLSE-ADJ-CSR()
  /* ***********************************************************************/
  /* *  MODULE: CLOSE ADJUSTMENTS CURSOR                                  **/
  /* * PURPOSE: Close the adjustments cursor.                             **/
  /* ***********************************************************************/
  ;
  KF0FW09.KF0FW-IO-TASK = "C2"; /* /set up call parms*/
  KF0FW09.KF0FW-IO-IND1 = 0;
  call "IO5610" (KF0FW09, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* clse adjstments csr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/
    ;
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1DBASE = "DCOMM"; /* database name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLSE C2"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO5610"; /* io module*/
    ;
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass control to menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
    ;
  end
  ;
end // end KF0FS-CLSE-ADJ-CSR

// Process deleted selections
Function KF0FS-DEL-SELECT()
  /* ***********************************************************************/
  /* *  MODULE: DELETE SELECTIONS                                         **/
  /* * PURPOSE: Processes the deleted selections by removing them from the**/
  /* *          selection table.                                          **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE)
    ;
  /* ***********************************************************************/
  /* * If the selection field has changed ...                             **/
  /* ***********************************************************************/
    ;
    if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] != 
    KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX])
      ;
  /* ***********************************************************************/
  /* * ... and is currently blank, then the selection has been deleted.   **/
  /* ***********************************************************************/
      ;
      if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] == " ")
        ;
  /* ***********************************************************************/
  /* * Find the corresponding entry in the selections table and blank it  **/
  /* * out.                                                               **/
  /* ***********************************************************************/
        ;
        if (KF0FW04.KF0FW-SELECTION-KEY-FLDS[KF0FW-SCREEN-INDEX]
         in KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE)
          ;
          KFWREC.XXX-STAT[sysVar.arrayIndex] = " ";
          KFWREC.CU-CO-ID[sysVar.arrayIndex] = 0;
          KFWREC.CU-STOR-ID[sysVar.arrayIndex] = 0;
          KFWREC.XNX-DEPT-ID-XREF[sysVar.arrayIndex] = 0;
          KFWREC.YSB-SLS-RESP-CD[sysVar.arrayIndex] = " ";
          ;
        end
        ;
       /* MOVE KF0FM001.KF0FM-SELECT(KF0FW-SCREEN-INDEX) TO*/
         /* KF0FW04.KF0FW-SELECT(KF0FW-SCREEN-INDEX);*/
        ;
        KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] = " ";
        ;
      end
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-DEL-SELECT

// Edit the agency
Function KF0FS-EDIT-AGENCY()
  /* ***********************************************************************/
  /* *  MODULE: EDIT AGENCY ID                                            **/
  /* * PURPOSE: Checks to see if the agency id entered exists on the db.  **/
  /* ***********************************************************************/
  ;
  set SM1REC empty; /* initialise record*/
  ;
  SM1REC.SM1AGYID = KF0FW02.SM-SAGCY-ID;
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* get agency name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
  /* ***********************************************************************/
  /* * Agency id found, so move the name to the map and the id to the save**/
  /* * area.                                                              **/
  /* ***********************************************************************/
    ;
    KF0FM001.KF0FM-SM-SAGCY-NM = SM1REC.SM1AGYNM;
    KF0FW03.SM-SAGCY-ID = KF0FW02.SM-SAGCY-ID;
  else
    ;
  /* ***********************************************************************/
  /* * Agency id not found, so blank out the agency name on the map and the*/
  /* * agency id in the save area.                                        **/
  /* ***********************************************************************/
    ;
    ;
    KF0FM001.KF0FM-SM-SAGCY-NM = " ";
    KF0FW03.SM-SAGCY-ID = " ";
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* agency id not found*/
      set KF0FM001.KF0FM-SM-SAGCY-ID cursor, bold;
      converseLib.validationFailed(48); /* enter agency id or ALL msg*/
    else /* serious error*/
      ;
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1TYPE = "RETN";
      TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
      TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "GET NAME"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO0050"; /* io module*/
      ;
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      ;
      XSPF4(); /* pass control to menu*/
      ;
      KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
      ;
    end
  end
  ;
end // end KF0FS-EDIT-AGENCY

// Edit the selection fields
Function KF0FS-EDIT-SELECT()
  /* ***********************************************************************/
  /* *  MODULE: EDIT SELECTION FIELDS                                     **/
  /* * PURPOSE: Determine if more than 25 selections have been made.      **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * A selection has been added if it was previously blank and now      **/
  /* * contains a character. A selection has been removed if it is now    **/
  /* * blank but previously contained a character.                        **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SELECTION-COUNT-2 = KF0FW01.KF0FW-SELECTION-COUNT;
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE)
    ;
    if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] != 
    KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX])
      ;
      if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] == " ")
        ;
  /* ***********************************************************************/
  /* * Selection has been removed.                                        **/
  /* ***********************************************************************/
        ;
        KF0FW01.KF0FW-SELECTION-COUNT = KF0FW01.KF0FW-SELECTION-COUNT - 1;
      else
        if (KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] == " ")
          ;
  /* ***********************************************************************/
  /* * Selection has been added.                                          **/
  /* ***********************************************************************/
          ;
          KF0FW01.KF0FW-SELECTION-COUNT = KF0FW01.KF0FW-SELECTION-COUNT + 1;
        end
      end
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
  ;
end // end KF0FS-EDIT-SELECT

// Build the map detail page
Function KF0FS-FMT-ADJ-CSR()
  /* ***********************************************************************/
  /* MODULE: FORMAT ADJUSTMENTS CURSOR                                   **/
  /* PURPOSE: Format the restartable adjustments cursor                   **/
  /* ***********************************************************************/
  ;
  set VSNADJ01 empty;
  ;
  VSNADJ01.CO-MGMT-SAGCY-ID = KF0FW01.CO-MGMT-SAGCY-ID;
  VSNADJ01.CO-MGMT-SREP-ID = KF0FW01.CO-MGMT-SREP-ID;
  VSNADJ01.XSE-SESN-CD = YNSTBL.XSE-SESN-CD[KF0FW-SEASON-INDEX];
  VSNADJ01.YNS-SESN-YR = YNSTBL.YNS-SESN-YR[KF0FW-SEASON-INDEX];
  VSNADJ01.CU-CO-ID = KF0FW06.CU-CO-ID[KF0FW-RESTART-INDEX];
  VSNADJ01.CU-STOR-ID = KF0FW06.CU-STOR-ID[KF0FW-RESTART-INDEX];
  VSNADJ01.XNX-DEPT-ID-XREF = KF0FW06.XNX-DEPT-ID-XREF[KF0FW-RESTART-INDEX];
  VSNADJ01.YSB-SLS-RESP-CD = KF0FW06.YSB-SLS-RESP-CD[KF0FW-RESTART-INDEX];
  VSNADJ01.XXX-STAT = KF0FW06.XXX-STAT[KF0FW-RESTART-INDEX];
end // end KF0FS-FMT-ADJ-CSR

// Format map detail
Function KF0FS-FMT-MAP-DTL()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT MAP DETAIL                                         **/
  /* * PURPOSE: Format the actual map from the save area.                 **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE)
    ;
    KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] = KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-CU-CO-ID[KF0FW-SCREEN-INDEX] = KF0FW04.CU-CO-ID[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-CU-STOR-ID[KF0FW-SCREEN-INDEX] = KF0FW04.CU-STOR-ID[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-XNX-DEPT-ID-XREF[KF0FW-SCREEN-INDEX] = KF0FW04.XNX-DEPT-ID-XREF[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-CU-STOR-NM[KF0FW-SCREEN-INDEX] = KF0FW04.CU-STOR-NM[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-YSB-SLS-RESP-CD[KF0FW-SCREEN-INDEX] = KF0FW04.YSB-SLS-RESP-CD[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-MGMT-SAGCY-ID[KF0FW-SCREEN-INDEX] = KF0FW04.CO-MGMT-SAGCY-ID[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-MGMT-SREP-ID[KF0FW-SCREEN-INDEX] = KF0FW04.CO-MGMT-SREP-ID[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-CO-CUST-SLS-ADJAMT[KF0FW-SCREEN-INDEX] = KF0FW04.CO-CUST-SLS-ADJAMT[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-XXX-STAT[KF0FW-SCREEN-INDEX] = KF0FW04.XXX-STAT[KF0FW-SCREEN-INDEX];
    ;
    KF0FM001.KF0FM-CO-ADJ-MGR-SLS-FL[KF0FW-SCREEN-INDEX] = KF0FW04.CO-ADJ-MGR-SLS-FL[KF0FW-SCREEN-INDEX];
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-FMT-MAP-DTL

// Fetch adjustments row
Function KF0FS-FTCH-ADJ-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FETCH ADJUSTMENTS ROW                                     **/
  /* * PURPOSE: Fetches an adjustments row.                               **/
  /* ***********************************************************************/
  ;
  set VSNADJ01 empty; /* initialise record*/
  ;
  KF0FW01.KF0FW-MORE-ADJUSTMENTS-FLG = "Y"; /* set flag to 'y'*/
  ;
  KF0FW09.KF0FW-IO-TASK = "N2"; /* set up call parms*/
  KF0FW09.KF0FW-IO-IND1 = 0;
  call "IO5610" (KF0FW09, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch adjstmnts row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* no errors*/
    ;
  /* ***********************************************************************/
  /* * Format the key fields in WS to make comparisons simpler.           **/
  /* ***********************************************************************/
    ;
    KF0FW-CURR-CU-CO-ID = VSNADJ01.CU-CO-ID;
    KF0FW-CURR-CU-STOR-ID = VSNADJ01.CU-STOR-ID;
    KF0FW-CURR-DEPT-ID-XREF = VSNADJ01.XNX-DEPT-ID-XREF;
    KF0FW-CURR-YSB-SLS-RESP-CD = VSNADJ01.YSB-SLS-RESP-CD;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
      KF0FW01.KF0FW-MORE-ADJUSTMENTS-FLG = "N"; /* set flag to 'y'*/
    else
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN"; /* post*/
      TA1REC.TA1DBASE = "DCOMM"; /* database name*/
      TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "FETCH N2"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO5610"; /* io module*/
      ;
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/
      ;
      XSPF4(); /* pass control to menu*/
      ;
      KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
      ;
    end
  end
  ;
end // end KF0FS-FTCH-ADJ-ROW

// Get rep position id
Function KF0FS-GET-CNTL-CRD()
  /* ***********************************************************************/
  /* *  MODULE: GET CONTROL CARD                                          **/
  /* * PURPOSE: Selects the control card info from the db.                **/
  /* ***********************************************************************/
  ;
  set VKOCTL01 empty; /* initialise record*/
  ;
  call "IO3970" ("S ", SQLCA, VKOCTL01) {isNoRefresh = yes, isExternal = yes}; /* get control card*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCOMM"; /* database name*/
    TA1REC.TA1TBLVU = "VKOCTL01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET CNTL"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO3970"; /* io module*/
    ;
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass control to menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
    ;
  end
  ;
end // end KF0FS-GET-CNTL-CRD

// Get the next adjustments row
Function KF0FS-GET-NXT-ADJ()
  /* ***********************************************************************/
  /* MODULE: GET NEXT ADJUSTMENT                                         **/
  /* PURPOSE: Gets the next adjustments row.                              **/
  /* ***********************************************************************/
  ;
  if (VSNADJ01.XXX-STAT == "A") /* currently processing active status*/
    ;
    KF0FS-FTCH-ADJ-ROW(); /* fetch the next adjustments row*/
    ;
    if (KF0FW-MORE-ADJUSTMENTS-FLG == "N" /* no more adjustments or*/
     || KF0FW-CSR-CURR-VALUE              
     > KF0FW-CSR-HIGH-VALUE               /* requested selection complete*/
     || VSNADJ01.XXX-STAT != "A")         /* not an active row*/
      ;
      KF0FS-CLSE-ADJ-CSR(); /* close adjustments cursor*/
      ;
      move KF0FW-RESTART-INDEX to KF0FW-RESTART-INDEX-2 withV60Compat; /* save current restart index value*/
      KF0FW-RESTART-INDEX = 1; /* point to 1st restart rec*/
      ;
      KF0FS-FMT-ADJ-CSR(); /* format the adjustments cursor*/
      VSNADJ01.XXX-STAT = "I"; /* this time select inactive status*/
      move KF0FW-RESTART-INDEX-2 to KF0FW-RESTART-INDEX withV60Compat; /* reset restart index*/
      ;
      KF0FS-OPEN-ADJ-CSR(); /* open the adjustments cursor*/
      KF0FS-FTCH-ADJ-ROW(); /* fetch the next adjustments row*/
    end
    ;
  else /* currently processing inactive status*/
    ;
    KF0FS-FTCH-ADJ-ROW(); /* fetch the next adjustments row*/
  end
  ;
end // end KF0FS-GET-NXT-ADJ

// Get the store name
Function KF0FS-GET-STOR-NM()
  /* ***********************************************************************/
  /* *  MODULE: GET STORE NAME                                            **/
  /* * PURPOSE: Get store name.                                           **/
  /* ***********************************************************************/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* name found*/
   || SQLCA.VAGen_SQLCODE == 100) /* name not found*/
  /* next sentence*/
  else /* error occurred*/
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET NAME"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0340"; /* i/o mod*/
    ;
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass to goal menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
    ;
  end
  ;
end // end KF0FS-GET-STOR-NM

// Popup unique initialisation
Function KF0FS-INIT-POPUP()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE POPUP                                          **/
  /* * PURPOSE: Initialisation that is unique to the popup function of    **/
  /* *          KF0F.                                                     **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * Prevent PA2, PF15, PF19 and PF20 from displaying on the map.       **/
  /* ***********************************************************************/
  ;
  set KF0FM001.KF0FM-PA2-LITERAL invisible, skip;
  set KF0FM001.KF0FM-PF15-LITERAL invisible, skip;
  set KF0FM001.KF0FM-PF19-LITERAL invisible, skip;
  set KF0FM001.KF0FM-PF20-LITERAL invisible, skip;
  ;
  /* ***********************************************************************/
  /* * Protect the agency id.                                             **/
  /* ***********************************************************************/
  ;
  set KF0FM001.KF0FM-SM-SAGCY-ID skip;
  ;
  /* ***********************************************************************/
  /* * Default the agency id to ALL.                                      **/
  /* ***********************************************************************/
  ;
  KF0FM001.KF0FM-SM-SAGCY-ID = "ALL";
  KF0FW02.SM-SAGCY-ID = "ALL";
  ;
end // end KF0FS-INIT-POPUP

// Initialise restart table
Function KF0FS-INIT-RST-TBL()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE RESTART TABLE                                  **/
  /* * PURPOSE: Initialise the restart table.                             **/
  /* ***********************************************************************/
  ;
  KF0FW06.KF0FW-RESTART-REC = " "; /* restart table*/
  KF0FW01.KF0FW-RESTART-INDEX = 1; /* restart table index*/
  ;
  /* ***********************************************************************/
  /* * Initialise the 1st entry of the restart table and the highest      **/
  /* * permissable cursor value to the correct settings.                  **/
  /* ***********************************************************************/
  ;
  if (KF0FW01.KF0FW-POPUP-IND == "Y"
   && COMMAREA.CAFROMAP == "KF0E")
    ;
  /* ***********************************************************************/
  /* * If a popup has been requested from KF0E, then the partial key      **/
  /* * values passed from KF0E will be found in KFWREC.                   **/
  /* *                                                                    **/
  /* * A value of -1 in a numeric field or '*' in a character field can be**/
  /* * thought of as a wild card. If any other values are passed then the **/
  /* * selection will be limited to these actual values.                  **/
  /* *                                                                    **/
  /* * For example, if the values passed from KF0E were:                  **/
  /* *                                                                    **/
  /* * CUST   STORE   DEPT   YSB                                          **/
  /* *    7      -1     -1   ' *'                                         **/
  /* *                                                                    **/
  /* * Then the 1st entry in the restart table would be:                  **/
  /* *                                                                    **/
  /* * CUST   STORE   DEPT   YSB                                          **/
  /* *    7       0      0   '  '                                         **/
  /* *                                                                    **/
  /* * and the highest permissable value would be:                        **/
  /* *                                                                    **/
  /* * CUST   STORE   DEPT   YSB                                          **/
  /* *    7    9999   9999   '99'                                         **/
  /* *                                                                    **/
  /* * This would allow us to select all STORE/DEPT/YSB's for CUSTOMER 7  **/
  /* * for the AGENCY/REP.                                                **/
  /* ***********************************************************************/
    ;
    KF0FW06.CU-CO-ID[KF0FW-RESTART-INDEX] = KFWREC.KFW-CU-CO-ID-KEY;
    KF0FW01.KF0FW-HIGH-CU-CO-ID = KFWREC.KFW-CU-CO-ID-KEY;
    ;
    if (KFWREC.KFW-CU-STOR-ID-KEY == -1)
      KF0FW06.CU-STOR-ID[KF0FW-RESTART-INDEX] = 0;
      KF0FW01.KF0FW-HIGH-CU-STOR-ID = 9999;
    else
      KF0FW06.CU-STOR-ID[KF0FW-RESTART-INDEX] = KFWREC.KFW-CU-STOR-ID-KEY;
      KF0FW01.KF0FW-HIGH-CU-STOR-ID = KFWREC.KFW-CU-STOR-ID-KEY;
    end
    ;
    if (KFWREC.KFW-XNX-DEPT-ID-XREF-KEY == -1)
      KF0FW06.XNX-DEPT-ID-XREF[KF0FW-RESTART-INDEX] = 0;
      KF0FW01.KF0FW-HIGH-DEPT-ID-XREF = 9999;
    else
      KF0FW06.XNX-DEPT-ID-XREF[KF0FW-RESTART-INDEX] = KFWREC.KFW-XNX-DEPT-ID-XREF-KEY;
      KF0FW01.KF0FW-HIGH-DEPT-ID-XREF = KFWREC.KFW-XNX-DEPT-ID-XREF-KEY;
    end
    ;
    KF0FW06.YSB-SLS-RESP-CD[KF0FW-RESTART-INDEX] = "  ";
    KF0FW01.KF0FW-HIGH-YSB-SLS-RESP-CD = "99";
    ;
    KF0FW06.XXX-STAT[KF0FW-RESTART-INDEX] = "A";
    ;
  else
    ;
  /* ***********************************************************************/
  /* * If KF0F is not being treated as a popup, then the 1st entry of the **/
  /* * restart table and the highest permissable cursor value will be the **/
  /* * lowest and highest values respectively.                            **/
  /* *                                                                    **/
  /* * Then the 1st entry in the restart table would be:                  **/
  /* *                                                                    **/
  /* * CUST   STORE   DEPT   YSB                                          **/
  /* *    0       0      0   '  '                                         **/
  /* *                                                                    **/
  /* * and the highest permissable value would be:                        **/
  /* *                                                                    **/
  /* *      CUST   STORE   DEPT   YSB                                     **/
  /* * 999999999    9999   9999   '99'                                    **/
  /* *                                                                    **/
  /* * This would allow us to select all CUST/STORE/DEPT/YSB's for the    **/
  /* * AGENCY/REP.                                                        **/
  /* ***********************************************************************/
    ;
    KF0FW06.CU-CO-ID[KF0FW-RESTART-INDEX] = 0;
    KF0FW06.CU-STOR-ID[KF0FW-RESTART-INDEX] = 0;
    KF0FW06.XNX-DEPT-ID-XREF[KF0FW-RESTART-INDEX] = 0;
    KF0FW06.YSB-SLS-RESP-CD[KF0FW-RESTART-INDEX] = "  ";
    KF0FW06.XXX-STAT[KF0FW-RESTART-INDEX] = "A";
    ;
    KF0FW01.KF0FW-HIGH-CU-CO-ID = 999999999;
    KF0FW01.KF0FW-HIGH-CU-STOR-ID = 9999;
    KF0FW01.KF0FW-HIGH-DEPT-ID-XREF = 9999;
    KF0FW01.KF0FW-HIGH-YSB-SLS-RESP-CD = "99";
    ;
  end
  ;
end // end KF0FS-INIT-RST-TBL

// Initialise the screen
Function KF0FS-INIT-SCRN()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE SCREEN                                         **/
  /* * PURPOSE: Initialise the screen.                                    **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * Clear the map.                                                     **/
  /* ***********************************************************************/
  ;
  set KF0FM001 initial;
  ;
  /* ***********************************************************************/
  /* * Hide the season heading on the map.                                **/
  /* ***********************************************************************/
  ;
  set KF0FM001.KF0FM-SEASON-HEADING invisible, skip;
  set KF0FM001.KF0FM-SEASON-YR-DESC invisible, skip;
  ;
  /* ***********************************************************************/
  /* * Initialise the save areas.                                         **/
  /* ***********************************************************************/
  ;
  set KF0FW02 empty;
  set KF0FW03 empty;
  set KF0FW04 empty;
  set KF0FW09 empty;
  ;
  /* ***********************************************************************/
  /* * Initialise the indexes and page numbers -  this will prevent       **/
  /* * scrolling from taking place on a blank map.                        **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-RESTART-INDEX = 1;
  KF0FW01.KF0FW-CURRENT-PAGE = 1;
  KF0FW01.KF0FW-HIGHEST-PAGE = 0;
  ;
  /* ***********************************************************************/
  /* * Reset the map attributes - this will hide all blank map lines.     **/
  /* ***********************************************************************/
  ;
  KF0FS-RESET-ATTR();
end // end KF0FS-INIT-SCRN

// Initialise selection table
Function KF0FS-INIT-SEL-TBL()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE SELECTION TABLE                                **/
  /* * PURPOSE: Initialise the selection table.                           **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SELECT-INDEX = 1;
  ;
  while (KF0FW01.KF0FW-SELECT-INDEX <= KF0FW01.KF0FW-MAX-SELECT)
    ;
    KFWREC.XXX-STAT[KF0FW-SELECT-INDEX] = " ";
    KFWREC.CU-CO-ID[KF0FW-SELECT-INDEX] = 0;
    KFWREC.CU-STOR-ID[KF0FW-SELECT-INDEX] = 0;
    KFWREC.XNX-DEPT-ID-XREF[KF0FW-SELECT-INDEX] = 0;
    KFWREC.YSB-SLS-RESP-CD[KF0FW-SELECT-INDEX] = " ";
    ;
    KF0FW01.KF0FW-SELECT-INDEX = KF0FW01.KF0FW-SELECT-INDEX + 1;
    ;
  end
end // end KF0FS-INIT-SEL-TBL

// Initialise the season index
Function KF0FS-INIT-SSN-INX()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE THE SEASON INDEX                               **/
  /* * PURPOSE: Sets up an index that points to the previous season code &**/
  /* *          year as indicated by the control card in VKOCTL01.        **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * If a popup has been requested from KF0E then we load the season key**/
  /* * with the code and year passed from the subsystem record. Otherwise,**/
  /* * get the season code and year from the control card before loading  **/
  /* * the season key.                                                    **/
  /* ***********************************************************************/
  ;
  if (KF0FW01.KF0FW-POPUP-IND == "Y"
   && COMMAREA.CAFROMAP == "KF0E")
    KF0FW01.KF0FW-YNS-SESN-YR = KFWREC.YNS-SESN-YR;
    KF0FW01.XSE-SESN-CD = KFWREC.XSE-SESN-CD;
    KF0FW01.YNS-BUS-FUNC-ID = "COM";
  else
    KF0FS-GET-CNTL-CRD();
    KF0FW01.KF0FW-YNS-SESN-YR = VKOCTL01.CO-CURR-YNS-YR; /* curr sesn*/
    KF0FW01.KF0FW-YNS-SESN-YR = KF0FW01.KF0FW-YNS-SESN-YR - 1; /* set 2bak*/
    KF0FW01.XSE-SESN-CD = VKOCTL01.CO-CURR-XSE-CD;
    KF0FW01.YNS-BUS-FUNC-ID = "COM";
  end
  ;
  /* ***********************************************************************/
  /* * If the twoback season code and year exists in the YNSTBL table,    **/
  /* * set up the season index and move the season description to the map **/
  /* * heading.                                                           **/
  /* ***********************************************************************/
  ;
  if (KF0FW01.KF0FW-SEASON-KEY in YNSTBL.YNS-RECORD-KEY)
    KF0FW01.KF0FW-SEASON-INDEX = sysVar.arrayIndex;
    KF0FW01.KF0FW-SEASON-INDEX-2 = sysVar.arrayIndex;
    KF0FM001.KF0FM-SEASON-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0FW-SEASON-INDEX];
  else /* Previous season code & year not found*/
    ;
  /* ***********************************************************************/
  /* * If the previous season code and year isn't found in the YNSTBL     **/
  /* * table, return to KF0A and display an appropriate message.          **/
  /* ***********************************************************************/
    ;
    KFWREC.KFW-MSGNO = 45; /* unable to determine season msg*/
    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
    COMMAREA.CATOAP = "KF0A";
    COMMAREA.CAITEM = " ";
    XSEXIT();
    KF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
end // end KF0FS-INIT-SSN-INX

// Initialize
Function KF0FS-INITIALIZE()
  /* ***********************************************************************/
  /* *  MODULE: INITIALIZE                                                **/
  /* * PURPOSE: Performs all application initialization, builds the       **/
  /* *          first map page and loads it to the map.                   **/
  /* ***********************************************************************/
  ;
  set KFWREC empty; /* subsystem record*/
  ;
  KF0FW01.KF0FW-MAX-PER-PAGE = 12; /* 12 detail lines per page*/
  KF0FW01.KF0FW-MAX-SELECT = 25; /* max selections allowed*/
  KF0FW01.KF0FW-MAX-RESTART-PER-PAGE = 100; /* 100 recs per page*/
  KF0FW01.TA5APPID = "KF0F"; /* application name*/
  KF0FW01.KF0FW-POPUP-IND = "N"; /* set popup up indicator to No*/
  KF0FW01.KF0FW-CONFIRM-FLAG = "N"; /* confirm season change flag*/
  KF0FW01.KF0FW-TSQ-REC-LENGTH = 1100; /* record length of restart tbl*/
  ;
  sysVar.errorCode = "00000000";
  ;
  KF0FS-INIT-SCRN(); /* initalise the screen*/
  ;
  if (COMMAREA.CAFRMSYS == "KF") /* from same system*/
    KFWREC.KFW-GROUP = COMMAREA.CAUSERA;
    KF0FW01.KF0FW-POPUP-IND = KFWREC.KFW-POPUP-IND;
    KFWREC.KFW-POPUP-IND = "N"; /* reset subsys popup ind*/
  end
  ;
  KF0FS-INIT-SSN-INX(); /* initialise the season index*/
  ;
  /* ***********************************************************************/
  /* * Check to see if a popup has been requested from KF0E. If so,       **/
  /* * perform all popup initialisation and process the agency.           **/
  /* ***********************************************************************/
  ;
  if (COMMAREA.CAFROMAP == "KF0E"
   && KF0FW01.KF0FW-POPUP-IND == "Y")
    KF0FS-INIT-POPUP();
    KF0FS-NEW-AGENCY();
  else
    ;
  /* ***********************************************************************/
  /* * Check to see if we are being fastpathed into. If so, load the      **/
  /* * agency id to the map and current header records and then process   **/
  /* * the agency.                                                        **/
  /* ***********************************************************************/
    ;
    if (COMMAREA.CAITEM != " ")
      KF0FM001.KF0FM-SM-SAGCY-ID = COMMAREA.CAITEM;
      KF0FW02.SM-SAGCY-ID = COMMAREA.CAITEM;
      KF0FS-NEW-AGENCY();
    else
      ;
  /* ***********************************************************************/
  /* * Check to see if we are being PF keyed into. If so, load the agency **/
  /* * id to the map and current header records and then process the      **/
  /* * agency.                                                            **/
  /* ***********************************************************************/
      ;
      if (KFWREC.SM-SAGCY-ID != " ")
        KF0FM001.KF0FM-SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
        KF0FW02.SM-SAGCY-ID = KFWREC.SM-SAGCY-ID;
        KF0FS-NEW-AGENCY();
      else
        KF0FS-RESET-ATTR();
      end
    end
  end
end // end KF0FS-INITIALIZE

// Load selections
Function KF0FS-LOAD-SELECT()
  /* ***********************************************************************/
  /* *  MODULE: LOAD SELECTIONS                                           **/
  /* * PURPOSE: Searches the selection table for the current selection and**/
  /* *          if found, moves an x to the selection field.              **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE)
    ;
    if (KF0FW04.CU-CO-ID[KF0FW-SCREEN-INDEX] != 0)
      ;
      if (KF0FW04.KF0FW-SELECTION-KEY-FLDS[KF0FW-SCREEN-INDEX]
       in KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE)
        ;
  /* ***********************************************************************/
  /* * Selection found.                                                   **/
  /* ***********************************************************************/
        ;
        KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] = "X";
        KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] = "X";
        ;
      else
        ;
  /* ***********************************************************************/
  /* * Selection not found.                                               **/
  /* ***********************************************************************/
        ;
        KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] = " ";
        KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] = " ";
        ;
      end
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-LOAD-SELECT

// New agency processing
Function KF0FS-NEW-AGENCY()
  /* ***********************************************************************/
  /* *  MODULE: NEW AGENCY PROCESSING                                     **/
  /* * PURPOSE: Processing that is carried out when the agency is changed.**/
  /* ***********************************************************************/
  ;
  if (KF0FM001.KF0FM-SM-SAGCY-ID != KFWREC.SM-SAGCY-ID) /* new agency*/
    KFWREC.SM-SREP-ID = 0; /* reset rep ID*/
    if (KF0FW02.SM-SAGCY-ID == "ALL") /* reset agency id*/
      KFWREC.SM-SAGCY-ID = " ";
    else
      KFWREC.SM-SAGCY-ID = KF0FM001.KF0FM-SM-SAGCY-ID;
    end
  end
  ;
  set KF0FM001.KF0FM-SEASON-HEADING invisible, skip; /* hide season info*/
  set KF0FM001.KF0FM-SEASON-YR-DESC invisible, skip;
  ;
  set KF0FW04 empty; /* saved adjustments area*/
  ;
  /* ***********************************************************************/
  /* * Only validate the agency id if it isn't 'ALL'.                     **/
  /* ***********************************************************************/
  ;
  if (KF0FW02.SM-SAGCY-ID == "ALL")
    KF0FW03.SM-SAGCY-ID = KF0FW02.SM-SAGCY-ID;
    KF0FM001.KF0FM-SM-SAGCY-NM = "ALL AGENCIES";
  else
    KF0FS-EDIT-AGENCY(); /* validate agency*/
  end
  ;
  if (converseVar.validationMsgNum == 0 /* agency valid or*/
   || KF0FW02.SM-SAGCY-ID == "ALL")     /* agency of 'ALL' entered*/
    ;
    KF0FW01.KF0FW-SELECTION-COUNT = 0; /* reset selection counter*/
    ;
    KF0FW01.KF0FW-SEASON-INDEX = KF0FW01.KF0FW-SEASON-INDEX-2; /* reset season to prev season*/
    ;
    KF0FM001.KF0FM-SEASON-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0FW-SEASON-INDEX];
    ;
    set KF0FM001.KF0FM-SEASON-HEADING bold, skip; /* show season info*/
    set KF0FM001.KF0FM-SEASON-YR-DESC bold, skip;
    ;
    KF0FW01.KF0FW-HIGHEST-PAGE = 0; /* highest page written to TS*/
    KF0FW01.KF0FW-CURRENT-PAGE = 1; /* current page*/
    ;
    KF0FS-INIT-RST-TBL(); /* initialise restart table*/
    ;
    KF0FS-INIT-SEL-TBL(); /* initialise selections table*/
    ;
    KF0FS-CHK-SECURITY(); /* check security*/
    ;
    if (KFWREC.KFW-SCRTY-LVL-CD != "0" /* access not denied*/
     && converseVar.validationMsgNum == 0) /* and no security errors*/
      KF0FS-BUILD-MAP(); /* build map page*/
      if (KF0FW04.CU-CO-ID[1] == 0 /* no data*/
       && KF0FW01.KF0FW-POPUP-IND == "N")
        KF0FS-NO-DATA-MSG(); /* display appropriate message*/
      else
        if (KF0FW04.CU-CO-ID[1] == 0 /* no data*/
         || KF0FW04.CU-CO-ID[2] == 0) /* only one row found*/
          if (KF0FW01.KF0FW-POPUP-IND == "Y")
            if (KF0FW04.CU-CO-ID[2] == 0) /* only one row found*/
              KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[1] = KF0FW04.KF0FW-SELECTION-KEY-FLDS[1];
            end
            COMMAREA.CATOAP = "KF0E";
            COMMAREA.CAITEM = " ";
            COMMAREA.CAUSERA = " ";
            KFWREC.KFW-POPUP-IND = "Y";
            COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
            XSEXIT(); /* transfer to KF0E*/
            ;
            KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
            ;
          end
        end
      end
    end
  end
  ;
  KF0FS-FMT-MAP-DTL(); /* move saved adjustments info to map*/
  ;
  KF0FS-RESET-ATTR(); /* reset map attributes*/
  ;
end // end KF0FS-NEW-AGENCY

// Compose the 'no data' msg
Function KF0FS-NO-DATA-MSG()
  /* ***********************************************************************/
  /* *  MODULE: NO DATA MESSAGE                                           **/
  /* * PURPOSE: Compose the 'no data' message based on the level code     **/
  /* *          passed back from the check security module.               **/
  /* ***********************************************************************/
  ;
  if (KFWREC.KFW-SCRTY-LVL-CD == "1"
   && KF0FW02.SM-SAGCY-ID == "ALL")
    KF0FW01.KF0FW-MESSAGE-TEXT-1 = "NO ADJUSTMENTS FOUND FOR SEASON ";
    KF0FW01.KF0FW-SESN-YR-DESC-1 = KF0FM001.KF0FM-SEASON-YR-DESC;
    KF0FM001.KF0FM-MESSAGE = KF0FW01.KF0FW-MESSAGE-1;
  else
    if (KFWREC.KFW-SCRTY-LVL-CD == "1"
     && KF0FW02.SM-SAGCY-ID != "ALL")
      KF0FW01.KF0FW-MESSAGE-TEXT-2 = "NO ADJUSTMENTS FOUND FOR AGENCY ";
      KF0FW01.KF0FW-SM-SAGCY-ID-2 = KF0FW02.SM-SAGCY-ID;
      KF0FM001.KF0FM-MESSAGE = KF0FW01.KF0FW-MESSAGE-2;
    else
      if (KFWREC.KFW-SCRTY-LVL-CD == "2")
        KF0FW01.KF0FW-MESSAGE-TEXT-2 = "NO ADJUSTMENTS FOUND FOR AGENCY ";
        KF0FW01.KF0FW-SM-SAGCY-ID-2 = KFWREC.KFW-USER-SM-SAGCY-ID;
        KF0FM001.KF0FM-MESSAGE = KF0FW01.KF0FW-MESSAGE-2;
      else
        if (KFWREC.KFW-SCRTY-LVL-CD == "3")
          KF0FW01.KF0FW-MESSAGE-TEXT-3 = "NO ADJUSTMENTS FOUND FOR REP ";
          KF0FW01.KF0FW-SM-SREP-ID-3 = KFWREC.KFW-USER-SM-SREP-ID;
          KF0FM001.KF0FM-MESSAGE = KF0FW01.KF0FW-MESSAGE-3;
        else
          if (KFWREC.KFW-SCRTY-LVL-CD == "4")
            KF0FW01.KF0FW-MESSAGE-TEXT-41 = "NO ADJUSTMENTS FOUND FOR AGENCY ";
            KF0FW01.KF0FW-SM-SAGCY-ID-4 = KFWREC.KFW-USER-SM-SAGCY-ID;
            KF0FW01.KF0FW-MESSAGE-TEXT-42 = " AND REP ";
            KF0FW01.KF0FW-SM-SREP-ID-4 = KFWREC.KFW-USER-SM-SREP-ID;
            KF0FM001.KF0FM-MESSAGE = KF0FW01.KF0FW-MESSAGE-4;
          end
        end
      end
    end
  end
end // end KF0FS-NO-DATA-MSG

// Open adjustments cursor
Function KF0FS-OPEN-ADJ-CSR()
  /* ***********************************************************************/
  /* *  MODULE: OPEN ADJUSTMENTS CURSOR                                   **/
  /* * PURPOSE: Opens the adjustments cursor.                             **/
  /* ***********************************************************************/
  ;
  KF0FW09.KF0FW-IO-TASK = "S2"; /* set up call parms*/
  KF0FW09.KF0FW-IO-IND1 = 0;
  call "IO5610" (KF0FW09, SQLCA, VSNADJ01) {isNoRefresh = yes, isExternal = yes}; /* open adjstments csr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/
    ;
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1DBASE = "DCOMM"; /* database name*/
    TA1REC.TA1TBLVU = "VSNADJ01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S2"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO5610"; /* io module*/
    ;
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass control to menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
    ;
  end
  ;
end // end KF0FS-OPEN-ADJ-CSR

// Process enter
Function KF0FS-PROC-ENTER()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS ENTER                                             **/
  /* * PURPOSE: Process the enter key.                                    **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-CONFIRM-FLAG = "N";
  ;
  if (KF0FM001.CATOAP == " ") /* fastpath application and parms blank*/
    if (KF0FM001.CAITEM == " ")
    /* next sentence*/
    else
      KF0FM001.CAITEM = " "; /* parms entered without application*/
    end
  else
    KF0FS-PROC-FPATH(); /* process fpath*/
    if (converseVar.validationMsgNum != 0
     || KF0FM001.KF0FM-MESSAGE != " ") /* error occurred*/
      return;
    end
  end
  ;
  if (KF0FW02.SM-SAGCY-ID == " ") /* blank agency id*/
    KF0FS-INIT-SCRN(); /* initialise screen fields*/
    set KF0FM001.KF0FM-SM-SAGCY-ID cursor, bold;
    converseLib.validationFailed(48); /* enter agency id or 'ALL' msg*/
  else /* agency id not blank*/
    ;
    if (KF0FW02.SM-SAGCY-ID != 
    KF0FW03.SM-SAGCY-ID) /* agency id changed*/
      KF0FS-NEW-AGENCY(); /* process new agency*/
    else /* agency id not changed*/
      ;
      KF0FS-EDIT-SELECT(); /* edit selections*/
      KF0FS-SELECT-ERROR(); /* check for error*/
      if (converseVar.validationMsgNum == 0) /* no errors*/
        ;
        if (KF0FW01.KF0FW-SELECTION-COUNT == 0) /* no selection made*/
          converseLib.validationFailed(42); /* no changes have been made msg*/
        else /* 1-25 selections made*/
          ;
          KF0FS-DEL-SELECT(); /* process deleted selections*/
          KF0FS-ADD-SELECT(); /* process new selections*/
          KF0FS-SORT-SELECT(); /* sort the selections*/
          ;
          KFWREC.XSE-SESN-CD = YNSTBL.XSE-SESN-CD[KF0FW-SEASON-INDEX];
          KFWREC.YNS-SESN-YR = YNSTBL.YNS-SESN-YR[KF0FW-SEASON-INDEX];
          ;
          COMMAREA.CATOAP = "KF0E";
          COMMAREA.CAITEM = " ";
          COMMAREA.CAUSERA = " ";
          KFWREC.KFW-POPUP-IND = "Y";
          COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
          XSEXIT(); /* transfer to KF0E*/
          ;
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
          ;
        end
      end
    end
  end
  ;
end // end KF0FS-PROC-ENTER

// Process fast path
Function KF0FS-PROC-FPATH()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS FASTPATH                                          **/
  /* * PURPOSE: Process the entered fastpath.                             **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * If the agency id has changed and/or the selections have changed,   **/
  /* * issue a message informing the user that they cannot fastpath with  **/
  /* * changes.                                                           **/
  /* ***********************************************************************/
  ;
  KF0FS-SELECT-CHG(); /* determine if selections have changed*/
  ;
  if (KF0FW02.KF0FW-CURR-HDR-INPUT-FLDS 
   != KF0FW03.KF0FW-PREV-HDR-INPUT-FLDS /* header change*/
   || KF0FW01.KF0FW-DETAIL-CHG-FLG == "Y") /* detail change*/
    ;
    set KF0FM001.CATOAP cursor, bold;
    set KF0FM001.CAITEM bold;
    converseLib.validationFailed(30); /* fpath with changes msg*/
    ;
  else
    ;
    COMMAREA.CATOAP = KF0FM001.CATOAP; /* move to commarea*/
    COMMAREA.CAITEM = KF0FM001.CAITEM;
    COMMAREA.CAUSERA = " "; /* clear user area*/
    ;
    if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* transfer in KF system*/
      KFWREC.KFW-POPUP-IND = "N";
      COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
    end
    ;
    XSEXIT(); /* transfer control*/
    ;
  /* ***********************************************************************/
  /* * Transfer failed so reload map data and indicate an error occurred. **/
  /* ***********************************************************************/
    ;
    KF0FS-NEW-AGENCY(); /* reload map data*/
    ;
    set KF0FM001.CATOAP cursor, bold;
    set KF0FM001.CAITEM bold;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* transfer failed msg*/
    ;
  end
  ;
end // end KF0FS-PROC-FPATH

// Process PA2 key
Function KF0FS-PROC-PA2()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PA2                                               **/
  /* * PURPOSE: Process the PA2 key.                                      **/
  /* ***********************************************************************/
  ;
  KF0FS-INIT-SCRN(); /* initialise the screen fields*/
  ;
  KF0FW01.KF0FW-CONFIRM-FLAG = "N";
  ;
end // end KF0FS-PROC-PA2

// Process PF keys
Function KF0FS-PROC-PF-KEYS()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PF KEYS                                           **/
  /* * PURPOSE: Process the PF1, PF3 and PF4 keys.                        **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-CONFIRM-FLAG = "N";
  ;
  /* ***********************************************************************/
  /* * Check for PF key and fastpath entry.                               **/
  /* ***********************************************************************/
  ;
  if (KF0FM001.CATOAP != " "
   || KF0FM001.CAITEM != " ")
    set KF0FM001.CATOAP cursor, bold;
    set KF0FM001.CAITEM bold;
    converseLib.validationFailed(30); /* cannot PF key with fast path*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    ;
  /* ***********************************************************************/
  /* * Transfer to the HELP system.                                       **/
  /* ***********************************************************************/
    ;
    if (converseVar.eventKey is pf1) /* help requested*/
      COMMAREA.CAUSERA = " ";
      XSPF1(); /* transfer to help system*/
      KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* error occurred*/
    end
    ;
  /* ***********************************************************************/
  /* * Transfer to KF0A.                                                  **/
  /* ***********************************************************************/
    ;
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "KF0A";
      COMMAREA.CAITEM = " ";
      COMMAREA.CAUSERA = " ";
      COMMAREA.CAUSERA = KFWREC.KFW-GROUP;
      XSEXIT(); /* pass control*/
      KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* error occurred*/
    end
    ;
  /* ***********************************************************************/
  /* * Transfer to the GOAL menu.                                         **/
  /* ***********************************************************************/
    ;
    if (converseVar.eventKey is pf4) /* transfer to MN0M requested*/
      COMMAREA.CAITEM = " ";
      COMMAREA.CAUSERA = " ";
      XSPF4(); /* pass control*/
      KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* error occurred*/
    end
  end
  ;
end // end KF0FS-PROC-PF-KEYS

// Process scroll
Function KF0FS-PROC-PF-SCRL()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS SCROLL                                            **/
  /* * PURPOSE: Process PF7 (scroll backwards) or PF8 (scroll forwards).  **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * If the agency id has been modified, issue a message informing the  **/
  /* * user that they cannot PF key with changes.                         **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-CONFIRM-FLAG = "N";
  ;
  if (KF0FW02.KF0FW-CURR-HDR-INPUT-FLDS
   != KF0FW03.KF0FW-PREV-HDR-INPUT-FLDS) /* agency changed*/
    set KF0FM001.KF0FM-SM-SAGCY-ID cursor, bold;
    converseLib.validationFailed(31); /* cannot pf key with changes msg*/
  else /* agency unchanged*/
    ;
  /* ***********************************************************************/
  /* * If the fastpath fields are not blank, issue a message informing the**/
  /* * user that they cannot PF key and fastpath at the same time.        **/
  /* ***********************************************************************/
    ;
    if (KF0FM001.CATOAP != " "
     || KF0FM001.CAITEM != " ") /* fpath not blank*/
      converseLib.validationFailed(4); /* cannot pf key with fast path msg*/
    end
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    ;
  /* ***********************************************************************/
  /* * Before processing the scroll key, edit the current map page to     **/
  /* * prevent more than 25 selections from being made.                   **/
  /* ***********************************************************************/
    ;
    KF0FS-EDIT-SELECT(); /* edit selections to determine if > 25*/
    KF0FS-SELECT-ERROR(); /* check for error*/
    ;
    if (converseVar.validationMsgNum == 0) /* no errors*/
      ;
  /* ***********************************************************************/
  /* * Process all deleted and added selections by deleting or adding     **/
  /* * entries to the selection table. DELETIONS MUST BE HANDLED FIRST TO **/
  /* * PROVIDE THE BLANK SELECTION RECORDS IN THE SELECTION TABLE FOR ANY **/
  /* * ADDED SELECTIONS TO BE INSERTED INTO.                              **/
  /* ***********************************************************************/
      ;
      KF0FS-DEL-SELECT(); /* process deleted selections*/
      KF0FS-ADD-SELECT(); /* process added selections*/
      ;
      if (converseVar.validationMsgNum == 0) /* no errors*/
        ;
  /* ***********************************************************************/
  /* * Process PF7 or PF8 depending on which key has been pressed.        **/
  /* ***********************************************************************/
        ;
        if (converseVar.eventKey is pf7) /* PF7 pressed*/
          KF0FS-PROC-PF7(); /* process PF7*/
        else /* PF8 pressed*/
          KF0FS-PROC-PF8(); /* process PF8*/
        end
        ;
  /* ***********************************************************************/
  /* * If no errors, build the map page, move the saved adjustments area to*/
  /* * the actual map and reset the attributes to hide any blank lines.   **/
  /* * Finally, set the corresponding selection field to 'x', if any      **/
  /* * selections are found in the selection table for the entries on the **/
  /* * new map page.                                                      **/
  /* ***********************************************************************/
        ;
        if (converseVar.validationMsgNum == 0) /* no errors*/
          KF0FS-BUILD-MAP(); /* build the map page*/
          ;
  /* ***********************************************************************/
  /* * If the first map line of the new map page is empty, then there are **/
  /* * no more adjustment rows on the database. Reset to the previous page**/
  /* * by simulating a PF7.                                               **/
  /* ***********************************************************************/
          ;
          if (KF0FW04.CU-CO-ID[1] == 0) /* 1st line is blank*/
            KF0FS-PROC-PF7(); /* simulate a PF7*/
            converseLib.validationFailed(9); /* cannot page down any further*/
            KF0FS-BUILD-MAP(); /* build the map page*/
          end
          KF0FS-FMT-MAP-DTL(); /* format the map*/
          KF0FS-RESET-ATTR(); /* reset the map attributes*/
          KF0FS-LOAD-SELECT(); /* load any selections for the new map*/
        end
      end
    end
  end
  ;
end // end KF0FS-PROC-PF-SCRL

// Process season
Function KF0FS-PROC-PF-SESN()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS SEASON                                            **/
  /* * PURPOSE: Process the PF19 and PF20 keys.                           **/
  /* ***********************************************************************/
  ;
  KF0FS-EDIT-SELECT();
  ;
  /* ***********************************************************************/
  /* * Check for PF key and fastpath entry.                               **/
  /* ***********************************************************************/
  ;
  if (KF0FM001.CATOAP != " "
   || KF0FM001.CAITEM != " ")
    set KF0FM001.CATOAP cursor, bold;
    set KF0FM001.CAITEM bold;
    converseLib.validationFailed(30); /* cannot PF key with fast path*/
  else
    ;
  /* ***********************************************************************/
  /* * Check for blank agency id.                                         **/
  /* ***********************************************************************/
    ;
    if (KF0FW02.SM-SAGCY-ID == " ")
      set KF0FM001.KF0FM-SM-SAGCY-ID cursor, bold;
      converseLib.validationFailed(48); /* enter agency id or 'ALL' msg*/
    else
      ;
  /* ***********************************************************************/
  /* * Check for access denied.                                           **/
  /* ***********************************************************************/
      ;
      if (KFWREC.KFW-ACCESS-IND == "N")
        converseLib.validationFailed(6); /* access denied msg*/
      end
    end
  end
  ;
  if (KF0FW01.KF0FW-CONFIRM-FLAG == "N" /* confirm season change*/
   && KF0FW01.KF0FW-SELECTION-COUNT > 0 /* if selections were made*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (converseVar.eventKey is pf19)
      converseLib.validationFailed(49);
    else
      converseLib.validationFailed(50);
    end
    KF0FW01.KF0FW-CONFIRM-FLAG = "Y";
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    ;
  /* ***********************************************************************/
  /* * PF19 pressed indicates previous season requested. Decrement the    **/
  /* * season index and check to see if it is the last permissable season.**/
  /* * If so, display an appropriate error message.                       **/
  /* ***********************************************************************/
    ;
    KF0FW01.KF0FW-CONFIRM-FLAG = "N";
    ;
    if (converseVar.eventKey is pf19)
      KF0FW01.KF0FW-SEASON-INDEX = KF0FW01.KF0FW-SEASON-INDEX - 1;
      ;
      if (KF0FW01.KF0FW-SEASON-INDEX == 0
       || YNSTBL.YNS-BUS-FUNC-ID[KF0FW-SEASON-INDEX] != "COM")
        ;
        converseLib.validationFailed(10); /* info for earliest season is displayed*/
        KF0FW01.KF0FW-SEASON-INDEX = KF0FW01.KF0FW-SEASON-INDEX + 1;
      end
    end
    ;
  /* ***********************************************************************/
  /* * PF20 pressed indicates the next season requested. Increment the    **/
  /* * season index and check to see if it is the last permissable season.**/
  /* * If so, display an appropriate error message.                       **/
  /* ***********************************************************************/
    ;
    if (converseVar.eventKey is pf20)
      KF0FW01.KF0FW-SEASON-INDEX = KF0FW01.KF0FW-SEASON-INDEX + 1;
      ;
      if (KF0FW01.KF0FW-SEASON-INDEX == 99
       || YNSTBL.YNS-BUS-FUNC-ID[KF0FW-SEASON-INDEX] != "COM")
        ;
        converseLib.validationFailed(11); /* info for latest season is displayed*/
        KF0FW01.KF0FW-SEASON-INDEX = KF0FW01.KF0FW-SEASON-INDEX - 1;
      end
    end
    ;
    if (converseVar.validationMsgNum == 0) /* no errors*/
      ;
  /* ***********************************************************************/
  /* * Initialise WS recs and variables and build the first map page for  **/
  /* * the new season. If no data exists for the new season, display an   **/
  /* * appropriate message. Format the new map page and reset the map     **/
  /* * attributes to hide any blank lines.                                **/
  /* ***********************************************************************/
      ;
      KF0FM001.KF0FM-SEASON-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0FW-SEASON-INDEX];
      ;
      set KF0FW04 empty; /* initialise saved adjustments area*/
      ;
      KF0FW01.KF0FW-HIGHEST-PAGE = 0; /* initialise page counters*/
      KF0FW01.KF0FW-CURRENT-PAGE = 1;
      ;
      KF0FW01.KF0FW-SELECTION-COUNT = 0; /* reset selection counter*/
      ;
      KF0FS-INIT-RST-TBL(); /* initialise restart table*/
      ;
      KF0FS-INIT-SEL-TBL(); /* initialise selection table*/
      ;
      KF0FS-BUILD-MAP(); /* build the map page*/
      ;
      if (KF0FW04.CU-CO-ID == 0) /* no data for new season*/
        KF0FS-NO-DATA-MSG(); /* display no data message*/
      end
      ;
      KF0FS-FMT-MAP-DTL(); /* format the map page*/
      KF0FS-RESET-ATTR(); /* reset map attributes*/
    end
  end
  ;
end // end KF0FS-PROC-PF-SESN

// Process the PF7 key
Function KF0FS-PROC-PF7()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PF7                                               **/
  /* * PURPOSE: Process PF7 (scroll backwards).                           **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * If we are looking at the first entry on the first page then we     **/
  /* * cannot page up any further.                                        **/
  /* ***********************************************************************/
  ;
  if (KF0FW01.KF0FW-CURRENT-PAGE == 1 /* first page*/
   && KF0FW01.KF0FW-RESTART-INDEX == 1) /* first entry*/
    converseLib.validationFailed(3); /* cannot page up any further msg*/
  else
    KF0FW01.KF0FW-RESTART-INDEX = KF0FW01.KF0FW-RESTART-INDEX - 1;
    ;
  /* ***********************************************************************/
  /* * If we are looking at the first entry on the page, read the previous**/
  /* * page from TS and reset the restart index to point to the last      **/
  /* * record on the new page.                                            **/
  /* ***********************************************************************/
    ;
    if (KF0FW01.KF0FW-RESTART-INDEX < 1) /* no more previous records*/
      KF0FW01.KF0FW-RESTART-INDEX = KF0FW01.KF0FW-MAX-RESTART-PER-PAGE; /* reset index to last entry*/
      KF0FW01.KF0FW-CURRENT-PAGE = KF0FW01.KF0FW-CURRENT-PAGE - 1; /* determine previous page #*/
      TA5REC.TA5TSQIX = KF0FW01.KF0FW-CURRENT-PAGE;
      KF0FS-RD-TMP-STRG(); /* read previous page # from TS*/
      set KF0FW04 empty; /* initialise saved adjustments area*/
    end
  end
  ;
end // end KF0FS-PROC-PF7

// Process the PF8 key
Function KF0FS-PROC-PF8()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PF8                                               **/
  /* * PURPOSE: Process PF8 (scroll forwards).                            **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * If the last entry on the map is blank, then we cannot page down any**/
  /* * further.                                                           **/
  /* ***********************************************************************/
  ;
  if (KF0FW04.CU-CO-ID[KF0FW-MAX-PER-PAGE] == 0)
    converseLib.validationFailed(9); /* cannot page down any further msg*/
  else
    ;
  /* ***********************************************************************/
  /* * Increment the restart index and if the end of the table has been   **/
  /* * reached, determine whether to add the current page to TS or read   **/
  /* * the next page from TS.                                             **/
  /* ***********************************************************************/
    ;
    KF0FW01.KF0FW-RESTART-INDEX = KF0FW01.KF0FW-RESTART-INDEX + 1;
    if (KF0FW01.KF0FW-RESTART-INDEX > KF0FW01.KF0FW-MAX-RESTART-PER-PAGE)
      ;
  /* ***********************************************************************/
  /* * If the current page is greater than the highest page written to TS,**/
  /* * then add the current page to TS and increment the current and      **/
  /* * highest page variables.                                            **/
  /* ***********************************************************************/
      ;
      if (KF0FW01.KF0FW-CURRENT-PAGE > KF0FW01.KF0FW-HIGHEST-PAGE)
        KF0FS-ADD-TMP-STRG();
        KF0FW01.KF0FW-CURRENT-PAGE = KF0FW01.KF0FW-CURRENT-PAGE + 1;
        KF0FW01.KF0FW-HIGHEST-PAGE = KF0FW01.KF0FW-HIGHEST-PAGE + 1;
      else
        ;
  /* ***********************************************************************/
  /* * If the current page is less than the highest page written to TS,   **/
  /* * then the current page already exists in TS and the next page needs **/
  /* * to be read from TS.                                                **/
  /* ***********************************************************************/
        ;
        if (KF0FW01.KF0FW-CURRENT-PAGE < KF0FW01.KF0FW-HIGHEST-PAGE)
          KF0FW01.KF0FW-CURRENT-PAGE = KF0FW01.KF0FW-CURRENT-PAGE + 1;
          KF0FS-RD-TMP-STRG();
        else
          ;
  /* ***********************************************************************/
  /* * If the current page is equal to the highest page written to TS,    **/
  /* * then increment the current page number.                            **/
  /* ***********************************************************************/
          ;
          if (KF0FW01.KF0FW-CURRENT-PAGE == KF0FW01.KF0FW-HIGHEST-PAGE)
            KF0FW01.KF0FW-CURRENT-PAGE = KF0FW01.KF0FW-CURRENT-PAGE + 1;
          end
        end
      end
      ;
  /* ***********************************************************************/
  /* * Initialise the restart table and the restart index.                **/
  /* ***********************************************************************/
      ;
      set KF0FW06 empty;
      KF0FW01.KF0FW-RESTART-INDEX = 1;
    end
    ;
  /* ***********************************************************************/
  /* * Move the last map line key fields to the restart table record.     **/
  /* ***********************************************************************/
    ;
    KF0FW06.KF0FW-RESTART-LINE[KF0FW-RESTART-INDEX] = KF0FW04.KF0FW-SELECTION-KEY-FLDS[KF0FW-MAX-PER-PAGE];
    set KF0FW04 empty;
  end
  ;
end // end KF0FS-PROC-PF8

// Process print request
Function KF0FS-PROC-PRINT()
  ;
           /* If there is not enought information to print the report,*/
           /* issue an error message.*/
  ;
           /* Determine if the program is running on the production*/
           /* or development machine.*/
  ;
           /* Set up the parm record and move the JCL (either production*/
           /* or test, whichever applies) to the TA0P parameter table.*/
  ;
           /* Set up the TA0P execution parameters and execute TA0P.*/
  ;
           /* Determine if the job was submitted successfully, and*/
           /* issue an appropriate message.*/
  ;
  ;
  KF0FW01.KF0FW-CONFIRM-FLAG = "N";
  ;
  if (KF0FM001.KF0FM-SM-SAGCY-ID > " " /* agency is present*/
   && KF0FM001.KF0FM-CU-CO-ID[1] > 0)  /* data is present*/
                                         /* ok*/
  else
    converseLib.validationFailed(33); /* no data to report*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no error*/
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN"; /* determine region*/
    ;
    KF0FS-CICS-INFO(); /* get cics info*/
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no error*/
    set KF0FW07 empty; /* set up parameters*/
    KF0FW07.YNS-SESN-YR-DESC = YNSTBL.YNS-SESN-YR-DESC[KF0FW-SEASON-INDEX];
    KF0FW07.XSE-SESN-CD = YNSTBL.XSE-SESN-CD[KF0FW-SEASON-INDEX];
    KF0FW07.YNS-SESN-YR = YNSTBL.YNS-SESN-YR[KF0FW-SEASON-INDEX];
    if (KFWREC.KFW-SCRTY-LVL-CD == 1 /* has access to all agencies*/
     || KFWREC.KFW-SCRTY-LVL-CD == 3)
      if (KF0FM001.KF0FM-SM-SAGCY-ID == "ALL")
        KF0FW07.SM-SAGCY-ID = "*";
      else
        KF0FW07.SM-SAGCY-ID = KF0FM001.KF0FM-SM-SAGCY-ID;
      end
    else /* access to one agency*/
      KF0FW07.SM-SAGCY-ID = KFWREC.KFW-USER-SM-SAGCY-ID;
    end
    if (KFWREC.KFW-SCRTY-LVL-CD == 1 /* has access to all reps*/
     || KFWREC.KFW-SCRTY-LVL-CD == 2)
      KF0FW07.SM-SREP-ID = -1;
    else /* access to one rep*/
      KF0FW07.SM-SREP-ID = KFWREC.KFW-USER-SM-SREP-ID;
    end
    if (KF0FM001.KF0FM-SM-SAGCY-ID == KF0FW07.SM-SAGCY-ID)
      KF0FW07.KF0FW-SM-SAGCY-NM = KF0FM001.KF0FM-SM-SAGCY-NM;
    else
      set SM1REC empty; /* initialise record*/
      SM1REC.SM1AGYID = KF0FW07.SM-SAGCY-ID;
      call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* get agency name*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KF0FW07.KF0FW-SM-SAGCY-NM = SM1REC.SM1AGYNM;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* agency id not found*/
          KF0FW07.KF0FW-SM-SAGCY-NM = "UNKNOWN";
        else /* serious error*/
          set ERRSQLCA empty;
          move SQLCA to ERRSQLCA withV60Compat;
          TA1REC.TA1TYPE = "DB2"; /* db2 error*/
          TA1REC.TA1TYPE = "RETN";
          TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
          TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
          TA1REC.TA1LOCAT[3] = "GET NAME"; /* error location*/
          TA1REC.TA1LOCAT[4] = "IO0050"; /* io module*/
          try
            call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          end /* message formatter*/
          XSPF4(); /* pass control to menu*/
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error*/
        end
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no error*/
    set TA6REC empty; /* clear work area*/
    TA6REC.TA6RTNCD = " "; /* subtroutine return code*/
    TA6REC.TA6SUBSW = "N"; /* get info for jcl*/
    TA6REC.TA6MSGSW = "N"; /* issue message to terminal*/
    TA6REC.TA6-MAX-COND-CODE = 0; /* max valid return code*/
    ;
    while (TA6REC.TA6RTNCD < "0") /* until complete*/
      XPTA0P(); /* call print request*/
    end
    ;
    if (sysVar.errorCode == "00000000" /* good call*/
     && TA6REC.TA6RTNCD == "0")        /* good return / no cancel*/
      ;
      KF0FW07.XURDEST = TA6REC.XURDEST;
      ;
      if (TA3REC.TA3RGNID == "03") /* prod region*/
        KF0FS-PROD-JCL(); /* production jcl*/
      else
        KF0FS-TEST-JCL(); /* test jcl*/
      end
      ;
      TA6REC.TA6SUBSW = "S"; /* tailor & submit jcl*/
      TA6REC.TA6RTNCD = " ";
      ;
      while (TA6REC.TA6RTNCD < "0") /* until complete*/
        XPTA0P(); /* call print request*/
      end
      ;
      if (sysVar.errorCode == "00000000") /* good call*/
        if (TA6REC.TA6RTNCD == "0" /* good return*/
         || TA6REC.TA6RTNCD == "1") /* user cancelled*/
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
        else
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          set TAEREC empty;
          TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
          TAEREC.TAEDESC2 = TA6REC.TA6RTNCD; /* subroutine parms*/
          TA1REC.TA1TYPE = "APPL"; /* application error*/
          TA1REC.TA1FUNC = "POST"; /* post, no abend*/
          TA1REC.TA1LOCAT[1] = "SUB RPT "; /* location*/
          TA1REC.TA1LOCAT[2] = "XPTA0P  "; /* subroutine*/
          try
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          end /* message formatter*/
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
          converseLib.validationFailed(36);
        end
      else
        set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
        set TAEREC empty;
        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
        TAEREC.TAEDESC2 = TA6REC.TA6RTNCD; /* subroutine parms*/
        TA1REC.TA1TYPE = "APPL"; /* application error*/
        TA1REC.TA1FUNC = "POST"; /* post, no abend*/
        TA1REC.TA1LOCAT[1] = "SUB RPT "; /* location*/
        TA1REC.TA1LOCAT[2] = "XPTA0P  "; /* subroutine*/
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end /* message formatter*/
        set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
        KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
        converseLib.validationFailed(36);
      end
    else
      if (sysVar.errorCode != "00000000") /* bad call*/
        set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
        set TAEREC empty;
        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
        TAEREC.TAEDESC2 = TA6REC.TA6RTNCD; /* subroutine parms*/
        TA1REC.TA1TYPE = "APPL"; /* application error*/
        TA1REC.TA1FUNC = "POST"; /* post, no abend*/
        TA1REC.TA1LOCAT[1] = "SUB RPT "; /* location*/
        TA1REC.TA1LOCAT[2] = "XPTA0P  "; /* subroutine*/
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end /* message formatter*/
        set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
        KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
        converseLib.validationFailed(36);
      else
        if (TA6REC.TA6RTNCD == "1") /* user cancelled*/
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
        else
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          set TAEREC empty;
          TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
          TAEREC.TAEDESC2 = TA6REC.TA6RTNCD; /* subroutine parms*/
          TA1REC.TA1TYPE = "APPL"; /* application error*/
          TA1REC.TA1FUNC = "POST"; /* post, no abend*/
          TA1REC.TA1LOCAT[1] = "SUB RPT "; /* location*/
          TA1REC.TA1LOCAT[2] = "XPTA0P  "; /* subroutine*/
          try
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          end /* message formatter*/
          set KF0FM001.KF0FM-MESSAGE normal; /* display message*/
          KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG;
          converseLib.validationFailed(36);
        end
      end
    end
  end
  ;
end // end KF0FS-PROC-PRINT

// Process production JCL
Function KF0FS-PROD-JCL()
  /* ***********************************************************************/
  /* *  MODULE: PRODUCTION JCL                                            **/
  /* * PURPOSE: Process production JCL                                    **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-JCL-INDEX = 1; /* set indexes*/
  TA6REC.TA6INDEX = 1;
  ;
  if (TA6REC.XURDEST == "LOCAL " /* local printer*/
  )                             
    if ("/*EOF" in KF0FT03.TARJCL from KF0FW-JCL-INDEX) /* end of table*/
      KF0FW01.KF0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KF0FW01.KF0FW-JCL-INDEX <= KF0FW01.KF0FW-END-OF-JCL-TABLE)
        if (KF0FT03.TARTYPE[KF0FW-JCL-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FW07.KF0FW-WKF1241-PARMS; /* move to jcl*/
        else /* not parm card*/
          if (KF0FT03.TARTYPE[KF0FW-JCL-INDEX] == "C") /* number of copies*/
            KF0FW08.KF0FW-PRINT-PARMS = KF0FT03.TARJCL[KF0FW-JCL-INDEX];
            KF0FW08.KF0FW-NBR-COPIES = TA6REC.XURCOPY;
            TA6REC.TARJCL[TA6INDEX] = KF0FW08.KF0FW-PRINT-PARMS;
          else /* not parm card*/
            TA6REC.TARJCL[TA6INDEX] = KF0FT03.TARJCL[KF0FW-JCL-INDEX]; /* move jcl*/
            TA6REC.TARTYPE[TA6INDEX] = KF0FT03.TARTYPE[KF0FW-JCL-INDEX]; /* move type*/
          end
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KF0FW01.KF0FW-JCL-INDEX = KF0FW01.KF0FW-JCL-INDEX + 1;
        ;
      end
    else /* bad jcl table*/
      converseLib.validationFailed(37);
    end
    ;
  else /* remote printer*/
    ;
    if ("/*EOF" in KF0FT01.TARJCL from KF0FW-JCL-INDEX) /* end of table*/
      KF0FW01.KF0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KF0FW01.KF0FW-JCL-INDEX <= KF0FW01.KF0FW-END-OF-JCL-TABLE)
        if (KF0FT01.TARTYPE[KF0FW-JCL-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FW07.KF0FW-WKF1241-PARMS; /* move to jcl*/
        else /* not parm card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FT01.TARJCL[KF0FW-JCL-INDEX]; /* move jcl*/
          TA6REC.TARTYPE[TA6INDEX] = KF0FT01.TARTYPE[KF0FW-JCL-INDEX]; /* move type*/
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KF0FW01.KF0FW-JCL-INDEX = KF0FW01.KF0FW-JCL-INDEX + 1;
        ;
      end
    else /* bad jcl table*/
      converseLib.validationFailed(37);
    end
    ;
  end
  ;
end // end KF0FS-PROD-JCL

// Read temp storage page
Function KF0FS-RD-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: READ TEMPORARY STORAGE PAGE                               **/
  /* * PURPOSE: Reads a page from the temporary storage area.             **/
  /* ***********************************************************************/
  ;
  TA5REC.TA5FNCCD = "R"; /* read temp storage*/
  TA5REC.TA5APPID = KF0FW01.TA5APPID; /* application ID*/
  KF0FW06.KF0FW-TEMP-STRG-LENGTH = KF0FW01.KF0FW-TSQ-REC-LENGTH; /* temp storage length*/
  ;
  try
    call "TA0050" (KF0FW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage routine*/
  ;
  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
  /* next sentence*/
  else /* an error occurred*/
    ;
    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1LOCAT[1] = "READ TS "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/
    ;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/
    ;
    XSPF4(); /* pass control to menu*/
    ;
    KF0FM001.KF0FM-MESSAGE = COMMAREA.CAMSG; /* system error msg*/
    ;
  end
  ;
end // end KF0FS-RD-TMP-STRG

// Reset the map attributes
Function KF0FS-RESET-ATTR()
  /* ***********************************************************************/
  /* *  MODULE: RESET MAP ATTRIBUTES                                      **/
  /* * PURPOSE: Reset the map attributes. Darken and protect all blank map**/
  /* *          lines.                                                    **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX
   <= KF0FW01.KF0FW-MAX-PER-PAGE) /* while more map lines*/
    ;
    if (KF0FM001.KF0FM-CU-CO-ID[KF0FW-SCREEN-INDEX] == 0)
      set KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-CU-CO-ID[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-CU-STOR-ID[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-XNX-DEPT-ID-XREF[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-CU-STOR-NM[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-YSB-SLS-RESP-CD[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-MGMT-SAGCY-ID[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-MGMT-SREP-ID[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-CO-CUST-SLS-ADJAMT[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-XXX-STAT[KF0FW-SCREEN-INDEX] invisible, skip;
      set KF0FM001.KF0FM-CO-ADJ-MGR-SLS-FL[KF0FW-SCREEN-INDEX] invisible, skip;
    else
      set KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-CU-CO-ID[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-CU-STOR-ID[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-XNX-DEPT-ID-XREF[KF0FW-SCREEN-INDEX] initialAttributes;
      ;
      set KF0FM001.KF0FM-CU-STOR-NM[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-YSB-SLS-RESP-CD[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-MGMT-SAGCY-ID[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-MGMT-SREP-ID[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-CO-CUST-SLS-ADJAMT[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-XXX-STAT[KF0FW-SCREEN-INDEX] initialAttributes;
      set KF0FM001.KF0FM-CO-ADJ-MGR-SLS-FL[KF0FW-SCREEN-INDEX] initialAttributes;
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1; /* next map line*/
    ;
  end
  ;
  ;
end // end KF0FS-RESET-ATTR

// Determine if selections changd
Function KF0FS-SELECT-CHG()
  /* ***********************************************************************/
  /* *  MODULE: SELECTION CHANGED                                         **/
  /* * PURPOSE: Determine if selection fields have changed.               **/
  /* ***********************************************************************/
  ;
  /* ***********************************************************************/
  /* * A selection field has been changed if it was previously blank and  **/
  /* * now contains a character or if it is now blank and previously      **/
  /* * contained a character. A change is not registered if the selection **/
  /* * field changed from a non blank character to a different non blank  **/
  /* * character.                                                         **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-DETAIL-CHG-FLG = "N";
  ;
  KF0FW01.KF0FW-SCREEN-INDEX = 1; /* initialise to 1st map line*/
  ;
  while (KF0FW01.KF0FW-SCREEN-INDEX <= KF0FW01.KF0FW-MAX-PER-PAGE
   && KF0FW-DETAIL-CHG-FLG == "N")
    ;
    if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] != 
    KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX])
      ;
      if (KF0FM001.KF0FM-SELECT[KF0FW-SCREEN-INDEX] == " "
       || KF0FW04.KF0FW-SELECT[KF0FW-SCREEN-INDEX] == " ")
        ;
        KF0FW01.KF0FW-DETAIL-CHG-FLG = "Y";
        ;
      end
    end
    ;
    KF0FW01.KF0FW-SCREEN-INDEX = KF0FW01.KF0FW-SCREEN-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-SELECT-CHG

// Edit the selection fields
Function KF0FS-SELECT-ERROR()
  /* ***********************************************************************/
  /* *  MODULE: SELECTION ERROR                                           **/
  /* * PURPOSE: Display error if more than 25 selections have been made.  **/
  /* ***********************************************************************/
  ;
  ;
  /* ***********************************************************************/
  /* * If more than 25 selections have been made, display an error and    **/
  /* * reset the counter to its previous value.                           **/
  /* ***********************************************************************/
  ;
  if (KF0FW01.KF0FW-SELECTION-COUNT > 25)
    converseLib.validationFailed(47); /* cannot select more than 25 adj msg*/
    KF0FW01.KF0FW-SELECTION-COUNT = KF0FW01.KF0FW-SELECTION-COUNT-2;
  end
  ;
end // end KF0FS-SELECT-ERROR

// Sort the selection table
Function KF0FS-SORT-SELECT()
  /* ***********************************************************************/
  /* *  MODULE: SORT THE SELECTION TABLE                                  **/
  /* * PURPOSE: Sort the selection table prior to passing control to KF0E.**/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-SELECT-INDEX = 1; /* initialise to 1st selection rec*/
  ;
  while (KF0FW01.KF0FW-SELECT-INDEX
   < KF0FW01.KF0FW-MAX-SELECT)
    ;
    KF0FW01.KF0FW-SELECT-INDEX-2 = KF0FW01.KF0FW-SELECT-INDEX;
    ;
    while (KF0FW01.KF0FW-SELECT-INDEX-2
     < KF0FW01.KF0FW-MAX-SELECT)
      ;
      KF0FW01.KF0FW-SELECT-INDEX-2 = KF0FW01.KF0FW-SELECT-INDEX-2 + 1;
      ;
      if (KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX]
       > KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX-2]
       && KFWREC.CU-CO-ID[KF0FW-SELECT-INDEX-2] != 0)
        ;
        KF0FW01.KF0FW-SAVE-KEY = KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX];
        ;
        KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX] = KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX-2];
        KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX-2] = KF0FW01.KF0FW-SAVE-KEY;
        ;
      else
        ;
        if (KFWREC.CU-CO-ID[KF0FW-SELECT-INDEX] == 0
         && KFWREC.CU-CO-ID[KF0FW-SELECT-INDEX-2] > 0)
          ;
          KF0FW01.KF0FW-SAVE-KEY = KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX];
          ;
          KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX] = KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX-2];
          KFWREC.KFW-SELECTED-ADJUSTMENTS-LINE[KF0FW-SELECT-INDEX-2] = KF0FW01.KF0FW-SAVE-KEY;
          ;
        end
      end
    end
    ;
    KF0FW01.KF0FW-SELECT-INDEX = KF0FW01.KF0FW-SELECT-INDEX + 1;
    ;
  end
  ;
end // end KF0FS-SORT-SELECT

// Process test JCL
Function KF0FS-TEST-JCL()
  /* ***********************************************************************/
  /* *  MODULE: TEST JCL                                                  **/
  /* * PURPOSE: Process the test JCL.                                     **/
  /* ***********************************************************************/
  ;
  KF0FW01.KF0FW-JCL-INDEX = 1; /* set indexes*/
  TA6REC.TA6INDEX = 1;
  ;
  if (TA6REC.XURDEST == "LOCAL ") /* local printer*/
    ;
    if ("/*EOF" in KF0FT04.TARJCL from KF0FW-JCL-INDEX) /* end of table*/
      KF0FW01.KF0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KF0FW01.KF0FW-JCL-INDEX <= KF0FW01.KF0FW-END-OF-JCL-TABLE)
        if (KF0FT04.TARTYPE[KF0FW-JCL-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FW07.KF0FW-WKF1241-PARMS; /* move to jcl*/
        else /* not parm card*/
          if (KF0FT04.TARTYPE[KF0FW-JCL-INDEX] == "C") /* number of copies*/
            KF0FW08.KF0FW-PRINT-PARMS = KF0FT04.TARJCL[KF0FW-JCL-INDEX];
            KF0FW08.KF0FW-NBR-COPIES = TA6REC.XURCOPY;
            TA6REC.TARJCL[TA6INDEX] = KF0FW08.KF0FW-PRINT-PARMS;
          else
            TA6REC.TARJCL[TA6INDEX] = KF0FT04.TARJCL[KF0FW-JCL-INDEX]; /* move jcl*/
            TA6REC.TARTYPE[TA6INDEX] = KF0FT04.TARTYPE[KF0FW-JCL-INDEX]; /* move type*/
          end
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KF0FW01.KF0FW-JCL-INDEX = KF0FW01.KF0FW-JCL-INDEX + 1;
        ;
      end
      ;
    else /* bad jcl table*/
      converseLib.validationFailed(37);
    end
    ;
  else /* remote printer*/
    ;
    if ("/*EOF" in KF0FT02.TARJCL from KF0FW-JCL-INDEX) /* end of table*/
      KF0FW01.KF0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KF0FW01.KF0FW-JCL-INDEX <= KF0FW01.KF0FW-END-OF-JCL-TABLE)
        if (KF0FT02.TARTYPE[KF0FW-JCL-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FW07.KF0FW-WKF1241-PARMS; /* move to jcl*/
        else /* not parm card*/
          TA6REC.TARJCL[TA6INDEX] = KF0FT02.TARJCL[KF0FW-JCL-INDEX]; /* move jcl*/
          TA6REC.TARTYPE[TA6INDEX] = KF0FT02.TARTYPE[KF0FW-JCL-INDEX]; /* move type*/
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KF0FW01.KF0FW-JCL-INDEX = KF0FW01.KF0FW-JCL-INDEX + 1;
        ;
      end
      ;
    else /* bad jcl table*/
      converseLib.validationFailed(37);
    end
    ;
  end
end // end KF0FS-TEST-JCL

//*** RECORD=KF0FW01 ****
// General working storage record for application KF0F.
// 
// ************************************************************
// *                  Maintenance History                     *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   15/01/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW01 type basicRecord
  10 TA5APPID TA5APPID ; 
  10 KF0FW-TSQ-REC-LENGTH KF0FW-TSQ-REC-LENGTH ; 
  10 KF0FW-MORE-ADJUSTMENTS-FLG KF0FW-MORE-ADJUSTMENTS-FLG ; 
  10 KF0FW-DETAIL-CHG-FLG KF0FW-DETAIL-CHG-FLG ; 
  10 KF0FW-POPUP-IND KF0FW-POPUP-IND ; 
  10 KF0FW-CONFIRM-FLAG KF0FW-CONFIRM-FLAG ; 
  10 KF0FW-SELECTION-COUNT KF0FW-SELECTION-COUNT ; 
  10 KF0FW-SELECTION-COUNT-2 KF0FW-SELECTION-COUNT-2 ; 
  10 KF0FW-MAX-PER-PAGE KF0FW-MAX-PER-PAGE ; 
  10 KF0FW-MAX-RESTART-PER-PAGE KF0FW-MAX-RESTART-PER-PAGE ; 
  10 KF0FW-MAX-SELECT KF0FW-MAX-SELECT ; 
  10 KF0FW-HIGHEST-PAGE KF0FW-HIGHEST-PAGE ; 
  10 KF0FW-CURRENT-PAGE KF0FW-CURRENT-PAGE ; 
  10 KF0FW-END-OF-JCL-TABLE KF0FW-END-OF-JCL-TABLE ; 
  10 KF0FW-SCREEN-INDEX KF0FW-SCREEN-INDEX ; 
  10 KF0FW-RESTART-INDEX KF0FW-RESTART-INDEX ; 
  10 KF0FW-RESTART-INDEX-2 KF0FW-RESTART-INDEX-2 ; 
  10 KF0FW-SELECT-INDEX KF0FW-SELECT-INDEX ; 
  10 KF0FW-SELECT-INDEX-2 KF0FW-SELECT-INDEX-2 ; 
  10 KF0FW-SEASON-INDEX KF0FW-SEASON-INDEX ; 
  10 KF0FW-SEASON-INDEX-2 KF0FW-SEASON-INDEX-2 ; 
  10 KF0FW-JCL-INDEX KF0FW-JCL-INDEX ; 
  10 * char(3) ; 
  10 KF0FW-SEASON-KEY KF0FW-SEASON-KEY ; 
    15 XSE-SESN-CD XSE-SESN-CD ; 
    15 KF0FW-YNS-SESN-YR KF0FW-YNS-SESN-YR ; 
    15 YNS-BUS-FUNC-ID YNS-BUS-FUNC-ID ; 
  10 * char(3) ; 
  10 KF0FW-CSR-AGCY-REP-FLDS KF0FW-CSR-AGCY-REP-FLDS ; 
  10 CO-MGMT-SAGCY-ID CO-MGMT-SAGCY-ID ; 
  10 CO-MGMT-SREP-ID CO-MGMT-SREP-ID ; 
  10 * char(3) ; 
  10 KF0FW-CSR-HIGH-VALUE KF0FW-CSR-HIGH-VALUE ; 
    15 KF0FW-HIGH-CU-CO-ID KF0FW-HIGH-CU-CO-ID ; 
    15 KF0FW-HIGH-CU-STOR-ID KF0FW-HIGH-CU-STOR-ID ; 
    15 KF0FW-HIGH-DEPT-ID-XREF KF0FW-HIGH-DEPT-ID-XREF ; 
    15 KF0FW-HIGH-YSB-SLS-RESP-CD KF0FW-HIGH-YSB-SLS-RESP-CD ; 
  10 * char(3) ; 
  10 KF0FW-CSR-CURR-VALUE KF0FW-CSR-CURR-VALUE ; 
    15 KF0FW-CURR-CU-CO-ID KF0FW-CURR-CU-CO-ID ; 
    15 KF0FW-CURR-CU-STOR-ID KF0FW-CURR-CU-STOR-ID ; 
    15 KF0FW-CURR-DEPT-ID-XREF KF0FW-CURR-DEPT-ID-XREF ; 
    15 KF0FW-CURR-YSB-SLS-RESP-CD KF0FW-CURR-YSB-SLS-RESP-CD ; 
  10 * char(3) ; 
  10 KF0FW-SAVE-KEY KF0FW-SAVE-KEY ; 
    15 KF0FW-SAVE-XXX-STAT KF0FW-SAVE-XXX-STAT ; 
    15 KF0FW-SAVE-CU-CO-ID KF0FW-SAVE-CU-CO-ID ; 
    15 KF0FW-SAVE-CU-STOR-ID KF0FW-SAVE-CU-STOR-ID ; 
    15 KF0FW-SAVE-XNX-DEPT-ID-XREF KF0FW-SAVE-XNX-DEPT-ID-XREF ; 
    15 KF0FW-SAVE-YSB-SLS-RESP-CD KF0FW-SAVE-YSB-SLS-RESP-CD ; 
  10 * char(3) ; 
  10 KF0FW-MESSAGE-1 KF0FW-MESSAGE-1 ; 
    15 KF0FW-MESSAGE-TEXT-1 KF0FW-MESSAGE-TEXT-1 ; 
    15 KF0FW-SESN-YR-DESC-1 KF0FW-SESN-YR-DESC-1 ; 
  10 * char(3) ; 
  10 KF0FW-MESSAGE-2 KF0FW-MESSAGE-2 ; 
    15 KF0FW-MESSAGE-TEXT-2 KF0FW-MESSAGE-TEXT-2 ; 
    15 KF0FW-SM-SAGCY-ID-2 KF0FW-SM-SAGCY-ID-2 ; 
  10 * char(3) ; 
  10 KF0FW-MESSAGE-3 KF0FW-MESSAGE-3 ; 
    15 KF0FW-MESSAGE-TEXT-3 KF0FW-MESSAGE-TEXT-3 ; 
    15 KF0FW-SM-SREP-ID-3 KF0FW-SM-SREP-ID-3 ; 
  10 * char(3) ; 
  10 KF0FW-MESSAGE-4 KF0FW-MESSAGE-4 ; 
    15 KF0FW-MESSAGE-TEXT-41 KF0FW-MESSAGE-TEXT-41 ; 
    15 KF0FW-SM-SAGCY-ID-4 KF0FW-SM-SAGCY-ID-4 ; 
    15 KF0FW-MESSAGE-TEXT-42 KF0FW-MESSAGE-TEXT-42 ; 
    15 KF0FW-SM-SREP-ID-4 KF0FW-SM-SREP-ID-4 ; 
end // end KF0FW01

//*** RECORD=KF0FW02 ****
// Current map header record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   15/01/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW02 type basicRecord
  5 KF0FW-CURR-HDR-REC KF0FW-CURR-HDR-REC ; 
    10 KF0FW-CURR-HDR-INPUT-FLDS KF0FW-CURR-HDR-INPUT-FLDS ; 
      15 SM-SAGCY-ID SM-SAGCY-ID ; 
end // end KF0FW02

//*** RECORD=KF0FW03 ****
// Previous map header record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record KF0FW03 type basicRecord
  5 KF0FW-PREV-HDR-REC KF0FW-PREV-HDR-REC ; 
    10 KF0FW-PREV-HDR-INPUT-FLDS KF0FW-PREV-HDR-INPUT-FLDS ; 
      15 SM-SAGCY-ID SM-SAGCY-ID ; 
end // end KF0FW03

//*** RECORD=KF0FW04 ****
// Current map detail record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   15/01/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW04 type basicRecord
  5 KF0FW-CURR-DTL-REC KF0FW-CURR-DTL-REC ; 
    10 KF0FW-CURR-DTL-LINE KF0FW-CURR-DTL-LINE [12] ; 
      15 KF0FW-SELECT KF0FW-SELECT ; 
      15 KF0FW-SELECTION-KEY-FLDS KF0FW-SELECTION-KEY-FLDS ; 
        20 XXX-STAT XXX-STAT ; 
        20 CU-CO-ID CU-CO-ID ; 
        20 CU-STOR-ID CU-STOR-ID ; 
        20 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
        20 YSB-SLS-RESP-CD YSB-SLS-RESP-CD ; 
      15 CU-STOR-NM CU-STOR-NM ; 
      15 CO-MGMT-SAGCY-ID CO-MGMT-SAGCY-ID ; 
      15 CO-MGMT-SREP-ID CO-MGMT-SREP-ID ; 
      15 CO-CUST-SLS-ADJAMT CO-CUST-SLS-ADJAMT ; 
      15 CO-ADJ-MGR-SLS-FL CO-ADJ-MGR-SLS-FL ; 
end // end KF0FW04

//*** RECORD=KF0FW06 ****
// Restart table containing the data used to format the
// restartable adjustments cursor when paging forwards or
// backwards.
// 
// ************************************************************
// *                  Maintenance History                     *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   15/01/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW06 type basicRecord
  5 KF0FW-TEMP-STRG-LENGTH KF0FW-TEMP-STRG-LENGTH ; 
  5 KF0FW-RESTART-REC KF0FW-RESTART-REC ; 
    10 KF0FW-RESTART-LINE KF0FW-RESTART-LINE [100] ; 
      15 XXX-STAT XXX-STAT ; 
      15 CU-CO-ID CU-CO-ID ; 
      15 CU-STOR-ID CU-STOR-ID ; 
      15 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
      15 YSB-SLS-RESP-CD YSB-SLS-RESP-CD ; 
end // end KF0FW06

//*** RECORD=KF0FW07 ****
// Parameters passed to WKF1240 program.
// 
// ************************************************************
// *                  Maintenance History                     *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   15/01/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW07 type basicRecord
  5 KF0FW-WKF1241-PARMS KF0FW-WKF1241-PARMS ; 
    10 YNS-SESN-YR-DESC YNS-SESN-YR-DESC ; 
    10 XSE-SESN-CD XSE-SESN-CD ; 
    10 YNS-SESN-YR YNS-SESN-YR ; 
    10 SM-SAGCY-ID SM-SAGCY-ID ; 
    10 SM-SREP-ID SM-SREP-ID ; 
    10 KF0FW-SM-SAGCY-NM KF0FW-SM-SAGCY-NM ; 
    10 XURDEST XURDEST ; 
    10 KF0FW-FILLER-1 KF0FW-FILLER-1 ; 
end // end KF0FW07

//*** RECORD=KF0FW08 ****
// This record contains the parameters for the batch report
// output proc TA0431.
// 
// ************************************************************
// *                 Maintenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   01/27/93  DLIDDL    Created record.
// 
// ***********************
Record KF0FW08 type basicRecord
  5 KF0FW-PRINT-PARMS KF0FW-PRINT-PARMS ; 
    10 * char(21) ; 
    10 KF0FW-NBR-COPIES KF0FW-NBR-COPIES ; 
    10 * char(58) ; 
end // end KF0FW08

//*** RECORD=KF0FW09 ****
// This record contains the working storage fields for the call
// to IO5610
// ************************************************************
// *                MAINTENANCE HISTORY                       *
// ************************************************************
// Log #     Date        Name    Description
// ---       ----        ----    -----------
// 001       09/22/93    ISCHMI  Created record.
// ***********************
Record KF0FW09 type basicRecord
  5 KF0FW-IO-PASS KF0FW-IO-PASS ; 
    10 KF0FW-IO-TASK KF0FW-IO-TASK ; 
    10 KF0FW-IO-IND1 KF0FW-IO-IND1 ; 
end // end KF0FW09

//*** RECORD=SMHREC ****
// 2/5/91  CHYDE   Chg smh* data item literal descriptions
//                 to corresponding db2 names (standard).
// 6/04/92 aivers  June database changes.  Rename smhbafl to
//                 sm-bfr-aft-ind and zzzchgtm to zzhhmmss.
//                 (also resized zzhhmmss).
// **********************
Record SMHREC type basicRecord
  10 SM4REPID SM4REPID ; 
  10 SM1AGYID SM1AGYID ; 
  10 SMHSRTSQ SMHSRTSQ ; 
  10 SMHADTYP SMHADTYP ; 
  10 SM-BFR-AFT-IND SM-BFR-AFT-IND ; 
  10 XXXTBLNM XXXTBLNM ; 
  10 XXXUSRID XXXUSRID ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZHHMMSS ZZHHMMSS ; 
  10 SMHGRPLN SMHGRPLN ; 
  10 SMHGRPTX SMHGRPTX ; 
end // end SMHREC

// confirm season change
DataItem KF0FW-CONFIRM-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-CSR-AGCY-REP-FLDS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-CSR-CURR-VALUE char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-CSR-HIGH-VALUE char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KF0FW-CURR-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_STOR_ID
DataItem KF0FW-CURR-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem KF0FW-CURR-DEPT-ID-XREF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current map detail line
DataItem KF0FW-CURR-DTL-LINE char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map detail record
DataItem KF0FW-CURR-DTL-REC char(636)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map hdr input flds
DataItem KF0FW-CURR-HDR-INPUT-FLDS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curremt map hdr record
DataItem KF0FW-CURR-HDR-REC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YSB_SLS_RESP_CD
DataItem KF0FW-CURR-YSB-SLS-RESP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested page number
DataItem KF0FW-CURRENT-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selections changed
DataItem KF0FW-DETAIL-CHG-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of online jcl
DataItem KF0FW-END-OF-JCL-TABLE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-FILLER-1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KF0FW-HIGH-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_STOR_ID
DataItem KF0FW-HIGH-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem KF0FW-HIGH-DEPT-ID-XREF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// YSB_SLS_RESP_CD
DataItem KF0FW-HIGH-YSB-SLS-RESP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// highest page number
DataItem KF0FW-HIGHEST-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unused
DataItem KF0FW-IO-IND1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io5610 calling field
DataItem KF0FW-IO-PASS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal value
DataItem KF0FW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-JCL-INDEX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines per page
DataItem KF0FW-MAX-PER-PAGE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-MAX-RESTART-PER-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max selections
DataItem KF0FW-MAX-SELECT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-MESSAGE-1 char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-2 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-3 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-4 char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-TEXT-1 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-TEXT-2 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-TEXT-3 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-TEXT-41 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-MESSAGE-TEXT-42 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// there are more adjustments
DataItem KF0FW-MORE-ADJUSTMENTS-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of copies requested
DataItem KF0FW-NBR-COPIES num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// popup from kf0e
DataItem KF0FW-POPUP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map hdr input flds
DataItem KF0FW-PREV-HDR-INPUT-FLDS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map hdr record
DataItem KF0FW-PREV-HDR-REC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parms for batch print output
DataItem KF0FW-PRINT-PARMS char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// restart index
DataItem KF0FW-RESTART-INDEX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-RESTART-INDEX-2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map detail line
DataItem KF0FW-RESTART-LINE char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map detail record
DataItem KF0FW-RESTART-REC char(1100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KF0FW-SAVE-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_STOR_ID
DataItem KF0FW-SAVE-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SAVE-KEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem KF0FW-SAVE-XNX-DEPT-ID-XREF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XXX_STAT
DataItem KF0FW-SAVE-XXX-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YSB_SLS_RESP_CD
DataItem KF0FW-SAVE-YSB-SLS-RESP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem KF0FW-SCREEN-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SEASON-INDEX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SEASON-INDEX-2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SEASON-KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SELECT-INDEX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SELECT-INDEX-2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of selections
DataItem KF0FW-SELECTION-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of selections
DataItem KF0FW-SELECTION-COUNT-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SELECTION-KEY-FLDS char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SESN-YR-DESC-1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SM-SAGCY-ID-2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SM-SAGCY-ID-4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SM-SAGCY-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KF0FW-SM-SREP-ID-3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KF0FW-SM-SREP-ID-4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map detail record
DataItem KF0FW-TEMP-STRG-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage rec length
DataItem KF0FW-TSQ-REC-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map detail record
DataItem KF0FW-WKF1241-PARMS char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YNS_SESN_YR
DataItem KF0FW-YNS-SESN-YR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SM_AUDIT_TYP_CD
DataItem SMHADTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SMHGRPLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SM_AUDIT_FILLER
DataItem SMHGRPTX char(644)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SM_AUDIT_SRT_SEQ
DataItem SMHSRTSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

